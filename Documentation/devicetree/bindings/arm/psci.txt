* Power State Coordination Interface (PSCI)

Firmware implementing the PSCI functions described in ARM document number
ARM DEN 0022B ("Power State Coordination Interface System Software on ARM
processors") can be used by Linux to initiate various CPU-centric power
operations.

Issue B of the specification describes functions for CPU suspend, hotplug,
migration of secure software, and system level reset and powerdown.

Functions are invoked by trapping to the privilege level of the PSCI
firmware (specified as part of the binding below) and passing arguments
as defined in ARM document "SMC Calling Convention" (ARM DEN 0028) in a manner
similar to that specified by AAPCS:

	 r0		=> 32-bit Function ID / return value
	{r1 - r3}	=> Parameters

Note that the immediate field of the trapping instruction must be set
to #0.


Main node required properties:

 - compatible    : Must contain "arm,psci-0.2" or "arm,psci"

 - method        : The method defines the calling convention for the PSCI
                   firmware. Permitted values are:

                   "smc" : SMC #0, with the register assignments specified
		           in this binding.

                   "hvc" : HVC #0, with the register assignments specified
		           in this binding.

 - psci_version  : Function ID for PSCI_VERSION operation. Required for
                   "arm,psci-0.2" compatible version or later.

Main node optional properties:

 - cpu_suspend[-<32|64]   : Function ID for CPU_SUSPEND operation

 - cpu_off                : Function ID for CPU_OFF operation

 - cpu_on[-<32|64]        : Function ID for CPU_ON operation

 - affinity_info[-<32|64] : Function ID for AFFINITY_INFO operation

 - migrate[-<32|64]       : Function ID for MIGRATE operation

 - migrate_info_type      : Function ID for MIGRATE_INFO_TYPE operation

 - migrate_info_up_cpu[-<32|64] : Function ID for MIGRATE_INFO_UP_CPU operation

 - system_reset           : Function ID for SYSTEM_RESET operation

 - system_off             : Function ID for SYSTEM_OFF operation

Some functions have have separate IDs for 32-bit and 64-bit calling
conventions. These separate function IDs are described with function names with
"-64" and "-32" suffixes (e.g. cpu_on-64). Where a function name does not have
a suffix, the ID may be used with either calling convention depending on the
CPU state -- AArch32 callers should use the 32-bit calling convention, and
AArch64 callers should use the 64-bit calling convention.

Example:

	psci {
		compatible	= "arm,psci-0.2";
		method		= "smc";
		psci_version	= <0x84000000>;
		cpu_suspend-32	= <0x84000001>;
		cpu_suspend-64	= <0xc4000001>;
		cpu_off		= <0x84000002>;
		cpu_on-32	= <0x84000003>;
		cpu_on-64	= <0xc4000003>;
		affinity_info-32 = <0x84000004>;
		affinity_info-64 = <0xc4000004>;
		migrate-32	= <0x84000005>;
		migrate-64	= <0xc4000005>;
		migrate_info_type = <0x84000006>;
		migrate_info_up_cpu-32 = <0x84000007>;
		migrate_info_up_cpu-64 = <0xc4000007>;
		system_off	= <0x84000008>;
		system_reset	= <0x84000009>;
	};

