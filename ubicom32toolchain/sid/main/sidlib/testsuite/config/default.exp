# default.exp - Utilities for the SID sidlib testsuite.  -*- Tcl -*-

# Copyright (C) 1999, 2000, 2001 Red Hat.
# This file is part of SID and is licensed under the GPL.
# See the file COPYING.SID for conditions for redistribution.

############################################################################
# Utility routines for sid test cases

source "../../../config/info.tcl"

# generate a printworthy subset of argument
proc prettyprint { cmd } {
    regsub -all {[^ -~]} $cmd {.} cmdpretty
    return [list $cmdpretty]
}


proc sid_cmd { cmd } {
    global spawn_id
    global expect_out
    global test

    if [catch { exp_pid }] then {
	unresolved "$test - spawned sid process already gone"
	return
    }

    # wait for prompt
    global timeout
    set last_timeout $timeout
    set timeout 3
    set ok 1
    expect {
	timeout { unresolved "$test - timeout before [prettyprint $cmd]"; set ok 0 }
	eof { unresolved "$test - eof before [prettyprint $cmd]"; set ok 0 }
	"command>"
    }
    set timeout $last_timeout
    if {! $ok} then { return "" }

    # encode string
    binary scan $cmd H* encoded

    # bump up buffer size, big time
    set desired_match_max [expr 10 * [string length $encoded]]
    if {[match_max] < $desired_match_max} then { match_max $desired_match_max }

    set iterations [expr [string length $encoded] / 64]
    for {set i 0} {$i < $iterations} {incr i} {
	set first [expr $i * 64]
	set last [expr $first + 63]
	send "[string range $encoded $first $last]+\n"
    }
    set first [expr $i * 64]
    send "[string range $encoded $first end]\n"

    expect {
	timeout { fail "$test - timeout after [prettyprint $cmd]" ; return "" }
	eof { fail "$test - eof after [prettyprint $cmd]"; return "" }
	-re "(ERROR:\[^\n\]*)" {
	    fail "$test - [prettyprint $expect_out(1,string)] after [prettyprint $cmd]"
	    return ""
	}
	-re "result>>(\[0-9a-f\]*)<<result" {
	    set result $expect_out(1,string)
	}
	-re "split>>(\[0-9a-f\]*)<<split" {
	    set result $expect_out(1,string)
	    while {1} {
		expect {
		    timeout { fail "$test - timeout3" ; return "" }
		    eof { fail "$test - eof3" ; return "" }
		    -re "split>>(\[0-9a-f\]*)<<split" {
			append result $expect_out(1,string)
		    }
		    -re "split-end" { break }
		}
	    }
	}
    }
    # undo encoding in tester.tcl
    set decoded [binary format H* $result]
    verbose "result $decoded" 3
    return $decoded
}


# call a command; ignore result (but assert that it's not an ERROR.)
proc sid_assert_success {cmd} {
    global test
    set result [sid_cmd $cmd]
    if [string match "*ERROR*" $result] then { fail $test } else { pass $test }
}

# call a command; assert match on return value
proc sid_assert_matches {cmd pattern} {
    global test
    set result [sid_cmd $cmd]
    if [string match $pattern $result] then { pass $test } else { fail $test }
}

proc sid_assert_equals {cmd number} {
    global test
    set result [sid_cmd $cmd]
    if {$result == $number} then { pass $test } else { fail $test }
}

# call a command; assert match on list result
proc sid_assert_includes_all {cmd patterns} {
    global test
    set result [sid_cmd $cmd]
    foreach pat $patterns {
	if {[string first $pat $result] == -1} then {fail $test ; return }
    }
    pass $test
}

# call a command; assert match on list result
proc sid_assert_includes_none {cmd patterns} {
    global test
    set result [sid_cmd $cmd]
    foreach pat $patterns {
	if {[string first $pat $result] != -1} then {fail $test ; return }
    }
    pass $test
}

# Decide where to look based on TOOL_OPTIONS variable (the --tool_opts=VALUE
# option from $RUNTESTFLAGS).  If that includes the substring "install", use 
# the install directory tree ($prefix etc.) to find the given file.  If the
# variable is unset or set not to "install", use the build & source directories 
# instead.
proc sid_find_file {args} {
    global TOOL_OPTIONS
    global prefix
    global srcdir
    if {[string match "*install*" $TOOL_OPTIONS]} then {
	set bases [list "$prefix"]
    } else {
	# try to get to the build and source directory
	set bases [list "../.." "$srcdir/../.."]
    }
    set files {} 
    foreach base $bases {
        foreach file $args {
	    verbose "looking for $file under $base" 2
	    if {[llength $files] > 0} then { break }
	    set files [concat $files [glob -nocomplain -- $base/$file $base/*/$file $base/*/*/$file $base/*/*/*/$file]]
	}
    }
    verbose -log "found $files" 2
    switch [llength $files] {
	0 { perror "No matches for $args under $bases" }
	1 { return $files }
	default { return [lindex $files 0] }
    }
}


proc sid_find_sid_bsp { toolchain_prefix } {
    # ignore toolchain_prefix.
    return [sid_find_file "configrun-sid"]
}


############################################################################
# Routines automatically called by runtest

# sidlib_version -- print and return version number
proc sidlib_version {} {
    puts "version?"
    set version 0.1
    clone_output "sidlib test $version\n"
}

# sidlib_exit -- quit and cleanup
proc sidlib_exit {} {
    # Do nothing.
}

# sidlib_start -- start the test bucket
proc sidlib_start {} {
    global TOOL_OPTIONS host_triplet crappy_tcl
    if {[info exists TOOL_OPTIONS]} then { } else { set TOOL_OPTIONS "build" }

    # tcl on some platforms can't handle passing large strings between
    # the expect and the sid processes without corruption.  Set crappy_tcl
    # for these
    switch -glob $host_triplet {
	*-*-solaris* { set crappy_tcl 1 }
	default { set crappy_tcl 0 }
    }
}


############################################################################
# Do these things during test suite startup.

sidlib_start
