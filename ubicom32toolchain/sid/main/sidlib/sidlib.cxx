/* sidlib.cxx - symbol resolution table for libsid applications. */
/* This table must be updated whenever a new component is added */
/* Generated by ltmain.sh - GNU libtool 1.3c (1.604 1999/08/24 15:50:47) */

#ifdef __cplusplus
extern "C" {
#endif

/* Prevent the only kind of declaration conflicts we can make. */
#define lt_preloaded_symbols some_other_symbol

/* External symbol declarations for the compiler. */
extern char audio_component_library;
extern char cache_component_library;
extern char cgen_component_library;
extern char config_component_library;
extern char console_component_library;
extern char gdb_component_library;
extern char gloss_component_library;
extern char glue_component_library;
extern char hd44780u_component_library;
extern char ide_component_library;
extern char interrupt_component_library;
extern char lcd_char_display_component_library;
extern char loader_component_library;
extern char VerilogLoader_component_library;
extern char mbox_component_library;
extern char mapper_component_library;
extern char mem_component_library;
extern char mmu_component_library;
extern char jupiterMMU_component_library;
extern char parport_component_library;
extern char prof_component_library;
extern char rtc_component_library;
extern char sched_component_library;
extern char t6963c_component_library;
extern char tcl_bridge_library;
extern char timer_component_library;
extern char uart_component_library;

#undef lt_preloaded_symbols

#if defined (__STDC__) && __STDC__
# define lt_ptr_t void *
#else
# define lt_ptr_t char *
# define const
#endif

/* The mapping between symbol names and symbols. */
struct mysymbols{
  const char *name;
  lt_ptr_t address;
};
extern struct mysymbols lt_preloaded_symbols[];

struct mysymbols lt_preloaded_symbols[] =
{
  {"libsid.a", (lt_ptr_t) 0},
  {"audio_component_library", (lt_ptr_t) &audio_component_library},
  {"cache_component_library", (lt_ptr_t) &cache_component_library},
  {"config_component_library", (lt_ptr_t) &config_component_library},
  {"cgen_component_library", (lt_ptr_t) &cgen_component_library},
  {"console_component_library", (lt_ptr_t) &console_component_library},
  {"gdb_component_library", (lt_ptr_t) &gdb_component_library},
  {"gloss_component_library", (lt_ptr_t) &gloss_component_library},
  {"glue_component_library", (lt_ptr_t) &glue_component_library},
  {"ide_component_library", (lt_ptr_t) &ide_component_library},
  {"interrupt_component_library", (lt_ptr_t) &interrupt_component_library},
  {"hd44780u_component_library", (lt_ptr_t) &hd44780u_component_library},
  {"lcd_char_display_component_library", (lt_ptr_t) &lcd_char_display_component_library},
  {"t6963c_component_library", (lt_ptr_t) &t6963c_component_library},
  {"loader_component_library", (lt_ptr_t) &loader_component_library},
  {"VerilogLoader_component_library", (lt_ptr_t) &VerilogLoader_component_library},
  {"mbox_component_library", (lt_ptr_t) &mbox_component_library},
  {"mapper_component_library", (lt_ptr_t) &mapper_component_library},
  {"mem_component_library", (lt_ptr_t) &mem_component_library},
  {"mmu_component_library", (lt_ptr_t) &mmu_component_library},
  {"jupiterMMU_component_library", (lt_ptr_t) &jupiterMMU_component_library},
  {"parport_component_library", (lt_ptr_t) &parport_component_library},
  {"prof_component_library", (lt_ptr_t) &prof_component_library},
  {"rtc_component_library", (lt_ptr_t) &rtc_component_library},
  {"sched_component_library", (lt_ptr_t) &sched_component_library},
  {"tcl_bridge_library", (lt_ptr_t) &tcl_bridge_library},
  {"timer_component_library", (lt_ptr_t) &timer_component_library},
  {"uart_component_library", (lt_ptr_t) &uart_component_library},
  {0, (lt_ptr_t) 0}
};

/* This works around a problem in FreeBSD linker */
#ifdef FREEBSD_WORKAROUND
static const void *lt_preloaded_setup() {
  return lt_preloaded_symbols;
}
#endif

#ifdef __cplusplus
}
#endif
