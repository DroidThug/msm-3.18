m4trace:config/libstdc++.m4:11: -1- AC_DEFUN([CY_LIBSTDCXX_CHECK], [
if test x$GXX != xyes 
then
  have_libstdcxx_shared=no
  have_libstdcxx_static=no
  AC_MSG_WARN(Cannot test for libstdc++ without g++)
else
  AC_MSG_CHECKING(for libstdc++ {static/shared})

  stlibname=libstdc++.a
  case ${host} in
    *-*-cygwin*) shlibname=libstdc++.dll ;;
    *)           shlibname=libstdc++.so ;;
  esac

  gxx_stlibname=`eval $CXX --print-file-name=$stlibname`
  gxx_shlibname=`eval $CXX --print-file-name=$shlibname`

  gxx_stlibdir=`dirname $gxx_stlibname`
  gxx_shlibdir=`dirname $gxx_shlibname`

  if test "x$gxx_stlibdir" != "x"
  then
    have_libstdcxx_static=yes
  else
    have_libstdcxx_static=no
  fi

  # Expect shared libraries to live right beside their static counterparts.
  # Some installations put libstdc++.so into $prefix/lib/gcc-lib/*, and make
  # it a symlink to $prefix/lib.

  # The heuristics are meant to detect and prevent the case where the host may
  # have *some other* shared libstdc++.so installed, say in /usr/lib, even though
  # the compiler only came with a libstdc++.a in some other directory.
  if test "x$gxx_shlibdir" != "x" -a "x$gxx_shlibdir" != "x." -a "x$gxx_stlibdir" = "x$gxx_shlibdir"
  then
    have_libstdcxx_shared=yes
  else
    have_libstdcxx_shared=no
  fi

  AC_MSG_RESULT(${have_libstdcxx_static}/${have_libstdcxx_shared})
fi
])
m4trace:config/sidtargets.m4:10: -1- AC_DEFUN([CY_SIDTARGET_CHECK], [


dnl Assume all targets if $host==$target or $target==NONE
sid_host=`$ac_config_sub $host`
sid_target=`$ac_config_sub $target`

if test "$sid_host" = "$sid_target" -o "$target" = "NONE"
then
    AC_MSG_WARN(Assuming --enable-targets=all)
    all_targets=""
    sidtarget_default=1
else 
    all_targets="$target"
    sidtarget_default=0
fi


AC_ARG_ENABLE(targets,
[  --enable-targets=LIST   support given additional targets, or all],
[
  case "${enable_targets}" in
    all)  sidtarget_default=1 ;;
    no)   sidtarget_default=0 ;;
    *)    all_targets="${all_targets} `echo ${enable_targets} | sed -e 's-,- -g'`" ;;
  esac
])

dnl Enumerate known chip families
sidtarget_arm=$sidtarget_default
sidtarget_x86=$sidtarget_default
sidtarget_mips=$sidtarget_default
sidtarget_m32r=$sidtarget_default
sidtarget_m68k=$sidtarget_default
sidtarget_mep=$sidtarget_default
sidtarget_mt=$sidtarget_default
sidtarget_ppc=$sidtarget_default
sidtarget_sh=$sidtarget_default
sidtarget_sh64=$sidtarget_default
sidtarget_xstormy16=$sidtarget_default

dnl Iterate over all listed targets
for targ in $all_targets
do
   case "$targ" in
      arm*)   sidtarget_arm=1 ;;
      thumb*) sidtarget_arm=1 ;;
      i386*) sidtarget_x86=1 ;;
      mips*)  sidtarget_mips=1 ;;
      m32r*)  sidtarget_m32r=1 ;;
      m68k*)  sidtarget_m68k=1 ;;
      mep*)   sidtarget_mep=1 ;;
      mt*)    sidtarget_mt=1 ;;
      powerpc*) sidtarget_ppc=1 ;;
      ppc*)   sidtarget_ppc=1 ;;
      sh64*) sidtarget_sh64=1 ;;
      sh*)   sidtarget_sh=1 ;;
      xstormy16*) sidtarget_xstormy16=1 ;;
      *)      AC_MSG_WARN("Unknown target $targ") ;;
   esac
done

dnl Ensure at least one of these variables is non-zero.
case 1 in
  ${sidtarget_arm}) ;;
  ${sidtarget_x86}) ;;
  ${sidtarget_mips}) ;;
  ${sidtarget_m32r}) ;;
  ${sidtarget_m68k}) ;;
  ${sidtarget_mep}) ;;
  ${sidtarget_mt}) ;;
  ${sidtarget_ppc}) ;;
  ${sidtarget_sh}) ;;
  ${sidtarget_sh64}) ;;
  ${sidtarget_xstormy16}) ;;
  *) AC_MSG_WARN([No selected sid targets: use --enable-targets or --target])
	;;
esac

dnl Report results SIDTARGET_family
dnl nb: Use "x$sidtarget_family" in the tested expression to prevent
dnl     syntax errors in configure when sidtarget_family is left unset.

AC_MSG_CHECKING(ARM family support)
AC_SUBST(sidtarget_arm)
AM_CONDITIONAL(SIDTARGET_ARM,[test "x$sidtarget_arm" = x1])
AC_MSG_RESULT($sidtarget_arm)

AC_MSG_CHECKING(X86 family support)
AC_SUBST(sidtarget_x86)
AM_CONDITIONAL(SIDTARGET_X86,[test "x$sidtarget_x86" = x1])
AC_MSG_RESULT($sidtarget_x86)

AC_MSG_CHECKING(MIPS family support)
AC_SUBST(sidtarget_mips)
AM_CONDITIONAL(SIDTARGET_MIPS,[test "x$sidtarget_mips" = x1])
AC_MSG_RESULT($sidtarget_mips)

AC_MSG_CHECKING(M32R family support)
AC_SUBST(sidtarget_m32r)
AM_CONDITIONAL(SIDTARGET_M32R,[test "x$sidtarget_m32r" = x1])
AC_MSG_RESULT($sidtarget_m32r)

AC_MSG_CHECKING(M68K family support)
AC_SUBST(sidtarget_m68k)
AM_CONDITIONAL(SIDTARGET_M68K,[test "x$sidtarget_m68k" = x1])
AC_MSG_RESULT($sidtarget_m68k)

AC_MSG_CHECKING(Toshiba MeP family support)
AC_SUBST(sidtarget_mep)
AM_CONDITIONAL(SIDTARGET_MEP,[test "x$sidtarget_mep" = x1])
AC_MSG_RESULT($sidtarget_mep)

AC_MSG_CHECKING(MT family support)
AC_SUBST(sidtarget_mt)
AM_CONDITIONAL(SIDTARGET_MT,[test "x$sidtarget_mt" = x1])
AC_MSG_RESULT($sidtarget_mt)

AC_MSG_CHECKING(PPC family support)
AC_SUBST(sidtarget_ppc)
AM_CONDITIONAL(SIDTARGET_PPC,[test "x$sidtarget_ppc" = x1])
AC_MSG_RESULT($sidtarget_ppc)

AC_MSG_CHECKING(SH family support)
AC_SUBST(sidtarget_sh)
AM_CONDITIONAL(SIDTARGET_SH,[test "x$sidtarget_sh" = x1])
AC_MSG_RESULT($sidtarget_sh)

AC_MSG_CHECKING(SH64 family support)
AC_SUBST(sidtarget_sh64)
AM_CONDITIONAL(SIDTARGET_SH64,[test "x$sidtarget_sh64" = x1])
AC_MSG_RESULT($sidtarget_sh64)

AC_MSG_CHECKING(Sanyo Xstormy16 family support)
AC_SUBST(sidtarget_xstormy16)
AM_CONDITIONAL(SIDTARGET_XSTORMY16,[test "x$sidtarget_xstormy16" = x1])
AC_MSG_RESULT($sidtarget_xstormy16)

])
m4trace:configure.in:2: -1- m4_pattern_forbid([^_?A[CHUM]_])
m4trace:configure.in:2: -1- m4_pattern_forbid([_AC_])
m4trace:configure.in:2: -1- m4_pattern_forbid([^LIBOBJS$], [do not use LIBOBJS directly, use AC_LIBOBJ (see section `AC_LIBOBJ vs LIBOBJS'])
m4trace:configure.in:2: -1- m4_pattern_allow([^AS_FLAGS$])
m4trace:configure.in:2: -1- m4_pattern_forbid([^_?m4_])
m4trace:configure.in:2: -1- m4_pattern_forbid([^dnl$])
m4trace:configure.in:2: -1- m4_pattern_forbid([^_?AS_])
m4trace:configure.in:2: -1- m4_pattern_allow([^SHELL$])
m4trace:configure.in:2: -1- m4_pattern_allow([^PATH_SEPARATOR$])
m4trace:configure.in:2: -1- m4_pattern_allow([^PACKAGE_NAME$])
m4trace:configure.in:2: -1- m4_pattern_allow([^PACKAGE_TARNAME$])
m4trace:configure.in:2: -1- m4_pattern_allow([^PACKAGE_VERSION$])
m4trace:configure.in:2: -1- m4_pattern_allow([^PACKAGE_STRING$])
m4trace:configure.in:2: -1- m4_pattern_allow([^PACKAGE_BUGREPORT$])
m4trace:configure.in:2: -1- m4_pattern_allow([^exec_prefix$])
m4trace:configure.in:2: -1- m4_pattern_allow([^prefix$])
m4trace:configure.in:2: -1- m4_pattern_allow([^program_transform_name$])
m4trace:configure.in:2: -1- m4_pattern_allow([^bindir$])
m4trace:configure.in:2: -1- m4_pattern_allow([^sbindir$])
m4trace:configure.in:2: -1- m4_pattern_allow([^libexecdir$])
m4trace:configure.in:2: -1- m4_pattern_allow([^datarootdir$])
m4trace:configure.in:2: -1- m4_pattern_allow([^datadir$])
m4trace:configure.in:2: -1- m4_pattern_allow([^sysconfdir$])
m4trace:configure.in:2: -1- m4_pattern_allow([^sharedstatedir$])
m4trace:configure.in:2: -1- m4_pattern_allow([^localstatedir$])
m4trace:configure.in:2: -1- m4_pattern_allow([^includedir$])
m4trace:configure.in:2: -1- m4_pattern_allow([^oldincludedir$])
m4trace:configure.in:2: -1- m4_pattern_allow([^docdir$])
m4trace:configure.in:2: -1- m4_pattern_allow([^infodir$])
m4trace:configure.in:2: -1- m4_pattern_allow([^htmldir$])
m4trace:configure.in:2: -1- m4_pattern_allow([^dvidir$])
m4trace:configure.in:2: -1- m4_pattern_allow([^pdfdir$])
m4trace:configure.in:2: -1- m4_pattern_allow([^psdir$])
m4trace:configure.in:2: -1- m4_pattern_allow([^libdir$])
m4trace:configure.in:2: -1- m4_pattern_allow([^localedir$])
m4trace:configure.in:2: -1- m4_pattern_allow([^mandir$])
m4trace:configure.in:2: -1- m4_pattern_allow([^PACKAGE_NAME$])
m4trace:configure.in:2: -1- m4_pattern_allow([^PACKAGE_TARNAME$])
m4trace:configure.in:2: -1- m4_pattern_allow([^PACKAGE_VERSION$])
m4trace:configure.in:2: -1- m4_pattern_allow([^PACKAGE_STRING$])
m4trace:configure.in:2: -1- m4_pattern_allow([^PACKAGE_BUGREPORT$])
m4trace:configure.in:2: -1- m4_pattern_allow([^DEFS$])
m4trace:configure.in:2: -1- m4_pattern_allow([^ECHO_C$])
m4trace:configure.in:2: -1- m4_pattern_allow([^ECHO_N$])
m4trace:configure.in:2: -1- m4_pattern_allow([^ECHO_T$])
m4trace:configure.in:2: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.in:2: -1- m4_pattern_allow([^build_alias$])
m4trace:configure.in:2: -1- m4_pattern_allow([^host_alias$])
m4trace:configure.in:2: -1- m4_pattern_allow([^target_alias$])
m4trace:configure.in:6: -1- m4_pattern_allow([^CC$])
m4trace:configure.in:6: -1- m4_pattern_allow([^CFLAGS$])
m4trace:configure.in:6: -1- m4_pattern_allow([^LDFLAGS$])
m4trace:configure.in:6: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.in:6: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.in:6: -1- m4_pattern_allow([^CC$])
m4trace:configure.in:6: -1- m4_pattern_allow([^CC$])
m4trace:configure.in:6: -1- m4_pattern_allow([^CC$])
m4trace:configure.in:6: -1- m4_pattern_allow([^CC$])
m4trace:configure.in:6: -1- m4_pattern_allow([^ac_ct_CC$])
m4trace:configure.in:6: -1- m4_pattern_allow([^EXEEXT$])
m4trace:configure.in:6: -1- m4_pattern_allow([^OBJEXT$])
m4trace:configure.in:13: -1- m4_pattern_allow([^CXX$])
m4trace:configure.in:13: -1- m4_pattern_allow([^CXXFLAGS$])
m4trace:configure.in:13: -1- m4_pattern_allow([^LDFLAGS$])
m4trace:configure.in:13: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.in:13: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.in:13: -1- m4_pattern_allow([^CXX$])
m4trace:configure.in:13: -1- m4_pattern_allow([^ac_ct_CXX$])
m4trace:configure.in:14: -1- m4_pattern_allow([^CXXCPP$])
m4trace:configure.in:14: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.in:14: -1- m4_pattern_allow([^CXXCPP$])
m4trace:configure.in:15: -1- m4_pattern_allow([^SET_MAKE$])
m4trace:configure.in:16: -1- _m4_warn([obsolete], [The macro `AC_LANG_CPLUSPLUS' is obsolete.
You should run autoupdate.], [/usr/src/autoconf/26/autoconf2.5-2.61-1/src/autoconf-2.61/lib/autoconf/c.m4:105: AC_LANG_CPLUSPLUS is expanded from...
configure.in:16: the top level])
m4trace:configure.in:19: -1- CY_SIDTARGET_CHECK
m4trace:configure.in:19: -1- m4_pattern_allow([^sidtarget_arm$])
m4trace:configure.in:19: -1- m4_pattern_allow([^sidtarget_x86$])
m4trace:configure.in:19: -1- m4_pattern_allow([^sidtarget_mips$])
m4trace:configure.in:19: -1- m4_pattern_allow([^sidtarget_m32r$])
m4trace:configure.in:19: -1- m4_pattern_allow([^sidtarget_m68k$])
m4trace:configure.in:19: -1- m4_pattern_allow([^sidtarget_mep$])
m4trace:configure.in:19: -1- m4_pattern_allow([^sidtarget_mt$])
m4trace:configure.in:19: -1- m4_pattern_allow([^sidtarget_ppc$])
m4trace:configure.in:19: -1- m4_pattern_allow([^sidtarget_sh$])
m4trace:configure.in:19: -1- m4_pattern_allow([^sidtarget_sh64$])
m4trace:configure.in:19: -1- m4_pattern_allow([^sidtarget_xstormy16$])
m4trace:configure.in:22: -1- CY_LIBSTDCXX_CHECK
m4trace:configure.in:40: -1- m4_pattern_allow([^enable_shared$])
m4trace:configure.in:41: -1- m4_pattern_allow([^target$])
m4trace:configure.in:47: -1- m4_pattern_allow([^subdirs$])
m4trace:configure.in:48: -1- _m4_warn([obsolete], [AC_OUTPUT should be used without arguments.
You should run autoupdate.], [])
m4trace:configure.in:48: -1- m4_pattern_allow([^LIB@&t@OBJS$])
m4trace:configure.in:48: -1- m4_pattern_allow([^LTLIBOBJS$])
