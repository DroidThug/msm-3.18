--- openssl-0.9.8p-orig/crypto/engine/eng_cryptodev.c	2011-03-12 00:25:58.477369928 +0200
+++ openssl-0.9.8p/crypto/engine/eng_cryptodev.c	2011-03-14 12:57:31.132369997 +0200
@@ -74,9 +74,9 @@
 	int d_fd;
 
 #ifdef USE_CRYPTODEV_DIGESTS
-	char dummy_mac_key[20];
+	char dummy_mac_key[64];
 
-	unsigned char digest_res[20];
+	unsigned char digest_res[64];
 	char *mac_data;
 	int mac_len;
 
@@ -153,7 +153,7 @@
 	{ 0,				NID_undef,		0,	 0, },
 };
 
-#if 0
+#ifdef USE_CRYPTODEV_DIGESTS
 static struct {
 	int	id;
 	int	nid;
@@ -166,6 +166,10 @@
 	{ CRYPTO_SHA1_KPDK,		NID_undef,		0},
 	{ CRYPTO_MD5,			NID_md5,		16},
 	{ CRYPTO_SHA1,			NID_sha1,		20},
+//	{ CRYPTO_SHA2_224,		NID_sha224,		20},
+	{ CRYPTO_SHA2_256,		NID_sha256,		20},
+	{ CRYPTO_SHA2_384,		NID_sha384,		20},
+	{ CRYPTO_SHA2_512,		NID_sha512,		20},
 	{ 0,				NID_undef,		0},
 };
 #endif
@@ -266,7 +270,7 @@
 	return (count);
 }
 
-#if 0  /* unused */
+#ifdef USE_CRYPTODEV_DIGESTS
 /*
  * Find out what digests /dev/crypto will let us have a session for.
  * XXX note, that some of these openssl doesn't deal with yet!
@@ -851,6 +855,68 @@
 	sizeof(struct dev_crypto_state),
 };
 
+#if 0
+const EVP_MD cryptodev_sha224 = {
+	NID_sha224,
+	NID_undef,
+	SHA224_DIGEST_LENGTH,
+	EVP_MD_FLAG_ONESHOT,
+	cryptodev_digest_init,
+	cryptodev_digest_update,
+	cryptodev_digest_final,
+	cryptodev_digest_copy,
+	cryptodev_digest_cleanup,
+	EVP_PKEY_NULL_method,
+	SHA256_CBLOCK,
+	sizeof(struct dev_crypto_state),
+};
+#endif
+
+const EVP_MD cryptodev_sha256 = {
+	NID_sha256,
+	NID_undef,
+	SHA256_DIGEST_LENGTH,
+	EVP_MD_FLAG_ONESHOT,
+	cryptodev_digest_init,
+	cryptodev_digest_update,
+	cryptodev_digest_final,
+	cryptodev_digest_copy,
+	cryptodev_digest_cleanup,
+	EVP_PKEY_NULL_method,
+	SHA256_CBLOCK,
+	sizeof(struct dev_crypto_state),
+};
+
+const EVP_MD cryptodev_sha384 = {
+	NID_sha384,
+	NID_undef,
+	SHA384_DIGEST_LENGTH,
+	EVP_MD_FLAG_ONESHOT,
+	cryptodev_digest_init,
+	cryptodev_digest_update,
+	cryptodev_digest_final,
+	cryptodev_digest_copy,
+	cryptodev_digest_cleanup,
+	EVP_PKEY_NULL_method,
+	SHA512_CBLOCK,
+	sizeof(struct dev_crypto_state),
+};
+
+const EVP_MD cryptodev_sha512 = {
+	NID_sha512,
+	NID_undef,
+	SHA512_DIGEST_LENGTH,
+	EVP_MD_FLAG_ONESHOT,
+	cryptodev_digest_init,
+	cryptodev_digest_update,
+	cryptodev_digest_final,
+	cryptodev_digest_copy,
+	cryptodev_digest_cleanup,
+	EVP_PKEY_NULL_method,
+	SHA512_CBLOCK,
+	sizeof(struct dev_crypto_state),
+};
+
 const EVP_MD cryptodev_md5 = {
 	NID_md5,
 	NID_undef, 
@@ -884,6 +950,20 @@
 	case NID_sha1:
 		*digest = &cryptodev_sha1;
  		break;
+#if 0
+	case NID_sha224:
+		*digest = &cryptodev_sha224;
+		break;
+#endif
+	case NID_sha256:
+		*digest = &cryptodev_sha256;
+		break;
+	case NID_sha384:
+		*digest = &cryptodev_sha384;
+		break;
+	case NID_sha512:
+		*digest = &cryptodev_sha512;
+		break;
 	default:
 #endif /* USE_CRYPTODEV_DIGESTS */
 		*digest = NULL;
