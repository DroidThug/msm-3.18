From ed019050667c840208190b31c4a5b81e3b259369 Mon Sep 17 00:00:00 2001
From: lnxbuild <lnxbuild@localhost>
Date: Tue, 12 Nov 2013 16:55:03 +0800
Subject: [PATCH 06/15] pre-CS: add camera s5k4h5_liteon_12p1ba855d driver
 support

Change-Id: Idb9bc866c8c39707f1da83ea1ed3f22535ac3cc0
---
 arch/arm/boot/dts/msm8610-regulator.dtsi           |    2 +-
 arch/arm/boot/dts/msm8610-v1-qrd-skuac.dts         |    1 +
 arch/arm/boot/dts/msm8610-v2-qrd-skuac.dts         |    3 +-
 .../boot/dts/msm861x-qrd-camera-sensor-skuac.dtsi  |  143 ++++++++++++++++
 arch/arm/configs/msm8610_defconfig                 |    1 +
 arch/arm/mach-msm/clock-8610.c                     |    2 +
 drivers/media/platform/msm/camera_v2/Kconfig       |    8 +
 .../media/platform/msm/camera_v2/sensor/Makefile   |    1 +
 .../camera_v2/sensor/s5k4h5_liteon_12p1ba855d.c    |  176 ++++++++++++++++++++
 9 files changed, 334 insertions(+), 3 deletions(-)
 create mode 100644 arch/arm/boot/dts/msm861x-qrd-camera-sensor-skuac.dtsi
 create mode 100644 drivers/media/platform/msm/camera_v2/sensor/s5k4h5_liteon_12p1ba855d.c

diff --git a/arch/arm/boot/dts/msm8610-regulator.dtsi b/arch/arm/boot/dts/msm8610-regulator.dtsi
index f97d991..423538c 100644
--- a/arch/arm/boot/dts/msm8610-regulator.dtsi
+++ b/arch/arm/boot/dts/msm8610-regulator.dtsi
@@ -234,7 +234,7 @@
 	rpm-regulator-ldoa7 {
 		status = "okay";
 		pm8110_l7: regulator-l7 {
-			regulator-min-microvolt = <2050000>;
+			regulator-min-microvolt = <1800000>;
 			regulator-max-microvolt = <2050000>;
 			qcom,init-voltage = <2050000>;
 			status = "okay";
diff --git a/arch/arm/boot/dts/msm8610-v1-qrd-skuac.dts b/arch/arm/boot/dts/msm8610-v1-qrd-skuac.dts
index f03e19e..170f53e 100644
--- a/arch/arm/boot/dts/msm8610-v1-qrd-skuac.dts
+++ b/arch/arm/boot/dts/msm8610-v1-qrd-skuac.dts
@@ -14,6 +14,7 @@
 
 /include/ "msm8610-v1.dtsi"
 /include/ "msm8610-qrd.dtsi"
+/include/ "msm861x-qrd-camera-sensor-skuac.dtsi"
 
 / {
         model = "Qualcomm MSM 8610 QRD";
diff --git a/arch/arm/boot/dts/msm8610-v2-qrd-skuac.dts b/arch/arm/boot/dts/msm8610-v2-qrd-skuac.dts
index d087272..e3af3f9 100644
--- a/arch/arm/boot/dts/msm8610-v2-qrd-skuac.dts
+++ b/arch/arm/boot/dts/msm8610-v2-qrd-skuac.dts
@@ -14,8 +14,7 @@
 
 /include/ "msm8610-v2.dtsi"
 /include/ "msm8610-qrd.dtsi"
-/include/ "msm8610-qrd-camera-sensor.dtsi"
-
+/include/ "msm861x-qrd-camera-sensor-skuac.dtsi"
 / {
 	model = "Qualcomm MSM 8610v2 QRD";
 	compatible = "qcom,msm8610-qrd", "qcom,msm8610", "qcom,qrd";
diff --git a/arch/arm/boot/dts/msm861x-qrd-camera-sensor-skuac.dtsi b/arch/arm/boot/dts/msm861x-qrd-camera-sensor-skuac.dtsi
new file mode 100644
index 0000000..96adbabc
--- /dev/null
+++ b/arch/arm/boot/dts/msm861x-qrd-camera-sensor-skuac.dtsi
@@ -0,0 +1,143 @@
+/*
+ * Copyright (c) 2013, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+&soc {
+	gpio-leds {
+		compatible = "gpio-leds";
+		status = "disabled";
+
+		gpio_flash: gpio-flash {
+			gpios = <&pm8110_gpios 1 0>;
+			label = "gpio-flash";
+			linux,default-trigger = "gpio_flash_trigger";
+		};
+	};
+	led_flash0: qcom,camera-led-flash {
+		cell-index = <0>;
+		compatible = "qcom,camera-led-flash";
+		qcom,flash-type = <3>;
+		qcom,flash-source = <&gpio_flash>;
+		qcom,torch-source = <&gpio_flash>;
+		status = "disabled";
+	};
+};
+
+&i2c {
+	actuator0: qcom,actuator@18 {
+			cell-index = <1>;
+			reg = <0x18>;
+			compatible = "qcom,actuator";
+			qcom,cci-master = <0>;
+	};
+
+	eeprom0: qcom,eeprom@22 {
+			cell-index = <0>;
+			reg = <0x22 0x0>;
+			qcom,eeprom-name = "liteon_12p1ba855d";
+			compatible = "qcom,msm_eeprom";
+			qcom,slave-addr = <0x20>;
+			qcom,cci-master = <0>;
+			qcom,num-blocks = <4>;
+			qcom,page0 = <1 0x3A02 2 0x00 1 1>;
+			qcom,pageen0 = <1 0x3A00 2 0x01 1 10>;
+			qcom,poll0 = <0 0x0 2 0 1 1>;
+			qcom,mem0 = <4 0x3A09 2 0 1 0>;
+			qcom,page1 = <1 0x3A02 2 0x01 1 1>;
+			qcom,pageen1 = <1 0x3A00 2 0x01 1 10>;
+			qcom,poll1 = <0 0x0 2 0 1 1>;
+			qcom,mem1 = <4 0x3A09 2 0 1 0>;
+			qcom,page2 = <1 0x3A02 2 0x02 1 1>;
+			qcom,pageen2 = <1 0x3A00 2 0x01 1 10>;
+			qcom,poll2 = <0 0x0 2 0 1 1>;
+			qcom,mem2 = <4 0x3A09 2 0 1 0>;
+			qcom,page3 = <1 0x3A02 2 0x03 1 1>;
+			qcom,pageen3 = <1 0x3A00 2 0x01 1 10>;
+			qcom,poll3 = <0 0x0 2 0 1 1>;
+			qcom,mem3 = <4 0x3A09 2 0 1 0>;
+
+			cam_vdig-supply = <&pm8110_l2>;	
+			cam_vio-supply = <&pm8110_l7>;
+			cam_vana-supply = <&pm8110_l22>;
+			qcom,cam-vreg-name = "cam_vdig", "cam_vio", "cam_vana";
+			qcom,cam-vreg-type = <0 0 0>;
+			qcom,cam-vreg-min-voltage = <1200000 1800000 2850000>;
+			qcom,cam-vreg-max-voltage = <1200000 1800000 2850000>;
+			qcom,cam-vreg-op-mode = <200000 200000 100000>;
+
+			qcom,gpio-no-mux = <0>;
+			gpios = <&msmgpio 13 0>,
+				<&msmgpio 21 0>,//reset
+				<&msmgpio 101 0>; //dvdd_en
+			qcom,gpio-reset = <1>;
+			qcom,gpio-vdig  = <2>;
+			qcom,gpio-req-tbl-num = <0 1 2>;
+			qcom,gpio-req-tbl-flags = <1 0 0>;
+			qcom,gpio-req-tbl-label = "CAMIF_MCLK",
+				"CAM_RESET1",
+				"CAM_DVDD_EN";
+			qcom,cam-power-seq-type = "sensor_gpio",
+				"sensor_vreg", 
+				"sensor_vreg",
+				"sensor_vreg",
+				"sensor_clk",		
+				"sensor_gpio";
+			qcom,cam-power-seq-val = "sensor_gpio_vdig",
+				"cam_vdig",
+				"cam_vana",
+				"cam_vio",
+				"sensor_cam_mclk",
+				"sensor_gpio_reset";	
+			qcom,cam-power-seq-cfg-val = <1 1 1 1 24000000 1>;	
+			qcom,cam-power-seq-delay =   <1 1 1 1 5 5>;
+	};
+	qcom,camera@20 {
+			compatible = "qcom,s5k4h5_liteon";
+			reg = <0x20>;
+			qcom,slave-id = <0x20 0x0000 0x485B>;
+			qcom,csiphy-sd-index = <0>;
+			qcom,csid-sd-index = <0>;
+			qcom,actuator-src = <&actuator0>;
+			qcom,led-flash-src = <&led_flash0>;
+			qcom,eeprom-src = <&eeprom0>;
+			qcom,mount-angle = <90>;
+			qcom,sensor-name = "s5k4h5_liteon";
+			cam_vdig-supply = <&pm8110_l2>;
+			cam_vio-supply = <&pm8110_l7>;
+			cam_vana-supply = <&pm8110_l22>;
+			qcom,cam-vreg-name = "cam_vdig", "cam_vio", "cam_vana";
+			qcom,cam-vreg-type = <0 0 0>;
+			qcom,cam-vreg-min-voltage = <1200000 1800000 2850000>;
+			qcom,cam-vreg-max-voltage = <1200000 1800000 2850000>;
+			qcom,cam-vreg-op-mode = <200000 200000 100000>;
+			qcom,gpio-no-mux = <0>;
+			gpios = <&msmgpio 13 0>,
+				<&msmgpio 21 0>,//reset
+				<&msmgpio 101 0>, //dvdd_en
+				<&msmgpio 79 0>; //vcm_pwdn
+			qcom,gpio-reset = <1>;
+			qcom,gpio-vdig = <2>;
+			qcom,gpio-af-pwdm = <3>;
+			qcom,gpio-req-tbl-num = <0 1 2 3>;
+			qcom,gpio-req-tbl-flags = <1 0 0 0>;
+			qcom,gpio-req-tbl-label = "CAMIF_MCLK",
+				"CAM_RESET1",
+				"CAM_DVDD_EN",
+				"CAM_AF_PWDM";
+			qcom,csi-lane-assign = <0xe4>;
+			qcom,csi-lane-mask = <0x3>;
+			qcom,sensor-position = <0>;
+			qcom,sensor-mode = <1>;
+			qcom,cci-master = <0>;
+			status = "ok";
+	};
+};
diff --git a/arch/arm/configs/msm8610_defconfig b/arch/arm/configs/msm8610_defconfig
index 17c6b34..7cb5cb9 100644
--- a/arch/arm/configs/msm8610_defconfig
+++ b/arch/arm/configs/msm8610_defconfig
@@ -317,6 +317,7 @@ CONFIG_s5k4e1=y
 CONFIG_HI256=y
 CONFIG_OV12830=y
 CONFIG_IMX134=y
+CONFIG_S5K4H5_LITEON_12P1BA855D=y
 CONFIG_MSM_CAMERA_SENSOR=y
 CONFIG_MSM_EEPROM=y
 CONFIG_MSM_CCI=y
diff --git a/arch/arm/mach-msm/clock-8610.c b/arch/arm/mach-msm/clock-8610.c
index 85a9f45..d22edb3 100644
--- a/arch/arm/mach-msm/clock-8610.c
+++ b/arch/arm/mach-msm/clock-8610.c
@@ -3028,6 +3028,7 @@ static struct clk_lookup msm_clocks_8610[] = {
 	CLK_LOOKUP("cam_src_clk", mclk1_clk_src.c, "6-0078"),
 	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "6-0020"),
 	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "6-006a"),
+	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "6-0022"),
 	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-006f"),
 	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-0034"),
 	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-007d"),
@@ -3035,6 +3036,7 @@ static struct clk_lookup msm_clocks_8610[] = {
 	CLK_LOOKUP("cam_clk", mclk1_clk.c, "6-0078"),
 	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-0020"),
 	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-006a"),
+	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-0022"),
 
 
 	/* CSIPHY clocks */
diff --git a/drivers/media/platform/msm/camera_v2/Kconfig b/drivers/media/platform/msm/camera_v2/Kconfig
index 262fb38..40da6d2 100644
--- a/drivers/media/platform/msm/camera_v2/Kconfig
+++ b/drivers/media/platform/msm/camera_v2/Kconfig
@@ -209,6 +209,14 @@ config OV8865
 		snapshot config = 3264 * 2448 at 30 fps.
 		Max fps is 30fps at 3264 * 2448, 60fps at 1632 * 1224
 
+config S5K4H5_LITEON_12P1BA855D
+	bool "Samsung S5K4H5 (BAYER 8MP)"
+	depends on MSMB_CAMERA
+	---help---
+		Samsung 8 MP Bayer Sensor with auto focus.uses
+		2 mipi lanes, preview config = 1632*1224 30 fps,
+		snapshot config = 3264 * 2448 at 15 fps.		
+		
 config s5k4e1
 	bool "Sensor s5k4e1 (BAYER 5MP)"
 	depends on MSMB_CAMERA
diff --git a/drivers/media/platform/msm/camera_v2/sensor/Makefile b/drivers/media/platform/msm/camera_v2/sensor/Makefile
index 280a9a0..b814cc0 100644
--- a/drivers/media/platform/msm/camera_v2/sensor/Makefile
+++ b/drivers/media/platform/msm/camera_v2/sensor/Makefile
@@ -12,6 +12,7 @@ obj-$(CONFIG_OV8825) += ov8825.o
 obj-$(CONFIG_OV8865) += ov8865.o
 obj-$(CONFIG_s5k4e1) += s5k4e1.o
 obj-$(CONFIG_OV12830) += ov12830.o
+obj-$(CONFIG_S5K4H5_LITEON_12P1BA855D) += s5k4h5_liteon_12p1ba855d.o
 obj-$(CONFIG_OV2720) += ov2720.o
 obj-$(CONFIG_OV9724) += ov9724.o
 obj-$(CONFIG_HI256) += hi256.o
diff --git a/drivers/media/platform/msm/camera_v2/sensor/s5k4h5_liteon_12p1ba855d.c b/drivers/media/platform/msm/camera_v2/sensor/s5k4h5_liteon_12p1ba855d.c
new file mode 100644
index 0000000..1e6c4c0
--- /dev/null
+++ b/drivers/media/platform/msm/camera_v2/sensor/s5k4h5_liteon_12p1ba855d.c
@@ -0,0 +1,176 @@
+/* Copyright (c) 2013, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#include "msm_sensor.h"
+#define S5K4H5_LITEON_SENSOR_NAME "s5k4h5_liteon"
+DEFINE_MSM_MUTEX(s5k4h5_liteon_mut);
+
+#undef CDBG
+#define S5K4H5_LITEON_DEBUG
+#ifdef S5K4H5_LITEON_DEBUG
+#define CDBG(fmt, args...) pr_err(fmt, ##args)
+#else
+#define CDBG(fmt, args...) do { } while (0)
+#endif
+
+static struct msm_sensor_ctrl_t s5k4h5_liteon_s_ctrl;
+
+static struct msm_sensor_power_setting s5k4h5_liteon_power_setting[] = {
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_VDIG,
+		.config_val = GPIO_OUT_HIGH,
+		.delay = 15,
+	},
+	{
+		.seq_type = SENSOR_VREG,
+		.seq_val = CAM_VANA,
+		.config_val = 0,
+		.delay = 5,
+	},	
+	{
+		.seq_type = SENSOR_VREG,
+		.seq_val = CAM_VIO,
+		.config_val = 0,
+		.delay = 5,
+	},
+	{ 	
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_AF_PWDM,
+		.config_val = GPIO_OUT_LOW,
+		.delay = 20,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_RESET,
+		.config_val = GPIO_OUT_LOW,
+		.delay = 40,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_RESET,
+		.config_val = GPIO_OUT_HIGH,
+		.delay = 40,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_AF_PWDM,
+		.config_val = GPIO_OUT_HIGH,
+		.delay = 20,
+	},
+	{
+		.seq_type = SENSOR_CLK,
+		.seq_val = SENSOR_CAM_MCLK,
+		.config_val = 24000000,
+		.delay = 5,
+	},
+	{
+		.seq_type = SENSOR_I2C_MUX,
+		.seq_val = 0,
+		.config_val = 0,
+		.delay = 0,
+	},
+};
+
+static struct v4l2_subdev_info s5k4h5_liteon_subdev_info[] = {
+	{
+		.code   = V4L2_MBUS_FMT_SGBRG10_1X10,
+		.colorspace = V4L2_COLORSPACE_JPEG,
+		.fmt    = 1,
+		.order    = 0,
+	},
+};
+
+static const struct i2c_device_id s5k4h5_liteon_i2c_id[] = {
+	{S5K4H5_LITEON_SENSOR_NAME, (kernel_ulong_t)&s5k4h5_liteon_s_ctrl},
+	{ }
+};
+
+static int32_t msm_s5k4h5_liteon_i2c_probe(struct i2c_client *client,
+	const struct i2c_device_id *id)
+{
+	return msm_sensor_i2c_probe(client, id, &s5k4h5_liteon_s_ctrl);
+}
+
+static struct i2c_driver s5k4h5_liteon_i2c_driver = {
+	.id_table = s5k4h5_liteon_i2c_id,
+	.probe  = msm_s5k4h5_liteon_i2c_probe,
+	.driver = {
+		.name = S5K4H5_LITEON_SENSOR_NAME,
+	},
+};
+
+static struct msm_camera_i2c_client s5k4h5_liteon_sensor_i2c_client = {
+	.addr_type = MSM_CAMERA_I2C_WORD_ADDR,
+};
+
+static const struct of_device_id s5k4h5_liteon_dt_match[] = {
+	{.compatible = "qcom,s5k4h5_liteon", .data = &s5k4h5_liteon_s_ctrl},
+	{}
+};
+
+MODULE_DEVICE_TABLE(of, s5k4h5_liteon_dt_match);
+
+static struct platform_driver s5k4h5_liteon_platform_driver = {
+	.driver = {
+		.name = "qcom,s5k4h5_liteon",
+		.owner = THIS_MODULE,
+		.of_match_table = s5k4h5_liteon_dt_match,
+	},
+};
+
+static int32_t s5k4h5_liteon_platform_probe(struct platform_device *pdev)
+{
+	int32_t rc = 0;
+	const struct of_device_id *match;
+	match = of_match_device(s5k4h5_liteon_dt_match, &pdev->dev);
+	rc = msm_sensor_platform_probe(pdev, match->data);
+	return rc;
+}
+
+static int __init s5k4h5_liteon_init_module(void)
+{
+	int32_t rc = 0;
+	pr_info("%s:%d\n", __func__, __LINE__);
+	rc = platform_driver_probe(&s5k4h5_liteon_platform_driver,
+		s5k4h5_liteon_platform_probe);
+	if (!rc)
+		return rc;
+	pr_err("%s:%d rc %d\n", __func__, __LINE__, rc);
+	return i2c_add_driver(&s5k4h5_liteon_i2c_driver);
+}
+
+static void __exit s5k4h5_liteon_exit_module(void)
+{
+	pr_info("%s:%d\n", __func__, __LINE__);
+	if (s5k4h5_liteon_s_ctrl.pdev) {
+		msm_sensor_free_sensor_data(&s5k4h5_liteon_s_ctrl);
+		platform_driver_unregister(&s5k4h5_liteon_platform_driver);
+	} else
+		i2c_del_driver(&s5k4h5_liteon_i2c_driver);
+	return;
+}
+
+static struct msm_sensor_ctrl_t s5k4h5_liteon_s_ctrl = {
+	.sensor_i2c_client = &s5k4h5_liteon_sensor_i2c_client,
+	.power_setting_array.power_setting = s5k4h5_liteon_power_setting,
+	.power_setting_array.size = ARRAY_SIZE(s5k4h5_liteon_power_setting),
+	.msm_sensor_mutex = &s5k4h5_liteon_mut,
+	.sensor_v4l2_subdev_info = s5k4h5_liteon_subdev_info,
+	.sensor_v4l2_subdev_info_size = ARRAY_SIZE(s5k4h5_liteon_subdev_info),
+};
+
+module_init(s5k4h5_liteon_init_module);
+module_exit(s5k4h5_liteon_exit_module);
+MODULE_DESCRIPTION("s5k4h5_liteon");
+MODULE_LICENSE("GPL v2");
-- 
1.7.8.3

