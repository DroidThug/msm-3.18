From 8f777fc0b8002ef65fa32e4e0d9c7d582060f060 Mon Sep 17 00:00:00 2001
From: lnxbuild <lnxbuild@localhost>
Date: Tue, 12 Nov 2013 17:01:30 +0800
Subject: [PATCH 10/16] pre-CS:add camera imx134_sunny_p8n09f driver support

Change-Id: I4ed13d96040fb62e773b91f07eb36aa118ebd936
---
 arch/arm/boot/dts/msm8610-qrd.dtsi                 |    2 +-
 .../boot/dts/msm861x-qrd-camera-sensor-skuac.dtsi  |  201 ++++++++++++++------
 arch/arm/configs/msm8610_defconfig                 |    1 +
 arch/arm/mach-msm/clock-8610.c                     |    4 +
 arch/arm/mach-msm/include/mach/camera2.h           |    3 +
 drivers/media/platform/msm/camera_v2/Kconfig       |    7 +
 .../media/platform/msm/camera_v2/sensor/Makefile   |    1 +
 .../msm/camera_v2/sensor/eeprom/msm_eeprom.c       |   24 +++
 .../msm/camera_v2/sensor/imx134_sunny_p8n09f.c     |  185 ++++++++++++++++++
 9 files changed, 370 insertions(+), 58 deletions(-)
 create mode 100644 drivers/media/platform/msm/camera_v2/sensor/imx134_sunny_p8n09f.c

diff --git a/arch/arm/boot/dts/msm8610-qrd.dtsi b/arch/arm/boot/dts/msm8610-qrd.dtsi
index 92fbdf8..1bd1de3 100644
--- a/arch/arm/boot/dts/msm8610-qrd.dtsi
+++ b/arch/arm/boot/dts/msm8610-qrd.dtsi
@@ -25,7 +25,7 @@
  *      reference design.
  * };
  */
-
+  /include/ "msm861x-qrd-camera-sensor-skuac.dtsi"
 &soc {
 	i2c@f9923000{
 		/*focaltech@38{
diff --git a/arch/arm/boot/dts/msm861x-qrd-camera-sensor-skuac.dtsi b/arch/arm/boot/dts/msm861x-qrd-camera-sensor-skuac.dtsi
index de8a058..43755a4 100644
--- a/arch/arm/boot/dts/msm861x-qrd-camera-sensor-skuac.dtsi
+++ b/arch/arm/boot/dts/msm861x-qrd-camera-sensor-skuac.dtsi
@@ -432,67 +432,67 @@
 			qcom,cci-master = <0>;
 		};
 		eeprom2: qcom,eeprom@66{
-						cell-index = <0>;
-						reg = <0x66 0x0>;
-						qcom,eeprom-name = "sunny_p5v18g";
-						compatible = "qcom,msm_eeprom";
-						qcom,slave-addr = <0x6c>;
-						qcom,cci-master = <0>;
-						qcom,num-blocks = <7>;
+					cell-index = <0>;
+					reg = <0x66 0x0>;
+					qcom,eeprom-name = "sunny_p5v18g";
+					compatible = "qcom,msm_eeprom";
+					qcom,slave-addr = <0x6c>;
+					qcom,cci-master = <0>;
+					qcom,num-blocks = <7>;
 
-						qcom,page0 = <1 0x0100 2 0x01 1 1>;
-						qcom,poll0 = <0 0x0 2 0 1 1>;
-						qcom,mem0 = <0 0x0 2 0 1 0>;
+					qcom,page0 = <1 0x0100 2 0x01 1 1>;
+					qcom,poll0 = <0 0x0 2 0 1 1>;
+					qcom,mem0 = <0 0x0 2 0 1 0>;
 
-						qcom,page1 = <1 0x3d84 2 0xc0 1 1>;
-						qcom,poll1 = <0 0x0 2 0 1 1>;
-						qcom,mem1 = <0 0x0 2 0 1 0>;
-						qcom,page2 = <1 0x3d85 2 0x00 1 1>;
-						qcom,poll2 = <0 0x0 2 0 1 1>;
-						qcom,mem2 = <0 0x0 2 0 1 0>;
-						qcom,page3 = <1 0x3d86 2 0x0f 1 1>;
-						qcom,pageen3 = <1 0x3d81 2 0x01 1 10>;
-						qcom,poll3 = <0 0x0 2 0 1 1>;
-						qcom,mem3 = <16 0x3d00 2 0 1 0>;
+					qcom,page1 = <1 0x3d84 2 0xc0 1 1>;
+					qcom,poll1 = <0 0x0 2 0 1 1>;
+					qcom,mem1 = <0 0x0 2 0 1 0>;
+					qcom,page2 = <1 0x3d85 2 0x00 1 1>;
+					qcom,poll2 = <0 0x0 2 0 1 1>;
+					qcom,mem2 = <0 0x0 2 0 1 0>;
+					qcom,page3 = <1 0x3d86 2 0x0f 1 1>;
+					qcom,pageen3 = <1 0x3d81 2 0x01 1 10>;
+					qcom,poll3 = <0 0x0 2 0 1 1>;
+					qcom,mem3 = <16 0x3d00 2 0 1 0>;
 
-						qcom,page4 = <1 0x3d84 2 0xc0 1 1>;
-						qcom,poll4 = <0 0x0 2 0 1 1>;
-						qcom,mem4 = <0 0x0 2 0 1 0>;
-						qcom,page5 = <1 0x3d85 2 0x10 1 1>;
-						qcom,poll5 = <0 0x0 2 0 1 1>;
-						qcom,mem5 = <0 0x0 2 0 1 0>;
-						qcom,page6 = <1 0x3d86 2 0x1f 1 1>;
-						qcom,pageen6 = <1 0x3d81 2 0x01 1 10>;
-						qcom,poll6 = <0 0x0 2 0 1 1>;
-						qcom,mem6 = <16 0x3d00 2 0 1 0>;
+					qcom,page4 = <1 0x3d84 2 0xc0 1 1>;
+					qcom,poll4 = <0 0x0 2 0 1 1>;
+					qcom,mem4 = <0 0x0 2 0 1 0>;
+					qcom,page5 = <1 0x3d85 2 0x10 1 1>;
+					qcom,poll5 = <0 0x0 2 0 1 1>;
+					qcom,mem5 = <0 0x0 2 0 1 0>;
+					qcom,page6 = <1 0x3d86 2 0x1f 1 1>;
+					qcom,pageen6 = <1 0x3d81 2 0x01 1 10>;
+					qcom,poll6 = <0 0x0 2 0 1 1>;
+					qcom,mem6 = <16 0x3d00 2 0 1 0>;
 
-					  	cam_vdig-supply = <&pm8110_l2>;
-						cam_vio-supply = <&pm8110_l7>;
-						cam_vana-supply = <&pm8110_l22>;
-						qcom,cam-vreg-name = "cam_vdig", "cam_vio", "cam_vana";
-						qcom,cam-vreg-type = <0 0 0>;
-						qcom,cam-vreg-min-voltage = <0 1800000 2850000>;
-						qcom,cam-vreg-max-voltage = <0 1800000 2850000>;
-						qcom,cam-vreg-op-mode = <0 200000 100000>;
-						qcom,gpio-no-mux = <0>;
-						gpios = <&msmgpio 13 0>,
-								<&msmgpio 21 0>,//reset
-								<&msmgpio 20 0>;//stanby
-						qcom,gpio-reset = <1>;
-						qcom,gpio-standby = <2>;
-						qcom,gpio-req-tbl-num = <0 1 2>;
-						qcom,gpio-req-tbl-flags = <1 0 0>;
-						qcom,gpio-req-tbl-label = "CAMIF_MCLK",
-							"CAM_RESET1",
-							"CAM_STANDBY";
-						qcom,cam-power-seq-type = "sensor_vreg",
-							"sensor_vreg", "sensor_gpio",
-							"sensor_gpio", "sensor_clk";
-						qcom,cam-power-seq-val = "cam_vio", "cam_vana",
-							 "sensor_gpio_reset",
-							"sensor_gpio_standby","sensor_cam_mclk" ;
-						qcom,cam-power-seq-cfg-val = <1 1 1 1 24000000>;
-						qcom,cam-power-seq-delay = <1 1 10 10 5>;
+					cam_vdig-supply = <&pm8110_l2>;
+					cam_vio-supply = <&pm8110_l7>;
+					cam_vana-supply = <&pm8110_l22>;
+					qcom,cam-vreg-name = "cam_vdig", "cam_vio", "cam_vana";
+					qcom,cam-vreg-type = <0 0 0>;
+					qcom,cam-vreg-min-voltage = <0 1800000 2850000>;
+					qcom,cam-vreg-max-voltage = <0 1800000 2850000>;
+					qcom,cam-vreg-op-mode = <0 200000 100000>;
+					qcom,gpio-no-mux = <0>;
+					gpios = <&msmgpio 13 0>,
+							<&msmgpio 21 0>,//reset
+							<&msmgpio 20 0>;//stanby
+					qcom,gpio-reset = <1>;
+					qcom,gpio-standby = <2>;
+					qcom,gpio-req-tbl-num = <0 1 2>;
+					qcom,gpio-req-tbl-flags = <1 0 0>;
+					qcom,gpio-req-tbl-label = "CAMIF_MCLK",
+						"CAM_RESET1",
+						"CAM_STANDBY";
+					qcom,cam-power-seq-type = "sensor_vreg",
+						"sensor_vreg", "sensor_gpio",
+						"sensor_gpio", "sensor_clk";
+					qcom,cam-power-seq-val = "cam_vio", "cam_vana",
+						"sensor_gpio_reset",
+						"sensor_gpio_standby","sensor_cam_mclk" ;
+					qcom,cam-power-seq-cfg-val = <1 1 1 1 24000000>;
+					qcom,cam-power-seq-delay = <1 1 10 10 5>;
 				};
 
   	qcom,camera@68 {
@@ -534,4 +534,91 @@
 				qcom,sensor-mode = <0>;
 				qcom,cci-master = <0>;
 		};
+	eeprom4: qcom,eeprom@60 {
+					cell-index = <0>;
+					reg = <0x60 0x0>;
+					qcom,eeprom-name = "sunny_p8n09f";
+					compatible = "qcom,msm_eeprom";
+					qcom,slave-addr = <0xa4>;
+					qcom,cci-master = <0>;
+					qcom,num-blocks = <2>;
+					qcom,slave_addr0 = <1 0xa4 1 0 1 1>;
+					qcom,page0 = <0 0x00 1 0x00 1 1>;
+					qcom,pageen0 = <0 0x00 1 0x00 1 10>;
+					qcom,poll0 = <0 0x0 1 0 1 1>;
+					qcom,mem0 = <256 0x00 1 0 1 0>;
+
+					qcom,slave_addr1 = <1 0xa6 1 0 1 1>;
+					qcom,page1 = <0 0x00 1 0x00 1 1>;
+					qcom,pageen1 = <0 0x00 1 0x00 1 10>;
+					qcom,poll1 = <0 0x0 1 0 1 1>;
+					qcom,mem1 = <70 0x00 1 0 1 0>;
+
+					cam_vdig-supply = <&pm8110_l2>;
+					cam_vio-supply = <&pm8110_l7>;
+					cam_vana-supply = <&pm8110_l22>;
+					qcom,cam-vreg-name = "cam_vdig", "cam_vio", "cam_vana";
+					qcom,cam-vreg-type = <0 0 0>;
+					qcom,cam-vreg-min-voltage = <0 1800000 2850000>;
+					qcom,cam-vreg-max-voltage = <0 1800000 2850000>;
+					qcom,cam-vreg-op-mode = <0 200000 100000>;
+					qcom,gpio-no-mux = <0>;
+					gpios = <&msmgpio 13 0>,
+							<&msmgpio 21 0>,//reset
+							<&msmgpio 20 0>;//stanby
+					qcom,gpio-reset = <1>;
+					qcom,gpio-standby = <2>;
+					qcom,gpio-req-tbl-num = <0 1 2>;
+					qcom,gpio-req-tbl-flags = <1 0 0>;
+					qcom,gpio-req-tbl-label = "CAMIF_MCLK",
+						"CAM_RESET1",
+						"CAM_STANDBY";
+					qcom,cam-power-seq-type = "sensor_vreg",
+						"sensor_vreg", "sensor_gpio",
+						"sensor_gpio", "sensor_clk";
+					qcom,cam-power-seq-val = "cam_vio", "cam_vana",
+						 "sensor_gpio_reset",
+						"sensor_gpio_standby","sensor_cam_mclk" ;
+					qcom,cam-power-seq-cfg-val = <1 1 1 1 24000000>;
+					qcom,cam-power-seq-delay = <1 1 10 10 5>;
+				};
+	qcom,camera@28 {
+					compatible = "qcom,imx134_sunny_p8n09f";
+					reg = <0x28>;
+					qcom,slave-id = <0x20 0x0016 0x0134>;
+					qcom,csiphy-sd-index = <0>;
+					qcom,csid-sd-index = <0>;
+					qcom,actuator-src = <&actuator0>;
+					qcom,eeprom-src = <&eeprom4>;
+					qcom,led-flash-src = <&led_flash0>;
+					qcom,mount-angle = <90>;
+					qcom,sensor-name = "imx134_sunny_p8n09f";
+					cam_vdig-supply = <&pm8110_l2>;
+					cam_vio-supply = <&pm8110_l7>;
+					cam_vana-supply = <&pm8110_l22>;
+					qcom,cam-vreg-name = "cam_vdig", "cam_vio", "cam_vana";
+					qcom,cam-vreg-type = <0 0 0>;
+					qcom,cam-vreg-min-voltage = <0 1800000 2850000>;
+					qcom,cam-vreg-max-voltage = <0 1800000 2850000>;
+					qcom,cam-vreg-op-mode = <0 200000 100000>;
+					qcom,gpio-no-mux = <0>;
+					gpios = <&msmgpio 13 0>,
+						<&msmgpio 21 0>,//reset
+						<&msmgpio 101 0>, //dvdd_en
+						<&msmgpio 79 0>; //af_pwdn
+					qcom,gpio-reset = <1>;
+					qcom,gpio-vdig = <2>;
+					qcom,gpio-af-pwdm = <3>;
+					qcom,gpio-req-tbl-num = <0 1 2 3>;
+					qcom,gpio-req-tbl-flags = <1 0 0 0>;
+					qcom,gpio-req-tbl-label = "CAMIF_MCLK",
+						"CAM_RESET1",
+						"CAM_DVDD_EN",
+						"CAM_AF_PWDM";
+					qcom,csi-lane-assign = <0xe4>;
+					qcom,csi-lane-mask = <0x7>;
+					qcom,sensor-position = <0>;
+					qcom,sensor-mode = <1>;
+					qcom,cci-master = <0>;
+	};
 };
diff --git a/arch/arm/configs/msm8610_defconfig b/arch/arm/configs/msm8610_defconfig
index 0bfba3be..6d7a8d7 100644
--- a/arch/arm/configs/msm8610_defconfig
+++ b/arch/arm/configs/msm8610_defconfig
@@ -325,6 +325,7 @@ CONFIG_S5K4H5_LITEON_12P1BA855D=y
 CONFIG_OV8850_FOXCONN_DC0901B=y
 CONFIG_OV5648_SUNNY_P5V18G=y
 CONFIG_S5K4E1_LITEON_13P1BA535D=y
+CONFIG_IMX134_SUNNY_P8N09F=y
 CONFIG_MSM_CAMERA_SENSOR=y
 CONFIG_MSM_EEPROM=y
 CONFIG_MSM_CCI=y
diff --git a/arch/arm/mach-msm/clock-8610.c b/arch/arm/mach-msm/clock-8610.c
index a3c75e1..fd456fe 100644
--- a/arch/arm/mach-msm/clock-8610.c
+++ b/arch/arm/mach-msm/clock-8610.c
@@ -3036,6 +3036,8 @@ static struct clk_lookup msm_clocks_8610[] = {
         CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "6-0066"),
 	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "6-0062"),
         CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "6-0064"),
+	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "6-0060"),
+        CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "6-0028"),
 	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-006f"),
 	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-0034"),
 	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-007d"),
@@ -3050,6 +3052,8 @@ static struct clk_lookup msm_clocks_8610[] = {
         CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-0066"),
 	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-0062"),
         CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-0064"),
+	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-0060"),
+        CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-0028"),
 	/* CSIPHY clocks */
 	CLK_LOOKUP("csiphy_timer_src_clk", csi0phytimer_clk_src.c,
 		"fda00c00.qcom,csiphy"),
diff --git a/arch/arm/mach-msm/include/mach/camera2.h b/arch/arm/mach-msm/include/mach/camera2.h
index a9da79e..98ab42b 100644
--- a/arch/arm/mach-msm/include/mach/camera2.h
+++ b/arch/arm/mach-msm/include/mach/camera2.h
@@ -113,6 +113,9 @@ struct eeprom_map_t {
 };
 
 struct eeprom_memory_map_t {
+	#ifdef CONFIG_IMX134_SUNNY_P8N09F
+	struct eeprom_map_t slave_addr;/*add for muti i2c slave*/
+	#endif
 	struct eeprom_map_t page;
 	struct eeprom_map_t pageen;
 	struct eeprom_map_t poll;
diff --git a/drivers/media/platform/msm/camera_v2/Kconfig b/drivers/media/platform/msm/camera_v2/Kconfig
index f521225..7decbde 100644
--- a/drivers/media/platform/msm/camera_v2/Kconfig
+++ b/drivers/media/platform/msm/camera_v2/Kconfig
@@ -239,6 +239,13 @@ config S5K4E1_LITEON_13P1BA535D
 		2 mipi lane, preview config = 1296*972 30 fps,
 		snapshot config = 2592 * 1944 at 15 fps with 
 		auto focus.
+config IMX134_SUNNY_P8N09F
+	bool "Sony IMX134_SUNNY_P8N09F (BAYER 8MP)"
+	depends on MSMB_CAMERA
+	---help---
+		Sony 8 MP Bayer Sensor with auto focus.uses
+		2 mipi lanes, preview config = 1632*1224 30 fps,
+		snapshot config = 3264 * 2448 at 15 fps.
 config s5k4e1
 	bool "Sensor s5k4e1 (BAYER 5MP)"
 	depends on MSMB_CAMERA
diff --git a/drivers/media/platform/msm/camera_v2/sensor/Makefile b/drivers/media/platform/msm/camera_v2/sensor/Makefile
index 21c66a4..0b8c910 100644
--- a/drivers/media/platform/msm/camera_v2/sensor/Makefile
+++ b/drivers/media/platform/msm/camera_v2/sensor/Makefile
@@ -16,6 +16,7 @@ obj-$(CONFIG_S5K4H5_LITEON_12P1BA855D) += s5k4h5_liteon_12p1ba855d.o
 obj-$(CONFIG_OV8850_FOXCONN_DC0901B) += ov8850_foxconn_dc0901b.o
 obj-$(CONFIG_OV5648_SUNNY_P5V18G) += ov5648_sunny_p5v18g.o
 obj-$(CONFIG_S5K4E1_LITEON_13P1BA535D) += s5k4e1_liteon_13p1ba535d.o
+obj-$(CONFIG_IMX134_SUNNY_P8N09F) += imx134_sunny_p8n09f.o
 obj-$(CONFIG_OV2720) += ov2720.o
 obj-$(CONFIG_OV9724) += ov9724.o
 obj-$(CONFIG_HI256) += hi256.o
diff --git a/drivers/media/platform/msm/camera_v2/sensor/eeprom/msm_eeprom.c b/drivers/media/platform/msm/camera_v2/sensor/eeprom/msm_eeprom.c
index 45db19c..615fe08 100644
--- a/drivers/media/platform/msm/camera_v2/sensor/eeprom/msm_eeprom.c
+++ b/drivers/media/platform/msm/camera_v2/sensor/eeprom/msm_eeprom.c
@@ -172,6 +172,16 @@ int32_t read_eeprom_memory(struct msm_eeprom_ctrl_t *e_ctrl)
 	emap = eb_info->eeprom_map;
 
 	for (j = 0; j < eb_info->num_blocks; j++) {
+		#ifdef CONFIG_IMX134_SUNNY_P8N09F
+	 	/*add for muti i2c slave*/
+		if (emap[j].slave_addr.valid_size) {
+                	 //e_ctrl->eboard_info->i2c_slaveaddr = emap[j].slave_addr.addr;
+                 	//e_ctrl->i2c_client.cci_client->sid = e_ctrl->eboard_info->i2c_slaveaddr >> 1;
+			  e_ctrl->i2c_client.client->addr =emap[j].slave_addr.addr;
+	
+		}
+		/*add end*/
+		#endif
 		if (emap[j].page.valid_size) {
 			e_ctrl->i2c_client.addr_type = emap[j].page.addr_t;
 			rc = e_ctrl->i2c_client.i2c_func_tbl->i2c_write(
@@ -317,7 +327,11 @@ static int msm_eeprom_alloc_memory_map(struct msm_eeprom_ctrl_t *e_ctrl,
 				       struct device_node *of)
 {
 	int i, rc = 0;
+	#ifdef CONFIG_IMX134_SUNNY_P8N09F
+	char property[20];/*change for muti i2c slave*/
+	#else
 	char property[14];
+	#endif
 	uint32_t count = 6;
 	struct msm_eeprom_board_info *eb = e_ctrl->eboard_info;
 
@@ -337,6 +351,16 @@ static int msm_eeprom_alloc_memory_map(struct msm_eeprom_ctrl_t *e_ctrl,
 	}
 
 	for (i = 0; i < eb->num_blocks; i++) {
+		#ifdef CONFIG_IMX134_SUNNY_P8N09F
+		/*add for muti i2c slave*/
+		snprintf(property, 18, "qcom,slave_addr%d", i);
+		rc = of_property_read_u32_array(of, property,
+		(uint32_t *) &eb->eeprom_map[i].slave_addr, count);
+		if (rc < 0) {
+			pr_err("%s: slave_addr not needed\n", __func__);
+		}
+		/*add end*/
+		#endif
 		snprintf(property, 12, "qcom,page%d", i);
 		rc = of_property_read_u32_array(of, property,
 			(uint32_t *) &eb->eeprom_map[i].page, count);
diff --git a/drivers/media/platform/msm/camera_v2/sensor/imx134_sunny_p8n09f.c b/drivers/media/platform/msm/camera_v2/sensor/imx134_sunny_p8n09f.c
new file mode 100644
index 0000000..9367f41
--- /dev/null
+++ b/drivers/media/platform/msm/camera_v2/sensor/imx134_sunny_p8n09f.c
@@ -0,0 +1,185 @@
+/* Copyright (c) 2013, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+#include <mach/gpiomux.h>
+#include "msm_sensor.h"
+#include "msm_sd.h"
+#include "camera.h"
+#include "msm_cci.h"
+#include "msm_camera_io_util.h"
+#include "msm_camera_i2c_mux.h"
+#include <mach/rpm-regulator.h>
+#include <mach/rpm-regulator-smd.h>
+#include <linux/regulator/consumer.h>
+
+#define IMX134_SUNNY_P8N09F_SENSOR_NAME "imx134_sunny_p8n09f"
+DEFINE_MSM_MUTEX(imx134_sunny_p8n09f_mut);
+
+#undef CDBG
+#define IMX134_SUNNY_P8N09F_DEBUG
+#ifdef IMX134_SUNNY_P8N09F_DEBUG
+#define CDBG(fmt, args...) pr_err(fmt, ##args)
+#else
+#define CDBG(fmt, args...) do { } while (0)
+#endif
+
+static struct msm_sensor_ctrl_t imx134_sunny_p8n09f_s_ctrl;
+
+static struct msm_sensor_power_setting imx134_sunny_p8n09f_power_setting[] = {
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_VDIG,
+		.config_val = GPIO_OUT_HIGH,
+		.delay = 15,
+	},
+	{
+		.seq_type = SENSOR_VREG,
+		.seq_val = CAM_VANA,
+		.config_val = 0,
+		.delay = 5,
+	},	
+	{
+		.seq_type = SENSOR_VREG,
+		.seq_val = CAM_VIO,
+		.config_val = 0,
+		.delay = 5,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_RESET,
+		.config_val = GPIO_OUT_LOW,
+		.delay = 40,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_AF_PWDM,
+		.config_val = GPIO_OUT_LOW,
+		.delay = 20,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_RESET,
+		.config_val = GPIO_OUT_HIGH,
+		.delay = 40,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_AF_PWDM,
+		.config_val = GPIO_OUT_HIGH,
+		.delay = 20,
+	},
+	{
+		.seq_type = SENSOR_CLK,
+		.seq_val = SENSOR_CAM_MCLK,
+		.config_val = 24000000,
+		.delay = 5,
+	},
+	{
+		.seq_type = SENSOR_I2C_MUX,
+		.seq_val = 0,
+		.config_val = 0,
+		.delay = 0,
+	},
+};
+
+static struct v4l2_subdev_info imx134_sunny_p8n09f_subdev_info[] = {
+	{
+		.code   = V4L2_MBUS_FMT_SGRBG10_1X10,
+		.colorspace = V4L2_COLORSPACE_JPEG,
+		.fmt    = 1,
+		.order    = 0,
+	},
+};
+
+static const struct i2c_device_id imx134_sunny_p8n09f_i2c_id[] = {
+	{IMX134_SUNNY_P8N09F_SENSOR_NAME, (kernel_ulong_t)&imx134_sunny_p8n09f_s_ctrl},
+	{ }
+};
+
+static int32_t msm_imx134_sunny_p8n09f_i2c_probe(struct i2c_client *client,
+	const struct i2c_device_id *id)
+{
+	return msm_sensor_i2c_probe(client, id, &imx134_sunny_p8n09f_s_ctrl);
+}
+
+static struct i2c_driver imx134_sunny_p8n09f_i2c_driver = {
+	.id_table = imx134_sunny_p8n09f_i2c_id,
+	.probe  = msm_imx134_sunny_p8n09f_i2c_probe,
+	.driver = {
+		.name = IMX134_SUNNY_P8N09F_SENSOR_NAME,
+	},
+};
+
+static struct msm_camera_i2c_client imx134_sunny_p8n09f_sensor_i2c_client = {
+	.addr_type = MSM_CAMERA_I2C_WORD_ADDR,
+};
+
+static const struct of_device_id imx134_sunny_p8n09f_dt_match[] = {
+	{.compatible = "qcom,imx134_sunny_p8n09f", .data = &imx134_sunny_p8n09f_s_ctrl},
+	{}
+};
+
+MODULE_DEVICE_TABLE(of, imx134_sunny_p8n09f_dt_match);
+
+static struct platform_driver imx134_sunny_p8n09f_platform_driver = {
+	.driver = {
+		.name = "qcom,imx134_sunny_p8n09f",
+		.owner = THIS_MODULE,
+		.of_match_table = imx134_sunny_p8n09f_dt_match,
+	},
+};
+
+static int32_t imx134_sunny_p8n09f_platform_probe(struct platform_device *pdev)
+{
+	int32_t rc = 0;
+	const struct of_device_id *match;
+	match = of_match_device(imx134_sunny_p8n09f_dt_match, &pdev->dev);
+	rc = msm_sensor_platform_probe(pdev, match->data);
+	return rc;
+}
+
+static int __init imx134_sunny_p8n09f_init_module(void)
+{
+	int32_t rc = 0;
+	pr_info("%s:%d\n", __func__, __LINE__);
+	rc = platform_driver_probe(&imx134_sunny_p8n09f_platform_driver,
+		imx134_sunny_p8n09f_platform_probe);
+	if (!rc)
+		return rc;
+	pr_err("%s:%d rc %d\n", __func__, __LINE__, rc);
+	return i2c_add_driver(&imx134_sunny_p8n09f_i2c_driver);
+}
+
+static void __exit imx134_sunny_p8n09f_exit_module(void)
+{
+	pr_info("%s:%d\n", __func__, __LINE__);
+	if (imx134_sunny_p8n09f_s_ctrl.pdev) {
+		msm_sensor_free_sensor_data(&imx134_sunny_p8n09f_s_ctrl);
+		platform_driver_unregister(&imx134_sunny_p8n09f_platform_driver);
+	} else
+		i2c_del_driver(&imx134_sunny_p8n09f_i2c_driver);
+	return;
+}
+
+static struct msm_sensor_ctrl_t imx134_sunny_p8n09f_s_ctrl = {
+	.sensor_i2c_client = &imx134_sunny_p8n09f_sensor_i2c_client,
+	.power_setting_array.power_setting = imx134_sunny_p8n09f_power_setting,
+	.power_setting_array.size = ARRAY_SIZE(imx134_sunny_p8n09f_power_setting),
+	.msm_sensor_mutex = &imx134_sunny_p8n09f_mut,
+	.sensor_v4l2_subdev_info = imx134_sunny_p8n09f_subdev_info,
+	.sensor_v4l2_subdev_info_size = ARRAY_SIZE(imx134_sunny_p8n09f_subdev_info),
+};
+
+module_init(imx134_sunny_p8n09f_init_module);
+module_exit(imx134_sunny_p8n09f_exit_module);
+MODULE_DESCRIPTION("imx134_sunny_p8n09f");
+MODULE_LICENSE("GPL v2");
-- 
1.7.8.3

