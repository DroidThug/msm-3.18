From 29f1b3b843155b3e54989c132c43a1d485083509 Mon Sep 17 00:00:00 2001
From: lnxbuild <lnxbuild@localhost>
Date: Fri, 16 Aug 2013 10:35:06 +0800
Subject: [PATCH 04/11] add G-sensor lis3dh & kx023 driver

Change-Id: Ia49123b459f64282bfaa8d3e00ab01c3aa5e1c8e
---
 arch/arm/boot/dts/msm8610-qrd.dtsi |   27 +
 arch/arm/configs/msm8610_defconfig |    4 +-
 drivers/input/misc/Kconfig         |    9 +
 drivers/input/misc/Makefile        |    1 +
 drivers/input/misc/kionix_accel.c  | 2327 ++++++++++++++++++++++++++++++++++++
 drivers/input/misc/lis3dh_acc.c    |  154 +++-
 include/linux/input/kionix_accel.h |   86 ++
 7 files changed, 2591 insertions(+), 17 deletions(-)
 create mode 100644 drivers/input/misc/kionix_accel.c
 create mode 100644 include/linux/input/kionix_accel.h

diff --git a/arch/arm/boot/dts/msm8610-qrd.dtsi b/arch/arm/boot/dts/msm8610-qrd.dtsi
index 62db7ab..af78a24 100644
--- a/arch/arm/boot/dts/msm8610-qrd.dtsi
+++ b/arch/arm/boot/dts/msm8610-qrd.dtsi
@@ -158,6 +158,33 @@
 			kionix,negate-z;
 			kionix,res-12bit;
 		};
+
+	Kionix@1e {
+			compatible = "kionix,kionix_accel";
+			reg = <0x1e>;
+			kionix,min_interval = <5>;
+			kionix,poll_interval = <200>;
+			kionix,accel_direction = <1>;
+			kionix,accel_irq_use_drdy = <1>;
+			kionix,accel_g_range = <0>;
+			kionix,accel_res;
+		};
+
+	lis3dh@18 {
+			compatible = "ST Micro,lis3dh_acc";
+			reg = <0x18>;
+			vdd-supply = <&pm8110_l19>;
+			vddio-supply = <&pm8110_l14>;
+			lis3dh,min_interval = <10>;
+			lis3dh,poll_interval = <200>;
+			lis3dh,g_range = <2>;
+			lis3dh,axis_map_x = <1>;
+			lis3dh,axis_map_y = <0>;
+			lis3dh,axis_map_z = <2>;
+			lis3dh,negate_x = <0>;
+			lis3dh,negate_y = <0>;
+			lis3dh,negate_z = <1>;
+        };
 	};
 
 	flashlight {
diff --git a/arch/arm/configs/msm8610_defconfig b/arch/arm/configs/msm8610_defconfig
index 601850c..36e8cc5 100644
--- a/arch/arm/configs/msm8610_defconfig
+++ b/arch/arm/configs/msm8610_defconfig
@@ -269,6 +269,7 @@ CONFIG_I2C_QUP=y
 CONFIG_INPUT_MPU3050=y
 CONFIG_BMP18X=y
 CONFIG_BMP18X_I2C=y
+CONFIG_STM_LIS3DH=y
 CONFIG_MSM_BUSPM_DEV=m
 CONFIG_SPI=y
 CONFIG_SPI_QUP=y
@@ -458,7 +459,8 @@ CONFIG_CRYPTO_DEV_QCRYPTO=m
 CONFIG_CRYPTO_DEV_QCE=y
 CONFIG_CRYPTO_DEV_QCEDEV=m
 CONFIG_CRC_CCITT=y
-CONFIG_INPUT_KXTJ9=y
+# CONFIG_INPUT_KXTJ9 is not set
+CONFIG_INPUT_KIONIX_ACCEL=y
 CONFIG_MSM_RPM_RBCPR_STATS_V2_LOG=y
 CONFIG_SENSORS_STK3X1X=y
 CONFIG_SENSORS_MMA8X5X=y
diff --git a/drivers/input/misc/Kconfig b/drivers/input/misc/Kconfig
index aaa2fc8..7c12885 100644
--- a/drivers/input/misc/Kconfig
+++ b/drivers/input/misc/Kconfig
@@ -654,6 +654,15 @@ config STM_LIS3DH
           If you say yes here you get support for STMicroelectronics's
           acceleration sensors LIS3DH.
 
+config INPUT_KIONIX_ACCEL
+		tristate "KIONIX_ACCEL"
+		depends on I2C && SYSFS
+		help
+		  If you say yes here you get support for the Kionix digital 3-axis
+		  accelerometer.
+		  This driver can also be built as a module. If so, the module will be
+		  called kionix_accel.
+
 config BMP18X
        tristate "BMP18X digital pressure sensor"
        depends on (I2C ) && SYSFS
diff --git a/drivers/input/misc/Makefile b/drivers/input/misc/Makefile
index 445fba0..6a6df2f 100644
--- a/drivers/input/misc/Makefile
+++ b/drivers/input/misc/Makefile
@@ -65,3 +65,4 @@ obj-$(CONFIG_BMP18X)			+= bmp18x-core.o
 obj-$(CONFIG_BMP18X_I2C)		+= bmp18x-i2c.o
 obj-$(CONFIG_SENSORS_MMA8X5X)	  	+= mma8x5x.o
 obj-$(CONFIG_SENSORS_STK3X1X)		+= stk3x1x.o
+obj-$(CONFIG_INPUT_KIONIX_ACCEL)	+= kionix_accel.o
diff --git a/drivers/input/misc/kionix_accel.c b/drivers/input/misc/kionix_accel.c
new file mode 100644
index 0000000..82db4e8
--- /dev/null
+++ b/drivers/input/misc/kionix_accel.c
@@ -0,0 +1,2327 @@
+/* drivers/input/misc/kionix_accel.c - Kionix accelerometer driver
+ *
+ * Copyright (C) 2012 Kionix, Inc.
+ * Written by Kuching Tan <kuchingtan@kionix.com>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/delay.h>
+#include <linux/i2c.h>
+#include <linux/input.h>
+#include <linux/interrupt.h>
+#include <linux/workqueue.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/input/kionix_accel.h>
+#include <linux/version.h>
+#include <linux/proc_fs.h>
+#ifdef    CONFIG_HAS_EARLYSUSPEND
+#include <linux/earlysuspend.h>
+#endif /* CONFIG_HAS_EARLYSUSPEND */
+
+#ifdef CONFIG_OF
+#include <linux/of_gpio.h>
+#endif /* CONFIG_OF */
+
+/* Debug Message Flags */
+#define KIONIX_KMSG_ERR	1	/* Print kernel debug message for error */
+#define KIONIX_KMSG_INF	1	/* Print kernel debug message for info */
+
+#if KIONIX_KMSG_ERR
+#define KMSGERR(format, ...)	\
+		dev_err(format, ## __VA_ARGS__)
+#else
+#define KMSGERR(format, ...)
+#endif
+
+#if KIONIX_KMSG_INF
+#define KMSGINF(format, ...)	\
+		dev_info(format, ## __VA_ARGS__)
+#else
+#define KMSGINF(format, ...)
+#endif
+
+
+/******************************************************************************
+ * Accelerometer WHO_AM_I return value
+ *****************************************************************************/
+#define KIONIX_ACCEL_WHO_AM_I_KXTE9 		0x00
+#define KIONIX_ACCEL_WHO_AM_I_KXTF9 		0x01
+#define KIONIX_ACCEL_WHO_AM_I_KXTI9_1001 	0x04
+#define KIONIX_ACCEL_WHO_AM_I_KXTIK_1004 	0x05
+#define KIONIX_ACCEL_WHO_AM_I_KXTJ9_1005 	0x07
+#define KIONIX_ACCEL_WHO_AM_I_KXTJ9_1007 	0x08
+#define KIONIX_ACCEL_WHO_AM_I_KXCJ9_1008 	0x0A
+#define KIONIX_ACCEL_WHO_AM_I_KXTJ2_1009 	0x09
+#define KIONIX_ACCEL_WHO_AM_I_KXCJK_1013 	0x11
+#define KIONIX_ACCEL_WHO_AM_I_KX023		0x15
+
+/******************************************************************************
+ * Accelerometer Grouping
+ *****************************************************************************/
+#define KIONIX_ACCEL_GRP1	1	/* KXTE9 */
+#define KIONIX_ACCEL_GRP2	2	/* KXTF9/I9-1001/J9-1005 */
+#define KIONIX_ACCEL_GRP3	3	/* KXTIK-1004 */
+#define KIONIX_ACCEL_GRP4	4	/* KXTJ9-1007/KXCJ9-1008 */
+#define KIONIX_ACCEL_GRP5	5	/* KXTJ2-1009 */
+#define KIONIX_ACCEL_GRP6	6	/* KXCJK-1013 */
+#define KIONIX_ACCEL_GRP7	7	/* KX023 */
+
+/******************************************************************************
+ * Registers for All Accelerometer Group
+ *****************************************************************************/
+#define ACCEL_WHO_AM_I		0x0F
+
+/*****************************************************************************/
+/* Registers for Accelerometer Group 1 */
+/*****************************************************************************/
+/* Output Registers */
+#define ACCEL_GRP1_XOUT			0x12
+/* Control Registers */
+#define ACCEL_GRP1_CTRL_REG1	0x1B
+/* CTRL_REG1 */
+#define ACCEL_GRP1_PC1_OFF		0x7F
+#define ACCEL_GRP1_PC1_ON		(1 << 7)
+#define ACCEL_GRP1_ODR40		(3 << 3)
+#define ACCEL_GRP1_ODR10		(2 << 3)
+#define ACCEL_GRP1_ODR3			(1 << 3)
+#define ACCEL_GRP1_ODR1			(0 << 3)
+#define ACCEL_GRP1_ODR_MASK		(3 << 3)
+
+/*****************************************************************************/
+/* Registers for Accelerometer Group 2 & 3 */
+/*****************************************************************************/
+/* Output Registers */
+#define ACCEL_GRP2_XOUT_L		0x06
+/* Control Registers */
+#define ACCEL_GRP2_INT_REL		0x1A
+#define ACCEL_GRP2_CTRL_REG1	0x1B
+#define ACCEL_GRP2_INT_CTRL1	0x1E
+#define ACCEL_GRP2_DATA_CTRL	0x21
+/* CTRL_REG1 */
+#define ACCEL_GRP2_PC1_OFF		0x7F
+#define ACCEL_GRP2_PC1_ON		(1 << 7)
+#define ACCEL_GRP2_DRDYE		(1 << 5)
+#define ACCEL_GRP2_G_8G			(2 << 3)
+#define ACCEL_GRP2_G_4G			(1 << 3)
+#define ACCEL_GRP2_G_2G			(0 << 3)
+#define ACCEL_GRP2_G_MASK		(3 << 3)
+#define ACCEL_GRP2_RES_8BIT		(0 << 6)
+#define ACCEL_GRP2_RES_12BIT	(1 << 6)
+#define ACCEL_GRP2_RES_MASK		(1 << 6)
+/* INT_CTRL1 */
+#define ACCEL_GRP2_IEA			(1 << 4)
+#define ACCEL_GRP2_IEN			(1 << 5)
+/* DATA_CTRL_REG */
+#define ACCEL_GRP2_ODR12_5		0x00
+#define ACCEL_GRP2_ODR25		0x01
+#define ACCEL_GRP2_ODR50		0x02
+#define ACCEL_GRP2_ODR100		0x03
+#define ACCEL_GRP2_ODR200		0x04
+#define ACCEL_GRP2_ODR400		0x05
+#define ACCEL_GRP2_ODR800		0x06
+/*****************************************************************************/
+
+/*****************************************************************************/
+/* Registers for Accelerometer Group 4 & 5 & 6 */
+/*****************************************************************************/
+/* Output Registers */
+#define ACCEL_GRP4_XOUT_L		0x06
+/* Control Registers */
+#define ACCEL_GRP4_INT_REL		0x1A
+#define ACCEL_GRP4_CTRL_REG1	0x1B
+#define ACCEL_GRP4_INT_CTRL1	0x1E
+#define ACCEL_GRP4_DATA_CTRL	0x21
+/* CTRL_REG1 */
+#define ACCEL_GRP4_PC1_OFF		0x7F
+#define ACCEL_GRP4_PC1_ON		(1 << 7)
+#define ACCEL_GRP4_DRDYE		(1 << 5)
+#define ACCEL_GRP4_G_8G			(2 << 3)
+#define ACCEL_GRP4_G_4G			(1 << 3)
+#define ACCEL_GRP4_G_2G			(0 << 3)
+#define ACCEL_GRP4_G_MASK		(3 << 3)
+#define ACCEL_GRP4_RES_8BIT		(0 << 6)
+#define ACCEL_GRP4_RES_12BIT	(1 << 6)
+#define ACCEL_GRP4_RES_MASK		(1 << 6)
+/* INT_CTRL1 */
+#define ACCEL_GRP4_IEA			(1 << 4)
+#define ACCEL_GRP4_IEN			(1 << 5)
+/* DATA_CTRL_REG */
+#define ACCEL_GRP4_ODR0_781		0x08
+#define ACCEL_GRP4_ODR1_563		0x09
+#define ACCEL_GRP4_ODR3_125		0x0A
+#define ACCEL_GRP4_ODR6_25		0x0B
+#define ACCEL_GRP4_ODR12_5		0x00
+#define ACCEL_GRP4_ODR25		0x01
+#define ACCEL_GRP4_ODR50		0x02
+#define ACCEL_GRP4_ODR100		0x03
+#define ACCEL_GRP4_ODR200		0x04
+#define ACCEL_GRP4_ODR400		0x05
+#define ACCEL_GRP4_ODR800		0x06
+#define ACCEL_GRP4_ODR1600		0x07
+/*****************************************************************************/
+
+/*****************************************************************************/
+/* Registers for Accelerometer Group 7 */
+/*****************************************************************************/
+/* Output Registers */
+#define ACCEL_GRP7_XOUT_L		0x06
+/* Control Registers */
+#define ACCEL_GRP7_INT_REL		0x17
+#define ACCEL_GRP7_CTRL_REG1	0x18
+#define ACCEL_GRP7_INT_CTRL1	0x1C
+#define ACCEL_GRP7_DATA_CTRL	0x1B	/* ODCNTL */
+/* CTRL_REG1 */
+#define ACCEL_GRP7_PC1_OFF		0x7F
+#define ACCEL_GRP7_PC1_ON		(1 << 7)
+#define ACCEL_GRP7_DRDYE		(1 << 5)
+#define ACCEL_GRP7_G_8G			(2 << 3)
+#define ACCEL_GRP7_G_4G			(1 << 3)
+#define ACCEL_GRP7_G_2G			(0 << 3)
+#define ACCEL_GRP7_G_MASK		(3 << 3)
+#define ACCEL_GRP7_RES_8BIT		(0 << 6)
+#define ACCEL_GRP7_RES_16BIT	(1 << 6)
+#define ACCEL_GRP7_RES_MASK		(1 << 6)
+/* INT_CTRL1 */
+#define ACCEL_GRP7_IEA			(1 << 4)
+#define ACCEL_GRP7_IEN			(1 << 5)
+/* DATA_CTRL_REG */
+#define ACCEL_GRP7_ODR0_781		0x08
+#define ACCEL_GRP7_ODR1_563		0x09
+#define ACCEL_GRP7_ODR3_125		0x0A
+#define ACCEL_GRP7_ODR6_25		0x0B
+#define ACCEL_GRP7_ODR12_5		0x00
+#define ACCEL_GRP7_ODR25		0x01
+#define ACCEL_GRP7_ODR50		0x02
+#define ACCEL_GRP7_ODR100		0x03
+#define ACCEL_GRP7_ODR200		0x04
+#define ACCEL_GRP7_ODR400		0x05
+#define ACCEL_GRP7_ODR800		0x06
+#define ACCEL_GRP7_ODR1600		0x07
+/*****************************************************************************/
+
+/* Input Event Constants */
+#define ACCEL_G_MAX			8096
+#define ACCEL_FUZZ			3
+#define ACCEL_FLAT			3
+/* I2C Retry Constants */
+#define KIONIX_I2C_RETRY_COUNT		10 	/* Number of times to retry i2c */
+#define KIONIX_I2C_RETRY_TIMEOUT	1	/* Timeout between retry (miliseconds) */
+
+/* Earlysuspend Contants */
+#define KIONIX_ACCEL_EARLYSUSPEND_TIMEOUT	5000	/* Timeout (miliseconds) */
+
+/*
+ * The following table lists the maximum appropriate poll interval for each
+ * available output data rate (ODR).
+ */
+static const struct {
+	unsigned int cutoff;
+	u8 mask;
+} kionix_accel_grp1_odr_table[] = {
+	{ 100,	ACCEL_GRP1_ODR40 },
+	{ 334,	ACCEL_GRP1_ODR10 },
+	{ 1000,	ACCEL_GRP1_ODR3  },
+	{ 0,	ACCEL_GRP1_ODR1  },
+};
+
+static const struct {
+	unsigned int cutoff;
+	u8 mask;
+} kionix_accel_grp2_odr_table[] = {
+	{ 3,	ACCEL_GRP2_ODR800 },
+	{ 5,	ACCEL_GRP2_ODR400 },
+	{ 10,	ACCEL_GRP2_ODR200 },
+	{ 20,	ACCEL_GRP2_ODR100 },
+	{ 40,	ACCEL_GRP2_ODR50  },
+	{ 80,	ACCEL_GRP2_ODR25  },
+	{ 0,	ACCEL_GRP2_ODR12_5},
+};
+
+static const struct {
+	unsigned int cutoff;
+	u8 mask;
+} kionix_accel_grp4_odr_table[] = {
+	{ 2,	ACCEL_GRP4_ODR1600 },
+	{ 3,	ACCEL_GRP4_ODR800 },
+	{ 5,	ACCEL_GRP4_ODR400 },
+	{ 10,	ACCEL_GRP4_ODR200 },
+	{ 20,	ACCEL_GRP4_ODR100 },
+	{ 40,	ACCEL_GRP4_ODR50  },
+	{ 80,	ACCEL_GRP4_ODR25  },
+	{ 160,	ACCEL_GRP4_ODR12_5},
+	{ 320,	ACCEL_GRP4_ODR6_25},
+	{ 640,	ACCEL_GRP4_ODR3_125},
+	{ 1280,	ACCEL_GRP4_ODR1_563},
+	{ 0,	ACCEL_GRP4_ODR0_781},
+};
+
+static const struct {
+	unsigned int cutoff;
+	u8 mask;
+} kionix_accel_grp7_odr_table[] = {
+	{ 2,	ACCEL_GRP7_ODR1600 },
+	{ 3,	ACCEL_GRP7_ODR800 },
+	{ 5,	ACCEL_GRP7_ODR400 },
+	{ 10,	ACCEL_GRP7_ODR200 },
+	{ 20,	ACCEL_GRP7_ODR100 },
+	{ 40,	ACCEL_GRP7_ODR50  },
+	{ 80,	ACCEL_GRP7_ODR25  },
+	{ 160,	ACCEL_GRP7_ODR12_5},
+	{ 320,	ACCEL_GRP7_ODR6_25},
+	{ 640,	ACCEL_GRP7_ODR3_125},
+	{ 1280,	ACCEL_GRP7_ODR1_563},
+	{ 0,	ACCEL_GRP7_ODR0_781},
+};
+
+enum {
+	accel_grp1_ctrl_reg1 = 0,
+	accel_grp1_regs_count,
+};
+
+enum {
+	accel_grp2_ctrl_reg1 = 0,
+	accel_grp2_data_ctrl,
+	accel_grp2_int_ctrl,
+	accel_grp2_regs_count,
+};
+
+enum {
+	accel_grp4_ctrl_reg1 = 0,
+	accel_grp4_data_ctrl,
+	accel_grp4_int_ctrl,
+	accel_grp4_regs_count,
+};
+
+enum {
+	accel_grp7_ctrl_reg1 = 0,
+	accel_grp7_data_ctrl,
+	accel_grp7_int_ctrl,
+	accel_grp7_regs_count,
+};
+
+struct kionix_accel_driver {
+	struct i2c_client *client;
+	struct kionix_accel_platform_data accel_pdata;
+	struct input_dev *input_dev;
+	struct delayed_work accel_work;
+	struct workqueue_struct *accel_workqueue;
+	wait_queue_head_t wqh_suspend;
+
+	int accel_data[3];
+	int accel_cali[3];
+	u8 axis_map_x;
+	u8 axis_map_y;
+	u8 axis_map_z;
+	bool negate_x;
+	bool negate_y;
+	bool negate_z;
+	u8 shift;
+
+	unsigned int poll_interval;
+	unsigned int poll_delay;
+	unsigned int accel_group;
+	u8 *accel_registers;
+
+	atomic_t accel_suspended;
+	atomic_t accel_suspend_continue;
+	atomic_t accel_enabled;
+	atomic_t accel_input_event;
+	atomic_t accel_enable_resume;
+	struct mutex mutex_earlysuspend;
+	struct mutex mutex_resume;
+	rwlock_t rwlock_accel_data;
+
+	bool accel_drdy;
+
+	/* Function callback */
+	void (*kionix_accel_report_accel_data)(struct kionix_accel_driver *acceld);
+	int (*kionix_accel_update_odr)(struct kionix_accel_driver *acceld, unsigned int poll_interval);
+	int (*kionix_accel_power_on_init)(struct kionix_accel_driver *acceld);
+	int (*kionix_accel_operate)(struct kionix_accel_driver *acceld);
+	int (*kionix_accel_standby)(struct kionix_accel_driver *acceld);
+
+#ifdef    CONFIG_HAS_EARLYSUSPEND
+	struct early_suspend early_suspend;
+#endif /* CONFIG_HAS_EARLYSUSPEND */
+};
+
+static int kionix_i2c_read(struct i2c_client *client, u8 addr, u8 *data, int len)
+{
+	struct i2c_msg msgs[] = {
+		{
+			.addr = client->addr,
+			.flags = client->flags,
+			.len = 1,
+			.buf = &addr,
+		},
+		{
+			.addr = client->addr,
+			.flags = client->flags | I2C_M_RD,
+			.len = len,
+			.buf = data,
+		},
+	};
+
+	return i2c_transfer(client->adapter, msgs, 2);
+}
+
+static int kionix_strtok(const char *buf, size_t count, char **token, const int token_nr)
+{
+	char *buf2 = (char *)kzalloc((count + 1) * sizeof(char), GFP_KERNEL);
+	char **token2 = token;
+	unsigned int num_ptr = 0, num_nr = 0, num_neg = 0;
+	int i = 0, start = 0, end = (int)count;
+
+	strcpy(buf2, buf);
+
+	/* We need to breakup the string into separate chunks in order for kstrtoint
+	 * or strict_strtol to parse them without returning an error. Stop when the end of
+	 * the string is reached or when enough value is read from the string */
+	while((start < end) && (i < token_nr)) {
+		/* We found a negative sign */
+		if(*(buf2 + start) == '-') {
+			/* Previous char(s) are numeric, so we store their value first before proceed */
+			if(num_nr > 0) {
+				/* If there is a pending negative sign, we adjust the variables to account for it */
+				if(num_neg) {
+					num_ptr--;
+					num_nr++;
+				}
+				*token2 = (char *)kzalloc((num_nr + 2) * sizeof(char), GFP_KERNEL);
+				strncpy(*token2, (const char *)(buf2 + num_ptr), (size_t) num_nr);
+				*(*token2+num_nr) = '\n';
+				i++;
+				token2++;
+				/* Reset */
+				num_ptr = num_nr = 0;
+			}
+			/* This indicates that there is a pending negative sign in the string */
+			num_neg = 1;
+		}
+		/* We found a numeric */
+		else if((*(buf2 + start) >= '0') && (*(buf2 + start) <= '9')) {
+			/* If the previous char(s) are not numeric, set num_ptr to current char */
+			if(num_nr < 1)
+				num_ptr = start;
+			num_nr++;
+		}
+		/* We found an unwanted character */
+		else {
+			/* Previous char(s) are numeric, so we store their value first before proceed */
+			if(num_nr > 0) {
+				if(num_neg) {
+					num_ptr--;
+					num_nr++;
+				}
+				*token2 = (char *)kzalloc((num_nr + 2) * sizeof(char), GFP_KERNEL);
+				strncpy(*token2, (const char *)(buf2 + num_ptr), (size_t) num_nr);
+				*(*token2+num_nr) = '\n';
+				i++;
+				token2++;
+			}
+			/* Reset all the variables to start afresh */
+			num_ptr = num_nr = num_neg = 0;
+		}
+		start++;
+	}
+
+	kfree(buf2);
+
+	return (i == token_nr) ? token_nr : -1;
+}
+
+static int kionix_accel_grp1_power_on_init(struct kionix_accel_driver *acceld)
+{
+	int err;
+
+	if(atomic_read(&acceld->accel_enabled) > 0) {
+		err = i2c_smbus_write_byte_data(acceld->client,
+						ACCEL_GRP1_CTRL_REG1, acceld->accel_registers[accel_grp1_ctrl_reg1] | ACCEL_GRP1_PC1_ON);
+		if (err < 0)
+			return err;
+	}
+	else {
+		err = i2c_smbus_write_byte_data(acceld->client,
+						ACCEL_GRP1_CTRL_REG1, acceld->accel_registers[accel_grp1_ctrl_reg1]);
+		if (err < 0)
+			return err;
+	}
+
+	return 0;
+}
+
+static int kionix_accel_grp1_operate(struct kionix_accel_driver *acceld)
+{
+	int err;
+
+	err = i2c_smbus_write_byte_data(acceld->client, ACCEL_GRP1_CTRL_REG1, \
+			acceld->accel_registers[accel_grp2_ctrl_reg1] | ACCEL_GRP1_PC1_ON);
+	if (err < 0)
+		return err;
+
+	queue_delayed_work(acceld->accel_workqueue, &acceld->accel_work, 0);
+
+	return 0;
+}
+
+static int kionix_accel_grp1_standby(struct kionix_accel_driver *acceld)
+{
+	int err;
+
+	cancel_delayed_work_sync(&acceld->accel_work);
+
+	err = i2c_smbus_write_byte_data(acceld->client, ACCEL_GRP1_CTRL_REG1, 0);
+	if (err < 0)
+		return err;
+
+	return 0;
+}
+
+static void kionix_accel_grp1_report_accel_data(struct kionix_accel_driver *acceld)
+{
+	u8 accel_data[3];
+	s16 x, y, z;
+	int err;
+	struct input_dev *input_dev = acceld->input_dev;
+	int loop = KIONIX_I2C_RETRY_COUNT;
+
+	if(atomic_read(&acceld->accel_enabled) > 0) {
+		if(atomic_read(&acceld->accel_enable_resume) > 0)
+		{
+			while(loop) {
+				mutex_lock(&input_dev->mutex);
+				err = kionix_i2c_read(acceld->client, ACCEL_GRP1_XOUT, accel_data, 6);
+				mutex_unlock(&input_dev->mutex);
+				if(err < 0){
+					loop--;
+					mdelay(KIONIX_I2C_RETRY_TIMEOUT);
+				}
+				else
+					loop = 0;
+			}
+			if (err < 0) {
+				KMSGERR(&acceld->client->dev, "%s: read data output error = %d\n", __func__, err);
+			}
+			else {
+				write_lock(&acceld->rwlock_accel_data);
+
+				x = ((s16) le16_to_cpu(((s16)(accel_data[acceld->axis_map_x] >> 2)) - 32)) << 6;
+				y = ((s16) le16_to_cpu(((s16)(accel_data[acceld->axis_map_y] >> 2)) - 32)) << 6;
+				z = ((s16) le16_to_cpu(((s16)(accel_data[acceld->axis_map_z] >> 2)) - 32)) << 6;
+
+				acceld->accel_data[acceld->axis_map_x] = (acceld->negate_x ? -x : x) + acceld->accel_cali[acceld->axis_map_x];
+				acceld->accel_data[acceld->axis_map_y] = (acceld->negate_y ? -y : y) + acceld->accel_cali[acceld->axis_map_y];
+				acceld->accel_data[acceld->axis_map_z] = (acceld->negate_z ? -z : z) + acceld->accel_cali[acceld->axis_map_z];
+
+				if(atomic_read(&acceld->accel_input_event) > 0) {
+					input_report_abs(acceld->input_dev, ABS_X, acceld->accel_data[acceld->axis_map_x]);
+					input_report_abs(acceld->input_dev, ABS_Y, acceld->accel_data[acceld->axis_map_y]);
+					input_report_abs(acceld->input_dev, ABS_Z, acceld->accel_data[acceld->axis_map_z]);
+					input_sync(acceld->input_dev);
+				}
+
+				write_unlock(&acceld->rwlock_accel_data);
+			}
+		}
+		else
+		{
+			atomic_inc(&acceld->accel_enable_resume);
+		}
+	}
+}
+
+static int kionix_accel_grp1_update_odr(struct kionix_accel_driver *acceld, unsigned int poll_interval)
+{
+	int err;
+	int i;
+	u8 odr;
+
+	/* Use the lowest ODR that can support the requested poll interval */
+	for (i = 0; i < ARRAY_SIZE(kionix_accel_grp1_odr_table); i++) {
+		odr = kionix_accel_grp1_odr_table[i].mask;
+		if (poll_interval < kionix_accel_grp1_odr_table[i].cutoff)
+			break;
+	}
+
+	/* Do not need to update CTRL_REG1 register if the ODR is not changed */
+	if((acceld->accel_registers[accel_grp1_ctrl_reg1] & ACCEL_GRP1_ODR_MASK) == odr)
+		return 0;
+	else {
+		acceld->accel_registers[accel_grp1_ctrl_reg1] &= ~ACCEL_GRP1_ODR_MASK;
+		acceld->accel_registers[accel_grp1_ctrl_reg1] |= odr;
+	}
+
+	/* Do not need to update CTRL_REG1 register if the sensor is not currently turn on */
+	if(atomic_read(&acceld->accel_enabled) > 0) {
+		err = i2c_smbus_write_byte_data(acceld->client, ACCEL_GRP1_CTRL_REG1, \
+				acceld->accel_registers[accel_grp1_ctrl_reg1] | ACCEL_GRP1_PC1_ON);
+		if (err < 0)
+			return err;
+	}
+
+	return 0;
+}
+
+static int kionix_accel_grp2_power_on_init(struct kionix_accel_driver *acceld)
+{
+	int err;
+
+	/* ensure that PC1 is cleared before updating control registers */
+	err = i2c_smbus_write_byte_data(acceld->client,
+					ACCEL_GRP2_CTRL_REG1, 0);
+	if (err < 0)
+		return err;
+
+	err = i2c_smbus_write_byte_data(acceld->client,
+					ACCEL_GRP2_DATA_CTRL, acceld->accel_registers[accel_grp2_data_ctrl]);
+	if (err < 0)
+		return err;
+
+	/* only write INT_CTRL_REG1 if in irq mode */
+	if (acceld->client->irq) {
+		err = i2c_smbus_write_byte_data(acceld->client,
+						ACCEL_GRP2_INT_CTRL1, acceld->accel_registers[accel_grp2_int_ctrl]);
+		if (err < 0)
+			return err;
+	}
+
+	if(atomic_read(&acceld->accel_enabled) > 0) {
+		err = i2c_smbus_write_byte_data(acceld->client,
+						ACCEL_GRP2_CTRL_REG1, acceld->accel_registers[accel_grp2_ctrl_reg1] | ACCEL_GRP2_PC1_ON);
+		if (err < 0)
+			return err;
+	}
+	else {
+		err = i2c_smbus_write_byte_data(acceld->client,
+						ACCEL_GRP2_CTRL_REG1, acceld->accel_registers[accel_grp2_ctrl_reg1]);
+		if (err < 0)
+			return err;
+	}
+
+	return 0;
+}
+
+static int kionix_accel_grp2_operate(struct kionix_accel_driver *acceld)
+{
+	int err;
+
+	err = i2c_smbus_write_byte_data(acceld->client, ACCEL_GRP2_CTRL_REG1, \
+			acceld->accel_registers[accel_grp2_ctrl_reg1] | ACCEL_GRP2_PC1_ON);
+	if (err < 0)
+		return err;
+
+	if(acceld->accel_drdy == 0)
+		queue_delayed_work(acceld->accel_workqueue, &acceld->accel_work, 0);
+
+	return 0;
+}
+
+static int kionix_accel_grp2_standby(struct kionix_accel_driver *acceld)
+{
+	int err;
+
+	if(acceld->accel_drdy == 0)
+		cancel_delayed_work_sync(&acceld->accel_work);
+
+	err = i2c_smbus_write_byte_data(acceld->client, ACCEL_GRP2_CTRL_REG1, 0);
+	if (err < 0)
+		return err;
+
+	return 0;
+}
+
+static void kionix_accel_grp2_report_accel_data(struct kionix_accel_driver *acceld)
+{
+	struct { union {
+		s16 accel_data_s16[3];
+		s8	accel_data_s8[6];
+	}; } accel_data;
+	s16 x, y, z;
+	int err;
+	struct input_dev *input_dev = acceld->input_dev;
+	int loop;
+
+	/* Only read the output registers if enabled */
+	if(atomic_read(&acceld->accel_enabled) > 0) {
+		if(atomic_read(&acceld->accel_enable_resume) > 0)
+		{
+			loop = KIONIX_I2C_RETRY_COUNT;
+			while(loop) {
+				mutex_lock(&input_dev->mutex);
+				err = kionix_i2c_read(acceld->client, ACCEL_GRP2_XOUT_L, (u8 *)accel_data.accel_data_s16, 6);
+				mutex_unlock(&input_dev->mutex);
+				if(err < 0){
+					loop--;
+					mdelay(KIONIX_I2C_RETRY_TIMEOUT);
+				}
+				else
+					loop = 0;
+			}
+			if (err < 0) {
+				KMSGERR(&acceld->client->dev, "%s: read data output error = %d\n", __func__, err);
+			}
+			else {
+				write_lock(&acceld->rwlock_accel_data);
+
+				x = ((s16) le16_to_cpu(accel_data.accel_data_s16[acceld->axis_map_x])) >> acceld->shift;
+				y = ((s16) le16_to_cpu(accel_data.accel_data_s16[acceld->axis_map_y])) >> acceld->shift;
+				z = ((s16) le16_to_cpu(accel_data.accel_data_s16[acceld->axis_map_z])) >> acceld->shift;
+
+				acceld->accel_data[acceld->axis_map_x] = (acceld->negate_x ? -x : x) + acceld->accel_cali[acceld->axis_map_x];
+				acceld->accel_data[acceld->axis_map_y] = (acceld->negate_y ? -y : y) + acceld->accel_cali[acceld->axis_map_y];
+				acceld->accel_data[acceld->axis_map_z] = (acceld->negate_z ? -z : z) + acceld->accel_cali[acceld->axis_map_z];
+
+				if(atomic_read(&acceld->accel_input_event) > 0) {
+					input_report_abs(acceld->input_dev, ABS_X, acceld->accel_data[acceld->axis_map_x]);
+					input_report_abs(acceld->input_dev, ABS_Y, acceld->accel_data[acceld->axis_map_y]);
+					input_report_abs(acceld->input_dev, ABS_Z, acceld->accel_data[acceld->axis_map_z]);
+					input_sync(acceld->input_dev);
+				}
+
+				write_unlock(&acceld->rwlock_accel_data);
+			}
+		}
+		else
+		{
+			atomic_inc(&acceld->accel_enable_resume);
+		}
+	}
+
+	/* Clear the interrupt if using drdy */
+	if(acceld->accel_drdy == 1) {
+		loop = KIONIX_I2C_RETRY_COUNT;
+		while(loop) {
+			err = i2c_smbus_read_byte_data(acceld->client, ACCEL_GRP2_INT_REL);
+			if(err < 0){
+				loop--;
+				mdelay(KIONIX_I2C_RETRY_TIMEOUT);
+			}
+			else
+				loop = 0;
+		}
+		if (err < 0)
+			KMSGERR(&acceld->client->dev, "%s: clear interrupt error = %d\n", __func__, err);
+	}
+}
+
+static void kionix_accel_grp2_update_g_range(struct kionix_accel_driver *acceld)
+{
+	acceld->accel_registers[accel_grp2_ctrl_reg1] &= ~ACCEL_GRP2_G_MASK;
+
+	switch (acceld->accel_pdata.accel_g_range) {
+		case KIONIX_ACCEL_G_8G:
+		case KIONIX_ACCEL_G_6G:
+			acceld->shift = 2;
+			acceld->accel_registers[accel_grp2_ctrl_reg1] |= ACCEL_GRP2_G_8G;
+			break;
+		case KIONIX_ACCEL_G_4G:
+			acceld->shift = 3;
+			acceld->accel_registers[accel_grp2_ctrl_reg1] |= ACCEL_GRP2_G_4G;
+			break;
+		case KIONIX_ACCEL_G_2G:
+		default:
+			acceld->shift = 4;
+			acceld->accel_registers[accel_grp2_ctrl_reg1] |= ACCEL_GRP2_G_2G;
+			break;
+	}
+
+	return;
+}
+
+static int kionix_accel_grp2_update_odr(struct kionix_accel_driver *acceld, unsigned int poll_interval)
+{
+	int err;
+	int i;
+	u8 odr;
+
+	/* Use the lowest ODR that can support the requested poll interval */
+	for (i = 0; i < ARRAY_SIZE(kionix_accel_grp2_odr_table); i++) {
+		odr = kionix_accel_grp2_odr_table[i].mask;
+		if (poll_interval < kionix_accel_grp2_odr_table[i].cutoff)
+			break;
+	}
+
+	/* Do not need to update DATA_CTRL_REG register if the ODR is not changed */
+	if(acceld->accel_registers[accel_grp2_data_ctrl] == odr)
+		return 0;
+	else
+		acceld->accel_registers[accel_grp2_data_ctrl] = odr;
+
+	/* Do not need to update DATA_CTRL_REG register if the sensor is not currently turn on */
+	if(atomic_read(&acceld->accel_enabled) > 0) {
+		err = i2c_smbus_write_byte_data(acceld->client, ACCEL_GRP2_CTRL_REG1, 0);
+		if (err < 0)
+			return err;
+
+		err = i2c_smbus_write_byte_data(acceld->client, ACCEL_GRP2_DATA_CTRL, acceld->accel_registers[accel_grp2_data_ctrl]);
+		if (err < 0)
+			return err;
+
+		err = i2c_smbus_write_byte_data(acceld->client, ACCEL_GRP2_CTRL_REG1, acceld->accel_registers[accel_grp2_ctrl_reg1] | ACCEL_GRP2_PC1_ON);
+		if (err < 0)
+			return err;
+	}
+
+	return 0;
+}
+
+static int kionix_accel_grp4_power_on_init(struct kionix_accel_driver *acceld)
+{
+	int err;
+
+	/* ensure that PC1 is cleared before updating control registers */
+	err = i2c_smbus_write_byte_data(acceld->client,
+					ACCEL_GRP4_CTRL_REG1, 0);
+	if (err < 0)
+		return err;
+
+	err = i2c_smbus_write_byte_data(acceld->client,
+					ACCEL_GRP4_DATA_CTRL, acceld->accel_registers[accel_grp4_data_ctrl]);
+	if (err < 0)
+		return err;
+
+	/* only write INT_CTRL_REG1 if in irq mode */
+	if (acceld->client->irq) {
+		err = i2c_smbus_write_byte_data(acceld->client,
+						ACCEL_GRP4_INT_CTRL1, acceld->accel_registers[accel_grp4_int_ctrl]);
+		if (err < 0)
+			return err;
+	}
+
+	if(atomic_read(&acceld->accel_enabled) > 0) {
+		err = i2c_smbus_write_byte_data(acceld->client,
+						ACCEL_GRP4_CTRL_REG1, acceld->accel_registers[accel_grp4_ctrl_reg1] | ACCEL_GRP4_PC1_ON);
+		if (err < 0)
+			return err;
+	}
+	else {
+		err = i2c_smbus_write_byte_data(acceld->client,
+						ACCEL_GRP4_CTRL_REG1, acceld->accel_registers[accel_grp4_ctrl_reg1]);
+		if (err < 0)
+			return err;
+	}
+
+	return 0;
+}
+
+static int kionix_accel_grp4_operate(struct kionix_accel_driver *acceld)
+{
+	int err;
+
+	err = i2c_smbus_write_byte_data(acceld->client, ACCEL_GRP4_CTRL_REG1, \
+			acceld->accel_registers[accel_grp4_ctrl_reg1] | ACCEL_GRP4_PC1_ON);
+	if (err < 0)
+		return err;
+
+	if(acceld->accel_drdy == 0)
+		queue_delayed_work(acceld->accel_workqueue, &acceld->accel_work, 0);
+
+	return 0;
+}
+
+static int kionix_accel_grp4_standby(struct kionix_accel_driver *acceld)
+{
+	int err;
+
+	if(acceld->accel_drdy == 0)
+		cancel_delayed_work_sync(&acceld->accel_work);
+
+	err = i2c_smbus_write_byte_data(acceld->client, ACCEL_GRP4_CTRL_REG1, 0);
+	if (err < 0)
+		return err;
+
+	return 0;
+}
+
+static void kionix_accel_grp4_report_accel_data(struct kionix_accel_driver *acceld)
+{
+	struct { union {
+		s16 accel_data_s16[3];
+		s8	accel_data_s8[6];
+	}; } accel_data;
+	s16 x, y, z;
+	int err;
+	struct input_dev *input_dev = acceld->input_dev;
+	int loop;
+
+	/* Only read the output registers if enabled */
+	if(atomic_read(&acceld->accel_enabled) > 0) {
+		if(atomic_read(&acceld->accel_enable_resume) > 0)
+		{
+			loop = KIONIX_I2C_RETRY_COUNT;
+			while(loop) {
+				mutex_lock(&input_dev->mutex);
+				err = kionix_i2c_read(acceld->client, ACCEL_GRP4_XOUT_L, (u8 *)accel_data.accel_data_s16, 6);
+				mutex_unlock(&input_dev->mutex);
+				if(err < 0){
+					loop--;
+					mdelay(KIONIX_I2C_RETRY_TIMEOUT);
+				}
+				else
+					loop = 0;
+			}
+			if (err < 0) {
+				KMSGERR(&acceld->client->dev, "%s: read data output error = %d\n", __func__, err);
+			}
+			else {
+				write_lock(&acceld->rwlock_accel_data);
+
+				x = ((s16) le16_to_cpu(accel_data.accel_data_s16[acceld->axis_map_x])) >> acceld->shift;
+				y = ((s16) le16_to_cpu(accel_data.accel_data_s16[acceld->axis_map_y])) >> acceld->shift;
+				z = ((s16) le16_to_cpu(accel_data.accel_data_s16[acceld->axis_map_z])) >> acceld->shift;
+
+				acceld->accel_data[acceld->axis_map_x] = (acceld->negate_x ? -x : x) + acceld->accel_cali[acceld->axis_map_x];
+				acceld->accel_data[acceld->axis_map_y] = (acceld->negate_y ? -y : y) + acceld->accel_cali[acceld->axis_map_y];
+				acceld->accel_data[acceld->axis_map_z] = (acceld->negate_z ? -z : z) + acceld->accel_cali[acceld->axis_map_z];
+
+				if(atomic_read(&acceld->accel_input_event) > 0) {
+					input_report_abs(acceld->input_dev, ABS_X, acceld->accel_data[acceld->axis_map_x]);
+					input_report_abs(acceld->input_dev, ABS_Y, acceld->accel_data[acceld->axis_map_y]);
+					input_report_abs(acceld->input_dev, ABS_Z, acceld->accel_data[acceld->axis_map_z]);
+					input_sync(acceld->input_dev);
+				}
+
+				write_unlock(&acceld->rwlock_accel_data);
+			}
+		}
+		else
+		{
+			atomic_inc(&acceld->accel_enable_resume);
+		}
+	}
+
+	/* Clear the interrupt if using drdy */
+	if(acceld->accel_drdy == 1) {
+		loop = KIONIX_I2C_RETRY_COUNT;
+		while(loop) {
+			err = i2c_smbus_read_byte_data(acceld->client, ACCEL_GRP4_INT_REL);
+			if(err < 0){
+				loop--;
+				mdelay(KIONIX_I2C_RETRY_TIMEOUT);
+			}
+			else
+				loop = 0;
+		}
+		if (err < 0)
+			KMSGERR(&acceld->client->dev, "%s: clear interrupt error = %d\n", __func__, err);
+	}
+}
+
+static void kionix_accel_grp4_update_g_range(struct kionix_accel_driver *acceld)
+{
+	acceld->accel_registers[accel_grp4_ctrl_reg1] &= ~ACCEL_GRP4_G_MASK;
+
+	switch (acceld->accel_pdata.accel_g_range) {
+		case KIONIX_ACCEL_G_8G:
+		case KIONIX_ACCEL_G_6G:
+			acceld->shift = 2;
+			acceld->accel_registers[accel_grp4_ctrl_reg1] |= ACCEL_GRP4_G_8G;
+			break;
+		case KIONIX_ACCEL_G_4G:
+			acceld->shift = 3;
+			acceld->accel_registers[accel_grp4_ctrl_reg1] |= ACCEL_GRP4_G_4G;
+			break;
+		case KIONIX_ACCEL_G_2G:
+		default:
+			acceld->shift = 4;
+			acceld->accel_registers[accel_grp4_ctrl_reg1] |= ACCEL_GRP4_G_2G;
+			break;
+	}
+
+	return;
+}
+
+static int kionix_accel_grp4_update_odr(struct kionix_accel_driver *acceld, unsigned int poll_interval)
+{
+	int err;
+	int i;
+	u8 odr;
+
+	/* Use the lowest ODR that can support the requested poll interval */
+	for (i = 0; i < ARRAY_SIZE(kionix_accel_grp4_odr_table); i++) {
+		odr = kionix_accel_grp4_odr_table[i].mask;
+		if (poll_interval < kionix_accel_grp4_odr_table[i].cutoff)
+			break;
+	}
+
+	/* Do not need to update DATA_CTRL_REG register if the ODR is not changed */
+	if(acceld->accel_registers[accel_grp4_data_ctrl] == odr)
+		return 0;
+	else
+		acceld->accel_registers[accel_grp4_data_ctrl] = odr;
+
+	/* Do not need to update DATA_CTRL_REG register if the sensor is not currently turn on */
+	if(atomic_read(&acceld->accel_enabled) > 0) {
+		err = i2c_smbus_write_byte_data(acceld->client, ACCEL_GRP4_CTRL_REG1, 0);
+		if (err < 0)
+			return err;
+
+		err = i2c_smbus_write_byte_data(acceld->client, ACCEL_GRP4_DATA_CTRL, acceld->accel_registers[accel_grp4_data_ctrl]);
+		if (err < 0)
+			return err;
+
+		err = i2c_smbus_write_byte_data(acceld->client, ACCEL_GRP4_CTRL_REG1, acceld->accel_registers[accel_grp4_ctrl_reg1] | ACCEL_GRP4_PC1_ON);
+		if (err < 0)
+			return err;
+		//#############
+		err = i2c_smbus_read_byte_data(acceld->client, ACCEL_GRP4_DATA_CTRL);
+		if (err < 0)
+			return err;
+		switch(err) {
+			case ACCEL_GRP4_ODR0_781:
+				dev_info(&acceld->client->dev, "ODR = 0.781 Hz\n");
+				break;
+			case ACCEL_GRP4_ODR1_563:
+				dev_info(&acceld->client->dev, "ODR = 1.563 Hz\n");
+				break;
+			case ACCEL_GRP4_ODR3_125:
+				dev_info(&acceld->client->dev, "ODR = 3.125 Hz\n");
+				break;
+			case ACCEL_GRP4_ODR6_25:
+				dev_info(&acceld->client->dev, "ODR = 6.25 Hz\n");
+				break;
+			case ACCEL_GRP4_ODR12_5:
+				dev_info(&acceld->client->dev, "ODR = 12.5 Hz\n");
+				break;
+			case ACCEL_GRP4_ODR25:
+				dev_info(&acceld->client->dev, "ODR = 25 Hz\n");
+				break;
+			case ACCEL_GRP4_ODR50:
+				dev_info(&acceld->client->dev, "ODR = 50 Hz\n");
+				break;
+			case ACCEL_GRP4_ODR100:
+				dev_info(&acceld->client->dev, "ODR = 100 Hz\n");
+				break;
+			case ACCEL_GRP4_ODR200:
+				dev_info(&acceld->client->dev, "ODR = 200 Hz\n");
+				break;
+			case ACCEL_GRP4_ODR400:
+				dev_info(&acceld->client->dev, "ODR = 400 Hz\n");
+				break;
+			case ACCEL_GRP4_ODR800:
+				dev_info(&acceld->client->dev, "ODR = 800 Hz\n");
+				break;
+			case ACCEL_GRP4_ODR1600:
+				dev_info(&acceld->client->dev, "ODR = 1600 Hz\n");
+				break;
+			default:
+				dev_info(&acceld->client->dev, "Unknown ODR\n");
+				break;
+		}
+		//#############
+	}
+
+	return 0;
+}
+
+static int kionix_accel_grp7_power_on_init(struct kionix_accel_driver *acceld)
+{
+	int err;
+
+	/* ensure that PC1 is cleared before updating control registers */
+	err = i2c_smbus_write_byte_data(acceld->client,
+					ACCEL_GRP7_CTRL_REG1, 0);
+	if (err < 0)
+		return err;
+
+	err = i2c_smbus_write_byte_data(acceld->client,
+					ACCEL_GRP7_DATA_CTRL, acceld->accel_registers[accel_grp7_data_ctrl]);
+	if (err < 0)
+		return err;
+
+	/* only write INT_CTRL_REG1 if in irq mode */
+	if (acceld->client->irq) {
+		err = i2c_smbus_write_byte_data(acceld->client,
+						ACCEL_GRP7_INT_CTRL1, acceld->accel_registers[accel_grp7_int_ctrl]);
+		if (err < 0)
+			return err;
+	}
+
+	if(atomic_read(&acceld->accel_enabled) > 0) {
+		err = i2c_smbus_write_byte_data(acceld->client,
+						ACCEL_GRP7_CTRL_REG1, acceld->accel_registers[accel_grp7_ctrl_reg1] | ACCEL_GRP7_PC1_ON);
+		if (err < 0)
+			return err;
+	}
+	else {
+		err = i2c_smbus_write_byte_data(acceld->client,
+						ACCEL_GRP7_CTRL_REG1, acceld->accel_registers[accel_grp7_ctrl_reg1]);
+		if (err < 0)
+			return err;
+	}
+
+	return 0;
+}
+
+static int kionix_accel_grp7_operate(struct kionix_accel_driver *acceld)
+{
+	int err;
+
+	err = i2c_smbus_write_byte_data(acceld->client, ACCEL_GRP7_CTRL_REG1, \
+			acceld->accel_registers[accel_grp7_ctrl_reg1] | ACCEL_GRP7_PC1_ON);
+	if (err < 0)
+		return err;
+
+	if(acceld->accel_drdy == 0)
+		queue_delayed_work(acceld->accel_workqueue, &acceld->accel_work, 0);
+
+	return 0;
+}
+
+static int kionix_accel_grp7_standby(struct kionix_accel_driver *acceld)
+{
+	int err;
+
+	if(acceld->accel_drdy == 0)
+		cancel_delayed_work_sync(&acceld->accel_work);
+
+	err = i2c_smbus_write_byte_data(acceld->client, ACCEL_GRP7_CTRL_REG1, 0);
+	if (err < 0)
+		return err;
+
+	return 0;
+}
+
+static void kionix_accel_grp7_report_accel_data(struct kionix_accel_driver *acceld)
+{
+	struct { union {
+		s16 accel_data_s16[3];
+		s8	accel_data_s8[6];
+	}; } accel_data;
+	s16 x, y, z;
+	int err;
+	struct input_dev *input_dev = acceld->input_dev;
+	int loop;
+
+	/* Only read the output registers if enabled */
+	if(atomic_read(&acceld->accel_enabled) > 0) {
+		if(atomic_read(&acceld->accel_enable_resume) > 0)
+		{
+			loop = KIONIX_I2C_RETRY_COUNT;
+			while(loop) {
+				mutex_lock(&input_dev->mutex);
+				err = kionix_i2c_read(acceld->client, ACCEL_GRP7_XOUT_L, (u8 *)accel_data.accel_data_s16, 6);
+				mutex_unlock(&input_dev->mutex);
+				if(err < 0){
+					loop--;
+					mdelay(KIONIX_I2C_RETRY_TIMEOUT);
+				}
+				else
+					loop = 0;
+			}
+			if (err < 0) {
+				KMSGERR(&acceld->client->dev, "%s: read data output error = %d\n", __func__, err);
+			}
+			else {
+				write_lock(&acceld->rwlock_accel_data);
+
+				x = ((s16) le16_to_cpu(accel_data.accel_data_s16[acceld->axis_map_x])) >> acceld->shift;
+				y = ((s16) le16_to_cpu(accel_data.accel_data_s16[acceld->axis_map_y])) >> acceld->shift;
+				z = ((s16) le16_to_cpu(accel_data.accel_data_s16[acceld->axis_map_z])) >> acceld->shift;
+
+				acceld->accel_data[acceld->axis_map_x] = (acceld->negate_x ? -x : x) + acceld->accel_cali[acceld->axis_map_x];
+				acceld->accel_data[acceld->axis_map_y] = (acceld->negate_y ? -y : y) + acceld->accel_cali[acceld->axis_map_y];
+				acceld->accel_data[acceld->axis_map_z] = (acceld->negate_z ? -z : z) + acceld->accel_cali[acceld->axis_map_z];
+
+				if(atomic_read(&acceld->accel_input_event) > 0) {
+					input_report_abs(acceld->input_dev, ABS_X, acceld->accel_data[acceld->axis_map_x]);
+					input_report_abs(acceld->input_dev, ABS_Y, acceld->accel_data[acceld->axis_map_y]);
+					input_report_abs(acceld->input_dev, ABS_Z, acceld->accel_data[acceld->axis_map_z]);
+					input_sync(acceld->input_dev);
+				}
+
+				write_unlock(&acceld->rwlock_accel_data);
+			}
+		}
+		else
+		{
+			atomic_inc(&acceld->accel_enable_resume);
+		}
+	}
+
+	/* Clear the interrupt if using drdy */
+	if(acceld->accel_drdy == 1) {
+		loop = KIONIX_I2C_RETRY_COUNT;
+		while(loop) {
+			err = i2c_smbus_read_byte_data(acceld->client, ACCEL_GRP7_INT_REL);
+			if(err < 0){
+				loop--;
+				mdelay(KIONIX_I2C_RETRY_TIMEOUT);
+			}
+			else
+				loop = 0;
+		}
+		if (err < 0)
+			KMSGERR(&acceld->client->dev, "%s: clear interrupt error = %d\n", __func__, err);
+	}
+}
+
+static void kionix_accel_grp7_update_g_range(struct kionix_accel_driver *acceld)
+{
+	acceld->accel_registers[accel_grp7_ctrl_reg1] &= ~ACCEL_GRP7_G_MASK;
+
+	switch (acceld->accel_pdata.accel_g_range) {
+		case KIONIX_ACCEL_G_8G:
+		case KIONIX_ACCEL_G_6G:
+			acceld->shift = 2;
+			acceld->accel_registers[accel_grp7_ctrl_reg1] |= ACCEL_GRP7_G_8G;
+			break;
+		case KIONIX_ACCEL_G_4G:
+			acceld->shift = 3;
+			acceld->accel_registers[accel_grp7_ctrl_reg1] |= ACCEL_GRP7_G_4G;
+			break;
+		case KIONIX_ACCEL_G_2G:
+		default:
+			acceld->shift = 4;
+			acceld->accel_registers[accel_grp7_ctrl_reg1] |= ACCEL_GRP7_G_2G;
+			break;
+	}
+
+	return;
+}
+
+static int kionix_accel_grp7_update_odr(struct kionix_accel_driver *acceld, unsigned int poll_interval)
+{
+	int err;
+	int i;
+	u8 odr;
+
+	/* Use the lowest ODR that can support the requested poll interval */
+	for (i = 0; i < ARRAY_SIZE(kionix_accel_grp7_odr_table); i++) {
+		odr = kionix_accel_grp7_odr_table[i].mask;
+		if (poll_interval < kionix_accel_grp7_odr_table[i].cutoff)
+			break;
+	}
+
+	/* Do not need to update DATA_CTRL_REG register if the ODR is not changed */
+	if(acceld->accel_registers[accel_grp7_data_ctrl] == odr)
+		return 0;
+	else
+		acceld->accel_registers[accel_grp7_data_ctrl] = odr;
+
+	/* Do not need to update DATA_CTRL_REG register if the sensor is not currently turn on */
+	if(atomic_read(&acceld->accel_enabled) > 0) {
+		err = i2c_smbus_write_byte_data(acceld->client, ACCEL_GRP7_CTRL_REG1, 0);
+		if (err < 0)
+			return err;
+
+		err = i2c_smbus_write_byte_data(acceld->client, ACCEL_GRP7_DATA_CTRL, acceld->accel_registers[accel_grp7_data_ctrl]);
+		if (err < 0)
+			return err;
+
+		err = i2c_smbus_write_byte_data(acceld->client, ACCEL_GRP7_CTRL_REG1, acceld->accel_registers[accel_grp7_ctrl_reg1] | ACCEL_GRP7_PC1_ON);
+		if (err < 0)
+			return err;
+		//#############
+		err = i2c_smbus_read_byte_data(acceld->client, ACCEL_GRP7_DATA_CTRL);
+		if (err < 0)
+			return err;
+		switch(err) {
+			case ACCEL_GRP7_ODR0_781:
+				dev_info(&acceld->client->dev, "ODR = 0.781 Hz\n");
+				break;
+			case ACCEL_GRP7_ODR1_563:
+				dev_info(&acceld->client->dev, "ODR = 1.563 Hz\n");
+				break;
+			case ACCEL_GRP7_ODR3_125:
+				dev_info(&acceld->client->dev, "ODR = 3.125 Hz\n");
+				break;
+			case ACCEL_GRP7_ODR6_25:
+				dev_info(&acceld->client->dev, "ODR = 6.25 Hz\n");
+				break;
+			case ACCEL_GRP7_ODR12_5:
+				dev_info(&acceld->client->dev, "ODR = 12.5 Hz\n");
+				break;
+			case ACCEL_GRP7_ODR25:
+				dev_info(&acceld->client->dev, "ODR = 25 Hz\n");
+				break;
+			case ACCEL_GRP7_ODR50:
+				dev_info(&acceld->client->dev, "ODR = 50 Hz\n");
+				break;
+			case ACCEL_GRP7_ODR100:
+				dev_info(&acceld->client->dev, "ODR = 100 Hz\n");
+				break;
+			case ACCEL_GRP7_ODR200:
+				dev_info(&acceld->client->dev, "ODR = 200 Hz\n");
+				break;
+			case ACCEL_GRP7_ODR400:
+				dev_info(&acceld->client->dev, "ODR = 400 Hz\n");
+				break;
+			case ACCEL_GRP7_ODR800:
+				dev_info(&acceld->client->dev, "ODR = 800 Hz\n");
+				break;
+			case ACCEL_GRP7_ODR1600:
+				dev_info(&acceld->client->dev, "ODR = 1600 Hz\n");
+				break;
+			default:
+				dev_info(&acceld->client->dev, "Unknown ODR\n");
+				break;
+		}
+		//#############
+	}
+
+	return 0;
+}
+
+static int kionix_accel_power_on(struct kionix_accel_driver *acceld)
+{
+	if (acceld->accel_pdata.power_on)
+		return acceld->accel_pdata.power_on();
+
+	return 0;
+}
+
+static void kionix_accel_power_off(struct kionix_accel_driver *acceld)
+{
+	if (acceld->accel_pdata.power_off)
+		acceld->accel_pdata.power_off();
+}
+
+static irqreturn_t kionix_accel_isr(int irq, void *dev)
+{
+	struct kionix_accel_driver *acceld = dev;
+
+	queue_delayed_work(acceld->accel_workqueue, &acceld->accel_work, 0);
+
+	return IRQ_HANDLED;
+}
+
+static void kionix_accel_work(struct work_struct *work)
+{
+	struct kionix_accel_driver *acceld = container_of((struct delayed_work *)work,	struct kionix_accel_driver, accel_work);
+
+	if(acceld->accel_drdy == 0)
+		queue_delayed_work(acceld->accel_workqueue, &acceld->accel_work, acceld->poll_delay);
+
+	acceld->kionix_accel_report_accel_data(acceld);
+}
+
+static void kionix_accel_update_direction(struct kionix_accel_driver *acceld)
+{
+	unsigned int direction = acceld->accel_pdata.accel_direction;
+	unsigned int accel_group = acceld->accel_group;
+
+	write_lock(&acceld->rwlock_accel_data);
+	acceld->axis_map_x = ((direction-1)%2);
+	acceld->axis_map_y =  (direction%2);
+	acceld->axis_map_z =  2;
+	acceld->negate_z = ((direction-1)/4);
+	switch(accel_group) {
+		case KIONIX_ACCEL_GRP3:
+		case KIONIX_ACCEL_GRP6:
+			acceld->negate_x = (((direction+2)/2)%2);
+			acceld->negate_y = (((direction+5)/4)%2);
+			break;
+		case KIONIX_ACCEL_GRP5:
+			acceld->axis_map_x =  (direction%2);
+			acceld->axis_map_y = ((direction-1)%2);
+			acceld->negate_x =  (((direction+1)/2)%2);
+			acceld->negate_y =  (((direction/2)+((direction-1)/4))%2);
+			break;
+		default:
+			acceld->negate_x =  ((direction/2)%2);
+			acceld->negate_y = (((direction+1)/4)%2);
+			break;
+	}
+	write_unlock(&acceld->rwlock_accel_data);
+	return;
+}
+
+static int kionix_accel_enable(struct kionix_accel_driver *acceld)
+{
+	int err = 0;
+	long remaining;
+
+	mutex_lock(&acceld->mutex_earlysuspend);
+
+	atomic_set(&acceld->accel_suspend_continue, 0);
+
+	/* Make sure that the sensor had successfully resumed before enabling it */
+	if(atomic_read(&acceld->accel_suspended) == 1) {
+		KMSGINF(&acceld->client->dev, "%s: waiting for resume\n", __func__);
+		remaining = wait_event_interruptible_timeout(acceld->wqh_suspend, \
+				atomic_read(&acceld->accel_suspended) == 0, \
+				msecs_to_jiffies(KIONIX_ACCEL_EARLYSUSPEND_TIMEOUT));
+
+		if(atomic_read(&acceld->accel_suspended) == 1) {
+			KMSGERR(&acceld->client->dev, "%s: timeout waiting for resume\n", __func__);
+			err = -ETIME;
+			goto exit;
+		}
+	}
+
+	err = acceld->kionix_accel_operate(acceld);
+
+	if (err < 0) {
+		KMSGERR(&acceld->client->dev, \
+				"%s: kionix_accel_operate returned err = %d\n", __func__, err);
+		goto exit;
+	}
+
+	atomic_inc(&acceld->accel_enabled);
+
+exit:
+	mutex_unlock(&acceld->mutex_earlysuspend);
+
+	return err;
+}
+
+static int kionix_accel_disable(struct kionix_accel_driver *acceld)
+{
+	int err = 0;
+
+	mutex_lock(&acceld->mutex_resume);
+
+	atomic_set(&acceld->accel_suspend_continue, 1);
+
+	if(atomic_read(&acceld->accel_enabled) > 0){
+		if(atomic_dec_and_test(&acceld->accel_enabled)) {
+			if(atomic_read(&acceld->accel_enable_resume) > 0)
+				atomic_set(&acceld->accel_enable_resume, 0);
+			err = acceld->kionix_accel_standby(acceld);
+			if (err < 0) {
+				KMSGERR(&acceld->client->dev, \
+						"%s: kionix_accel_standby returned err = %d\n", __func__, err);
+				goto exit;
+			}
+			wake_up_interruptible(&acceld->wqh_suspend);
+		}
+	}
+
+exit:
+	mutex_unlock(&acceld->mutex_resume);
+
+	return err;
+}
+
+static int kionix_accel_input_open(struct input_dev *input)
+{
+	struct kionix_accel_driver *acceld = input_get_drvdata(input);
+
+	atomic_inc(&acceld->accel_input_event);
+
+	return 0;
+}
+
+static void kionix_accel_input_close(struct input_dev *dev)
+{
+	struct kionix_accel_driver *acceld = input_get_drvdata(dev);
+
+	atomic_dec(&acceld->accel_input_event);
+}
+
+static void __devinit kionix_accel_init_input_device(struct kionix_accel_driver *acceld,
+					      struct input_dev *input_dev)
+{
+	__set_bit(EV_ABS, input_dev->evbit);
+	input_set_abs_params(input_dev, ABS_X, -ACCEL_G_MAX, ACCEL_G_MAX, ACCEL_FUZZ, ACCEL_FLAT);
+	input_set_abs_params(input_dev, ABS_Y, -ACCEL_G_MAX, ACCEL_G_MAX, ACCEL_FUZZ, ACCEL_FLAT);
+	input_set_abs_params(input_dev, ABS_Z, -ACCEL_G_MAX, ACCEL_G_MAX, ACCEL_FUZZ, ACCEL_FLAT);
+
+	input_dev->name = KIONIX_ACCEL_NAME;
+	input_dev->id.bustype = BUS_I2C;
+	input_dev->dev.parent = &acceld->client->dev;
+}
+
+static int __devinit kionix_accel_setup_input_device(struct kionix_accel_driver *acceld)
+{
+	struct input_dev *input_dev;
+	int err;
+
+	input_dev = input_allocate_device();
+	if (!input_dev) {
+		KMSGERR(&acceld->client->dev, "input_allocate_device failed\n");
+		return -ENOMEM;
+	}
+
+	acceld->input_dev = input_dev;
+
+	input_dev->open = kionix_accel_input_open;
+	input_dev->close = kionix_accel_input_close;
+	input_set_drvdata(input_dev, acceld);
+
+	kionix_accel_init_input_device(acceld, input_dev);
+
+	err = input_register_device(acceld->input_dev);
+	if (err) {
+		KMSGERR(&acceld->client->dev, \
+				"%s: input_register_device returned err = %d\n", __func__, err);
+		input_free_device(acceld->input_dev);
+		return err;
+	}
+
+	return 0;
+}
+
+/* Returns the enable state of device */
+static ssize_t kionix_accel_get_enable(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct kionix_accel_driver *acceld = i2c_get_clientdata(client);
+
+	return sprintf(buf, "%d\n", atomic_read(&acceld->accel_enabled) > 0 ? 1 : 0);
+}
+
+/* Allow users to enable/disable the device */
+static ssize_t kionix_accel_set_enable(struct device *dev, struct device_attribute *attr,
+						const char *buf, size_t count)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct kionix_accel_driver *acceld = i2c_get_clientdata(client);
+	struct input_dev *input_dev = acceld->input_dev;
+	char *buf2;
+	const int enable_count = 1;
+	unsigned long enable;
+	int err = 0;
+
+	/* Lock the device to prevent races with open/close (and itself) */
+	mutex_lock(&input_dev->mutex);
+
+	if(kionix_strtok(buf, count, &buf2, enable_count) < 0) {
+		KMSGERR(&acceld->client->dev, \
+				"%s: No enable data being read. " \
+				"No enable data will be updated.\n", __func__);
+	}
+
+	else {
+		/* Removes any leading negative sign */
+		while(*buf2 == '-')
+			buf2++;
+		#if (LINUX_VERSION_CODE > KERNEL_VERSION(2,6,35))
+		err = kstrtouint((const char *)buf2, 10, (unsigned int *)&enable);
+		if (err < 0) {
+			KMSGERR(&acceld->client->dev, \
+					"%s: kstrtouint returned err = %d\n", __func__, err);
+			goto exit;
+		}
+		#else
+		err = strict_strtoul((const char *)buf2, 10, &enable);
+		if (err < 0) {
+			KMSGERR(&acceld->client->dev, \
+					"%s: strict_strtoul returned err = %d\n", __func__, err);
+			goto exit;
+		}
+		#endif
+
+		if(enable)
+			err = kionix_accel_enable(acceld);
+		else
+			err = kionix_accel_disable(acceld);
+	}
+
+exit:
+	mutex_unlock(&input_dev->mutex);
+
+	return (err < 0) ? err : count;
+}
+
+/* Returns currently selected poll interval (in ms) */
+static ssize_t kionix_accel_get_delay(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct kionix_accel_driver *acceld = i2c_get_clientdata(client);
+
+	return sprintf(buf, "%d\n", acceld->poll_interval);
+}
+
+/* Allow users to select a new poll interval (in ms) */
+static ssize_t kionix_accel_set_delay(struct device *dev, struct device_attribute *attr,
+						const char *buf, size_t count)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct kionix_accel_driver *acceld = i2c_get_clientdata(client);
+	struct input_dev *input_dev = acceld->input_dev;
+	char *buf2;
+	const int delay_count = 1;
+	unsigned long interval;
+	int err = 0;
+
+	/* Lock the device to prevent races with open/close (and itself) */
+	mutex_lock(&input_dev->mutex);
+
+	if(kionix_strtok(buf, count, &buf2, delay_count) < 0) {
+		KMSGERR(&acceld->client->dev, \
+				"%s: No delay data being read. " \
+				"No delay data will be updated.\n", __func__);
+	}
+
+	else {
+		/* Removes any leading negative sign */
+		while(*buf2 == '-')
+			buf2++;
+		#if (LINUX_VERSION_CODE > KERNEL_VERSION(2,6,35))
+		err = kstrtouint((const char *)buf2, 10, (unsigned int *)&interval);
+		if (err < 0) {
+			KMSGERR(&acceld->client->dev, \
+					"%s: kstrtouint returned err = %d\n", __func__, err);
+			goto exit;
+		}
+		#else
+		err = strict_strtoul((const char *)buf2, 10, &interval);
+		if (err < 0) {
+			KMSGERR(&acceld->client->dev, \
+					"%s: strict_strtoul returned err = %d\n", __func__, err);
+			goto exit;
+		}
+		#endif
+
+		if(acceld->accel_drdy == 1)
+			disable_irq(client->irq);
+
+		/*
+		 * Set current interval to the greater of the minimum interval or
+		 * the requested interval
+		 */
+		acceld->poll_interval = max((unsigned int)interval, acceld->accel_pdata.min_interval);
+		acceld->poll_delay = msecs_to_jiffies(acceld->poll_interval);
+
+		err = acceld->kionix_accel_update_odr(acceld, acceld->poll_interval);
+
+		if(acceld->accel_drdy == 1)
+			enable_irq(client->irq);
+	}
+
+exit:
+	mutex_unlock(&input_dev->mutex);
+
+	return (err < 0) ? err : count;
+}
+
+/* Returns the direction of device */
+static ssize_t kionix_accel_get_direct(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct kionix_accel_driver *acceld = i2c_get_clientdata(client);
+
+	return sprintf(buf, "%d\n", acceld->accel_pdata.accel_direction);
+}
+
+/* Allow users to change the direction the device */
+static ssize_t kionix_accel_set_direct(struct device *dev, struct device_attribute *attr,
+						const char *buf, size_t count)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct kionix_accel_driver *acceld = i2c_get_clientdata(client);
+	struct input_dev *input_dev = acceld->input_dev;
+	char *buf2;
+	const int direct_count = 1;
+	unsigned long direction;
+	int err = 0;
+
+	/* Lock the device to prevent races with open/close (and itself) */
+	mutex_lock(&input_dev->mutex);
+
+	if(kionix_strtok(buf, count, &buf2, direct_count) < 0) {
+		KMSGERR(&acceld->client->dev, \
+				"%s: No direction data being read. " \
+				"No direction data will be updated.\n", __func__);
+	}
+
+	else {
+		/* Removes any leading negative sign */
+		while(*buf2 == '-')
+			buf2++;
+		#if (LINUX_VERSION_CODE > KERNEL_VERSION(2,6,35))
+		err = kstrtouint((const char *)buf2, 10, (unsigned int *)&direction);
+		if (err < 0) {
+			KMSGERR(&acceld->client->dev, \
+					"%s: kstrtouint returned err = %d\n", __func__, err);
+			goto exit;
+		}
+		#else
+		err = strict_strtoul((const char *)buf2, 10, &direction);
+		if (err < 0) {
+			KMSGERR(&acceld->client->dev, \
+					"%s: strict_strtoul returned err = %d\n", __func__, err);
+			goto exit;
+		}
+		#endif
+
+		if(direction < 1 || direction > 8)
+			KMSGERR(&acceld->client->dev, "%s: invalid direction = %d\n", __func__, (unsigned int) direction);
+
+		else {
+			acceld->accel_pdata.accel_direction = (u8) direction;
+			kionix_accel_update_direction(acceld);
+		}
+	}
+
+exit:
+	mutex_unlock(&input_dev->mutex);
+
+	return (err < 0) ? err : count;
+}
+
+/* Returns the data output of device */
+static ssize_t kionix_accel_get_data(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct kionix_accel_driver *acceld = i2c_get_clientdata(client);
+	int x, y, z;
+
+	read_lock(&acceld->rwlock_accel_data);
+
+	x = acceld->accel_data[acceld->axis_map_x];
+	y = acceld->accel_data[acceld->axis_map_y];
+	z = acceld->accel_data[acceld->axis_map_z];
+
+	read_unlock(&acceld->rwlock_accel_data);
+
+	return sprintf(buf, "%d %d %d\n", x, y, z);
+}
+
+/* Returns the calibration value of the device */
+static ssize_t kionix_accel_get_cali(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct kionix_accel_driver *acceld = i2c_get_clientdata(client);
+	int calibration[3];
+
+	read_lock(&acceld->rwlock_accel_data);
+
+	calibration[0] = acceld->accel_cali[acceld->axis_map_x];
+	calibration[1] = acceld->accel_cali[acceld->axis_map_y];
+	calibration[2] = acceld->accel_cali[acceld->axis_map_z];
+
+	read_unlock(&acceld->rwlock_accel_data);
+
+	return sprintf(buf, "%d %d %d\n", calibration[0], calibration[1], calibration[2]);
+}
+
+/* Allow users to change the calibration value of the device */
+static ssize_t kionix_accel_set_cali(struct device *dev, struct device_attribute *attr,
+						const char *buf, size_t count)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct kionix_accel_driver *acceld = i2c_get_clientdata(client);
+	struct input_dev *input_dev = acceld->input_dev;
+	const int cali_count = 3; /* How many calibration that we expect to get from the string */
+	char **buf2;
+	long calibration[cali_count];
+	int err = 0, i = 0;
+
+	/* Lock the device to prevent races with open/close (and itself) */
+	mutex_lock(&input_dev->mutex);
+
+	buf2 = (char **)kzalloc(cali_count * sizeof(char *), GFP_KERNEL);
+
+	if(kionix_strtok(buf, count, buf2, cali_count) < 0) {
+		KMSGERR(&acceld->client->dev, \
+				"%s: Not enough calibration data being read. " \
+				"No calibration data will be updated.\n", __func__);
+	}
+	else {
+		/* Convert string to integers  */
+		for(i = 0 ; i < cali_count ; i++) {
+			#if (LINUX_VERSION_CODE > KERNEL_VERSION(2,6,35))
+			err = kstrtoint((const char *)*(buf2+i), 10, (int *)&calibration[i]);
+			if(err < 0) {
+				KMSGERR(&acceld->client->dev, \
+						"%s: kstrtoint returned err = %d." \
+						"No calibration data will be updated.\n", __func__ , err);
+				goto exit;
+			}
+			#else
+			err = strict_strtol((const char *)*(buf2+i), 10, &calibration[i]);
+			if(err < 0) {
+				KMSGERR(&acceld->client->dev, \
+						"%s: strict_strtol returned err = %d." \
+						"No calibration data will be updated.\n", __func__ , err);
+				goto exit;
+			}
+			#endif
+		}
+
+		write_lock(&acceld->rwlock_accel_data);
+
+		acceld->accel_cali[acceld->axis_map_x] = (int)calibration[0];
+		acceld->accel_cali[acceld->axis_map_y] = (int)calibration[1];
+		acceld->accel_cali[acceld->axis_map_z] = (int)calibration[2];
+
+		write_unlock(&acceld->rwlock_accel_data);
+	}
+
+exit:
+	for(i = 0 ; i < cali_count ; i++)
+		kfree(*(buf2+i));
+
+	kfree(buf2);
+
+	mutex_unlock(&input_dev->mutex);
+
+	return (err < 0) ? err : count;
+}
+
+static DEVICE_ATTR(enable, S_IRUGO|S_IWUSR, kionix_accel_get_enable, kionix_accel_set_enable);
+static DEVICE_ATTR(poll_delay, S_IRUGO|S_IWUSR, kionix_accel_get_delay, kionix_accel_set_delay);
+static DEVICE_ATTR(direct, S_IRUGO|S_IWUSR, kionix_accel_get_direct, kionix_accel_set_direct);
+static DEVICE_ATTR(data, S_IRUGO, kionix_accel_get_data, NULL);
+static DEVICE_ATTR(cali, S_IRUGO|S_IWUSR, kionix_accel_get_cali, kionix_accel_set_cali);
+
+static struct attribute *kionix_accel_attributes[] = {
+	&dev_attr_enable.attr,
+	&dev_attr_poll_delay.attr,
+	&dev_attr_direct.attr,
+	&dev_attr_data.attr,
+	&dev_attr_cali.attr,
+	NULL
+};
+
+static struct attribute_group kionix_accel_attribute_group = {
+	.attrs = kionix_accel_attributes
+};
+
+static int __devinit kionix_verify(struct kionix_accel_driver *acceld)
+{
+	int retval = i2c_smbus_read_byte_data(acceld->client, ACCEL_WHO_AM_I);
+
+#if KIONIX_KMSG_INF
+	switch (retval) {
+		case KIONIX_ACCEL_WHO_AM_I_KXTE9:
+			KMSGINF(&acceld->client->dev, "this accelerometer is a KXTE9.\n");
+			break;
+		case KIONIX_ACCEL_WHO_AM_I_KXTF9:
+			KMSGINF(&acceld->client->dev, "this accelerometer is a KXTF9.\n");
+			break;
+		case KIONIX_ACCEL_WHO_AM_I_KXTI9_1001:
+			KMSGINF(&acceld->client->dev, "this accelerometer is a KXTI9-1001.\n");
+			break;
+		case KIONIX_ACCEL_WHO_AM_I_KXTIK_1004:
+			KMSGINF(&acceld->client->dev, "this accelerometer is a KXTIK-1004.\n");
+			break;
+		case KIONIX_ACCEL_WHO_AM_I_KXTJ9_1005:
+			KMSGINF(&acceld->client->dev, "this accelerometer is a KXTJ9-1005.\n");
+			break;
+		case KIONIX_ACCEL_WHO_AM_I_KXTJ9_1007:
+			KMSGINF(&acceld->client->dev, "this accelerometer is a KXTJ9-1007.\n");
+			break;
+		case KIONIX_ACCEL_WHO_AM_I_KXCJ9_1008:
+			KMSGINF(&acceld->client->dev, "this accelerometer is a KXCJ9-1008.\n");
+			break;
+		case KIONIX_ACCEL_WHO_AM_I_KXTJ2_1009:
+			KMSGINF(&acceld->client->dev, "this accelerometer is a KXTJ2-1009.\n");
+			break;
+		case KIONIX_ACCEL_WHO_AM_I_KXCJK_1013:
+			KMSGINF(&acceld->client->dev, "this accelerometer is a KXCJK-1013.\n");
+			break;
+		case KIONIX_ACCEL_WHO_AM_I_KX023:
+			KMSGINF(&acceld->client->dev, "this accelerometer is a KX023.\n");
+			break;
+		default:
+			break;
+	}
+#endif
+
+	return retval;
+}
+
+#ifdef    CONFIG_HAS_EARLYSUSPEND
+void kionix_accel_earlysuspend_suspend(struct early_suspend *h)
+{
+	struct kionix_accel_driver *acceld = container_of(h, struct kionix_accel_driver, early_suspend);
+	long remaining;
+
+	mutex_lock(&acceld->mutex_earlysuspend);
+
+	/* Only continue to suspend if enable did not intervene */
+	if(atomic_read(&acceld->accel_suspend_continue) > 0) {
+		/* Make sure that the sensor had successfully disabled before suspending it */
+		if(atomic_read(&acceld->accel_enabled) > 0) {
+			KMSGINF(&acceld->client->dev, "%s: waiting for disable\n", __func__);
+			remaining = wait_event_interruptible_timeout(acceld->wqh_suspend, \
+					atomic_read(&acceld->accel_enabled) < 1, \
+					msecs_to_jiffies(KIONIX_ACCEL_EARLYSUSPEND_TIMEOUT));
+
+			if(atomic_read(&acceld->accel_enabled) > 0) {
+				KMSGERR(&acceld->client->dev, "%s: timeout waiting for disable\n", __func__);
+			}
+		}
+
+		kionix_accel_power_off(acceld);
+
+		atomic_set(&acceld->accel_suspended, 1);
+	}
+
+	mutex_unlock(&acceld->mutex_earlysuspend);
+
+	return;
+}
+
+void kionix_accel_earlysuspend_resume(struct early_suspend *h)
+{
+	struct kionix_accel_driver *acceld = container_of(h, struct kionix_accel_driver, early_suspend);
+	int err;
+
+	mutex_lock(&acceld->mutex_resume);
+
+	if(atomic_read(&acceld->accel_suspended) == 1) {
+		err = kionix_accel_power_on(acceld);
+		if (err < 0) {
+			KMSGERR(&acceld->client->dev, "%s: kionix_accel_power_on returned err = %d\n", __func__, err);
+			goto exit;
+		}
+
+		/* Only needs to reinitialized the registers if Vdd is pulled low during suspend */
+		if(err > 0) {
+			err = acceld->kionix_accel_power_on_init(acceld);
+			if (err) {
+				KMSGERR(&acceld->client->dev, "%s: kionix_accel_power_on_init returned err = %d\n", __func__, err);
+				goto exit;
+			}
+		}
+
+		atomic_set(&acceld->accel_suspended, 0);
+	}
+
+	wake_up_interruptible(&acceld->wqh_suspend);
+
+exit:
+	mutex_unlock(&acceld->mutex_resume);
+
+	return;
+}
+#endif /* CONFIG_HAS_EARLYSUSPEND */
+
+#ifdef CONFIG_OF
+static int kx023_parse_dt(struct device *dev,
+				struct kionix_accel_platform_data *kx023_pdata)
+{
+	struct device_node *np = dev->of_node;
+	u32 temp_val;
+	int rc;
+
+	rc = of_property_read_u32(np, "kionix,min_interval", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read min-interval\n");
+		return rc;
+	} else {
+		kx023_pdata->min_interval = temp_val;
+	}
+
+	rc = of_property_read_u32(np, "kionix,poll_interval", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read poll-interval\n");
+		return rc;
+	} else {
+		kx023_pdata->poll_interval = temp_val;
+	}
+
+	rc = of_property_read_u32(np, "kionix,accel_direction", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read aaccel_directionx\n");
+		return rc;
+	} else {
+		kx023_pdata->accel_direction = (u8)temp_val;
+	}
+
+	rc = of_property_read_u32(np, "kionix,accel_irq_use_drdy", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read accel_irq_use_drdy\n");
+		return rc;
+	} else {
+		kx023_pdata->accel_irq_use_drdy = (u8)temp_val;
+	}
+
+	rc = of_property_read_u32(np, "kionix,accel_g_range", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read g-range\n");
+		return rc;
+	} else {
+		switch (temp_val) {
+		case 0:
+			kx023_pdata->accel_g_range = KIONIX_ACCEL_G_2G;
+			break;
+		case 1:
+			kx023_pdata->accel_g_range = KIONIX_ACCEL_G_4G;
+			break;
+		case 2:
+			kx023_pdata->accel_g_range = KIONIX_ACCEL_G_6G;
+			break;
+		case 3:
+			kx023_pdata->accel_g_range = KIONIX_ACCEL_G_8G;
+			break;
+		default:
+			kx023_pdata->accel_g_range = KIONIX_ACCEL_G_2G;
+			break;
+		}
+	}
+	if (of_property_read_bool(np, "kionix,accel_res"))
+		kx023_pdata->accel_res = KIONIX_ACCEL_RES_12BIT;
+	else
+		kx023_pdata->accel_res = KIONIX_ACCEL_RES_8BIT;
+
+	return 0;
+}
+#else
+static int kx023_parse_dt(struct device *dev,
+				struct kionix_accel_platform_data *kx023_pdata)
+{
+	return -ENODEV;
+}
+#endif /* !CONFIG_OF */
+
+static int __devinit kionix_accel_probe(struct i2c_client *client,
+				 const struct i2c_device_id *id)
+{
+	struct kionix_accel_platform_data *accel_pdata;
+	struct kionix_accel_driver *acceld;
+	int err;
+	struct proc_dir_entry *proc_dir, *proc_entry;
+
+	if (!i2c_check_functionality(client->adapter,
+				I2C_FUNC_I2C | I2C_FUNC_SMBUS_BYTE_DATA)) {
+		KMSGERR(&client->dev, "client is not i2c capable. Abort.\n");
+		return -ENXIO;
+	}
+
+	accel_pdata = kzalloc(sizeof(*accel_pdata), GFP_KERNEL);
+	if (accel_pdata == NULL) {
+		KMSGERR(&client->dev, \
+			"failed to allocate memory for module data. Abort.\n");
+		return -ENOMEM;
+	}
+	if (client->dev.of_node) {
+		memset(accel_pdata, 0 , sizeof(struct kionix_accel_platform_data));
+		err = kx023_parse_dt(&client->dev, accel_pdata);
+		if (err) {
+			dev_err(&client->dev,
+				"Unable to parse platfrom data err=%d\n", err);
+			return err;
+		}
+	} else {
+		if (client->dev.platform_data) {
+			accel_pdata = (struct kionix_accel_platform_data *)client->dev.platform_data;
+		} else {
+			KMSGERR(&client->dev, "platform data is NULL. Abort.\n");
+			return -EINVAL;
+		}
+	}
+
+	acceld = kzalloc(sizeof(*acceld), GFP_KERNEL);
+	if (acceld == NULL) {
+		KMSGERR(&client->dev, \
+			"failed to allocate memory for module data. Abort.\n");
+		return -ENOMEM;
+	}
+
+	acceld->client = client;
+	acceld->accel_pdata = *accel_pdata;
+
+	i2c_set_clientdata(client, acceld);
+
+	err = kionix_accel_power_on(acceld);
+	if (err < 0)
+		goto err_free_mem;
+
+	if (accel_pdata->init) {
+		err = accel_pdata->init();
+		if (err < 0)
+			goto err_accel_pdata_power_off;
+	}
+
+	err = kionix_verify(acceld);
+	if (err < 0) {
+		KMSGERR(&acceld->client->dev, "%s: kionix_verify returned err = %d. Abort.\n", __func__, err);
+		goto err_accel_pdata_exit;
+	}
+
+	/* Setup group specific configuration and function callback */
+	switch (err) {
+		case KIONIX_ACCEL_WHO_AM_I_KXTE9:
+			acceld->accel_group = KIONIX_ACCEL_GRP1;
+			acceld->accel_registers = kzalloc(sizeof(u8)*accel_grp1_regs_count, GFP_KERNEL);
+			if (acceld->accel_registers == NULL) {
+				KMSGERR(&client->dev, \
+					"failed to allocate memory for accel_registers. Abort.\n");
+				goto err_accel_pdata_exit;
+			}
+			acceld->accel_drdy = 0;
+			acceld->kionix_accel_report_accel_data	= kionix_accel_grp1_report_accel_data;
+			acceld->kionix_accel_update_odr			= kionix_accel_grp1_update_odr;
+			acceld->kionix_accel_power_on_init		= kionix_accel_grp1_power_on_init;
+			acceld->kionix_accel_operate			= kionix_accel_grp1_operate;
+			acceld->kionix_accel_standby			= kionix_accel_grp1_standby;
+			break;
+		case KIONIX_ACCEL_WHO_AM_I_KXTF9:
+		case KIONIX_ACCEL_WHO_AM_I_KXTI9_1001:
+		case KIONIX_ACCEL_WHO_AM_I_KXTIK_1004:
+		case KIONIX_ACCEL_WHO_AM_I_KXTJ9_1005:
+			if(err == KIONIX_ACCEL_WHO_AM_I_KXTIK_1004)
+				acceld->accel_group = KIONIX_ACCEL_GRP3;
+			else
+				acceld->accel_group = KIONIX_ACCEL_GRP2;
+			acceld->accel_registers = kzalloc(sizeof(u8)*accel_grp2_regs_count, GFP_KERNEL);
+			if (acceld->accel_registers == NULL) {
+				KMSGERR(&client->dev, \
+					"failed to allocate memory for accel_registers. Abort.\n");
+				goto err_accel_pdata_exit;
+			}
+			switch(acceld->accel_pdata.accel_res) {
+				case KIONIX_ACCEL_RES_6BIT:
+				case KIONIX_ACCEL_RES_8BIT:
+					acceld->accel_registers[accel_grp2_ctrl_reg1] |= ACCEL_GRP2_RES_8BIT;
+					break;
+				case KIONIX_ACCEL_RES_12BIT:
+				case KIONIX_ACCEL_RES_16BIT:
+				default:
+					acceld->accel_registers[accel_grp2_ctrl_reg1] |= ACCEL_GRP2_RES_12BIT;
+					break;
+			}
+			if(acceld->accel_pdata.accel_irq_use_drdy && client->irq) {
+				acceld->accel_registers[accel_grp2_int_ctrl] |= ACCEL_GRP2_IEN | ACCEL_GRP2_IEA;
+				acceld->accel_registers[accel_grp2_ctrl_reg1] |= ACCEL_GRP2_DRDYE;
+				acceld->accel_drdy = 1;
+			}
+			else
+				acceld->accel_drdy = 0;
+			kionix_accel_grp2_update_g_range(acceld);
+			acceld->kionix_accel_report_accel_data	= kionix_accel_grp2_report_accel_data;
+			acceld->kionix_accel_update_odr			= kionix_accel_grp2_update_odr;
+			acceld->kionix_accel_power_on_init		= kionix_accel_grp2_power_on_init;
+			acceld->kionix_accel_operate			= kionix_accel_grp2_operate;
+			acceld->kionix_accel_standby			= kionix_accel_grp2_standby;
+			break;
+		case KIONIX_ACCEL_WHO_AM_I_KXTJ9_1007:
+		case KIONIX_ACCEL_WHO_AM_I_KXCJ9_1008:
+		case KIONIX_ACCEL_WHO_AM_I_KXTJ2_1009:
+		case KIONIX_ACCEL_WHO_AM_I_KXCJK_1013:
+			if(err == KIONIX_ACCEL_WHO_AM_I_KXTJ2_1009)
+				acceld->accel_group = KIONIX_ACCEL_GRP5;
+			else if(err == KIONIX_ACCEL_WHO_AM_I_KXCJK_1013)
+				acceld->accel_group = KIONIX_ACCEL_GRP6;
+			else
+				acceld->accel_group = KIONIX_ACCEL_GRP4;
+			acceld->accel_registers = kzalloc(sizeof(u8)*accel_grp4_regs_count, GFP_KERNEL);
+			if (acceld->accel_registers == NULL) {
+				KMSGERR(&client->dev, \
+					"failed to allocate memory for accel_registers. Abort.\n");
+				goto err_accel_pdata_exit;
+			}
+			switch(acceld->accel_pdata.accel_res) {
+				case KIONIX_ACCEL_RES_6BIT:
+				case KIONIX_ACCEL_RES_8BIT:
+					acceld->accel_registers[accel_grp4_ctrl_reg1] |= ACCEL_GRP4_RES_8BIT;
+					break;
+				case KIONIX_ACCEL_RES_12BIT:
+				case KIONIX_ACCEL_RES_16BIT:
+				default:
+					acceld->accel_registers[accel_grp4_ctrl_reg1] |= ACCEL_GRP4_RES_12BIT;
+					break;
+			}
+			if(acceld->accel_pdata.accel_irq_use_drdy && client->irq) {
+				acceld->accel_registers[accel_grp4_int_ctrl] |= ACCEL_GRP4_IEN | ACCEL_GRP4_IEA;
+				acceld->accel_registers[accel_grp4_ctrl_reg1] |= ACCEL_GRP4_DRDYE;
+				acceld->accel_drdy = 1;
+			}
+			else
+				acceld->accel_drdy = 0;
+			kionix_accel_grp4_update_g_range(acceld);
+			acceld->kionix_accel_report_accel_data	= kionix_accel_grp4_report_accel_data;
+			acceld->kionix_accel_update_odr			= kionix_accel_grp4_update_odr;
+			acceld->kionix_accel_power_on_init		= kionix_accel_grp4_power_on_init;
+			acceld->kionix_accel_operate			= kionix_accel_grp4_operate;
+			acceld->kionix_accel_standby			= kionix_accel_grp4_standby;
+			break;
+		case KIONIX_ACCEL_WHO_AM_I_KX023:
+			acceld->accel_registers = kzalloc(sizeof(u8)*accel_grp7_regs_count, GFP_KERNEL);
+			if (acceld->accel_registers == NULL) {
+				KMSGERR(&client->dev, \
+					"failed to allocate memory for accel_registers. Abort.\n");
+				goto err_accel_pdata_exit;
+			}
+			switch(acceld->accel_pdata.accel_res) {
+				case KIONIX_ACCEL_RES_6BIT:
+				case KIONIX_ACCEL_RES_8BIT:
+					acceld->accel_registers[accel_grp7_ctrl_reg1] |= ACCEL_GRP7_RES_8BIT;
+					break;
+				case KIONIX_ACCEL_RES_12BIT:
+				case KIONIX_ACCEL_RES_16BIT:
+				default:
+					acceld->accel_registers[accel_grp7_ctrl_reg1] |= ACCEL_GRP7_RES_16BIT;
+					break;
+			}
+			if(acceld->accel_pdata.accel_irq_use_drdy && client->irq) {
+				acceld->accel_registers[accel_grp7_int_ctrl] |= ACCEL_GRP7_IEN | ACCEL_GRP7_IEA;
+				acceld->accel_registers[accel_grp7_ctrl_reg1] |= ACCEL_GRP7_DRDYE;
+				acceld->accel_drdy = 1;
+			}
+			else
+				acceld->accel_drdy = 0;
+			kionix_accel_grp7_update_g_range(acceld);
+			acceld->kionix_accel_report_accel_data	= kionix_accel_grp7_report_accel_data;
+			acceld->kionix_accel_update_odr			= kionix_accel_grp7_update_odr;
+			acceld->kionix_accel_power_on_init		= kionix_accel_grp7_power_on_init;
+			acceld->kionix_accel_operate			= kionix_accel_grp7_operate;
+			acceld->kionix_accel_standby			= kionix_accel_grp7_standby;
+			break;
+		default:
+			KMSGERR(&acceld->client->dev, \
+					"%s: unsupported device, who am i = %d. Abort.\n", __func__, err);
+			goto err_accel_pdata_exit;
+	}
+
+	err = kionix_accel_setup_input_device(acceld);
+	if (err)
+		goto err_free_accel_registers;
+
+	atomic_set(&acceld->accel_suspended, 0);
+	atomic_set(&acceld->accel_suspend_continue, 1);
+	atomic_set(&acceld->accel_enabled, 0);
+	atomic_set(&acceld->accel_input_event, 0);
+	atomic_set(&acceld->accel_enable_resume, 0);
+
+	mutex_init(&acceld->mutex_earlysuspend);
+	mutex_init(&acceld->mutex_resume);
+	rwlock_init(&acceld->rwlock_accel_data);
+
+	acceld->poll_interval = acceld->accel_pdata.poll_interval;
+	acceld->poll_delay = msecs_to_jiffies(acceld->poll_interval);
+	acceld->kionix_accel_update_odr(acceld, acceld->poll_interval);
+	kionix_accel_update_direction(acceld);
+
+	proc_dir = proc_mkdir("sensors", NULL);
+	if (proc_dir == NULL)
+		KMSGERR(&client->dev, "failed to create /proc/sensors\n");
+	else {
+		proc_entry = create_proc_entry( "accelinfo", 0644, proc_dir);
+		if (proc_entry == NULL)
+			KMSGERR(&client->dev, "failed to create /proc/cpu/accelinfo\n");
+	}
+
+	acceld->accel_workqueue = create_workqueue("Kionix Accel Workqueue");
+	INIT_DELAYED_WORK(&acceld->accel_work, kionix_accel_work);
+	init_waitqueue_head(&acceld->wqh_suspend);
+
+	if (acceld->accel_drdy) {
+		err = request_threaded_irq(client->irq, NULL, kionix_accel_isr, \
+					   IRQF_TRIGGER_RISING | IRQF_ONESHOT, \
+					   KIONIX_ACCEL_IRQ, acceld);
+		if (err) {
+			KMSGERR(&acceld->client->dev, "%s: request_threaded_irq returned err = %d\n", __func__, err);
+			KMSGERR(&acceld->client->dev, "%s: running in software polling mode instead\n", __func__);
+			acceld->accel_drdy = 0;
+		}
+		KMSGINF(&acceld->client->dev, "running in hardware interrupt mode\n");
+	} else {
+		KMSGINF(&acceld->client->dev, "running in software polling mode\n");
+	}
+
+	err = acceld->kionix_accel_power_on_init(acceld);
+	if (err) {
+		KMSGERR(&acceld->client->dev, "%s: kionix_accel_power_on_init returned err = %d. Abort.\n", __func__, err);
+		goto err_free_irq;
+	}
+
+	err = sysfs_create_group(&client->dev.kobj, &kionix_accel_attribute_group);
+	if (err) {
+		KMSGERR(&acceld->client->dev, "%s: sysfs_create_group returned err = %d. Abort.\n", __func__, err);
+		goto err_free_irq;
+	}
+
+#ifdef    CONFIG_HAS_EARLYSUSPEND
+	/* The higher the level, the earlier it resume, and the later it suspend */
+	acceld->early_suspend.level = EARLY_SUSPEND_LEVEL_DISABLE_FB + 50;
+	acceld->early_suspend.suspend = kionix_accel_earlysuspend_suspend;
+	acceld->early_suspend.resume = kionix_accel_earlysuspend_resume;
+	register_early_suspend(&acceld->early_suspend);
+#endif /* CONFIG_HAS_EARLYSUSPEND */
+
+	return 0;
+
+err_free_irq:
+	if (acceld->accel_drdy)
+		free_irq(client->irq, acceld);
+	destroy_workqueue(acceld->accel_workqueue);
+	input_unregister_device(acceld->input_dev);
+err_free_accel_registers:
+	kfree(acceld->accel_registers);
+err_accel_pdata_exit:
+	if (accel_pdata->exit)
+		accel_pdata->exit();
+err_accel_pdata_power_off:
+	kionix_accel_power_off(acceld);
+err_free_mem:
+	kfree(acceld);
+	return err;
+}
+
+static int __devexit kionix_accel_remove(struct i2c_client *client)
+{
+	struct kionix_accel_driver *acceld = i2c_get_clientdata(client);
+
+#ifdef    CONFIG_HAS_EARLYSUSPEND
+	unregister_early_suspend(&acceld->early_suspend);
+#endif /* CONFIG_HAS_EARLYSUSPEND */
+	sysfs_remove_group(&client->dev.kobj, &kionix_accel_attribute_group);
+	if (acceld->accel_drdy)
+		free_irq(client->irq, acceld);
+	destroy_workqueue(acceld->accel_workqueue);
+	input_unregister_device(acceld->input_dev);
+	kfree(acceld->accel_registers);
+	if (acceld->accel_pdata.exit)
+		acceld->accel_pdata.exit();
+	kionix_accel_power_off(acceld);
+	kfree(acceld);
+
+	return 0;
+}
+
+static const struct i2c_device_id kionix_accel_id[] = {
+	{ KIONIX_ACCEL_NAME, 0 },
+	{ },
+};
+
+MODULE_DEVICE_TABLE(i2c, kionix_accel_id);
+
+static struct of_device_id kx023_match_table[] = {
+	{ .compatible = "kionix,kionix_accel", },
+	{ },
+};
+
+static struct i2c_driver kionix_accel_driver = {
+	.driver = {
+		.name	= KIONIX_ACCEL_NAME,
+		.owner	= THIS_MODULE,
+		.of_match_table = kx023_match_table,
+	},
+	.probe		= kionix_accel_probe,
+	.remove		= __devexit_p(kionix_accel_remove),
+	.id_table	= kionix_accel_id,
+};
+
+static int __init kionix_accel_init(void)
+{
+	return i2c_add_driver(&kionix_accel_driver);
+}
+module_init(kionix_accel_init);
+
+static void __exit kionix_accel_exit(void)
+{
+	i2c_del_driver(&kionix_accel_driver);
+}
+module_exit(kionix_accel_exit);
+
+MODULE_DESCRIPTION("Kionix accelerometer driver");
+MODULE_AUTHOR("Kuching Tan <kuchingtan@kionix.com>");
+MODULE_LICENSE("GPL");
+MODULE_VERSION("3.3.0");
diff --git a/drivers/input/misc/lis3dh_acc.c b/drivers/input/misc/lis3dh_acc.c
index 03fabd0..00184ae 100644
--- a/drivers/input/misc/lis3dh_acc.c
+++ b/drivers/input/misc/lis3dh_acc.c
@@ -1093,25 +1093,25 @@ static ssize_t attr_addr_set(struct device *dev, struct device_attribute *attr,
 
 static struct device_attribute attributes[] = {
 
-	__ATTR(poll_delay, 0664, attr_get_polling_rate,
+	__ATTR(poll_delay, 0666, attr_get_polling_rate,
 			attr_set_polling_rate),
-	__ATTR(range, 0664, attr_get_range, attr_set_range),
-	__ATTR(enable, 0664, attr_get_enable, attr_set_enable),
-	__ATTR(int1_config, 0664, attr_get_intconfig1, attr_set_intconfig1),
-	__ATTR(int1_duration, 0664, attr_get_duration1, attr_set_duration1),
-	__ATTR(int1_threshold, 0664, attr_get_thresh1, attr_set_thresh1),
+	__ATTR(range, 0666, attr_get_range, attr_set_range),
+	__ATTR(enable, 0666, attr_get_enable, attr_set_enable),
+	__ATTR(int1_config, 0666, attr_get_intconfig1, attr_set_intconfig1),
+	__ATTR(int1_duration, 0666, attr_get_duration1, attr_set_duration1),
+	__ATTR(int1_threshold, 0666, attr_get_thresh1, attr_set_thresh1),
 	__ATTR(int1_source, 0444, attr_get_source1, NULL),
-	__ATTR(click_config, 0664, attr_get_click_cfg, attr_set_click_cfg),
+	__ATTR(click_config, 0666, attr_get_click_cfg, attr_set_click_cfg),
 	__ATTR(click_source, 0444, attr_get_click_source, NULL),
-	__ATTR(click_threshold, 0664, attr_get_click_ths, attr_set_click_ths),
-	__ATTR(click_timelimit, 0664, attr_get_click_tlim,
+	__ATTR(click_threshold, 0666, attr_get_click_ths, attr_set_click_ths),
+	__ATTR(click_timelimit, 0666, attr_get_click_tlim,
 			attr_set_click_tlim),
-	__ATTR(click_timelatency, 0664, attr_get_click_tlat,
+	__ATTR(click_timelatency, 0666, attr_get_click_tlat,
 							attr_set_click_tlat),
-	__ATTR(click_timewindow, 0664, attr_get_click_tw, attr_set_click_tw),
+	__ATTR(click_timewindow, 0666, attr_get_click_tw, attr_set_click_tw),
 
 #ifdef DEBUG
-	__ATTR(reg_value, 0664, attr_reg_get, attr_reg_set),
+	__ATTR(reg_value, 0666, attr_reg_get, attr_reg_set),
 	__ATTR(reg_addr, 0220, NULL, attr_addr_set),
 #endif
 };
@@ -1269,6 +1269,108 @@ static void lis3dh_acc_input_cleanup(struct lis3dh_acc_data *acc)
 	input_free_device(acc->input_dev);
 }
 
+static int lis3dh_parse_dt(struct device *dev,
+				struct lis3dh_acc_platform_data *lis3dh_pdata)
+{
+	struct device_node *np = dev->of_node;
+	u32 temp_val;
+	int rc;
+
+	rc = of_property_read_u32(np, "lis3dh,min_interval", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read min_interval\n");
+		return rc;
+	} else {
+		lis3dh_pdata->min_interval = (int)temp_val;
+		printk("GGG lis3dh_pdata->min_interval is %d\n", lis3dh_pdata->min_interval);
+	}
+
+	rc = of_property_read_u32(np, "lis3dh,poll_interval", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read poll_interval\n");
+		return rc;
+	} else {
+		lis3dh_pdata->poll_interval = (int)temp_val;
+		printk("GGG lis3dh_pdata->poll_interval is %d\n", lis3dh_pdata->poll_interval);
+	}
+
+	rc = of_property_read_u32(np, "lis3dh,axis_map_x", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read axis_map_x\n");
+		return rc;
+	} else {
+		lis3dh_pdata->axis_map_x = (u8)temp_val;
+	}
+
+	rc = of_property_read_u32(np, "lis3dh,axis_map_y", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read axis_map_y\n");
+		return rc;
+	} else {
+		lis3dh_pdata->axis_map_y = (u8)temp_val;
+	}
+
+	rc = of_property_read_u32(np, "lis3dh,axis_map_z", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read axis_map_z\n");
+		return rc;
+	} else {
+		lis3dh_pdata->axis_map_z = (u8)temp_val;
+	}
+
+	rc = of_property_read_u32(np, "lis3dh,g_range", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read g_range\n");
+		return rc;
+	} else {
+		switch (temp_val) {
+		case 2:
+			lis3dh_pdata->g_range = LIS3DH_ACC_G_2G;
+			break;
+		case 4:
+			lis3dh_pdata->g_range = LIS3DH_ACC_G_4G;
+			break;
+		case 8:
+			lis3dh_pdata->g_range = LIS3DH_ACC_G_8G;
+			break;
+		default:
+			lis3dh_pdata->g_range = LIS3DH_ACC_G_2G;
+			break;
+		}
+	}
+
+	rc = of_property_read_u32(np, "lis3dh,negate_x", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read negate_x\n");
+		return rc;
+	} else {
+		lis3dh_pdata->negate_x = (u8)temp_val;
+	}
+
+	rc = of_property_read_u32(np, "lis3dh,negate_y", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read negate_y\n");
+		return rc;
+	} else {
+		lis3dh_pdata->negate_y = (u8)temp_val;
+	}
+
+	rc = of_property_read_u32(np, "lis3dh,negate_z", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read negate_z\n");
+		return rc;
+	} else {
+		lis3dh_pdata->negate_z = (u8)temp_val;
+	}
+
+	lis3dh_pdata->init = NULL;
+	lis3dh_pdata->exit = NULL;
+	lis3dh_pdata->gpio_int1 = -EINVAL;
+	lis3dh_pdata->gpio_int2 = -EINVAL;
+
+	return 0;
+}
+
 static int lis3dh_acc_probe(struct i2c_client *client,
 		const struct i2c_device_id *id)
 {
@@ -1278,13 +1380,13 @@ static int lis3dh_acc_probe(struct i2c_client *client,
 	int err = -1;
 
 	pr_info("%s: probe start.\n", LIS3DH_ACC_DEV_NAME);
-
+/*
 	if (client->dev.platform_data == NULL) {
 		dev_err(&client->dev, "platform data is NULL. exiting.\n");
 		err = -ENODEV;
 		goto exit_check_functionality_failed;
 	}
-
+*/
 	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
 		dev_err(&client->dev, "client not i2c capable\n");
 		err = -ENODEV;
@@ -1326,7 +1428,8 @@ static int lis3dh_acc_probe(struct i2c_client *client,
 	acc->client = client;
 	i2c_set_clientdata(client, acc);
 
-	acc->pdata = kmalloc(sizeof(*acc->pdata), GFP_KERNEL);
+	//acc->pdata = kmalloc(sizeof(*acc->pdata), GFP_KERNEL);
+	acc->pdata = kzalloc(sizeof(struct lis3dh_acc_platform_data), GFP_KERNEL);
 	if (acc->pdata == NULL) {
 		err = -ENOMEM;
 		dev_err(&client->dev,
@@ -1335,7 +1438,16 @@ static int lis3dh_acc_probe(struct i2c_client *client,
 		goto err_mutexunlock;
 	}
 
-	memcpy(acc->pdata, client->dev.platform_data, sizeof(*acc->pdata));
+	//memcpy(acc->pdata, client->dev.platform_data, sizeof(*acc->pdata));
+	if (client->dev.of_node) {
+		memset(acc->pdata, 0 , sizeof(struct lis3dh_acc_platform_data));
+		err = lis3dh_parse_dt(&client->dev, acc->pdata);
+		if (err) {
+			dev_err(&client->dev,
+				"Unable to parse platfrom data err=%d\n", err);
+			return err;
+		}
+	}
 
 	err = lis3dh_acc_validate_pdata(acc);
 	if (err < 0) {
@@ -1558,10 +1670,20 @@ static const struct i2c_device_id lis3dh_acc_id[]
 
 MODULE_DEVICE_TABLE(i2c, lis3dh_acc_id);
 
+#ifdef CONFIG_OF
+static struct of_device_id lis3dh_match_table[] = {
+        { .compatible = "ST Micro,lis3dh_acc",},
+        { },
+};
+#else
+#define lis3dh_match_table NULL
+#endif
+
 static struct i2c_driver lis3dh_acc_driver = {
 	.driver = {
 			.owner = THIS_MODULE,
 			.name = LIS3DH_ACC_DEV_NAME,
+			.of_match_table = lis3dh_match_table,
 		  },
 	.probe = lis3dh_acc_probe,
 	.remove = __devexit_p(lis3dh_acc_remove),
diff --git a/include/linux/input/kionix_accel.h b/include/linux/input/kionix_accel.h
new file mode 100644
index 0000000..abeea2a
--- /dev/null
+++ b/include/linux/input/kionix_accel.h
@@ -0,0 +1,86 @@
+/* include/linux/input/kionix_accel.h - Kionix accelerometer driver
+ *
+ * Copyright (C) 2012 Kionix, Inc.
+ * Written by Kuching Tan <kuchingtan@kionix.com>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#ifndef __KIONIX_ACCEL_H__
+#define __KIONIX_ACCEL_H__
+
+//#define KIONIX_ACCEL_I2C_ADDR		0x1E
+#define KIONIX_ACCEL_NAME			"accelerometer"
+#define KIONIX_ACCEL_IRQ			"kionix-irq"
+
+struct kionix_accel_platform_data {
+	/* Although the accelerometer can perform at high ODR,
+	 * there is a need to keep the maximum ODR to a lower
+	 * value due to power consumption or other concern.
+	 * Use this variable to set the minimum allowable
+	 * interval for data to be reported from the
+	 * accelerometer. Unit is measured in milli-
+	 * seconds. Recommended value is 5ms. */
+	unsigned int min_interval;
+	/* Use this variable to set the default interval for
+	 * data to be reported from the accelerometer. This
+	 * value will be used during driver setup process,
+	 * but can be changed by the system during runtime via
+	 * sysfs control. Recommended value is 200ms.*/
+	unsigned int poll_interval;
+
+	/* This variable controls the corresponding direction
+	 * of the accelerometer that is mounted on the board
+	 * of the device. Refer to the porting guide for
+	 * details. Valid value is 1 to 8. */
+	u8 accel_direction;
+
+	/* Use this variable to choose whether or not to use
+	 * DRDY hardware interrupt mode to trigger a data
+	 * report event instead of using software polling.
+	 * Note that for those accelerometer model that does
+	 * not support DRDY hardware interrupt, the driver
+	 * will revert to software polling mode automatically.
+	 * Valid value is 0 or 1.*/
+	bool accel_irq_use_drdy;
+
+	/* Use this variable to control the number of
+	 * effective bits of the accelerometer output.
+	 * Use the macro definition to select the desired
+	 * number of effective bits. */
+	#define KIONIX_ACCEL_RES_12BIT	0
+	#define KIONIX_ACCEL_RES_8BIT	1
+	#define KIONIX_ACCEL_RES_6BIT	2
+	#define KIONIX_ACCEL_RES_16BIT	3	//KX023
+	u8 accel_res;
+
+	/* Use this variable to control the G range of
+	 * the accelerometer output. Use the macro definition
+	 * to select the desired G range.*/
+	#define KIONIX_ACCEL_G_2G		0
+	#define KIONIX_ACCEL_G_4G		1
+	#define KIONIX_ACCEL_G_6G		2
+	#define KIONIX_ACCEL_G_8G		3
+	u8 accel_g_range;
+
+	/* Optional callback functions that can be implemented
+	 * on per product basis. If these callbacks are defined,
+	 * they will be called by the driver. */
+	int (*init)(void);
+	void (*exit)(void);
+	int (*power_on)(void);
+	int (*power_off)(void);
+};
+#endif  /* __KIONIX_ACCEL_H__ */
-- 
1.7.8.3

