From 40a5b6394b8d06543ea494c63238a788d04d8ff1 Mon Sep 17 00:00:00 2001
From: lnxbuild <lnxbuild@localhost>
Date: Fri, 5 Jul 2013 17:30:58 +0800
Subject: [PATCH 2/3] add LCD/TP/Camera/TMD27713 support for SKUAC

Change-Id: I5940b72636327a06e741c8acff0d823533c49127
---
 .../boot/dts/dsi-v2-panel-otm9605a-qhd-video.dtsi  |  150 +
 arch/arm/boot/dts/msm8610-qrd-camera-sensor.dtsi   |   70 +
 arch/arm/boot/dts/msm8610-qrd-skuac.dts            |  122 +-
 arch/arm/boot/dts/msm8610-regulator.dtsi           |   12 +-
 arch/arm/configs/msm8610_defconfig                 |   18 +-
 arch/arm/mach-msm/clock-8610.c                     |    2 +
 drivers/input/Kconfig                              |    2 +
 drivers/input/misc/Kconfig                         |    6 +
 drivers/input/misc/Makefile                        |    1 +
 drivers/input/misc/lis3dh_acc.c                    |  158 +-
 drivers/input/misc/tmd27713.c                      | 1804 +++++++++
 drivers/input/touchscreen/Makefile                 |    1 +
 drivers/input/touchscreen/cypress/Kconfig          |  206 +
 drivers/input/touchscreen/cypress/Makefile         |   62 +
 drivers/input/touchscreen/cypress/cyttsp4_btn.c    |  527 +++
 drivers/input/touchscreen/cypress/cyttsp4_bus.c    |  761 ++++
 drivers/input/touchscreen/cypress/cyttsp4_core.c   | 3983 +++++++++++++++++++
 drivers/input/touchscreen/cypress/cyttsp4_debug.c  |  608 +++
 .../touchscreen/cypress/cyttsp4_device_access.c    | 2208 +++++++++++
 .../touchscreen/cypress/cyttsp4_device_access.h    |   67 +
 .../input/touchscreen/cypress/cyttsp4_devtree.c    |  765 ++++
 .../input/touchscreen/cypress/cyttsp4_devtree.h    |   36 +
 drivers/input/touchscreen/cypress/cyttsp4_i2c.c    |  326 ++
 drivers/input/touchscreen/cypress/cyttsp4_i2c.h    |   35 +
 drivers/input/touchscreen/cypress/cyttsp4_img.h    | 3990 ++++++++++++++++++++
 drivers/input/touchscreen/cypress/cyttsp4_loader.c | 1883 +++++++++
 .../input/touchscreen/cypress/cyttsp4_mt_common.c  |  699 ++++
 .../input/touchscreen/cypress/cyttsp4_mt_common.h  |   86 +
 drivers/input/touchscreen/cypress/cyttsp4_mta.c    |  108 +
 drivers/input/touchscreen/cypress/cyttsp4_mtb.c    |  115 +
 .../input/touchscreen/cypress/cyttsp4_platform.c   |  235 ++
 .../input/touchscreen/cypress/cyttsp4_proximity.c  |  585 +++
 drivers/input/touchscreen/cypress/cyttsp4_regs.h   |  578 +++
 drivers/input/touchscreen/cypress/cyttsp4_spi.c    |  462 +++
 drivers/input/touchscreen/cypress/cyttsp4_spi.h    |   37 +
 .../cypress/cyttsp4_test_device_access_api.c       |  196 +
 drivers/media/platform/msm/camera_v2/Kconfig       |    8 +
 .../media/platform/msm/camera_v2/sensor/Makefile   |    1 +
 .../media/platform/msm/camera_v2/sensor/ov8850.c   |  459 +++
 firmware/Makefile                                  |    1 +
 firmware/cyttsp4_fw.bin.ihex                       | 3676 ++++++++++++++++++
 include/linux/cyttsp4_btn.h                        |   39 +
 include/linux/cyttsp4_bus.h                        |  346 ++
 include/linux/cyttsp4_core.h                       |  148 +
 include/linux/cyttsp4_device_access-api.h          |   56 +
 include/linux/cyttsp4_mt.h                         |   84 +
 include/linux/cyttsp4_platform.h                   |   61 +
 include/linux/cyttsp4_proximity.h                  |   42 +
 include/linux/taos_common.h                        |   91 +
 49 files changed, 25862 insertions(+), 54 deletions(-)
 create mode 100644 arch/arm/boot/dts/dsi-v2-panel-otm9605a-qhd-video.dtsi
 create mode 100644 drivers/input/misc/tmd27713.c
 create mode 100644 drivers/input/touchscreen/cypress/Kconfig
 create mode 100644 drivers/input/touchscreen/cypress/Makefile
 create mode 100644 drivers/input/touchscreen/cypress/cyttsp4_btn.c
 create mode 100644 drivers/input/touchscreen/cypress/cyttsp4_bus.c
 create mode 100644 drivers/input/touchscreen/cypress/cyttsp4_core.c
 create mode 100644 drivers/input/touchscreen/cypress/cyttsp4_debug.c
 create mode 100644 drivers/input/touchscreen/cypress/cyttsp4_device_access.c
 create mode 100644 drivers/input/touchscreen/cypress/cyttsp4_device_access.h
 create mode 100644 drivers/input/touchscreen/cypress/cyttsp4_devtree.c
 create mode 100644 drivers/input/touchscreen/cypress/cyttsp4_devtree.h
 create mode 100644 drivers/input/touchscreen/cypress/cyttsp4_i2c.c
 create mode 100644 drivers/input/touchscreen/cypress/cyttsp4_i2c.h
 create mode 100644 drivers/input/touchscreen/cypress/cyttsp4_img.h
 create mode 100644 drivers/input/touchscreen/cypress/cyttsp4_loader.c
 create mode 100644 drivers/input/touchscreen/cypress/cyttsp4_mt_common.c
 create mode 100644 drivers/input/touchscreen/cypress/cyttsp4_mt_common.h
 create mode 100644 drivers/input/touchscreen/cypress/cyttsp4_mta.c
 create mode 100644 drivers/input/touchscreen/cypress/cyttsp4_mtb.c
 create mode 100644 drivers/input/touchscreen/cypress/cyttsp4_platform.c
 create mode 100644 drivers/input/touchscreen/cypress/cyttsp4_proximity.c
 create mode 100644 drivers/input/touchscreen/cypress/cyttsp4_regs.h
 create mode 100644 drivers/input/touchscreen/cypress/cyttsp4_spi.c
 create mode 100644 drivers/input/touchscreen/cypress/cyttsp4_spi.h
 create mode 100644 drivers/input/touchscreen/cypress/cyttsp4_test_device_access_api.c
 create mode 100644 drivers/media/platform/msm/camera_v2/sensor/ov8850.c
 create mode 100644 firmware/cyttsp4_fw.bin.ihex
 create mode 100644 include/linux/cyttsp4_btn.h
 create mode 100644 include/linux/cyttsp4_bus.h
 create mode 100644 include/linux/cyttsp4_core.h
 create mode 100644 include/linux/cyttsp4_device_access-api.h
 create mode 100644 include/linux/cyttsp4_mt.h
 create mode 100644 include/linux/cyttsp4_platform.h
 create mode 100644 include/linux/cyttsp4_proximity.h
 create mode 100644 include/linux/taos_common.h

diff --git a/arch/arm/boot/dts/dsi-v2-panel-otm9605a-qhd-video.dtsi b/arch/arm/boot/dts/dsi-v2-panel-otm9605a-qhd-video.dtsi
new file mode 100644
index 0000000..da3e18e
--- /dev/null
+++ b/arch/arm/boot/dts/dsi-v2-panel-otm9605a-qhd-video.dtsi
@@ -0,0 +1,150 @@
+/* Copyright (c) 2013, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+/ {
+	qcom,dsi_v2_otm9605a_qhd_video {
+		compatible = "qcom,dsi-panel-v2";
+		label = "OTM9605A QHD video mode dsi panel";
+		qcom,dsi-ctrl-phandle = <&mdss_dsi0>;
+		qcom,rst-gpio = <&msmgpio 41 0>;
+		vdda-supply = <&pm8110_l19>;
+		vddio-supply=<&pm8110_l14>;
+		qcom,mdss-pan-res = <540 960>;
+		qcom,mdss-pan-bpp = <24>;
+		qcom,mdss-pan-dest = "display_1";
+		qcom,mdss-pan-porch-values = <100 4 100 32 2 32>;
+		qcom,mdss-pan-underflow-clr = <0xff>;
+		qcom,mdss-pan-bl-levels = <1 255>;
+		qcom,mdss-pan-bl-ctrl = "bl_ctrl_wled";
+		qcom,mdss-pan-dsi-mode = <0>;
+		qcom,mdss-pan-dsi-h-pulse-mode = <1>;
+		qcom,mdss-pan-dsi-h-power-stop = <1 1 1>;
+		qcom,mdss-pan-dsi-bllp-power-stop = <1 1>;
+		qcom,mdss-pan-dsi-traffic-mode = <2>;
+		qcom,mdss-pan-dsi-dst-format = <3>;
+		qcom,mdss-pan-dsi-vc = <0>;
+		qcom,mdss-pan-dsi-rgb-swap = <0>;
+		qcom,mdss-pan-dsi-data-lanes = <1 1 0 0>;
+		qcom,mdss-pan-dsi-dlane-swap = <1>;
+		qcom,mdss-pan-dsi-t-clk = <0x1b 0x04>;
+		qcom,mdss-pan-dsi-stream = <0>;
+		qcom,mdss-pan-dsi-mdp-tr = <0x04>;/*todo*/
+		qcom,mdss-pan-dsi-dma-tr = <0x04>;
+		qcom,mdss-pan-dsi-frame-rate = <60>;
+		qcom,panel-phy-regulatorSettings =[09 08 05 00 20 03];
+		qcom,panel-phy-timingSettings = [8B 1F 14  00 45 4A
+						 19 23 23  03 04 00];
+		qcom,panel-phy-strengthCtrl = [ff 06];
+		qcom,panel-phy-bistCtrl = [03 03 00 00 0f 00];
+		qcom,panel-phy-laneConfig =
+					[80 45 00 00 01 66 /*lane0**/
+					80 45 00 00 01 66 /*lane1*/
+					80 45 00 00 01 66 /*lane2*/
+					80 45 00 00 01 66 /*lane3*/
+					40 67 00 00 01 88]; /*Clk*/
+
+		qcom,on-cmds-dsi-state = "DSI_LP_MODE";
+		qcom,panel-on-cmds = [39 01 00 00 01 02 00 00
+					39 01 00 00 01 04 FF 96 05 01
+					39 01 00 00 01 02 00 80
+					39 01 00 00 01 03 FF 96 05
+					39 01 00 00 01 02 00 90
+					39 01 00 00 01 02 00 00
+					39 01 00 00 01 02 A0 00
+					39 01 00 00 01 02 00 B4
+					39 01 00 00 01 02 C0 50
+					39 01 00 00 01 02 00 80
+					39 01 00 00 01 03 C1 36 66
+					39 01 00 00 01 02 00 89
+					39 01 00 00 01 02 C0 01
+					39 01 00 00 01 02 00 80
+					39 01 00 00 01 02 C4 9C
+					39 01 00 00 01 02 00 A0
+					39 01 00 00 01 02 C1 00
+					39 01 00 00 01 02 00 C0
+					39 01 00 00 01 02 C5 00
+					39 01 00 00 01 02 00 C5
+					39 01 00 00 01 02 B0 03
+					39 01 00 00 01 02 00 90      
+					39 01 00 00 01 08 c5 96 19 01 79 33 33 34
+					39 01 00 00 01 02 00 A0
+					39 01 00 00 01 08 C5 96 16 00 79 33 33 34
+					39 01 00 00 01 02 00 00
+					39 01 00 00 01 03 D8 5F 5F
+					39 01 00 00 01 02 00 00
+					39 01 00 00 01 02 D9 3b
+					39 01 00 00 01 02 00 B0
+					39 01 00 00 01 03 C5 04 28
+					39 01 00 00 01 02 00 00
+					39 01 00 00 01 11 E1 01 0D 14 0E 07 13 0B 0A 02 06 08 08 0e 12 0d 01
+					39 01 00 00 01 02 00 00
+					39 01 00 00 01 11 E2 01 0D 14 0E 07 13 0B 0A 02 06 08 08 0e 12 0d 01
+					39 01 00 00 01 02 00 80
+					39 01 00 00 01 0B CB 05 00 00 00 00 05 00 00 00 00
+					39 01 00 00 01 02 00 90
+					39 01 00 00 01 10 CB 55 55 00 00 00 00 00 00 00 00 00 00 00 00 00
+					39 01 00 00 01 02 00 A0
+					39 01 00 00 01 10 CB 00 00 00 00 00 55 55 00 00 00 00 00 00 00 00
+					39 01 00 00 01 02 00 B0
+					39 01 00 00 01 0B CB 00 00 00 00 00 00 00 00 00 00
+					39 01 00 00 01 02 00 C0
+					39 01 00 00 01 10 CB 55 55 00 00 00 04 00 04 00 04 00 04 04 04 00
+					39 01 00 00 01 02 00 D0
+					39 01 00 00 01 10 CB 04 00 00 00 00 55 55 00 00 00 04 00 04 00 04
+					39 01 00 00 01 02 00 E0
+					39 01 00 00 01 0B CB 00 04 04 04 00 04 00 00 00 00
+					39 01 00 00 01 02 00 F0
+					39 01 00 00 01 0B CB 0F 00 CC 00 00 0F 00 CC C3 00
+					39 01 00 00 01 02 00 80
+					39 01 00 00 01 0B CC 25 26 00 00 00 0C 00 0A 00 10
+					39 01 00 00 01 02 00 90
+					39 01 00 00 01 10 CC 00 0E 02 04 00 06 00 00 00 00 25 26 00 00 00
+					39 01 00 00 01 02 00 A0
+					39 01 00 00 01 10 CC 0B 00 09 00 0F 00 0D 01 03 00 05 00 00 00 00
+					39 01 00 00 01 02 00 B0
+					39 01 00 00 01 0B CC 26 25 00 00 00 0D 00 0F 00 09
+					39 01 00 00 01 02 00 C0
+					39 01 00 00 01 10 CC 00 0B 03 01 00 05 00 00 00 00 26 25 00 00 00
+					39 01 00 00 01 02 00 D0
+					39 01 00 00 01 10 CC 0E 00 10 00 0A 00 0C 04 02 00 06 00 00 00 00
+					39 01 00 00 01 02 00 80
+					39 01 00 00 01 0D CE 8B 03 27 8A 03 28 89 03 27 88 03 28
+					39 01 00 00 01 02 00 90
+					39 01 00 00 01 0F CE 39 0F 27 39 0E 28 00 00 00 00 00 00 00 00
+					39 01 00 00 01 02 00 A0
+					39 01 00 00 01 0F CE 38 07 03 C0 00 28 00 38 06 03 C1 00 28 00
+					39 01 00 00 01 02 00 B0
+					39 01 00 00 01 0F CE 38 05 03 C2 00 28 00 38 04 03 C3 00 28 00
+					39 01 00 00 01 02 00 C0
+					39 01 00 00 01 0F CE 38 03 03 C4 00 28 00 38 02 03 C5 00 28 00
+					39 01 00 00 01 02 00 D0
+					39 01 00 00 01 0F CE 38 01 03 C6 00 28 00 38 00 03 C7 00 28 00
+					39 01 00 00 01 02 00 80
+					39 01 00 00 01 0F CF F0 00 00 10 00 00 00 F0 00 00 10 00 00 00
+					39 01 00 00 01 02 00 90
+					39 01 00 00 01 0F CF F0 00 00 10 00 00 00 F0 00 00 10 00 00 00
+					39 01 00 00 01 02 00 A0
+					39 01 00 00 01 0F CF F0 00 00 10 00 00 00 F0 00 00 10 00 00 00
+					39 01 00 00 01 02 00 B0
+					39 01 00 00 01 0F CF F0 00 00 10 00 00 00 F0 00 00 10 00 00 00
+					39 01 00 00 01 02 00 C0
+					39 01 00 00 01 0B CF 01 01 20 20 00 00 02 01 00 00
+					39 01 00 00 01 02 00 00
+					39 01 00 00 01 04 FF FF FF FF
+					39 01 00 00 01 02 35 01
+					05 01 00 00 7D 02 11 00
+					05 01 00 00 32 02 29 00];
+		qcom,panel-off-cmds = [05 01 00 00 32 02 28 00
+					05 01 00 00 78 02 10 00];
+		qcom,off-cmds-dsi-state = "DSI_LP_MODE";
+	};
+};
diff --git a/arch/arm/boot/dts/msm8610-qrd-camera-sensor.dtsi b/arch/arm/boot/dts/msm8610-qrd-camera-sensor.dtsi
index 2e18ed7..3afb758 100644
--- a/arch/arm/boot/dts/msm8610-qrd-camera-sensor.dtsi
+++ b/arch/arm/boot/dts/msm8610-qrd-camera-sensor.dtsi
@@ -12,6 +12,76 @@
  */
 
 &i2c {
+
+		led_flash0: qcom,led-flash@60 {
+			cell-index = <0>;
+			reg = <0x60>;
+			qcom,slave-id = <0x60 0x00 0x0011>;
+			compatible = "qcom,led-flash";
+			qcom,flash-name = "adp1600";
+			qcom,flash-type = <1>;
+			qcom,gpio-no-mux = <0>;
+			gpios = <&msmgpio 18 0>,
+				<&msmgpio 19 0>;
+			qcom,gpio-flash-en = <0>;
+			qcom,gpio-flash-now = <1>;
+			qcom,gpio-req-tbl-num = <0 1>;
+			qcom,gpio-req-tbl-flags = <0 0>;
+			qcom,gpio-req-tbl-label = "FLASH_EN",
+				"FLASH_NOW";
+		};
+
+		actuator0: qcom,actuator@18 {
+			cell-index = <1>;
+			reg = <0x18>;
+			compatible = "qcom,actuator";
+			qcom,cci-master = <0>;
+		};
+
+		qcom,camera@6c {
+				compatible = "qcom,ov8850";
+				reg = <0x6c>;
+				qcom,slave-id = <0x6c 0x300a 0x8850>;
+				qcom,csiphy-sd-index = <0>;
+				qcom,csid-sd-index = <0>;
+				qcom,actuator-src = <&actuator0>;
+				qcom,led-flash-src = <&led_flash0>;
+				qcom,mount-angle = <90>;
+				qcom,sensor-name = "ov8850";
+				cam_vdig-supply = <&pm8110_l2>;
+				cam_vio-supply = <&pm8110_l7>;
+				cam_vana-supply = <&pm8110_l22>;
+				qcom,cam-vreg-name = "cam_vdig", "cam_vio", "cam_vana";
+				qcom,cam-vreg-type = <0 0 0>;
+				qcom,cam-vreg-min-voltage = <1200000 1800000 2850000>;
+				qcom,cam-vreg-max-voltage = <1200000 1800000 2850000>;
+				qcom,cam-vreg-op-mode = <200000 200000 100000>;
+				qcom,gpio-no-mux = <0>;
+				gpios = <&msmgpio 13 0>,
+					<&msmgpio 21 0>,//reset
+					<&msmgpio 20 0>,//stanby
+					<&msmgpio 101 0>; //dvdd_en
+				qcom,gpio-reset = <1>;
+				qcom,gpio-standby = <2>;
+				qcom,gpio-req-tbl-num = <0 1 2 3>;
+				qcom,gpio-req-tbl-flags = <1 0 0 0>;
+				qcom,gpio-req-tbl-label = "CAMIF_MCLK",
+					"CAM_RESET1",
+					"CAM_STANDBY",
+					"CAM_DVDDEN";
+				qcom,csi-lane-assign = <0xe4>;
+				qcom,csi-lane-mask = <0x7>;
+				qcom,sensor-position = <0>;
+				qcom,sensor-mode = <1>;
+				qcom,cci-master = <0>;
+				/*
+				qcom,actuator-cam-name = <0>;
+				qcom,actuator-vcm-pwd  = <79>;
+				qcom,actuator-vcm-enable = <1>;
+				*/
+			};
+
+
         qcom,camera@7d {
                 compatible = "qcom,hi256";
                 reg = <0x7d>;
diff --git a/arch/arm/boot/dts/msm8610-qrd-skuac.dts b/arch/arm/boot/dts/msm8610-qrd-skuac.dts
index b9b3103..dedbd2b 100644
--- a/arch/arm/boot/dts/msm8610-qrd-skuac.dts
+++ b/arch/arm/boot/dts/msm8610-qrd-skuac.dts
@@ -13,7 +13,7 @@
 /dts-v1/;
 
 /include/ "msm8610.dtsi"
-/include/ "dsi-v2-panel-hx8379a-wvga-video.dtsi"
+/include/ "dsi-v2-panel-otm9605a-qhd-video.dtsi"
 /include/ "msm8610-qrd-camera-sensor.dtsi"
 
 / {
@@ -26,33 +26,81 @@
 
 &soc {
 	i2c@f9923000{
-		focaltech@38{
-			compatible = "focaltech,5x06";
-			reg = <0x38>;
-			interrupt-parent = <&msmgpio>;
+         tsc@1a {
+			compatible = "cy,cyttsp4_i2c_adapter";
+			reg = <0x1a>;
+			/* GPIO 38, high-to-low edge triggered */
 			interrupts = <1 0x2>;
+			interrupt-parent = <&msmgpio>;
 			vdd-supply = <&pm8110_l19>;
 			vcc_i2c-supply = <&pm8110_l14>;
-			focaltech,family-id = <0x06>;
-			focaltech,reset-gpio = <&msmgpio 0 0x00>;
-			focaltech,irq-gpio = <&msmgpio 1 0x00>;
-			focaltech,display-coords = <0 0 480 800>;
-			focaltech,panel-coords = <0 0 480 800>;
-			focaltech,button-map= <139 102 158>;
-			focaltech,no-force-update;
-			focaltech,i2c-pull-up;
-		};
-	};
+		cy,adapter_id = "cyttsp4_i2c_adapter";
+
+		cy,core {
+			cy,name = "cyttsp4_core";
+			cy,id = "main_ttsp_core";
+
+			cy,irq_gpio = <1>;
+			cy,rst_gpio = <0>;
+
+			/* Enable cy,max_xfer_len to limit max I2C/SPI transfer length */
+			/* cy,max_xfer_len = <0x100>; */
+
+			/* CY_CORE_FLAG_WAKE_ON_GESTURE */
+			cy,flags = <1>;
+			/* CY_CORE_EWG_TAP_TAP | CY_CORE_EWG_TWO_FINGER_SLIDE */
+			cy,easy_wakeup_gesture = <3>;
+			cy,btn_keys = <158 /* KEY_HOME */
+				       172 /* KEY_MENU */
+				       139 /* KEY_BACK */
+				       217 /* KEY_SEARCH */
+				       114 /* KEY_VOLUMEDOWN */
+				       115 /* KEY_VOLUMEUP */
+				       212 /* KEY_CAMERA */
+				       116>; /* KEY_POWER */
+			cy,btn_keys-tag = <0>;
+
+			cy,mt {
+				cy,name = "cyttsp4_mt";
+
+				cy,inp_dev_name = "cyttsp4_mt";
+				/* CY_MT_FLAG_FLIP | CY_MT_FLAG_INV_X | CY_MT_FLAG_INV_Y */
+				cy,flags = <0x0>;
+				cy,abs =
+					/* ABS_MT_POSITION_X, CY_ABS_MIN_X, CY_ABS_MAX_X, 0, 0 */
+					<0x35 0 540 0 0
+					/* ABS_MT_POSITION_Y, CY_ABS_MIN_Y, CY_ABS_MAX_Y, 0, 0 */
+					0x36 0 960 0 0
+					/* ABS_MT_PRESSURE, CY_ABS_MIN_P, CY_ABS_MAX_P, 0, 0 */
+					0x3a 0 255 0 0
+					/* CY_IGNORE_VALUE, CY_ABS_MIN_W, CY_ABS_MAX_W, 0, 0 */
+					0xffff 0 255 0 0
+					/* ABS_MT_TRACKING_ID, CY_ABS_MIN_T, CY_ABS_MAX_T, 0, 0 */
+					0x39 0 15 0 0
+					/* ABS_MT_TOUCH_MAJOR, 0, 255, 0, 0 */
+					0x30 0 255 0 0
+					/* ABS_MT_TOUCH_MINOR, 0, 255, 0, 0 */
+					0x31 0 255 0 0
+					/* ABS_MT_ORIENTATION, -128, 127, 0, 0 */
+					0x34 0xfffffed7 127 0 0>;
+
+			    cy,vkeys_x = <540>;
+				cy,vkeys_y = <960>;
+				 cy,virtual_keys = /* KeyCode CenterX CenterY Width Height */
+				         /* KEY_BACK */
+				         <158 130 1330 160 180
+				         /* KEY_MENU */
+				         102 360 1330 160 180
+				         /* KEY_HOME */
+				         139 590 1330 160 180>;
+			};
+				cy,btn {
+					cy,name = "cyttsp4_btn";
+					cy,inp_dev_name = "cyttsp4_btn";
+					};
 
-	gen-vkeys {
-		compatible = "qcom,gen-vkeys";
-		label = "ft5x06_ts";
-		qcom,disp-maxx = <480>;
-		qcom,disp-maxy = <800>;
-		qcom,panel-maxx = <481>;
-		qcom,panel-maxy = <940>;
-		qcom,key-codes = <139 0 102 158 0 0 0>;
-		qcom,y-offset = <0>;
+		};
+		};
 	};
 	serial@f991e000 {
 		status = "ok";
@@ -77,6 +125,32 @@
 			kionix,negate-z;
 			kionix,res-12bit;
 		};
+        lis3dh@18 {
+			compatible = "ST Micro,lis3dh_acc";
+			reg = <0x18>;
+			vdd-supply = <&pm8110_l19>;
+			vddio-supply = <&pm8110_l14>;
+			lis3dh,min_interval = <10>;
+			lis3dh,poll_interval = <200>;
+			lis3dh,g_range = <2>;
+			lis3dh,axis_map_x = <1>;
+			lis3dh,axis_map_y = <0>;
+			lis3dh,axis_map_z = <2>;
+			lis3dh,negate_x = <0>;
+			lis3dh,negate_y = <0>;
+			lis3dh,negate_z = <1>;
+        };
+
+        taos@39 {
+                        compatible = "taos,tmd27713";
+                        reg = <0x39>;
+                        interrupt-parent = <&msmgpio>;
+                        interrupts = <80 0x2>;
+                        taos,pdrive = <3>;
+                        taos,ppcount = <8>;
+                        taos,irq_gpio = <80>;
+
+       };
 	};
 
 	gpio_keys {
diff --git a/arch/arm/boot/dts/msm8610-regulator.dtsi b/arch/arm/boot/dts/msm8610-regulator.dtsi
index 09520c5..05a0754 100644
--- a/arch/arm/boot/dts/msm8610-regulator.dtsi
+++ b/arch/arm/boot/dts/msm8610-regulator.dtsi
@@ -199,9 +199,9 @@
 	rpm-regulator-ldoa7 {
 		status = "okay";
 		pm8110_l7: regulator-l7 {
-			regulator-min-microvolt = <2050000>;
-			regulator-max-microvolt = <2050000>;
-			qcom,init-voltage = <2050000>;
+			regulator-min-microvolt = <1800000>;
+			regulator-max-microvolt = <1800000>;
+			qcom,init-voltage = <1800000>;
 			status = "okay";
 		};
 	};
@@ -349,9 +349,9 @@
 	rpm-regulator-ldoa22 {
 		status = "okay";
 		pm8110_l22: regulator-l22 {
-			regulator-min-microvolt = <1800000>;
-			regulator-max-microvolt = <3300000>;
-			qcom,init-voltage = <3300000>;
+			regulator-min-microvolt = <2850000>;
+			regulator-max-microvolt = <2850000>;
+			qcom,init-voltage = <2850000>;
 			status = "okay";
 		};
 	};
diff --git a/arch/arm/configs/msm8610_defconfig b/arch/arm/configs/msm8610_defconfig
index cf261d2..4e1849a 100644
--- a/arch/arm/configs/msm8610_defconfig
+++ b/arch/arm/configs/msm8610_defconfig
@@ -222,13 +222,20 @@ CONFIG_INPUT_EVDEV=y
 CONFIG_INPUT_EVBUG=m
 CONFIG_KEYBOARD_GPIO=y
 CONFIG_INPUT_TOUCHSCREEN=y
-CONFIG_TOUCHSCREEN_ATMEL_MXT=y
-CONFIG_TOUCHSCREEN_FT5X06=y
+#CONFIG_TOUCHSCREEN_ATMEL_MXT=y
+#CONFIG_TOUCHSCREEN_FT5X06=y
 CONFIG_TOUCHSCREEN_GEN_VKEYS=y
-CONFIG_TOUCHSCREEN_SYNAPTICS_I2C_RMI4=y
-CONFIG_TOUCHSCREEN_SYNAPTICS_DSX_RMI4_DEV=y
-CONFIG_TOUCHSCREEN_SYNAPTICS_DSX_FW_UPDATE=y
+#CONFIG_TOUCHSCREEN_SYNAPTICS_I2C_RMI4=y
+#CONFIG_TOUCHSCREEN_SYNAPTICS_DSX_RMI4_DEV=y
+#CONFIG_TOUCHSCREEN_SYNAPTICS_DSX_FW_UPDATE=y
+CONFIG_CYPRESS_CYTTSP4_BUS=y
+CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4=y
+CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_I2C=y
+#CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_MT_A=y
+CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_DEVICETREE_SUPPORT=y
 CONFIG_INPUT_MISC=y
+CONFIG_STM_LIS3DH=y
+CONFIG_TMD27713_PLSENSOR=y
 CONFIG_INPUT_UINPUT=y
 CONFIG_INPUT_GPIO=m
 CONFIG_SERIAL_MSM_HSL=y
@@ -270,6 +277,7 @@ CONFIG_VIDEO_DEV=y
 CONFIG_VIDEO_V4L2_SUBDEV_API=y
 # CONFIG_MSM_CAMERA is not set
 CONFIG_OV8825=y
+CONFIG_OV8850=y
 CONFIG_HI256=y
 CONFIG_MSM_CAMERA_SENSOR=y
 CONFIG_MSM_CCI=y
diff --git a/arch/arm/mach-msm/clock-8610.c b/arch/arm/mach-msm/clock-8610.c
index 75d8984..69b8fdd 100644
--- a/arch/arm/mach-msm/clock-8610.c
+++ b/arch/arm/mach-msm/clock-8610.c
@@ -3002,10 +3002,12 @@ static struct clk_lookup msm_clocks_8610[] = {
 	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "6-006f"),
 	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "6-007d"),
 	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "6-006d"),
+	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "6-006c"),
 	CLK_LOOKUP("cam_src_clk", mclk1_clk_src.c, "6-0078"),
 	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-006f"),
 	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-007d"),
 	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-006d"),
+	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-006c"),
 	CLK_LOOKUP("cam_clk", mclk1_clk.c, "6-0078"),
 
 
diff --git a/drivers/input/Kconfig b/drivers/input/Kconfig
index 69d3686..7a7119d 100644
--- a/drivers/input/Kconfig
+++ b/drivers/input/Kconfig
@@ -186,6 +186,8 @@ source "drivers/input/tablet/Kconfig"
 
 source "drivers/input/touchscreen/Kconfig"
 
+source "drivers/input/touchscreen/cypress/Kconfig"
+
 source "drivers/input/misc/Kconfig"
 
 endif
diff --git a/drivers/input/misc/Kconfig b/drivers/input/misc/Kconfig
index 1464dab..7459255 100644
--- a/drivers/input/misc/Kconfig
+++ b/drivers/input/misc/Kconfig
@@ -640,6 +640,12 @@ config INPUT_PMIC8058_VIBRA_MEMLESS
 	  To compile this driver as module, choose M here: the
 	  module will be called pmic8058-vib-memless.
 
+config TMD27713_PLSENSOR
+   tristate "TAOS tmd27713 P/L senosr"
+   depends on I2C=y
+   help
+     This option enables support for the TAOS tmd27713 P/L sensor.
+
 config BOSCH_BMA150
         tristate "SMB380/BMA150 acceleration sensor support"
         depends on I2C=y
diff --git a/drivers/input/misc/Makefile b/drivers/input/misc/Makefile
index 96c9288..c001dda 100644
--- a/drivers/input/misc/Makefile
+++ b/drivers/input/misc/Makefile
@@ -60,4 +60,5 @@ obj-$(CONFIG_INPUT_YEALINK)		+= yealink.o
 obj-$(CONFIG_PMIC8058_OTHC)             += pmic8058-othc.o
 obj-$(CONFIG_INPUT_PMIC8058_VIBRA_MEMLESS) += pmic8058-vib-memless.o
 obj-$(CONFIG_BOSCH_BMA150)              += bma150.o
+obj-$(CONFIG_TMD27713_PLSENSOR)		+= tmd27713.o
 obj-$(CONFIG_STM_LIS3DH)		+= lis3dh_acc.o
diff --git a/drivers/input/misc/lis3dh_acc.c b/drivers/input/misc/lis3dh_acc.c
index 03fabd0..64f89d7 100644
--- a/drivers/input/misc/lis3dh_acc.c
+++ b/drivers/input/misc/lis3dh_acc.c
@@ -1093,26 +1093,26 @@ static ssize_t attr_addr_set(struct device *dev, struct device_attribute *attr,
 
 static struct device_attribute attributes[] = {
 
-	__ATTR(poll_delay, 0664, attr_get_polling_rate,
+	__ATTR(poll_delay, 0666, attr_get_polling_rate,
 			attr_set_polling_rate),
-	__ATTR(range, 0664, attr_get_range, attr_set_range),
-	__ATTR(enable, 0664, attr_get_enable, attr_set_enable),
-	__ATTR(int1_config, 0664, attr_get_intconfig1, attr_set_intconfig1),
-	__ATTR(int1_duration, 0664, attr_get_duration1, attr_set_duration1),
-	__ATTR(int1_threshold, 0664, attr_get_thresh1, attr_set_thresh1),
-	__ATTR(int1_source, 0444, attr_get_source1, NULL),
-	__ATTR(click_config, 0664, attr_get_click_cfg, attr_set_click_cfg),
-	__ATTR(click_source, 0444, attr_get_click_source, NULL),
-	__ATTR(click_threshold, 0664, attr_get_click_ths, attr_set_click_ths),
-	__ATTR(click_timelimit, 0664, attr_get_click_tlim,
+	__ATTR(range, 0666, attr_get_range, attr_set_range),
+	__ATTR(enable, 0666, attr_get_enable, attr_set_enable),
+	__ATTR(int1_config, 0666, attr_get_intconfig1, attr_set_intconfig1),
+	__ATTR(int1_duration, 0666, attr_get_duration1, attr_set_duration1),
+	__ATTR(int1_threshold, 0666, attr_get_thresh1, attr_set_thresh1),
+	__ATTR(int1_source, 0666, attr_get_source1, NULL),
+	__ATTR(click_config, 0666, attr_get_click_cfg, attr_set_click_cfg),
+	__ATTR(click_source, 0666, attr_get_click_source, NULL),
+	__ATTR(click_threshold, 0666, attr_get_click_ths, attr_set_click_ths),
+	__ATTR(click_timelimit, 0666, attr_get_click_tlim,
 			attr_set_click_tlim),
-	__ATTR(click_timelatency, 0664, attr_get_click_tlat,
+	__ATTR(click_timelatency, 0666, attr_get_click_tlat,
 							attr_set_click_tlat),
-	__ATTR(click_timewindow, 0664, attr_get_click_tw, attr_set_click_tw),
+	__ATTR(click_timewindow, 0666, attr_get_click_tw, attr_set_click_tw),
 
 #ifdef DEBUG
-	__ATTR(reg_value, 0664, attr_reg_get, attr_reg_set),
-	__ATTR(reg_addr, 0220, NULL, attr_addr_set),
+	__ATTR(reg_value, 0666, attr_reg_get, attr_reg_set),
+	__ATTR(reg_addr, 0666, NULL, attr_addr_set),
 #endif
 };
 
@@ -1268,6 +1268,107 @@ static void lis3dh_acc_input_cleanup(struct lis3dh_acc_data *acc)
 	input_unregister_device(acc->input_dev);
 	input_free_device(acc->input_dev);
 }
+static int lis3dh_parse_dt(struct device *dev,
+				struct lis3dh_acc_platform_data *lis3dh_pdata)
+{
+	struct device_node *np = dev->of_node;
+	u32 temp_val;
+	int rc;
+
+	rc = of_property_read_u32(np, "lis3dh,min_interval", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read min_interval\n");
+		return rc;
+	} else {
+		lis3dh_pdata->min_interval = (int)temp_val;
+		printk("GGG lis3dh_pdata->min_interval is %d\n", lis3dh_pdata->min_interval);
+	}
+
+	rc = of_property_read_u32(np, "lis3dh,poll_interval", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read poll_interval\n");
+		return rc;
+	} else {
+		lis3dh_pdata->poll_interval = (int)temp_val;
+		printk("GGG lis3dh_pdata->poll_interval is %d\n", lis3dh_pdata->poll_interval);
+	}
+
+	rc = of_property_read_u32(np, "lis3dh,axis_map_x", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read axis_map_x\n");
+		return rc;
+	} else {
+		lis3dh_pdata->axis_map_x = (u8)temp_val;
+	}
+
+	rc = of_property_read_u32(np, "lis3dh,axis_map_y", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read axis_map_y\n");
+		return rc;
+	} else {
+		lis3dh_pdata->axis_map_y = (u8)temp_val;
+	}
+
+	rc = of_property_read_u32(np, "lis3dh,axis_map_z", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read axis_map_z\n");
+		return rc;
+	} else {
+		lis3dh_pdata->axis_map_z = (u8)temp_val;
+	}
+
+	rc = of_property_read_u32(np, "lis3dh,g_range", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read g_range\n");
+		return rc;
+	} else {
+		switch (temp_val) {
+		case 2:
+			lis3dh_pdata->g_range = LIS3DH_ACC_G_2G;
+			break;
+		case 4:
+			lis3dh_pdata->g_range = LIS3DH_ACC_G_4G;
+			break;
+		case 8:
+			lis3dh_pdata->g_range = LIS3DH_ACC_G_8G;
+			break;
+		default:
+			lis3dh_pdata->g_range = LIS3DH_ACC_G_2G;
+			break;
+		}
+	}
+
+	rc = of_property_read_u32(np, "lis3dh,negate_x", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read negate_x\n");
+		return rc;
+	} else {
+		lis3dh_pdata->negate_x = (u8)temp_val;
+	}
+
+	rc = of_property_read_u32(np, "lis3dh,negate_y", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read negate_y\n");
+		return rc;
+	} else {
+		lis3dh_pdata->negate_y = (u8)temp_val;
+	}
+
+	rc = of_property_read_u32(np, "lis3dh,negate_z", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read negate_z\n");
+		return rc;
+	} else {
+		lis3dh_pdata->negate_z = (u8)temp_val;
+	}
+
+	lis3dh_pdata->init = NULL;
+	lis3dh_pdata->exit = NULL;
+	lis3dh_pdata->gpio_int1 = -EINVAL;
+	lis3dh_pdata->gpio_int2 = -EINVAL;
+
+	return 0;
+}
 
 static int lis3dh_acc_probe(struct i2c_client *client,
 		const struct i2c_device_id *id)
@@ -1278,13 +1379,13 @@ static int lis3dh_acc_probe(struct i2c_client *client,
 	int err = -1;
 
 	pr_info("%s: probe start.\n", LIS3DH_ACC_DEV_NAME);
-
+/*
 	if (client->dev.platform_data == NULL) {
 		dev_err(&client->dev, "platform data is NULL. exiting.\n");
 		err = -ENODEV;
 		goto exit_check_functionality_failed;
 	}
-
+*/
 	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
 		dev_err(&client->dev, "client not i2c capable\n");
 		err = -ENODEV;
@@ -1326,7 +1427,8 @@ static int lis3dh_acc_probe(struct i2c_client *client,
 	acc->client = client;
 	i2c_set_clientdata(client, acc);
 
-	acc->pdata = kmalloc(sizeof(*acc->pdata), GFP_KERNEL);
+	//acc->pdata = kmalloc(sizeof(*acc->pdata), GFP_KERNEL);
+    acc->pdata = kzalloc(sizeof(struct lis3dh_acc_platform_data), GFP_KERNEL);
 	if (acc->pdata == NULL) {
 		err = -ENOMEM;
 		dev_err(&client->dev,
@@ -1335,7 +1437,16 @@ static int lis3dh_acc_probe(struct i2c_client *client,
 		goto err_mutexunlock;
 	}
 
-	memcpy(acc->pdata, client->dev.platform_data, sizeof(*acc->pdata));
+	//memcpy(acc->pdata, client->dev.platform_data, sizeof(*acc->pdata));
+	if (client->dev.of_node) {
+		memset(acc->pdata, 0 , sizeof(struct lis3dh_acc_platform_data));
+		err = lis3dh_parse_dt(&client->dev, acc->pdata);
+		if (err) {
+			dev_err(&client->dev,
+				"Unable to parse platfrom data err=%d\n", err);
+			return err;
+		}
+	}
 
 	err = lis3dh_acc_validate_pdata(acc);
 	if (err < 0) {
@@ -1558,10 +1669,19 @@ static const struct i2c_device_id lis3dh_acc_id[]
 
 MODULE_DEVICE_TABLE(i2c, lis3dh_acc_id);
 
+#ifdef CONFIG_OF
+static struct of_device_id lis3dh_match_table[] = {
+        { .compatible = "ST Micro,lis3dh_acc",},
+        { },
+};
+#else
+#define lis3dh_match_table NULL
+#endif
 static struct i2c_driver lis3dh_acc_driver = {
 	.driver = {
 			.owner = THIS_MODULE,
 			.name = LIS3DH_ACC_DEV_NAME,
+			.of_match_table = lis3dh_match_table,
 		  },
 	.probe = lis3dh_acc_probe,
 	.remove = __devexit_p(lis3dh_acc_remove),
diff --git a/drivers/input/misc/tmd27713.c b/drivers/input/misc/tmd27713.c
new file mode 100644
index 0000000..67d46c8
--- /dev/null
+++ b/drivers/input/misc/tmd27713.c
@@ -0,0 +1,1804 @@
+/********************************************************************************
+* Device driver for monitoring ambient light intensity (lux) and proximity
+* detection for the TAOS TSL2x7x and TMD2x7x family of devices.
+*
+* Copyright (c) 2012, TAOS Corporation.
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 2 of the License, or
+* (at your option) any later vers ion.
+*
+* This program is distributed in the hope that it will be useful, but WITHOUT
+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+* more details.
+*
+* You should have received a copy of the GNU General Public License along
+* with this program; if not, write to the Free Software Foundation, Inc.,
+* 51 Franklin Street, Fifth Floor, Boston, MA      02110-1301, USA.
+********************************************************************************/
+
+/********************************************************************************
+*										*
+*   File Name:    tmd27713.c							*
+*   Description:   Linux device driver for Taos ambient light and		*
+*   proximity sensors.								*
+   Author:         John Koshi							*
+*   History:	09/16/2009 - Initial creation					*
+*				10/09/2009 - Triton version			*
+*				12/21/2009 - Probe/remove mode			*
+*				02/07/2010 - Add proximity			*
+*										*
+********************************************************************************/
+#include <linux/kernel.h>
+#include <linux/fs.h>
+#include <linux/cdev.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/i2c.h>
+#include <linux/hwmon.h>
+#include <linux/timer.h>
+#include <asm/uaccess.h>
+#include <asm/errno.h>
+#include <asm/delay.h>
+#include <linux/taos_common.h>
+#include <linux/delay.h>
+#include <linux/irq.h>
+#include <linux/interrupt.h>
+#include <linux/slab.h>
+#include <mach/gpio.h>
+#include <linux/poll.h>
+#include <linux/wakelock.h>
+#include <linux/input.h>
+#include <linux/workqueue.h>
+#include <linux/earlysuspend.h>
+
+// device name/id/address/counts
+#define TAOS_SENSOR_TMD2771_NAME	"tmd27713"
+#define TAOS_DEVICE_NAME                TAOS_SENSOR_TMD2771_NAME
+#define TAOS_DEVICE_ID                  TAOS_SENSOR_TMD2771_NAME
+#define TAOS_INPUT_NAME			TAOS_SENSOR_TMD2771_NAME
+#define TAOS_SENSOR_INFO		"1.0"
+
+#define TAOS_ID_NAME_SIZE               10
+#define TAOS_MAX_NUM_DEVICES            1
+#define TAOS_MAX_DEVICE_REGS            32
+#define I2C_MAX_ADAPTERS                9
+
+// TRITON register offsets
+#define TAOS_TRITON_CNTRL               0x00
+#define TAOS_TRITON_ALS_TIME            0X01
+#define TAOS_TRITON_PRX_TIME            0x02
+#define TAOS_TRITON_WAIT_TIME           0x03
+#define TAOS_TRITON_ALS_MINTHRESHLO     0X04
+#define TAOS_TRITON_ALS_MINTHRESHHI     0X05
+#define TAOS_TRITON_ALS_MAXTHRESHLO     0X06
+#define TAOS_TRITON_ALS_MAXTHRESHHI     0X07
+#define TAOS_TRITON_PRX_MINTHRESHLO     0X08
+#define TAOS_TRITON_PRX_MINTHRESHHI     0X09
+#define TAOS_TRITON_PRX_MAXTHRESHLO     0X0A
+#define TAOS_TRITON_PRX_MAXTHRESHHI     0X0B
+#define TAOS_TRITON_INTERRUPT           0x0C
+#define TAOS_TRITON_PRX_CFG             0x0D
+#define TAOS_TRITON_PRX_COUNT           0x0E
+#define TAOS_TRITON_GAIN                0x0F
+#define TAOS_TRITON_REVID               0x11
+#define TAOS_TRITON_CHIPID              0x12
+#define TAOS_TRITON_STATUS              0x13
+#define TAOS_TRITON_ALS_CHAN0LO         0x14
+#define TAOS_TRITON_ALS_CHAN0HI         0x15
+#define TAOS_TRITON_ALS_CHAN1LO         0x16
+#define TAOS_TRITON_ALS_CHAN1HI         0x17
+#define TAOS_TRITON_PRX_LO              0x18
+#define TAOS_TRITON_PRX_HI              0x19
+#define TAOS_TRITON_TEST_STATUS         0x1F
+
+// Triton cmd reg masks
+#define TAOS_TRITON_CMD_REG		0X80
+#define TAOS_TRITON_CMD_AUTO		0x10
+#define TAOS_TRITON_CMD_BYTE_RW		0x00
+#define TAOS_TRITON_CMD_SPL_FN		0x60
+#define TAOS_TRITON_CMD_PROX_INTCLR	0X05
+#define TAOS_TRITON_CMD_ALS_INTCLR	0X06
+#define TAOS_TRITON_CMD_INTCLR		0X07
+
+// Triton cntrl reg masks
+#define TAOS_TRITON_CNTL_PROX_INT_ENBL	0X20
+#define TAOS_TRITON_CNTL_ALS_INT_ENBL	0X10
+#define TAOS_TRITON_CNTL_WAIT_TMR_ENBL	0X08
+#define TAOS_TRITON_CNTL_PROX_DET_ENBL	0X04
+#define TAOS_TRITON_CNTL_SENS_ENBL	0x0F
+#define TAOS_TRITON_CNTL_ADC_ENBL	0x02
+#define TAOS_TRITON_CNTL_PWRON		0x01
+
+// Triton status reg masks
+#define TAOS_TRITON_STATUS_ADCVALID	0x01
+
+// lux constants
+#define TAOS_MAX_LUX			10000
+#define TAOS_FILTER_DEPTH		3
+
+// forward declarations
+struct taos_data;
+
+static int taos_probe(struct i2c_client *clientp,
+		      const struct i2c_device_id *idp);
+static int taos_remove(struct i2c_client *client);
+#ifdef CONFIG_HAS_EARLYSUSPEND
+static void taos_early_suspend(struct early_suspend *h);
+static void taos_late_resume(struct early_suspend *h);
+#endif
+static int taos_open(struct inode *inode, struct file *file);
+static int taos_release(struct inode *inode, struct file *file);
+static long taos_ioctl(struct file *file, unsigned int cmd, unsigned long arg);
+static int taos_read(struct file *file, char *buf, size_t count, loff_t * ppos);
+static int taos_write(struct file *file, const char *buf, size_t count,
+		loff_t * ppos);
+static loff_t taos_llseek(struct file *file, loff_t offset, int orig);
+static int taos_get_lux(void);
+static int taos_device_name(unsigned char *bufp, char **device_name);
+static int taos_prox_poll(struct taos_prox_info *prxp);
+
+static int taos_als_threshold_set(void);
+static int taos_prox_threshold_set(void);
+static int taos_als_get_data(void);
+
+#define PS_INT_CLR	0
+#define ALS_INT_CLR	1
+static int taos_ps_als_int_clear(int type);
+static int sensor_on(void);
+static int sensor_off(void);
+static int taos_als_calibrate(void);
+static int taos_ps_calibrate(void);
+static int taos_als_power_on(struct taos_data *taos_datap);
+static int taos_als_power_off(struct taos_data *taos_datap);
+static int taos_ps_power_on(struct taos_data *taos_datap);
+static int taos_ps_power_off(struct taos_data *taos_datap);
+
+DECLARE_WAIT_QUEUE_HEAD(waitqueue_read);
+
+static unsigned int ReadEnable = 0;
+struct ReadData {
+	unsigned int data;
+	unsigned int interrupt;
+};
+struct ReadData readdata[2];
+
+// first device number
+static dev_t taos_dev_number;
+
+// class structure for this device
+struct class *taos_class;
+
+// module device table
+static struct i2c_device_id taos_idtable[] = {
+	{TAOS_DEVICE_ID, 0},
+	{}
+};
+
+MODULE_DEVICE_TABLE(i2c, taos_idtable);
+
+// client and device
+struct i2c_client *my_clientp;
+static char pro_buf[4];
+static int mcount = 0;
+static char als_buf[4];
+u16 status = 0;
+static int ALS_ON = 0;
+static int PS_ON = 0;
+
+
+#ifdef CONFIG_OF
+static struct of_device_id goodix_match_table[] = {
+                { .compatible = "taos,tmd27713",},
+                { },
+        };
+#else
+#define goodix_match_table NULL
+#endif
+// driver definition
+static struct i2c_driver taos_driver = {
+	.driver = {
+		   .owner = THIS_MODULE,
+		   .name = TAOS_DEVICE_NAME,
+           .of_match_table = goodix_match_table,
+	},
+	.id_table = taos_idtable,
+	.probe = taos_probe,
+	.remove = __devexit_p(taos_remove),
+};
+
+// per-device data
+struct taos_data {
+	struct i2c_client *client;
+	struct cdev cdev;
+	struct input_dev *input_dev;
+	struct work_struct work;
+	struct mutex date_lock;
+	char taos_name[TAOS_ID_NAME_SIZE];
+	struct semaphore update_lock;
+	struct wake_lock taos_wake_lock;
+	struct early_suspend early_suspend;
+	int working;
+};
+
+static struct taos_data *taos_datap;
+
+// file operations
+static struct file_operations taos_fops = {
+	.owner = THIS_MODULE,
+	.open = taos_open,
+	.release = taos_release,
+	.read = taos_read,
+	.write = taos_write,
+	.llseek = taos_llseek,
+	.unlocked_ioctl = taos_ioctl,
+};
+
+// device configuration
+struct taos_cfg *taos_cfgp;
+static u32 calibrate_target_param = 300000;
+static u16 als_time_param = 200;
+static u16 scale_factor_param = 1;
+static u16 gain_trim_param = 512;
+static u8 filter_history_param = 3;
+static u8 gain_param = 0;
+
+//static u16 prox_threshold_hi_param = 820;
+//static u16 prox_threshold_lo_param = 550;
+
+static u16 prox_threshold_hi_param = 500;
+static u16 prox_threshold_lo_param = 400;
+
+static u16 als_threshold_hi_param = 3000;
+static u16 als_threshold_lo_param = 10;
+static u8 prox_int_time_param = 0xEE;		//50ms
+static u8 prox_adc_time_param = 0xFF;
+static u8 prox_wait_time_param = 0xEE;
+static u8 prox_intr_filter_param = 0x13;
+static u8 prox_config_param = 0x00;
+static u8 prox_pulse_cnt_param = 0x02;	//set led pulse count
+static u8 prox_gain_param = 0x20;
+
+// prox info
+struct taos_prox_info prox_cal_info[20];
+struct taos_prox_info prox_cur_info;
+struct taos_prox_info *prox_cur_infop = &prox_cur_info;
+static u8 prox_history_hi = 0;
+static u8 prox_history_lo = 0;
+static int prox_on = 0;
+static int device_released = 0;
+static u16 sat_als = 0;
+static u16 sat_prox = 0;
+
+// device reg init values
+u8 taos_triton_reg_init[16] = { 0x00, 0xFF, 0XFF, 0XFF, 0X00, 0X00, 0XFF, 0XFF,
+	0X00, 0X00, 0XFF, 0XFF, 0X00, 0X00, 0X00, 0X00
+};
+
+// lux time scale
+struct time_scale_factor {
+	u16 numerator;
+	u16 denominator;
+	u16 saturation;
+};
+struct time_scale_factor TritonTime = { 1, 0, 0 };
+
+struct time_scale_factor *lux_timep = &TritonTime;
+
+// gain table
+u8 taos_triton_gain_table[] = { 1, 8, 16, 120 };
+
+// lux data
+struct lux_data {
+	u16 ratio;
+	u16 clear;
+	u16 ir;
+};
+
+struct lux_data TritonFN_lux_data[] = {
+	{9830, 8320, 15360},
+	{12452, 10554, 22797},
+	{14746, 6234, 11430},
+	{17695, 3968, 6400},
+	{0, 0, 0}
+};
+
+struct lux_data *lux_tablep = TritonFN_lux_data;
+
+static int lux_history[TAOS_FILTER_DEPTH] = { -ENODATA, -ENODATA, -ENODATA };
+
+static int taos_read_byte(struct i2c_client *client, u8 reg)
+{
+	s32 ret;
+
+	reg &= ~TAOS_TRITON_CMD_SPL_FN;
+	reg |= TAOS_TRITON_CMD_REG | TAOS_TRITON_CMD_BYTE_RW;
+
+	ret = i2c_smbus_read_byte_data(client, reg);
+	return ret;
+}
+
+static int taos_write_byte(struct i2c_client *client, u8 reg, u8 data)
+{
+	s32 ret;
+
+	reg &= ~TAOS_TRITON_CMD_SPL_FN;
+	reg |= TAOS_TRITON_CMD_REG | TAOS_TRITON_CMD_BYTE_RW;
+
+	ret = i2c_smbus_write_byte_data(client, reg, data);
+	return (int)ret;
+}
+
+static irqreturn_t taos_irq_handler(int irq, void *dev_id)
+{
+	schedule_work(&taos_datap->work);
+
+	return IRQ_HANDLED;
+}
+
+static int taos_ps_als_int_clear(int type)
+{
+	int ret = 0;
+	u8 cl_irq = 0;
+
+	if (type == PS_INT_CLR)
+		cl_irq = 0x05;
+	else
+		cl_irq = 0x06;
+
+	if ((ret = (i2c_smbus_write_byte(taos_datap->client,
+			(TAOS_TRITON_CMD_REG | TAOS_TRITON_CMD_SPL_FN | cl_irq)))) < 0) {
+				printk(KERN_ERR "TAOS: clear interrupt failed in %s\n",
+		       __func__);
+		return (ret);
+	}
+
+	return ret;
+}
+
+static int taos_get_data(void)
+{
+	int ret = 0;
+
+//	printk(KERN_ERR "%s start\n", __func__);
+	if ((status = taos_read_byte(taos_datap->client, TAOS_TRITON_STATUS)) < 0) {
+		printk(KERN_ERR "%s: read the chip status is failed\n",
+		       __func__);
+		return ret;
+	}
+
+	if ((status & 0x01) == 0x01) {
+//		printk("[ tmd27713] <%s> status == 0x01\n", __func__);
+		ReadEnable = 1;
+		taos_als_threshold_set();
+		taos_als_get_data();
+		taos_ps_als_int_clear(ALS_INT_CLR);
+	}
+	if ((status & 0x20) == 0x20) {
+//		printk("[ tmd27713] <%s> status == 0x20\n", __func__);
+		ret = taos_prox_threshold_set();
+		if (ret >= 0)
+			ReadEnable = 1;
+		taos_ps_als_int_clear(PS_INT_CLR);
+	}
+
+	return ret;
+}
+
+static void taos_work_func(struct work_struct *work)
+{
+//	printk("[ tmd27713] < %s >\n", __func__);
+	mutex_lock(&taos_datap->date_lock);
+	taos_get_data();
+	mutex_unlock(&taos_datap->date_lock);
+}
+
+static int taos_als_get_data(void)
+{
+	int ret = 0;
+	u8 reg_val;
+	int lux_val = 0;
+
+	if ((reg_val = taos_read_byte(taos_datap->client, TAOS_TRITON_CNTRL)) < 0) {
+		printk(KERN_ERR "%s: read TAOS_TRITON_CNTRL is failed\n",
+		       __func__);
+		return reg_val;
+	}
+	if ((reg_val & (TAOS_TRITON_CNTL_ADC_ENBL | TAOS_TRITON_CNTL_PWRON)) !=
+	    (TAOS_TRITON_CNTL_ADC_ENBL | TAOS_TRITON_CNTL_PWRON)) {
+		printk("%s:adc and power is disenable\n", __func__);
+		return ret;
+	}
+
+	if ((reg_val = taos_read_byte(taos_datap->client, TAOS_TRITON_STATUS)) < 0) {
+		printk(KERN_ERR "%s: read TAOS_TRITON_STATUS is failed\n",
+		       __func__);
+		return reg_val;
+	}
+	if ((reg_val & TAOS_TRITON_STATUS_ADCVALID) !=
+	    TAOS_TRITON_STATUS_ADCVALID) {
+		printk("%s:read the chip status value is failed\n", __func__);
+		return ret;
+	}
+
+	if ((lux_val = taos_get_lux()) < 0)
+		printk(KERN_ERR
+		       "TAOS: call to taos_get_lux() returned error %d in ioctl als_data\n",
+		       lux_val);
+	input_report_abs(taos_datap->input_dev, ABS_MISC, lux_val);
+	input_sync(taos_datap->input_dev);
+
+	return ret;
+}
+
+static int taos_als_threshold_set(void)
+{
+	int i, ret = 0;
+	u8 chdata[2];
+	u16 ch0;
+
+	for (i = 0; i < 2; i++) {
+		chdata[i] = taos_read_byte(taos_datap->client,
+				   TAOS_TRITON_ALS_CHAN0LO + i);
+	}
+
+	ch0 = chdata[0] + chdata[1] * 256;
+	als_threshold_hi_param = (12 * ch0) / 10;
+	if (als_threshold_hi_param >= 65535)
+		als_threshold_hi_param = 65535;
+	als_threshold_lo_param = (8 * ch0) / 10;
+	als_buf[0] = als_threshold_lo_param & 0x0ff;
+	als_buf[1] = als_threshold_lo_param >> 8;
+	als_buf[2] = als_threshold_hi_param & 0x0ff;
+	als_buf[3] = als_threshold_hi_param >> 8;
+
+	for (mcount = 0; mcount < 4; mcount++) {
+		if ((ret = taos_write_byte(taos_datap->client,
+				     TAOS_TRITON_ALS_MINTHRESHLO + mcount, als_buf[mcount])) < 0) {
+			printk(KERN_ERR
+			       "TAOS: write als failed in taos als threshold set\n");
+			return (ret);
+		}
+	}
+	return ret;
+}
+
+static int taos_prox_threshold_set(void)
+{
+	int i, ret = 0;
+	u8 chdata[6];
+	u16 proxdata = 0;
+	int data = 0;
+//	printk(KERN_ERR "%s start\n", __func__);
+	for (i = 0; i < 6; i++) {
+		chdata[i] = taos_read_byte(taos_datap->client,
+				   TAOS_TRITON_ALS_CHAN0LO + i);
+	}
+	proxdata = chdata[4] | (chdata[5] << 8);
+	if (prox_on || proxdata < taos_cfgp->prox_threshold_lo) {
+/*set prox_threshold_hi = 500*/
+		pro_buf[0] = 0x00;
+		pro_buf[1] = 0x00;
+		pro_buf[2] = 0xF4;
+		pro_buf[3] = 0x01;
+		data = 1;
+		input_report_abs(taos_datap->input_dev, ABS_DISTANCE, data);
+		input_sync(taos_datap->input_dev);
+	} else if (proxdata > taos_cfgp->prox_threshold_hi) {
+/*set prox_threshold_lo = 400*/
+		pro_buf[0] = 0x90;
+		pro_buf[1] = 0x01;
+		pro_buf[2] = 0xff;
+		pro_buf[3] = 0xff;
+		data = 0;
+		input_report_abs(taos_datap->input_dev, ABS_DISTANCE, data);
+		input_sync(taos_datap->input_dev);
+	}
+
+	for (mcount = 0; mcount < 4; mcount++) {
+		if ((ret = taos_write_byte(taos_datap->client,
+				     TAOS_TRITON_PRX_MINTHRESHLO + mcount, pro_buf[mcount])) < 0) {
+			printk(KERN_ERR"%s: wirte the proximity threshold is faild\n",
+			       __func__);
+			return (ret);
+		}
+	}
+
+	prox_on = 0;
+	return ret;
+}
+
+/* ATTR  */
+static ssize_t info_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	return sprintf(buf, "Chip: TAOS %s\nVersion: %s\n",
+		       TAOS_SENSOR_TMD2771_NAME, TAOS_SENSOR_INFO);
+}
+
+static DEVICE_ATTR(info, S_IRUGO | S_IWUSR | S_IWGRP | S_IWOTH,
+		   info_show, NULL);
+
+static int fl = 0;
+
+static ssize_t enable_als_store(struct device *dev,
+		 struct device_attribute *attr, const char *buf, size_t count)
+{
+	if (strncmp(buf, "1", 1) == 0) {
+		if (fl == 0) {
+			enable_irq(taos_datap->client->irq);
+			fl = 1;
+		}
+		taos_als_power_on(taos_datap);
+	} else {
+		if (fl == 1) {
+			disable_irq(taos_datap->client->irq);
+			fl = 0;
+		}
+		taos_als_power_off(taos_datap);
+	}
+
+	return count;
+}
+
+static ssize_t enable_als_show(struct device *dev,
+	struct device_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%d\n", ! !(ALS_ON));
+}
+
+static DEVICE_ATTR(enable_als, S_IRUGO | S_IWUSR | S_IWGRP | S_IWOTH,
+		   enable_als_show, enable_als_store);
+
+static ssize_t enable_ps_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t count)
+{
+	if (strncmp(buf, "1", 1) == 0) {
+		if (fl == 0) {
+			enable_irq(taos_datap->client->irq);
+			fl = 1;
+		}
+		sensor_on();
+		taos_ps_calibrate();
+		taos_ps_power_on(taos_datap);
+	} else {
+		if (fl == 1) {
+			disable_irq(taos_datap->client->irq);
+			fl = 0;
+		}
+		taos_ps_power_off(taos_datap);
+		sensor_off();
+	}
+	return count;
+}
+
+static ssize_t enable_ps_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%d\n", ! !(PS_ON));
+}
+
+static DEVICE_ATTR(enable_ps, S_IRUGO | S_IWUSR | S_IWGRP | S_IWOTH,
+		   enable_ps_show, enable_ps_store);
+
+static ssize_t ps_adc_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct taos_prox_info prxp;
+
+	memset(&prxp, 0, sizeof(prxp));
+	taos_prox_poll(&prxp);
+
+	return sprintf(buf, "%d\n", prxp.prox_data);
+}
+
+static DEVICE_ATTR(raw_adc, S_IRUGO, ps_adc_show, NULL);
+
+static ssize_t als_lux_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	int lux;
+
+	lux = taos_get_lux();
+
+	return sprintf(buf, "%d\n", lux);
+}
+
+static DEVICE_ATTR(lux_adc, S_IRUGO, als_lux_show, NULL);
+
+static struct attribute *tmd2771_attributes[] = {
+	&dev_attr_info.attr,
+	&dev_attr_enable_als.attr,
+	&dev_attr_enable_ps.attr,
+	&dev_attr_raw_adc.attr,
+	&dev_attr_lux_adc.attr,
+	NULL
+};
+
+static struct attribute_group tmd2771_attribute_group = {
+	.attrs = tmd2771_attributes,
+};
+
+/* ATTR end */
+// driver init
+static int __init taos_init(void)
+{
+	int ret = 0;
+
+	if ((ret = (alloc_chrdev_region(&taos_dev_number, 0,
+			TAOS_MAX_NUM_DEVICES, TAOS_DEVICE_NAME))) < 0) {
+		printk(KERN_ERR
+		       "TAOS: alloc_chrdev_region() failed in taos_init()\n");
+		goto exit_init;
+	}
+	taos_class = class_create(THIS_MODULE, TAOS_DEVICE_NAME);
+	taos_datap = kmalloc(sizeof(struct taos_data), GFP_KERNEL);
+	if (!taos_datap) {
+		printk(KERN_ERR
+		       "TAOS: kmalloc for struct taos_data failed in taos_init()\n");
+		ret = -ENOMEM;
+		goto exit_init;
+	}
+	memset(taos_datap, 0, sizeof(struct taos_data));
+	cdev_init(&taos_datap->cdev, &taos_fops);
+	taos_datap->cdev.owner = THIS_MODULE;
+	if ((ret = (cdev_add(&taos_datap->cdev, taos_dev_number, 1))) < 0) {
+		printk(KERN_ERR "TAOS: cdev_add() failed in taos_init()\n");
+		goto err_taos_datap_kfree;
+	}
+	device_create(taos_class, NULL, MKDEV(MAJOR(taos_dev_number), 0),
+		      &taos_driver, "tmd27713");
+	if ((ret = (i2c_add_driver(&taos_driver))) < 0) {
+		printk(KERN_ERR
+		       "TAOS: i2c_add_driver() failed in taos_init()\n");
+		goto err_taos_datap_kfree;
+	}
+	wake_lock_init(&taos_datap->taos_wake_lock, WAKE_LOCK_SUSPEND,
+		       "taos_wake_lock");
+
+	goto exit_init;
+
+ err_taos_datap_kfree:
+//	printk("[ tmd27713] kfree(taos_datap)\n");
+	kfree(taos_datap);
+ exit_init:
+	return ret;
+}
+
+// driver exit
+static void __exit taos_exit(void)
+{
+	if (my_clientp)
+		i2c_unregister_device(my_clientp);
+	i2c_del_driver(&taos_driver);
+	unregister_chrdev_region(taos_dev_number, TAOS_MAX_NUM_DEVICES);
+	device_destroy(taos_class, MKDEV(MAJOR(taos_dev_number), 0));
+	cdev_del(&taos_datap->cdev);
+	class_destroy(taos_class);
+	disable_irq(taos_datap->client->irq);
+	kfree(taos_datap);
+}
+
+static int tmd_parse_dt(struct device *dev,
+				struct tmd2771x_platform_data *tmd_pdata)
+{
+	struct device_node *np = dev->of_node;
+	u32 temp_val;
+	int rc;
+	rc = of_property_read_u32(np, "taos,pdrive", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read min-interval\n");
+		return rc;
+	} else {
+		tmd_pdata->pdrive = (u8)temp_val;
+        printk("wxl pdrive = %d\n",tmd_pdata->pdrive);
+	}
+
+	rc = of_property_read_u32(np, "taos,ppcount", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read init-interval\n");
+		return rc;
+	} else {
+		tmd_pdata->ppcount = (u8)temp_val;
+	}
+
+	rc = of_property_read_u32(np, "taos,irq_gpio", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read axis-map_x\n");
+		return rc;
+	} else {
+		tmd_pdata->irq_gpio = temp_val;
+	}
+
+	return 0;
+}
+/*
+struct tmd2771x_platform_data tmd_pdata = {
+	.pdrive = 0x03,
+	.ppcount = 0x08,
+	.irq_gpio = 80,
+	.setup_resources = NULL,
+	.release_resources = NULL,
+};
+*/
+// client probe
+static int taos_probe(struct i2c_client *clientp,
+		      const struct i2c_device_id *idp)
+{
+	int ret = 0;
+	int i = 0;
+	unsigned char buf[TAOS_MAX_DEVICE_REGS];
+	char *device_name;
+	struct tmd2771x_platform_data *pdata;
+
+	if (!i2c_check_functionality
+	    (clientp->adapter, I2C_FUNC_SMBUS_BYTE_DATA)) {
+		printk(KERN_ERR
+		       "TAOS: taos_probe() - i2c smbus byte data functions unsupported\n");
+		return -EOPNOTSUPP;
+	}
+	if (!i2c_check_functionality
+	    (clientp->adapter, I2C_FUNC_SMBUS_WORD_DATA)) {
+		printk(KERN_ERR
+		       "TAOS: taos_probe() - i2c smbus word data functions unsupported\n");
+	}
+	if (!i2c_check_functionality
+	    (clientp->adapter, I2C_FUNC_SMBUS_BLOCK_DATA)) {
+		printk(KERN_ERR
+		       "TAOS: taos_probe() - i2c smbus block data functions unsupported\n");
+	}
+	taos_datap->client = clientp;
+	i2c_set_clientdata(clientp, taos_datap);
+
+
+    pdata = kzalloc(sizeof(*pdata), GFP_KERNEL);
+        if (!pdata) {
+                    dev_err(&clientp->dev,
+                                        "failed to allocate memory for module data\n");
+                            return -ENOMEM;
+                                }
+
+    if (clientp->dev.of_node) {
+		memset(pdata, 0 , sizeof(*pdata));
+		ret = tmd_parse_dt(&clientp->dev, pdata);
+		if (ret) {
+			dev_err(&clientp->dev,
+				"Unable to parse platfrom data err=%d\n", ret);
+			return ret;
+		}
+    }
+	INIT_WORK(&(taos_datap->work), taos_work_func);
+	sema_init(&taos_datap->update_lock, 1);
+	mutex_init(&taos_datap->date_lock);
+	taos_datap->input_dev = input_allocate_device();
+	if (taos_datap->input_dev == NULL) {
+		printk("[tmd27713] probe error\n");
+		return -ENOMEM;
+	}
+
+	taos_datap->input_dev->name = TAOS_INPUT_NAME;
+	taos_datap->input_dev->id.bustype = BUS_I2C;
+	set_bit(EV_ABS, taos_datap->input_dev->evbit);
+	input_set_capability(taos_datap->input_dev, EV_ABS, ABS_DISTANCE);
+	input_set_capability(taos_datap->input_dev, EV_ABS, ABS_MISC);
+	input_set_abs_params(taos_datap->input_dev, ABS_MISC, 0, 10000, 0, 0);
+	input_set_abs_params(taos_datap->input_dev, ABS_DISTANCE, 0, 1, 0, 0);
+	ret = input_register_device(taos_datap->input_dev);
+
+	for (i = 0; i < TAOS_MAX_DEVICE_REGS; i++) {
+		if ((buf[i] = taos_read_byte(clientp, TAOS_TRITON_CNTRL + i)) < 0) {
+			printk("%s: read the every reg is faild\n", __func__);
+			goto err_unregister_input_dev;
+		}
+	}
+
+/*compare chip-id*/
+	if ((ret = taos_device_name(buf, &device_name)) == 0) {
+		printk(KERN_ERR
+		       "TAOS: chip id that was read found mismatched by taos_device_name(), in taos_probe()\n");
+		ret = -ENODEV;
+		goto err_unregister_input_dev;
+	}
+
+	if (strcmp(device_name, TAOS_DEVICE_ID)) {
+		printk(KERN_ERR
+		       "TAOS: chip id that was read does not match expected id in taos_probe()\n");
+		ret = -ENODEV;
+		goto err_unregister_input_dev;
+	} else {
+		pr_debug("TAOS: chip id of %s that was read matches expected id in taos_probe()\n",
+		     device_name);
+	}
+
+	strlcpy(clientp->name, TAOS_DEVICE_ID, I2C_NAME_SIZE);
+	strlcpy(taos_datap->taos_name, TAOS_DEVICE_ID, TAOS_ID_NAME_SIZE);
+
+	if (!(taos_cfgp = kmalloc(sizeof(struct taos_cfg), GFP_KERNEL))) {
+		printk(KERN_ERR
+		       "TAOS: kmalloc for struct taos_cfg failed in taos_probe()\n");
+		ret = -ENOMEM;
+		goto err_unregister_input_dev;
+	}
+
+	taos_cfgp->calibrate_target = calibrate_target_param;
+	taos_cfgp->als_time = als_time_param;
+	taos_cfgp->scale_factor = scale_factor_param;
+	taos_cfgp->gain_trim = gain_trim_param;
+	taos_cfgp->filter_history = filter_history_param;
+	taos_cfgp->gain = gain_param;
+	taos_cfgp->als_threshold_hi = als_threshold_hi_param;
+	taos_cfgp->als_threshold_lo = als_threshold_lo_param;
+	taos_cfgp->prox_threshold_hi = prox_threshold_hi_param;
+	taos_cfgp->prox_threshold_lo = prox_threshold_lo_param;
+	taos_cfgp->prox_int_time = prox_int_time_param;
+	taos_cfgp->prox_adc_time = prox_adc_time_param;
+	taos_cfgp->prox_wait_time = prox_wait_time_param;
+	taos_cfgp->prox_intr_filter = prox_intr_filter_param;
+	taos_cfgp->prox_config = prox_config_param;
+	taos_cfgp->prox_pulse_cnt = prox_pulse_cnt_param;
+	taos_cfgp->prox_gain = prox_gain_param;
+	sat_als = (256 - taos_cfgp->prox_int_time) << 10;
+	sat_prox = (256 - taos_cfgp->prox_adc_time) << 10;
+
+	if ((ret = taos_write_byte(taos_datap->client, TAOS_TRITON_CNTRL,
+			     0x00)) < 0) {
+		printk(KERN_ERR "%s: write the chip power down is failed\n",
+		       __func__);
+		goto err_taos_cfgp_kfree;
+	}
+
+	printk("[ tmd27713]clientp->irq = %d\n", clientp->irq);
+
+	ret = gpio_request(pdata->irq_gpio, "taos_irq");
+	if (ret) {
+		printk(KERN_ALERT "%s: gp2ap request gpio failed.\n",
+		       __func__);
+		return ret;
+	}
+	gpio_tlmm_config(GPIO_CFG(pdata->irq_gpio, 0, GPIO_CFG_INPUT,
+				GPIO_CFG_PULL_UP, GPIO_CFG_8MA),
+			GPIO_CFG_ENABLE);
+	ret = request_irq(clientp->irq, taos_irq_handler, IRQ_TYPE_EDGE_FALLING,
+			"taos_irq", taos_datap);
+	printk("[ tmd27713]request_irq ret = %d\n", ret);
+
+	if (ret != 0) {
+		printk("\nrequest tmd27713 irq : %d failed\n", clientp->irq);
+		goto err_taos_cfgp_kfree;
+	}
+
+	printk("request tmd27713 irq : %d succeed\n", clientp->irq);
+	disable_irq(clientp->irq);
+
+	if (taos_datap == NULL) {
+		printk("[tmd27713] taos_datap == NULL\n");
+	}
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	taos_datap->early_suspend.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN + 1;
+	taos_datap->early_suspend.suspend = taos_early_suspend;
+	taos_datap->early_suspend.resume = taos_late_resume;
+	register_early_suspend(&taos_datap->early_suspend);
+#endif
+
+	ret = sysfs_create_group(&taos_datap->input_dev->dev.kobj,
+			       &tmd2771_attribute_group);
+	if (!ret)
+		goto exit;
+
+ err_taos_cfgp_kfree:
+	kfree(taos_cfgp);
+ err_unregister_input_dev:
+	input_unregister_device(taos_datap->input_dev);
+ exit:
+	return ret;
+}
+
+// client remove
+static int __devexit taos_remove(struct i2c_client *client)
+{
+	kfree(taos_cfgp);
+	unregister_early_suspend(&taos_datap->early_suspend);
+	input_unregister_device(taos_datap->input_dev);
+	sysfs_remove_group(&taos_datap->input_dev->dev.kobj,
+			   &tmd2771_attribute_group);
+
+	return 0;
+}
+
+//resume
+#ifdef CONFIG_HAS_EARLYSUSPEND
+static u8 reg_store = 0;
+static void taos_late_resume(struct early_suspend *h)
+{
+	u8 reg_val = 0, reg_cntrl = 0;
+	int ret = -1;
+
+	if ((reg_val = taos_read_byte(taos_datap->client, TAOS_TRITON_CNTRL)) < 0) {
+		printk("TAOS: read byte is failed in resume\n");
+		return;
+	}
+	if (taos_datap->working == 1) {
+		taos_datap->working = 0;
+		reg_cntrl = reg_val | TAOS_TRITON_CNTL_PWRON;
+		if ((ret = taos_write_byte(taos_datap->client, TAOS_TRITON_CNTRL, reg_store)) < 0) {	//reg_cntrl)) < 0) {
+			printk(KERN_ERR
+			       "TAOS: write byte_data failed in ioctl als_off\n");
+			return;
+		}
+	}
+	enable_irq(taos_datap->client->irq);
+}
+
+//suspend
+static void taos_early_suspend(struct early_suspend *h)
+{
+	u8 reg_val = 0;
+	int ret = -1;
+
+	disable_irq(taos_datap->client->irq);
+	taos_datap->working = 1;
+	if ((reg_store = taos_read_byte(taos_datap->client, TAOS_TRITON_CNTRL)) < 0) {
+		printk("TAOS: read byte is failed in suspend\n");
+		return;
+	}
+	if ((ret = taos_write_byte(taos_datap->client, TAOS_TRITON_CNTRL,
+			     reg_val)) < 0) {
+		printk(KERN_ERR "TAOS: write byte failed in taos_suspend\n");
+		return;
+	}
+}
+#endif
+// open
+static int taos_open(struct inode *inode, struct file *file)
+{
+	struct taos_data *taos_datap;
+	int ret = 0;
+
+	device_released = 0;
+	taos_datap = container_of(inode->i_cdev, struct taos_data, cdev);
+	if (strcmp(taos_datap->taos_name, TAOS_DEVICE_ID) != 0) {
+		printk(KERN_ERR
+		       "TAOS: device name incorrect during taos_open(), get %s\n",
+		       taos_datap->taos_name);
+		ret = -ENODEV;
+	}
+	memset(readdata, 0, sizeof(struct ReadData) * 2);
+	enable_irq(taos_datap->client->irq);
+	return (ret);
+}
+
+// release
+static int taos_release(struct inode *inode, struct file *file)
+{
+	struct taos_data *taos_datap;
+	int ret = 0;
+
+	device_released = 1;
+	prox_on = 0;
+	prox_history_hi = 0;
+	prox_history_lo = 0;
+	taos_datap = container_of(inode->i_cdev, struct taos_data, cdev);
+	if (strcmp(taos_datap->taos_name, TAOS_DEVICE_ID) != 0) {
+		printk(KERN_ERR
+		       "TAOS: device name incorrect during taos_release(), get %s\n",
+		       taos_datap->taos_name);
+		ret = -ENODEV;
+	}
+	return (ret);
+}
+
+// read
+static int taos_read(struct file *file, char *buf, size_t count, loff_t * ppos)
+{
+	unsigned long flags;
+	int realmax;
+	int err;
+	if ((!ReadEnable) && (file->f_flags & O_NONBLOCK))
+		return -EAGAIN;
+	local_save_flags(flags);
+	local_irq_disable();
+
+	realmax = 0;
+	if (down_interruptible(&taos_datap->update_lock))
+		return -ERESTARTSYS;
+	if (ReadEnable > 0) {
+		if (sizeof(struct ReadData) * 2 < count)
+			realmax = sizeof(struct ReadData) * 2;
+		else
+			realmax = count;
+		err = copy_to_user(buf, readdata, realmax);
+		if (err)
+			return -EAGAIN;
+		ReadEnable = 0;
+	}
+	up(&taos_datap->update_lock);
+	memset(readdata, 0, sizeof(struct ReadData) * 2);
+	local_irq_restore(flags);
+	return realmax;
+}
+
+// write
+static int taos_write(struct file *file, const char *buf, size_t count,
+		      loff_t * ppos)
+{
+	struct taos_data *taos_datap;
+	u8 i = 0, xfrd = 0, reg = 0;
+	u8 my_buf[TAOS_MAX_DEVICE_REGS];
+	int ret = 0;
+
+	if ((*ppos < 0) || (*ppos >= TAOS_MAX_DEVICE_REGS)
+	    || ((*ppos + count) > TAOS_MAX_DEVICE_REGS)) {
+		printk(KERN_ERR
+		       "TAOS: reg limit check failed in taos_write()\n");
+		return -EINVAL;
+	}
+	reg = (u8) * ppos;
+	if ((ret = copy_from_user(my_buf, buf, count))) {
+		printk(KERN_ERR "TAOS: copy_to_user failed in taos_write()\n");
+		return -ENODATA;
+	}
+	taos_datap =  container_of(file->f_dentry->d_inode->i_cdev,
+					struct taos_data, cdev);
+	while (xfrd < count) {
+		if ((ret = taos_write_byte(taos_datap->client, reg,
+				     my_buf[i++])) < 0) {
+			printk(KERN_ERR
+			       "TAOS: write reg failed in taos_write()\n");
+			return (ret);
+		}
+		reg++;
+		xfrd++;
+	}
+	return ((int)xfrd);
+}
+
+// llseek
+static loff_t taos_llseek(struct file *file, loff_t offset, int orig)
+{
+	int ret = 0;
+	loff_t new_pos = 0;
+
+	if ((offset >= TAOS_MAX_DEVICE_REGS) || (orig < 0) || (orig > 1)) {
+		printk(KERN_ERR
+		       "TAOS: offset param limit or origin limit check failed in taos_llseek()\n");
+		return -EINVAL;
+	}
+	switch (orig) {
+	case 0:
+		new_pos = offset;
+		break;
+	case 1:
+		new_pos = file->f_pos + offset;
+		break;
+	default:
+		return -EINVAL;
+		break;
+	}
+	if ((new_pos < 0) || (new_pos >= TAOS_MAX_DEVICE_REGS) || (ret < 0)) {
+		printk(KERN_ERR
+		       "TAOS: new offset limit or origin limit check failed in taos_llseek()\n");
+		return -EINVAL;
+	}
+	file->f_pos = new_pos;
+	return new_pos;
+}
+
+static int sensor_on(void)
+{
+	int ret = 0;
+	int i = 0;
+
+	printk("[ tmd27713] < %s >\n", __func__);
+	for (i = 0; i < TAOS_FILTER_DEPTH; i++) {
+		lux_history[i] = -ENODATA;
+	}
+	/*ALS interrupt clear */
+	if ((ret = (i2c_smbus_write_byte
+	      (taos_datap->client,
+	       (TAOS_TRITON_CMD_REG | TAOS_TRITON_CMD_SPL_FN |
+		TAOS_TRITON_CMD_ALS_INTCLR)))) < 0) {
+		printk(KERN_ERR
+		       "TAOS: i2c_smbus_write_byte failed in ioctl als_on\n");
+		return (ret);
+	}
+	if ((ret = taos_write_byte(taos_datap->client,
+			     TAOS_TRITON_ALS_TIME,
+			     taos_cfgp->prox_int_time)) < 0) {
+		printk(KERN_ERR
+		       "TAOS: write als_time failed in ioctl prox_on\n");
+		return (ret);
+	}
+	if ((ret = taos_write_byte(taos_datap->client,
+			     TAOS_TRITON_PRX_TIME,
+			     taos_cfgp->prox_adc_time)) < 0) {
+		printk(KERN_ERR
+		       "TAOS: write prox_time failed in ioctl prox_on\n");
+		return (ret);
+	}
+	if ((ret = taos_write_byte(taos_datap->client,
+			     TAOS_TRITON_WAIT_TIME,
+			     taos_cfgp->prox_wait_time)) < 0) {
+		printk(KERN_ERR
+		       "TAOS: write wait_time failed in ioctl prox_on\n");
+		return (ret);
+	}
+	if ((ret = taos_write_byte(taos_datap->client,
+			     TAOS_TRITON_INTERRUPT,
+			     taos_cfgp->prox_intr_filter)) < 0) {
+		printk(KERN_ERR
+		       "TAOS: write interrupt failed in ioctl prox_on\n");
+		return (ret);
+	}
+	if ((ret = taos_write_byte(taos_datap->client,
+			     TAOS_TRITON_PRX_CFG,
+			     taos_cfgp->prox_config)) < 0) {
+		printk(KERN_ERR
+		       "TAOS: write prox_config failed in ioctl prox_on\n");
+		return (ret);
+	}
+	if ((ret = taos_write_byte(taos_datap->client,
+			     TAOS_TRITON_PRX_CFG,
+			     taos_cfgp->prox_config)) < 0) {
+		printk(KERN_ERR
+		       "TAOS: write prox_config failed in ioctl prox_on\n");
+		return (ret);
+	}
+	if ((ret = taos_write_byte(taos_datap->client,
+			     TAOS_TRITON_PRX_COUNT,
+			     taos_cfgp->prox_pulse_cnt)) < 0) {
+		printk(KERN_ERR
+		       "TAOS: write prox_config failed in ioctl prox_on\n");
+		return (ret);
+	}
+	if ((ret = taos_write_byte(taos_datap->client,
+			     TAOS_TRITON_GAIN, taos_cfgp->prox_gain)) < 0) {
+		printk(KERN_ERR
+		       "TAOS: write prox_config failed in ioctl prox_on\n");
+		return (ret);
+	}
+	if ((ret = taos_write_byte(taos_datap->client,
+			     TAOS_TRITON_CNTRL,
+			     TAOS_TRITON_CNTL_SENS_ENBL)) < 0) {
+		printk(KERN_ERR
+		       "TAOS: write prox_config failed in ioctl prox_on\n");
+		return (ret);
+	}
+	return 0;
+}
+
+static int sensor_off(void)
+{
+	int ret = 0;
+
+	/*turn off */
+	printk("[ tmd27713] < %s >\n", __func__);
+	printk(KERN_ERR "TAOS: TAOS_IOCTL_SENSOR_OFF\n");
+	if ((ret = taos_write_byte(taos_datap->client,
+			     TAOS_TRITON_CNTRL, 0x00)) < 0) {
+		printk(KERN_ERR
+		       "TAOS: write sensor_off failed in ioctl prox_on\n");
+		return (ret);
+	}
+	return ret;
+}
+
+static int taos_als_power_on(struct taos_data *taos_datap)
+{
+	int ret = 0, i = 0;
+	u8 itime = 0, reg_val = 0, reg_cntrl = 0;
+
+	printk("[ tmd27713] <%s>\n", __func__);
+	for (i = 0; i < TAOS_FILTER_DEPTH; i++)
+		lux_history[i] = -ENODATA;
+
+	/*ALS_INTERUPTER IS CLEAR */
+	if ((ret = (i2c_smbus_write_byte
+	      (taos_datap->client,
+	       (TAOS_TRITON_CMD_REG | TAOS_TRITON_CMD_SPL_FN |
+		TAOS_TRITON_CMD_ALS_INTCLR)))) < 0) {
+		printk(KERN_ERR
+		       "TAOS: i2c_smbus_write_byte failed in ioctl als_on\n");
+		return (ret);
+	}
+
+	itime = (((taos_cfgp->als_time / 50) * 18) - 1);
+	itime = (~itime);
+
+	if ((ret = taos_write_byte(taos_datap->client, TAOS_TRITON_ALS_TIME,
+			     itime)) < -1) {
+		printk(KERN_ERR "%s: write the als time is failed\n", __func__);
+		return ret;
+	}
+
+	if ((ret = taos_write_byte(taos_datap->client, TAOS_TRITON_INTERRUPT,
+			     taos_cfgp->prox_intr_filter)) < 0) {
+		printk(KERN_ERR "%s: write the als time is failed\n", __func__);
+		return ret;
+	}
+
+	if ((reg_val = taos_read_byte(taos_datap->client, TAOS_TRITON_GAIN)) < 0) {
+		printk(KERN_ERR "%s: read the als gain is failed\n", __func__);
+		return ret;
+	}
+
+	reg_val = reg_val & 0xFC;
+	reg_val = reg_val | (taos_cfgp->gain & 0x03);
+
+	if ((ret = taos_write_byte(taos_datap->client, TAOS_TRITON_GAIN,
+			     reg_val)) < 0) {
+		printk(KERN_ERR "%s: write the als gain is failed\n", __func__);
+		return ret;
+	}
+
+	if ((reg_cntrl = taos_read_byte(taos_datap->client, TAOS_TRITON_CNTRL)) < 0) {
+		printk(KERN_ERR
+		       "%s:  taos_read_byte TAOS_TRITON_CNTRL is failed\n",
+		       __func__);
+		return ret;
+	}
+
+	reg_cntrl |= (TAOS_TRITON_CNTL_ADC_ENBL | TAOS_TRITON_CNTL_PWRON |
+							TAOS_TRITON_CNTL_ALS_INT_ENBL);
+	if ((ret = taos_write_byte(taos_datap->client,
+				TAOS_TRITON_CNTRL, reg_cntrl)) < 0) {
+		printk(KERN_ERR "%s: write the als data is failed\n", __func__);
+		return ret;
+	}
+
+	taos_als_threshold_set();
+
+	ALS_ON = 1;
+	return ret;
+}
+
+static int taos_als_power_off(struct taos_data *taos_datap)
+{
+	int ret = 0;
+	u8 reg_val = 0;
+
+	printk("[ tmd27713] <%s>\n", __func__);
+
+	if ((reg_val = taos_read_byte(taos_datap->client, TAOS_TRITON_CNTRL)) < 0) {
+		printk(KERN_ERR "TAOS: read CNTRL failed in ioctl prox_on\n");
+		return ret;
+	}
+	reg_val = reg_val & ~(1 << 1);
+	reg_val = reg_val & ~(1 << 4);
+
+	if ((ret = taos_write_byte(taos_datap->client,
+			     TAOS_TRITON_CNTRL, reg_val)) < 0) {
+		printk(KERN_ERR "TAOS: write CNTRL failed in %s\n", __func__);
+		return (ret);
+	}
+	ALS_ON = 0;
+	return (ret);
+}
+
+static int taos_ps_power_on(struct taos_data *taos_datap)
+{
+	int ret = 0;
+	u8 reg_cntrl = 0;
+
+	printk("[ tmd27713] <%s>\n", __func__);
+printk("prox_threshold_lo = %d\nprox_threshold_hi = %d\n", taos_cfgp->prox_threshold_lo, taos_cfgp->prox_threshold_hi);
+		taos_write_byte(taos_datap->client, 0x08, taos_cfgp->prox_threshold_lo & 0x0f) ;
+		taos_write_byte(taos_datap->client, 0x09, taos_cfgp->prox_threshold_lo >> 8) ;
+		taos_write_byte(taos_datap->client, 0x0a, taos_cfgp->prox_threshold_hi & 0x0f) ;
+		taos_write_byte(taos_datap->client, 0x0b, taos_cfgp->prox_threshold_hi >> 8) ;
+	prox_on = 1;
+	if ((ret = taos_write_byte(taos_datap->client,
+			     TAOS_TRITON_PRX_TIME,
+			     taos_cfgp->prox_adc_time)) < -1) {
+		printk(KERN_ERR
+		       "%s: write the prox time is failed\n", __func__);
+		return ret;
+	}
+	if ((ret = taos_write_byte(taos_datap->client,
+			     TAOS_TRITON_WAIT_TIME,
+			     taos_cfgp->prox_wait_time)) < -1) {
+		printk(KERN_ERR
+		       "%s: write the wait time is failed\n", __func__);
+		return ret;
+	}
+	if ((ret = taos_write_byte(taos_datap->client,
+			     TAOS_TRITON_INTERRUPT,
+			     taos_cfgp->prox_intr_filter)) < -1) {
+		printk(KERN_ERR
+		       "%s: write the interrupt time is failed\n", __func__);
+		return ret;
+	}
+
+	if ((ret = taos_write_byte(taos_datap->client,
+			     TAOS_TRITON_PRX_CFG,
+			     taos_cfgp->prox_config)) < -1) {
+		printk(KERN_ERR
+		       "%s: write the prox_config is failed\n", __func__);
+		return ret;
+	}
+	if ((ret = taos_write_byte(taos_datap->client,
+			     TAOS_TRITON_PRX_COUNT,
+			     taos_cfgp->prox_pulse_cnt)) < -1) {
+		printk(KERN_ERR
+		       "%s: write the pulse count time is failed\n", __func__);
+		return ret;
+	}
+	if ((ret = taos_write_byte(taos_datap->client,
+			     TAOS_TRITON_GAIN, taos_cfgp->prox_gain)) < -1) {
+		printk(KERN_ERR
+		       "%s: write the gain time is failed\n", __func__);
+		return ret;
+	}
+	if ((reg_cntrl = taos_read_byte(taos_datap->client, TAOS_TRITON_CNTRL)) < 0) {
+		printk(KERN_ERR "TAOS: read CNTRL failed in ioctl prox_on\n");
+		return ret;
+	}
+	reg_cntrl |=
+	    TAOS_TRITON_CNTL_PROX_DET_ENBL |
+	    TAOS_TRITON_CNTL_PWRON |
+	    TAOS_TRITON_CNTL_PROX_INT_ENBL | TAOS_TRITON_CNTL_WAIT_TMR_ENBL;
+	if ((ret = (i2c_smbus_write_byte_data
+	      (taos_datap->client,
+	       (TAOS_TRITON_CMD_REG | TAOS_TRITON_CNTRL), reg_cntrl))) < 0) {
+		printk(KERN_ERR
+		       "TAOS: write reg_cntrl failed in ioctl prox_on\n");
+		return (ret);
+	}
+	taos_prox_threshold_set();
+	PS_ON = 1;
+
+	return ret;
+}
+
+static int taos_ps_power_off(struct taos_data *taos_datap)
+{
+	int ret = 0;
+	u8 reg_val = 0;
+
+	printk("[ tmd27713] <%s>\n", __func__);
+	if ((reg_val = taos_read_byte(taos_datap->client, TAOS_TRITON_CNTRL)) < 0) {
+		printk(KERN_ERR "TAOS: read CNTRL failed in ioctl prox_on\n");
+		return ret;
+	}
+	reg_val = reg_val & ~(1 << 2);
+	reg_val = reg_val & ~(1 << 5);
+	if ((ret = taos_write_byte(taos_datap->client,
+			     TAOS_TRITON_CNTRL, reg_val)) < 0) {
+		printk(KERN_ERR "TAOS: write CNTRL failed in %s\n", __func__);
+		return (ret);
+	}
+	PS_ON = 0;
+	if(ALS_ON) {
+		taos_als_power_off(taos_datap);
+		taos_als_power_on(taos_datap);
+	}
+	return ret;
+}
+
+/*ignore the automatic calculation of threshold and set by manual*/
+#define IGNORE_THRESHOLD_CALC
+static int taos_ps_calibrate(void)
+{
+	int ret = 0, i = 0;
+	u8 reg_val = 0, reg_cntrl = 0;
+#ifndef IGNORE_THRESHOLD_CALC
+	int prox_sum = 0, prox_mean = 0, prox_max = 0;
+#endif
+
+	if ((ret = taos_write_byte(taos_datap->client,
+			     TAOS_TRITON_ALS_TIME,
+			     taos_cfgp->prox_int_time)) < -1) {
+		printk(KERN_ERR "%s: write the als time is failed\n", __func__);
+		return ret;
+	}
+	if ((ret = taos_write_byte(taos_datap->client,
+			     TAOS_TRITON_PRX_TIME,
+			     taos_cfgp->prox_adc_time)) < -1) {
+		printk(KERN_ERR
+		       "%s: write the prox time is failed\n", __func__);
+		return ret;
+	}
+	if ((ret = taos_write_byte(taos_datap->client,
+			     TAOS_TRITON_WAIT_TIME,
+			     taos_cfgp->prox_wait_time)) < -1) {
+		printk(KERN_ERR
+		       "%s: write the wait time is failed\n", __func__);
+		return ret;
+	}
+	if ((ret = taos_write_byte(taos_datap->client,
+			     TAOS_TRITON_INTERRUPT,
+			     taos_cfgp->prox_intr_filter)) < -1) {
+		printk(KERN_ERR
+		       "%s: write the interrupt time is failed\n", __func__);
+		return ret;
+	}
+	if ((ret = taos_write_byte(taos_datap->client,
+			     TAOS_TRITON_PRX_CFG,
+			     taos_cfgp->prox_config)) < -1) {
+		printk(KERN_ERR
+		       "%s: write the prox_config is failed\n", __func__);
+		return ret;
+	}
+	if ((ret = taos_write_byte(taos_datap->client,
+			     TAOS_TRITON_PRX_COUNT,
+			     taos_cfgp->prox_pulse_cnt)) < -1) {
+		printk(KERN_ERR
+		       "%s: write the pulse count time is failed\n", __func__);
+		return ret;
+	}
+	if ((ret = taos_write_byte(taos_datap->client,
+			     TAOS_TRITON_GAIN, taos_cfgp->prox_gain)) < -1) {
+		printk(KERN_ERR
+		       "%s: write the gain time is failed\n", __func__);
+		return ret;
+	}
+	if ((reg_val = taos_read_byte(taos_datap->client, TAOS_TRITON_CNTRL)) < 0) {
+		printk(KERN_ERR "TAOS: read CNTRL failed in ioctl prox_on\n");
+		return ret;
+	}
+	reg_cntrl = reg_val | (TAOS_TRITON_CNTL_PROX_DET_ENBL |
+		       TAOS_TRITON_CNTL_PWRON | TAOS_TRITON_CNTL_ADC_ENBL);
+	if ((ret = taos_write_byte(taos_datap->client,
+			     TAOS_TRITON_CNTRL, reg_cntrl)) < 0) {
+		printk(KERN_ERR
+		       "TAOS: write reg_cntrl failed in ioctl prox_on\n");
+		return (ret);
+	}
+
+#ifndef IGNORE_THRESHOLD_CALC
+	prox_sum = 0;
+	prox_max = 0;
+	for (i = 0; i < 20; i++) {
+		if ((ret = taos_prox_poll(&prox_cal_info[i])) < 0) {
+			printk(KERN_ERR
+			       "TAOS: call to prox_poll failed in ioctl prox_calibrate\n");
+			return (ret);
+		}
+//		printk("[ tmd27713] <%s> %d\n", __func__, prox_cal_info[i].prox_data);
+		prox_sum += prox_cal_info[i].prox_data;
+		if (prox_cal_info[i].prox_data > prox_max)
+			prox_max = prox_cal_info[i].prox_data;
+		mdelay(100);
+	}
+	prox_mean = prox_sum / 20;
+	taos_cfgp->prox_threshold_hi =
+	    ((((prox_max - prox_mean) * 200) + 50) / 100) + prox_mean;
+	taos_cfgp->prox_threshold_lo =
+	    ((((prox_max - prox_mean) * 170) + 50) / 100) + prox_mean;
+	if (taos_cfgp->prox_threshold_hi < prox_threshold_hi_param)
+		taos_cfgp->prox_threshold_hi =
+		    (taos_cfgp->prox_threshold_hi +
+		     prox_threshold_hi_param) / 2;
+	if (taos_cfgp->prox_threshold_lo > prox_threshold_lo_param)
+		taos_cfgp->prox_threshold_lo =
+		    (taos_cfgp->prox_threshold_lo +
+		     prox_threshold_lo_param) / 2;
+	prox_mean = taos_cfgp->prox_threshold_hi - taos_cfgp->prox_threshold_lo;
+	if (prox_mean < 30) {
+		taos_cfgp->prox_threshold_hi += prox_mean / 2;
+		if (taos_cfgp->prox_threshold_lo > prox_mean)
+			taos_cfgp->prox_threshold_lo -= prox_mean / 2;
+	}
+	if (taos_cfgp->prox_threshold_lo > prox_threshold_lo_param * 3) {
+		taos_cfgp->prox_threshold_lo = prox_threshold_lo_param;
+		taos_cfgp->prox_threshold_hi = prox_threshold_hi_param;
+	}
+#else
+	taos_cfgp->prox_threshold_lo = prox_threshold_lo_param;
+	taos_cfgp->prox_threshold_hi = prox_threshold_hi_param;
+#endif
+
+	for (i = 0; i < sizeof(taos_triton_reg_init); i++) {
+		if (i != 11) {
+			if ((ret = taos_write_byte(taos_datap->client,
+					     TAOS_TRITON_CNTRL +
+					     i, taos_triton_reg_init[i])) < 0) {
+				printk(KERN_ERR
+				       "TAOS: write reg_init failed in ioctl\n");
+				return (ret);
+			}
+		}
+	}
+	printk("taos_cfgp->prox_threshold_hi = %d\n", taos_cfgp->prox_threshold_hi);
+	printk("taos_cfgp->prox_threshold_lo = %d\n", taos_cfgp->prox_threshold_lo);
+	return ret;
+}
+
+static int taos_als_calibrate(void)
+{
+	int ret = 0;
+	int lux_val = 0;
+	u16 gain_trim_val = 0;
+	u8 reg_val = 0;
+
+	printk("[ tmd27713] < %s >\n", __func__);
+	if ((reg_val = taos_read_byte(taos_datap->client, TAOS_TRITON_CNTRL)) < 0) {
+		printk(KERN_ERR
+		       "TAOS: read TAO_TRITON_CNTRL failed in ioctl als_off\n");
+		return (ret);
+	}
+	if ((reg_val & 0x07) != 0x07) {
+		return -ENODATA;
+	}
+	if ((reg_val = taos_read_byte(taos_datap->client, TAOS_TRITON_STATUS)) < 0) {
+		printk(KERN_ERR
+		       "TAOS: read TAO_TRITON_CNTRL failed in ioctl als_off\n");
+		return (ret);
+	}
+	if ((reg_val & 0x01) != 0x01) {
+		return -ENODATA;
+	}
+	if ((lux_val = taos_get_lux()) < 0) {
+		printk(KERN_ERR
+		       "TAOS: call to lux_val() returned error %d in ioctl als_data\n",
+		       lux_val);
+		return (lux_val);
+	}
+	gain_trim_val = (u16) (((taos_cfgp->calibrate_target) * 512) / lux_val);
+	taos_cfgp->gain_trim = (int)gain_trim_val;
+	return ((int)gain_trim_val);
+}
+
+// ioctls
+static long taos_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
+{
+	int lux_val = 0, ret = 0, tmp = 0;
+	u8 reg_val = 0;		//, reg_cntrl = 0;
+	u8 reg_val_temp = 0;
+
+	printk("[ tmd27713] < %s >\n", __func__);
+	switch (cmd) {
+	case TAOS_IOCTL_SENSOR_CHECK:
+		reg_val_temp = 0;
+		if ((reg_val_temp = taos_read_byte(taos_datap->client,
+				    TAOS_TRITON_CNTRL)) < 0) {
+			printk(KERN_ERR
+			       "TAOS: TAOS_IOCTL_SENSOR_CHECK failed\n");
+			return (ret);
+		}
+		printk
+		    ("TAOS: TAOS_IOCTL_SENSOR_CHECK,prox_adc_time,%d~\n",
+		     reg_val_temp);
+		if ((reg_val_temp & 0xFF) == 0xF)
+			return -ENODATA;
+
+		break;
+	case TAOS_IOCTL_SENSOR_CONFIG:
+		ret = copy_from_user(taos_cfgp, (struct taos_cfg *)arg,
+				     sizeof(struct taos_cfg));
+		if (ret) {
+			printk(KERN_ERR
+			       "TAOS: copy_from_user failed in ioctl config_set\n");
+			return -ENODATA;
+		}
+		break;
+	case TAOS_IOCTL_SENSOR_ON:
+		return sensor_on();
+		break;
+	case TAOS_IOCTL_SENSOR_OFF:
+		return sensor_off();
+		break;
+	case TAOS_IOCTL_ALS_ON:
+		printk("TAOS_IOCTL_ALS_ON:\n");
+		return taos_als_power_on(taos_datap);
+		break;
+	case TAOS_IOCTL_ALS_OFF:
+		return taos_als_power_off(taos_datap);
+		break;
+	case TAOS_IOCTL_ALS_DATA:
+		if ((reg_val = taos_read_byte(taos_datap->client,
+				    TAOS_TRITON_CNTRL)) < 0) {
+			printk(KERN_ERR
+			       "TAOS: read TAO_TRITON_CNTRL failed in ioctl als_off\n");
+			return (ret);
+		}
+		if ((reg_val &
+		     (TAOS_TRITON_CNTL_ADC_ENBL | TAOS_TRITON_CNTL_PWRON))
+		    != (TAOS_TRITON_CNTL_ADC_ENBL | TAOS_TRITON_CNTL_PWRON))
+			return -ENODATA;
+		if ((reg_val = taos_read_byte(taos_datap->client,
+				    TAOS_TRITON_STATUS)) < 0) {
+			printk(KERN_ERR
+			       "TAOS: read TAO_TRITON_CNTRL failed in ioctl als_off\n");
+			return (ret);
+		}
+		if ((reg_val & TAOS_TRITON_STATUS_ADCVALID) !=
+		    TAOS_TRITON_STATUS_ADCVALID)
+			return -ENODATA;
+		if ((lux_val = taos_get_lux()) < 0)
+			printk(KERN_ERR
+			       "TAOS: call to taos_get_lux() returned error %d in ioctl als_data\n",
+			       lux_val);
+		return (lux_val);
+		break;
+	case TAOS_IOCTL_ALS_CALIBRATE:
+		return taos_als_calibrate();
+		break;
+	case TAOS_IOCTL_CONFIG_GET:
+		ret = copy_to_user((struct taos_cfg *)arg, taos_cfgp,
+				 sizeof(struct taos_cfg));
+		if (ret) {
+			printk(KERN_ERR
+			       "TAOS: copy_to_user failed in ioctl config_get\n");
+			return -ENODATA;
+		}
+		return (ret);
+		break;
+	case TAOS_IOCTL_CONFIG_SET:
+		ret = copy_from_user(taos_cfgp, (struct taos_cfg *)arg,
+				   sizeof(struct taos_cfg));
+		if (ret) {
+			printk(KERN_ERR
+			       "TAOS: copy_from_user failed in ioctl config_set\n");
+			return -ENODATA;
+		}
+		if (taos_cfgp->als_time < 50)
+			taos_cfgp->als_time = 50;
+		if (taos_cfgp->als_time > 650)
+			taos_cfgp->als_time = 650;
+		tmp = (taos_cfgp->als_time + 25) / 50;
+		taos_cfgp->als_time = tmp * 50;
+		sat_als = (256 - taos_cfgp->prox_int_time) << 10;
+		sat_prox = (256 - taos_cfgp->prox_adc_time) << 10;
+		break;
+	case TAOS_IOCTL_PROX_ON:
+		sensor_on();
+		taos_ps_calibrate();
+		return taos_ps_power_on(taos_datap);
+		break;
+	case TAOS_IOCTL_PROX_OFF:
+		return taos_ps_power_off(taos_datap);
+		break;
+	case TAOS_IOCTL_PROX_DATA:
+		if ((ret = taos_prox_poll(prox_cur_infop)) < 0) {
+			printk(KERN_ERR
+			       "TAOS: call to prox_poll failed in prox_data\n");
+			return ret;
+		}
+		ret = copy_to_user((struct taos_prox_info *)arg,
+				 prox_cur_infop, sizeof(struct taos_prox_info));
+		if (ret) {
+			printk(KERN_ERR
+			       "TAOS: copy_to_user failed in ioctl prox_data\n");
+			return -ENODATA;
+		}
+		return (ret);
+		break;
+	case TAOS_IOCTL_PROX_CALIBRATE:
+		return taos_ps_calibrate();
+		break;
+	default:
+		return -EINVAL;
+		break;
+	}
+	return (ret);
+}
+
+// read/calculate lux value
+static int taos_get_lux(void)
+{
+	u16 raw_clear = 0, raw_ir = 0, raw_lux = 0;
+	u32 lux = 0;
+	u32 ratio = 0;
+	u8 dev_gain = 0;
+	u16 Tint = 0;
+	struct lux_data *p;
+	int ret = 0;
+	u8 chdata[4];
+	int tmp = 0, i = 0;
+
+	for (i = 0; i < 4; i++) {
+		if ((chdata[i] = (taos_read_byte
+		      (taos_datap->client, TAOS_TRITON_ALS_CHAN0LO + i))) < 0) {
+			printk(KERN_ERR
+			       "TAOS: read chan0lo/li failed in taos_get_lux()\n");
+			return (ret);
+		}
+		printk("--GGG--chdata is %d\n",chdata[i]);
+	}
+
+	//if atime =100  tmp = (atime+25)/50=2.5   tine = 2.7*(256-atime)=  412.5
+	tmp = (taos_cfgp->als_time + 25) / 50;
+	TritonTime.numerator = 1;
+	TritonTime.denominator = tmp;
+
+	//tmp = 300*atime  400
+	tmp = 300 * taos_cfgp->als_time;
+	if (tmp > 65535)
+		tmp = 65535;
+	TritonTime.saturation = tmp;
+	raw_clear = chdata[1];
+	raw_clear <<= 8;
+	raw_clear |= chdata[0];
+	raw_ir = chdata[3];
+	raw_ir <<= 8;
+	raw_ir |= chdata[2];
+
+	raw_clear *= (taos_cfgp->scale_factor);
+	raw_ir *= (taos_cfgp->scale_factor);
+
+	if (raw_ir > raw_clear) {
+		raw_lux = raw_ir;
+		raw_ir = raw_clear;
+		raw_clear = raw_lux;
+	}
+	dev_gain = taos_triton_gain_table[taos_cfgp->gain & 0x3];
+	if (raw_clear >= lux_timep->saturation)
+		return (TAOS_MAX_LUX);
+	if (raw_ir >= lux_timep->saturation)
+		return (TAOS_MAX_LUX);
+	if (raw_clear == 0)
+		return (0);
+	if (dev_gain == 0 || dev_gain > 127) {
+		printk(KERN_ERR
+		       "TAOS: dev_gain = 0 or > 127 in taos_get_lux()\n");
+		return -1;
+	}
+	if (lux_timep->denominator == 0) {
+		printk(KERN_ERR
+		       "TAOS: lux_timep->denominator = 0 in taos_get_lux()\n");
+		return -1;
+	}
+	ratio = (raw_ir << 15) / raw_clear;
+	for (p = lux_tablep; p->ratio && p->ratio < ratio; p++) ;
+	if (!p->ratio) {
+		if (lux_history[0] < 0)
+			return 0;
+		else
+			return lux_history[0];
+	}
+	Tint = taos_cfgp->als_time;
+	raw_clear = ((raw_clear * 400 + (dev_gain >> 1)) / dev_gain +
+			(Tint >> 1)) / Tint;
+	raw_ir = ((raw_ir * 400 + (dev_gain >> 1)) / dev_gain + (Tint >> 1)) / Tint;
+	lux = ((raw_clear * (p->clear)) - (raw_ir * (p->ir)));
+	lux = (lux + 32000) / 64000;
+	if (lux > TAOS_MAX_LUX) {
+		lux = TAOS_MAX_LUX;
+	}
+	return (lux);
+}
+
+// verify device
+static int taos_device_name(unsigned char *bufp, char **device_name)
+{
+	if ((bufp[0x12] & 0xf0) == 0x00)
+		return (0);
+	if (bufp[0x10] | bufp[0x1a] | bufp[0x1b] | bufp[0x1c] | bufp[0x1d] |
+	    bufp[0x1e])
+		return (0);
+	if (bufp[0x13] & 0x0c)
+		return (0);
+	*device_name = "tmd27713";
+	return (1);
+}
+
+// proximity poll
+static int taos_prox_poll(struct taos_prox_info *prxp)
+{
+	int i = 0, ret = 0;
+	u8 chdata[6];
+	for (i = 0; i < 6; i++) {
+		chdata[i] = taos_read_byte(taos_datap->client,
+				   TAOS_TRITON_CMD_AUTO |
+				   (TAOS_TRITON_ALS_CHAN0LO + i));
+		if (chdata[i] < 0) {
+			printk("ERROR : taos_read_byte chdata[%d]\n", i);
+		}
+	}
+	prxp->prox_clear = chdata[1];
+	prxp->prox_clear <<= 8;
+	prxp->prox_clear |= chdata[0];
+	prxp->prox_data = chdata[5];
+	prxp->prox_data <<= 8;
+	prxp->prox_data |= chdata[4];
+
+	return (ret);
+}
+
+MODULE_AUTHOR("John Koshi - Surya Software");
+MODULE_DESCRIPTION("TAOS ambient light and proximity sensor driver");
+MODULE_LICENSE("GPL");
+
+module_init(taos_init);
+module_exit(taos_exit);
diff --git a/drivers/input/touchscreen/Makefile b/drivers/input/touchscreen/Makefile
index 1f309d8..fce85f8 100644
--- a/drivers/input/touchscreen/Makefile
+++ b/drivers/input/touchscreen/Makefile
@@ -82,3 +82,4 @@ obj-$(CONFIG_TOUCHSCREEN_FT5X06)	+= ft5x06_ts.o
 obj-$(CONFIG_TOUCHSCREEN_SYNAPTICS_I2C_RMI4)		+= synaptics_i2c_rmi4.o
 obj-$(CONFIG_TOUCHSCREEN_SYNAPTICS_DSX_RMI4_DEV)	+= synaptics_rmi_dev.o
 obj-$(CONFIG_TOUCHSCREEN_SYNAPTICS_DSX_FW_UPDATE) 	+= synaptics_fw_update.o
+obj-y   += cypress/
diff --git a/drivers/input/touchscreen/cypress/Kconfig b/drivers/input/touchscreen/cypress/Kconfig
new file mode 100644
index 0000000..cfce55c
--- /dev/null
+++ b/drivers/input/touchscreen/cypress/Kconfig
@@ -0,0 +1,206 @@
+#
+# Touchscreen driver configuration
+#
+config CYPRESS_CYTTSP4_BUS
+	bool "Cypress TTSP core bus"
+	default n
+	help
+	  This option enables support Cypress TTSP core bus.
+	  This support is needed for various device and drivers
+	  using Cypress TrueTouch(TM) Standard Product
+	  protocol.
+
+config TOUCHSCREEN_CYPRESS_CYTTSP4
+	tristate "Cypress TrueTouch Gen4 Touchscreen Driver"
+	default y
+	select CYPRESS_CYTTSP4_BUS
+	help
+	  Core driver for Cypress TrueTouch(tm) Standard Product
+	  Geneartion4 touchscreen controllers.
+
+	  Say Y here if you have a Cypress Gen4 touchscreen.
+
+	  If unsure, say N.
+
+	  To compile this driver as a module, choose M here.
+
+config TOUCHSCREEN_CYPRESS_CYTTSP4_DEVICETREE_SUPPORT
+	bool "Enable Device Tree support"
+	default n
+	depends on TOUCHSCREEN_CYPRESS_CYTTSP4 && OF
+	help
+	  This option enables support for device tree.
+
+	  Say Y here to enable device tree support.
+
+config TOUCHSCREEN_CYPRESS_CYTTSP4_DEBUG
+	bool "Enable debug output"
+	depends on TOUCHSCREEN_CYPRESS_CYTTSP4
+	default n
+	help
+	  Enable Debug output for Cypress TrueTouch(tm)
+	  Standard Product Generation4 drivers set.
+
+	  Say Y here to enable debug output.
+
+config TOUCHSCREEN_CYPRESS_CYTTSP4_VDEBUG
+	bool "Enable verbose debug output"
+	depends on TOUCHSCREEN_CYPRESS_CYTTSP4_DEBUG
+	default n 
+	help
+	  Enable Verbose Debug output for Cypress TrueTouch(tm)
+	  Standard Product Generation4 drivers set.
+
+	  Say Y here to enable verbose debug output.
+
+config TOUCHSCREEN_CYPRESS_CYTTSP4_I2C
+	tristate "Cypress TrueTouch Gen4 I2C"
+	depends on TOUCHSCREEN_CYPRESS_CYTTSP4
+	select I2C
+	default y
+	help
+	  Cypress TrueTouch(tm) Standard Product Generation4
+	  I2C bus interface.
+
+	  Say Y here to enable I2C bus interface to TTSP
+	  touchscreen controller.
+
+config TOUCHSCREEN_CYPRESS_CYTTSP4_SPI
+	tristate "Cypress TrueTouch Gen4 SPI"
+	depends on TOUCHSCREEN_CYPRESS_CYTTSP4
+	select SPI
+	default m
+	help
+	  Cypress TrueTouch(tm) Standard Product Generation4
+	  SPI bus interface.
+
+	  Say Y here to enable SPI bus interface to TTSP
+	  touchscreen controller.
+
+config TOUCHSCREEN_CYPRESS_CYTTSP4_MT_A
+	tristate "Cypress TrueTouch Gen4 MultiTouch Protocol A"
+	depends on TOUCHSCREEN_CYPRESS_CYTTSP4
+	default m
+	help
+	  Cypress TrueTouch(tm) Standard Product Generation4
+	  MutliTouch Protocol A support.
+
+	  Say Y here to enable MutiTouch touch reporting
+	  using protocol A.
+
+config TOUCHSCREEN_CYPRESS_CYTTSP4_MT_B
+	tristate "Cypress TrueTouch Gen4 MultiTouch Protocol B"
+	depends on TOUCHSCREEN_CYPRESS_CYTTSP4
+	default y
+	help
+	  Cypress TrueTouch(tm) Standard Product Generation4
+	  MutliTouch Protocol B support.
+
+	  Say Y here to enable MutiTouch touch reporting
+	  using protocol B.
+
+config TOUCHSCREEN_CYPRESS_CYTTSP4_BUTTON
+	tristate "Cypress TrueTouch Gen4 MultiTouch CapSense Button"
+	depends on TOUCHSCREEN_CYPRESS_CYTTSP4
+	default y  
+	help
+	  Cypress TrueTouch(tm) Standard Product Generation4
+	  CapSense driver.
+
+	  Say Y here to enable CapSense reporting.
+
+config TOUCHSCREEN_CYPRESS_CYTTSP4_PROXIMITY
+	tristate "Cypress TrueTouch Gen4 Proximity"
+	depends on TOUCHSCREEN_CYPRESS_CYTTSP4
+	default m
+	help
+	  Cypress TrueTouch(tm) Standard Product Generation4
+	  Proximity driver.
+
+	  Say Y here to enable proximity reporting.
+
+config TOUCHSCREEN_CYPRESS_CYTTSP4_DEVICE_ACCESS
+	tristate "Cypress TrueTouch Gen4 MultiTouch Device Access"
+	depends on TOUCHSCREEN_CYPRESS_CYTTSP4
+	default m
+	help
+	  Cypress TrueTouch(tm) Standard Product Generation4
+	  Device access module.
+
+	  This modules adds an interface to access touchscreen
+	  controller using driver sysfs nodes.
+
+config TOUCHSCREEN_CYPRESS_CYTTSP4_DEVICE_ACCESS_API
+	bool "Enable Device Access kernel API"
+	depends on TOUCHSCREEN_CYPRESS_CYTTSP4_DEVICE_ACCESS
+	default n
+	help
+	  Say Y here to enable Device access kernel API.
+
+config TOUCHSCREEN_CYPRESS_CYTTSP4_TEST_DEVICE_ACCESS_API
+	tristate "Simple Test module for Device Access kernel API"
+	depends on TOUCHSCREEN_CYPRESS_CYTTSP4_DEVICE_ACCESS
+	depends on TOUCHSCREEN_CYPRESS_CYTTSP4_DEVICE_ACCESS_API
+	default n
+	help
+	  Say Y here to enable test module for Device access kernel API.
+
+config TOUCHSCREEN_CYPRESS_CYTTSP4_LOADER
+	tristate "Cypress TrueTouch Gen4 MultiTouch Loader"
+	depends on TOUCHSCREEN_CYPRESS_CYTTSP4
+	default y 
+	help
+	  Cypress TrueTouch(tm) Standard Product Generation4
+	  FW Loader module.
+
+	  This module enables support for Firmware upgrade.
+
+config TOUCHSCREEN_CYPRESS_CYTTSP4_PLATFORM_FW_UPGRADE
+	bool "FW upgrade from header file"
+	depends on TOUCHSCREEN_CYPRESS_CYTTSP4_LOADER
+	default n 
+	help
+	  Include Cypress TrueTouch(tm) Standard Product
+	  Generation4 device Firmware into driver.
+
+	  Need proper header file for this.
+
+config TOUCHSCREEN_CYPRESS_CYTTSP4_BINARY_FW_UPGRADE
+	bool "FW upgrade from binary file"
+	depends on TOUCHSCREEN_CYPRESS_CYTTSP4_LOADER
+	default y 
+	help
+	  Include Cypress TrueTouch(tm) Standard Product
+	  Generation4 device Firmware into kernel itself.
+
+	  This should be enabled for manual FW upgrade.
+
+config TOUCHSCREEN_CYPRESS_CYTTSP4_PLATFORM_TTCONFIG_UPGRADE
+	bool "TT Configuration upgrade from header file"
+	depends on TOUCHSCREEN_CYPRESS_CYTTSP4_LOADER
+	default n 
+	help
+	  Include Cypress TrueTouch(tm) Standard Product
+	  Generation4 device TrueTouch Configuration into
+	  kernel itself.
+
+	  Need proper header file for this.
+
+config TOUCHSCREEN_CYPRESS_CYTTSP4_MANUAL_TTCONFIG_UPGRADE
+	bool "TT Configuration upgrade via SysFs"
+	depends on TOUCHSCREEN_CYPRESS_CYTTSP4_LOADER
+	default n 
+	help
+	  Provides a SysFs interface to upgrade TrueTouch
+	  Configuration with a binary configuration file.
+
+config TOUCHSCREEN_CYPRESS_CYTTSP4_DEBUG_MODULE
+	tristate "Cypress TrueTouch Gen4 MultiTouch Debug Module"
+	depends on TOUCHSCREEN_CYPRESS_CYTTSP4
+	default m
+	help
+	  Cypress TrueTouch(tm) Standard Product Generation4
+	  Debug module.
+
+	  This module adds support for verbose printing touch
+	  information.
diff --git a/drivers/input/touchscreen/cypress/Makefile b/drivers/input/touchscreen/cypress/Makefile
new file mode 100644
index 0000000..b09c450
--- /dev/null
+++ b/drivers/input/touchscreen/cypress/Makefile
@@ -0,0 +1,62 @@
+#
+# Makefile for the touchscreen drivers.
+#
+
+# Each configuration option enables a list of files.
+
+obj-$(CONFIG_CYPRESS_CYTTSP4_BUS) += cyttsp4_bus.o
+obj-$(CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4)	+= cyttsp4_core.o
+ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4
+obj-y += cyttsp4_platform.o
+endif
+obj-$(CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_I2C)	+= cyttsp4_i2c.o
+obj-$(CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_SPI)	+= cyttsp4_spi.o
+obj-$(CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_MT_A)	+= cyttsp4_mt_a.o
+cyttsp4_mt_a-y := cyttsp4_mta.o cyttsp4_mt_common.o
+obj-$(CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_MT_B)	+= cyttsp4_mt_b.o
+cyttsp4_mt_b-y := cyttsp4_mtb.o cyttsp4_mt_common.o
+obj-$(CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_BUTTON)	+= cyttsp4_btn.o
+obj-$(CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_PROXIMITY)	+= cyttsp4_proximity.o
+obj-$(CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_DEVICE_ACCESS)	+= cyttsp4_device_access.o
+obj-$(CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_TEST_DEVICE_ACCESS_API)	+= cyttsp4_test_device_access_api.o
+obj-$(CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_LOADER)	+= cyttsp4_loader.o
+obj-$(CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_DEBUG_MODULE)	+= cyttsp4_debug.o
+obj-$(CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_DEVICETREE_SUPPORT)	+= cyttsp4_devtree.o
+ifeq ($(CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_DEBUG),y)
+CFLAGS_cyttsp4_bus.o += -DDEBUG
+CFLAGS_cyttsp4_core.o += -DDEBUG
+CFLAGS_cyttsp4_i2c.o += -DDEBUG
+CFLAGS_cyttsp4_spi.o += -DDEBUG
+CFLAGS_cyttsp4_mta.o += -DDEBUG
+CFLAGS_cyttsp4_mtb.o += -DDEBUG
+CFLAGS_cyttsp4_mt_a.o += -DDEBUG
+CFLAGS_cyttsp4_mt_b.o += -DDEBUG
+CFLAGS_cyttsp4_mt_common.o += -DDEBUG
+CFLAGS_cyttsp4_btn.o += -DDEBUG
+CFLAGS_cyttsp4_proximity.o += -DDEBUG
+CFLAGS_cyttsp4_device_access.o += -DDEBUG
+CFLAGS_cyttsp4_loader.o += -DDEBUG
+CFLAGS_cyttsp4_debug.o += -DDEBUG
+CFLAGS_cyttsp4_devtree.o += -DDEBUG
+CFLAGS_cyttsp4_platform.o += -DDEBUG
+endif
+
+ifeq ($(CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_VDEBUG),y)
+CFLAGS_cyttsp4_bus.o += -DVERBOSE_DEBUG
+CFLAGS_cyttsp4_core.o += -DVERBOSE_DEBUG
+CFLAGS_cyttsp4_i2c.o += -DVERBOSE_DEBUG
+CFLAGS_cyttsp4_spi.o += -DVERBOSE_DEBUG
+CFLAGS_cyttsp4_mta.o += -DVERBOSE_DEBUG
+CFLAGS_cyttsp4_mtb.o += -DVERBOSE_DEBUG
+CFLAGS_cyttsp4_mt_a.o += -DVERBOSE_DEBUG
+CFLAGS_cyttsp4_mt_b.o += -DVERBOSE_DEBUG
+CFLAGS_cyttsp4_mt_common.o += -DVERBOSE_DEBUG
+CFLAGS_cyttsp4_btn.o += -DVERBOSE_DEBUG
+CFLAGS_cyttsp4_proximity.o += -DVERBOSE_DEBUG
+CFLAGS_cyttsp4_device_access.o += -DVERBOSE_DEBUG
+CFLAGS_cyttsp4_loader.o += -DVERBOSE_DEBUG
+CFLAGS_cyttsp4_debug.o += -DVERBOSE_DEBUG
+CFLAGS_cyttsp4_devtree.o += -DVERBOSE_DEBUG
+CFLAGS_cyttsp4_platform.o += -DVERBOSE_DEBUG
+endif
+
diff --git a/drivers/input/touchscreen/cypress/cyttsp4_btn.c b/drivers/input/touchscreen/cypress/cyttsp4_btn.c
new file mode 100644
index 0000000..279beb7
--- /dev/null
+++ b/drivers/input/touchscreen/cypress/cyttsp4_btn.c
@@ -0,0 +1,527 @@
+/*
+ * cyttsp4_btn.c
+ * Cypress TrueTouch(TM) Standard Product V4 CapSense touch reports module.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2012 Cypress Semiconductor
+ * Copyright (C) 2011 Sony Ericsson Mobile Communications AB.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#include <linux/cyttsp4_bus.h>
+
+#include <linux/delay.h>
+#ifdef CONFIG_HAS_EARLYSUSPEND
+#include <linux/earlysuspend.h>
+#endif
+#include <linux/gpio.h>
+#include <linux/input.h>
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+#include <linux/limits.h>
+#include <linux/module.h>
+#include <linux/pm_runtime.h>
+#include <linux/slab.h>
+#include <linux/workqueue.h>
+
+#include <linux/cyttsp4_btn.h>
+#include <linux/cyttsp4_core.h>
+#include "cyttsp4_regs.h"
+
+struct cyttsp4_btn_data {
+	struct cyttsp4_device *ttsp;
+	struct cyttsp4_btn_platform_data *pdata;
+	struct cyttsp4_sysinfo *si;
+	struct input_dev *input;
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	struct early_suspend es;
+#endif
+	struct mutex report_lock;
+	bool is_suspended;
+	bool input_device_registered;
+	char phys[NAME_MAX];
+	u8 pr_buf[CY_MAX_PRBUF_SIZE];
+};
+
+
+static inline void cyttsp4_btn_key_action(struct cyttsp4_btn_data *bd,
+	int btn_no, int btn_state)
+{
+	struct device *dev = &bd->ttsp->dev;
+	struct cyttsp4_sysinfo *si = bd->si;
+
+	if (!si->btn[btn_no].enabled ||
+			si->btn[btn_no].state == btn_state)
+		return;
+
+	si->btn[btn_no].state = btn_state;
+	input_report_key(bd->input, si->btn[btn_no].key_code, btn_state);
+	input_sync(bd->input);
+
+	dev_dbg(dev, "%s: btn=%d key_code=%d %s\n", __func__,
+		btn_no, si->btn[btn_no].key_code,
+		btn_state == CY_BTN_PRESSED ?
+			"PRESSED" : "RELEASED");
+}
+
+static void cyttsp4_get_btn_touches(struct cyttsp4_btn_data *bd)
+{
+	struct cyttsp4_sysinfo *si = bd->si;
+	int num_btn_regs = si->si_ofs.num_btn_regs;
+	int num_btns = si->si_ofs.num_btns;
+	int cur_reg;
+	int cur_reg_val;
+	int cur_btn;
+	int cur_btn_state;
+	int i;
+
+	for (cur_btn = 0, cur_reg = 0; cur_reg < num_btn_regs; cur_reg++) {
+		cur_reg_val = si->xy_mode[si->si_ofs.rep_ofs + 2 + cur_reg];
+
+		for (i = 0; i < CY_NUM_BTN_PER_REG && cur_btn < num_btns;
+				i++, cur_btn++) {
+			/* Get current button state */
+			cur_btn_state = cur_reg_val &
+					((1 << CY_BITS_PER_BTN) - 1);
+			/* Shift reg value for next iteration */
+			cur_reg_val >>= CY_BITS_PER_BTN;
+
+			cyttsp4_btn_key_action(bd, cur_btn, cur_btn_state);
+		}
+	}
+}
+
+static void cyttsp4_btn_lift_all(struct cyttsp4_btn_data *bd)
+{
+	struct cyttsp4_sysinfo *si = bd->si;
+	int i;
+
+	if (!si || si->si_ofs.num_btns == 0)
+		return;
+
+	for (i = 0; i < si->si_ofs.num_btns; i++)
+		cyttsp4_btn_key_action(bd, i, CY_BTN_RELEASED);
+}
+
+#ifdef VERBOSE_DEBUG
+static void cyttsp4_log_btn_data(struct cyttsp4_btn_data *bd)
+{
+	struct device *dev = &bd->ttsp->dev;
+	struct cyttsp4_sysinfo *si = bd->si;
+	int cur;
+	int t;
+
+	for (cur = 0; cur < si->si_ofs.num_btns; cur++) {
+		bd->pr_buf[0] = 0;
+		snprintf(bd->pr_buf, CY_MAX_PRBUF_SIZE, "btn_rec[%d]=0x", cur);
+		for (t = 0; t < si->si_ofs.btn_rec_size; t++)
+			snprintf(bd->pr_buf, CY_MAX_PRBUF_SIZE, "%s%02X",
+				bd->pr_buf, si->btn_rec_data
+				[(cur * si->si_ofs.btn_rec_size) + t]);
+
+		dev_vdbg(dev, "%s: %s\n", __func__, bd->pr_buf);
+	}
+	return;
+}
+#endif
+
+/* read xy_data for all current CapSense button touches */
+static int cyttsp4_xy_worker(struct cyttsp4_btn_data *bd)
+{
+	struct device *dev = &bd->ttsp->dev;
+	struct cyttsp4_sysinfo *si = bd->si;
+	u8 rep_stat = si->xy_mode[si->si_ofs.rep_ofs + 1];
+#ifdef VERBOSE_DEBUG
+	int rc;
+#endif
+
+	/* rep_data for bad packet check */
+	if (IS_BAD_PKT(rep_stat)) {
+		dev_dbg(dev, "%s: Invalid buffer detected\n", __func__);
+		return 0;
+	}
+
+	/* extract button press/release touch information */
+	if (si->si_ofs.num_btns > 0) {
+		cyttsp4_get_btn_touches(bd);
+#ifdef VERBOSE_DEBUG
+		/* read button diff data */
+		rc = cyttsp4_read(bd->ttsp, CY_MODE_OPERATIONAL,
+				si->si_ofs.tt_stat_ofs + 1 +
+				si->si_ofs.max_tchs * si->si_ofs.tch_rec_size,
+				si->btn_rec_data,
+				si->si_ofs.num_btns * si->si_ofs.btn_rec_size);
+		if (rc < 0) {
+			dev_err(dev, "%s: read fail on button regs r=%d\n",
+					__func__, rc);
+			return 0;
+		}
+
+		/* log button press/release touch information */
+		cyttsp4_log_btn_data(bd);
+#endif
+	}
+
+	dev_vdbg(dev, "%s: done\n", __func__);
+
+	return 0;
+}
+
+static int cyttsp4_btn_attention(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_btn_data *bd = dev_get_drvdata(dev);
+	int rc = 0;
+
+	dev_vdbg(dev, "%s\n", __func__);
+
+	mutex_lock(&bd->report_lock);
+	if (!bd->is_suspended) {
+		/* core handles handshake */
+		rc = cyttsp4_xy_worker(bd);
+	} else {
+		dev_vdbg(dev, "%s: Ignoring report while suspended\n",
+			__func__);
+	}
+	mutex_unlock(&bd->report_lock);
+	if (rc < 0)
+		dev_err(dev, "%s: xy_worker error r=%d\n", __func__, rc);
+
+	return rc;
+}
+
+static int cyttsp4_startup_attention(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_btn_data *bd = dev_get_drvdata(dev);
+
+	dev_vdbg(dev, "%s\n", __func__);
+
+	mutex_lock(&bd->report_lock);
+	cyttsp4_btn_lift_all(bd);
+	mutex_unlock(&bd->report_lock);
+
+	return 0;
+}
+
+static int cyttsp4_btn_open(struct input_dev *input)
+{
+	struct device *dev = input->dev.parent;
+	struct cyttsp4_device *ttsp =
+		container_of(dev, struct cyttsp4_device, dev);
+
+	dev_dbg(dev, "%s\n", __func__);
+
+	pm_runtime_get(dev);
+
+	dev_vdbg(dev, "%s: setup subscriptions\n", __func__);
+
+	/* set up touch call back */
+	cyttsp4_subscribe_attention(ttsp, CY_ATTEN_IRQ,
+		cyttsp4_btn_attention, CY_MODE_OPERATIONAL);
+
+	/* set up startup call back */
+	cyttsp4_subscribe_attention(ttsp, CY_ATTEN_STARTUP,
+		cyttsp4_startup_attention, 0);
+
+	return 0;
+}
+
+static void cyttsp4_btn_close(struct input_dev *input)
+{
+	struct device *dev = input->dev.parent;
+	struct cyttsp4_device *ttsp =
+		container_of(dev, struct cyttsp4_device, dev);
+
+	dev_dbg(dev, "%s\n", __func__);
+
+	cyttsp4_unsubscribe_attention(ttsp, CY_ATTEN_IRQ,
+		cyttsp4_btn_attention, CY_MODE_OPERATIONAL);
+
+	cyttsp4_unsubscribe_attention(ttsp, CY_ATTEN_STARTUP,
+		cyttsp4_startup_attention, 0);
+
+	pm_runtime_put(dev);
+}
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+static void cyttsp4_btn_early_suspend(struct early_suspend *h)
+{
+	struct cyttsp4_btn_data *bd =
+		container_of(h, struct cyttsp4_btn_data, es);
+	struct device *dev = &bd->ttsp->dev;
+
+	dev_dbg(dev, "%s\n", __func__);
+
+#ifndef CONFIG_PM_RUNTIME
+	mutex_lock(&bd->report_lock);
+	bd->is_suspended = true;
+	cyttsp4_btn_lift_all(bd);
+	mutex_unlock(&bd->report_lock);
+#endif
+
+	pm_runtime_put(dev);
+}
+
+static void cyttsp4_btn_late_resume(struct early_suspend *h)
+{
+	struct cyttsp4_btn_data *bd =
+		container_of(h, struct cyttsp4_btn_data, es);
+	struct device *dev = &bd->ttsp->dev;
+
+	dev_dbg(dev, "%s\n", __func__);
+
+#ifndef CONFIG_PM_RUNTIME
+	mutex_lock(&bd->report_lock);
+	bd->is_suspended = false;
+	mutex_unlock(&bd->report_lock);
+#endif
+
+	pm_runtime_get(dev);
+}
+#endif
+
+#ifdef CONFIG_PM_RUNTIME
+static int cyttsp4_btn_suspend(struct device *dev)
+{
+	struct cyttsp4_btn_data *bd = dev_get_drvdata(dev);
+
+	dev_dbg(dev, "%s\n", __func__);
+
+	mutex_lock(&bd->report_lock);
+	bd->is_suspended = true;
+	cyttsp4_btn_lift_all(bd);
+	mutex_unlock(&bd->report_lock);
+
+	return 0;
+}
+
+static int cyttsp4_btn_resume(struct device *dev)
+{
+	struct cyttsp4_btn_data *bd = dev_get_drvdata(dev);
+
+	dev_dbg(dev, "%s\n", __func__);
+
+	mutex_lock(&bd->report_lock);
+	bd->is_suspended = false;
+	mutex_unlock(&bd->report_lock);
+
+	return 0;
+}
+#endif
+
+static const struct dev_pm_ops cyttsp4_btn_pm_ops = {
+	SET_RUNTIME_PM_OPS(cyttsp4_btn_suspend, cyttsp4_btn_resume, NULL)
+};
+
+static int cyttsp4_setup_input_device(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_btn_data *bd = dev_get_drvdata(dev);
+	int i;
+	int rc;
+
+	dev_vdbg(dev, "%s: Initialize event signals\n", __func__);
+	__set_bit(EV_KEY, bd->input->evbit);
+	for (i = 0; i < bd->si->si_ofs.num_btns; i++)
+		__set_bit(bd->si->btn[i].key_code, bd->input->keybit);
+
+	rc = input_register_device(bd->input);
+	if (rc < 0)
+		dev_err(dev, "%s: Error, failed register input device r=%d\n",
+			__func__, rc);
+	else
+		bd->input_device_registered = true;
+
+	return rc;
+}
+
+static int cyttsp4_setup_input_attention(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_btn_data *bd = dev_get_drvdata(dev);
+	int rc;
+
+	dev_vdbg(dev, "%s\n", __func__);
+
+	bd->si = cyttsp4_request_sysinfo(ttsp);
+	if (!bd->si)
+		return -1;
+
+	rc = cyttsp4_setup_input_device(ttsp);
+
+	cyttsp4_unsubscribe_attention(ttsp, CY_ATTEN_STARTUP,
+		cyttsp4_setup_input_attention, 0);
+
+	return rc;
+}
+
+static int cyttsp4_btn_probe(struct cyttsp4_device *ttsp)
+{
+	struct cyttsp4_btn_data *bd;
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_btn_platform_data *pdata = dev_get_platdata(dev);
+	int rc = 0;
+
+	dev_info(dev, "%s\n", __func__);
+	dev_dbg(dev, "%s: debug on\n", __func__);
+	dev_vdbg(dev, "%s: verbose debug on\n", __func__);
+
+	if (pdata == NULL) {
+		dev_err(dev, "%s: Missing platform data\n", __func__);
+		rc = -ENODEV;
+		goto error_no_pdata;
+	}
+
+	bd = kzalloc(sizeof(*bd), GFP_KERNEL);
+	if (bd == NULL) {
+		dev_err(dev, "%s: Error, kzalloc\n", __func__);
+		rc = -ENOMEM;
+		goto error_alloc_data_failed;
+	}
+
+	mutex_init(&bd->report_lock);
+	bd->ttsp = ttsp;
+	bd->pdata = pdata;
+	dev_set_drvdata(dev, bd);
+	/* Create the input device and register it. */
+	dev_vdbg(dev, "%s: Create the input device and register it\n",
+		__func__);
+	bd->input = input_allocate_device();
+	if (bd->input == NULL) {
+		dev_err(dev, "%s: Error, failed to allocate input device\n",
+			__func__);
+		rc = -ENOSYS;
+		goto error_alloc_failed;
+	}
+
+	bd->input->name = ttsp->name;
+	scnprintf(bd->phys, sizeof(bd->phys)-1, "%s", dev_name(dev));
+	bd->input->phys = bd->phys;
+	bd->input->dev.parent = &bd->ttsp->dev;
+	bd->input->open = cyttsp4_btn_open;
+	bd->input->close = cyttsp4_btn_close;
+	input_set_drvdata(bd->input, bd);
+
+	pm_runtime_enable(dev);
+
+	/* get sysinfo */
+	bd->si = cyttsp4_request_sysinfo(ttsp);
+	if (bd->si) {
+		rc = cyttsp4_setup_input_device(ttsp);
+		if (rc)
+			goto error_init_input;
+	} else {
+		dev_err(dev, "%s: Fail get sysinfo pointer from core p=%p\n",
+			__func__, bd->si);
+		cyttsp4_subscribe_attention(ttsp, CY_ATTEN_STARTUP,
+			cyttsp4_setup_input_attention, 0);
+	}
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	bd->es.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN + 1;
+	bd->es.suspend = cyttsp4_btn_early_suspend;
+	bd->es.resume = cyttsp4_btn_late_resume;
+	register_early_suspend(&bd->es);
+#endif
+
+	dev_dbg(dev, "%s: ok\n", __func__);
+	return 0;
+
+error_init_input:
+	pm_runtime_suspend(dev);
+	pm_runtime_disable(dev);
+	input_free_device(bd->input);
+error_alloc_failed:
+	dev_set_drvdata(dev, NULL);
+	kfree(bd);
+error_alloc_data_failed:
+error_no_pdata:
+	dev_err(dev, "%s failed.\n", __func__);
+	return rc;
+}
+
+static int cyttsp4_btn_release(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_btn_data *bd = dev_get_drvdata(dev);
+
+	dev_dbg(dev, "%s\n", __func__);
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	/*
+	 * This check is to prevent pm_runtime usage_count drop below zero
+	 * because of removing the module while in suspended state
+	 */
+	if (bd->is_suspended)
+		pm_runtime_get_noresume(dev);
+
+	unregister_early_suspend(&bd->es);
+#endif
+
+	if (bd->input_device_registered) {
+		input_unregister_device(bd->input);
+	} else {
+		input_free_device(bd->input);
+		cyttsp4_unsubscribe_attention(ttsp, CY_ATTEN_STARTUP,
+			cyttsp4_setup_input_attention, 0);
+	}
+
+	pm_runtime_suspend(dev);
+	pm_runtime_disable(dev);
+
+	dev_set_drvdata(dev, NULL);
+	kfree(bd);
+	return 0;
+}
+
+static struct cyttsp4_driver cyttsp4_btn_driver = {
+	.probe = cyttsp4_btn_probe,
+	.remove = cyttsp4_btn_release,
+	.driver = {
+		.name = CYTTSP4_BTN_NAME,
+		.bus = &cyttsp4_bus_type,
+		.owner = THIS_MODULE,
+		.pm = &cyttsp4_btn_pm_ops,
+	},
+};
+
+static int __init cyttsp4_btn_init(void)
+{
+	int rc = 0;
+	rc = cyttsp4_register_driver(&cyttsp4_btn_driver);
+	pr_info("%s: Cypress TTSP MT v4 CapSense BTN (Built %s), rc=%d\n",
+		 __func__, CY_DRIVER_DATE, rc);
+	return rc;
+}
+module_init(cyttsp4_btn_init);
+
+static void __exit cyttsp4_btn_exit(void)
+{
+	cyttsp4_unregister_driver(&cyttsp4_btn_driver);
+	pr_info("%s: module exit\n", __func__);
+}
+module_exit(cyttsp4_btn_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Cypress TTSP 2D multi-touch CapSense BTN driver");
+MODULE_AUTHOR("Cypress Semiconductor");
diff --git a/drivers/input/touchscreen/cypress/cyttsp4_bus.c b/drivers/input/touchscreen/cypress/cyttsp4_bus.c
new file mode 100644
index 0000000..9de266e
--- /dev/null
+++ b/drivers/input/touchscreen/cypress/cyttsp4_bus.c
@@ -0,0 +1,761 @@
+/*
+ * cyttsp4_bus.c
+ * Cypress TrueTouch(TM) Standard Product V4 Bus Driver.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2012 Cypress Semiconductor
+ * Copyright (C) 2011 Sony Ericsson Mobile Communications AB.
+ *
+ * Author: Aleksej Makarov aleksej.makarov@sonyericsson.com
+ * Modified by: Cypress Semiconductor for complete set of TTSP Bus interfaces.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#include <linux/cyttsp4_bus.h>
+
+#include <linux/device.h>
+#include <linux/kernel.h>
+#include <linux/list.h>
+#include <linux/mutex.h>
+#include <linux/pm_runtime.h>
+#include <linux/slab.h>
+#include <linux/limits.h>
+
+static DEFINE_MUTEX(core_lock);
+static LIST_HEAD(adapter_list);
+static LIST_HEAD(core_dev_list);
+static LIST_HEAD(cyttsp4_dev_list);
+
+struct bus_type cyttsp4_bus_type;
+
+static void cyttsp4_dev_release(struct device *dev)
+{
+	dev_vdbg(dev, "%s: Enter\n", __func__);
+	put_device(dev->parent);
+}
+
+static struct device_type cyttsp4_dev_type = {
+	.release = cyttsp4_dev_release
+};
+
+static struct device_type cyttsp4_core_type = {
+	.release = cyttsp4_dev_release
+};
+
+static int cyttsp4_match_dev(struct device *dev, void *data)
+{
+	return dev == (struct device *)data;
+}
+
+static void cyttsp4_initialize_device(struct cyttsp4_device *dev,
+		struct cyttsp4_device_info const *dev_info)
+{
+	dev->name = dev_info->name;
+	dev->core_id = dev_info->core_id;
+	dev->dev.platform_data = dev_info->platform_data;
+}
+
+static void _cyttsp4_reinitialize_device(struct cyttsp4_device *dev)
+{
+	void *platform_data = dev->dev.platform_data;
+
+	memset(&dev->dev, 0, sizeof(dev->dev));
+	dev->dev.platform_data = platform_data;
+	dev->core = NULL;
+}
+
+static void cyttsp4_initialize_core(struct cyttsp4_core *core,
+		struct cyttsp4_core_info const *core_info)
+{
+	core->name = core_info->name;
+	core->id = core_info->id;
+	core->adap_id = core_info->adap_id;
+	core->dev.platform_data = core_info->platform_data;
+}
+
+static void _cyttsp4_reinitialize_core(struct cyttsp4_core *core)
+{
+	void *platform_data = core->dev.platform_data;
+
+	memset(&core->dev, 0, sizeof(core->dev));
+	core->dev.platform_data = platform_data;
+	core->adap = NULL;
+}
+
+static int _cyttsp4_register_dev(struct cyttsp4_device *pdev,
+		struct cyttsp4_core *core)
+{
+	int ret;
+
+	/* Check if the device is registered with the system */
+	if (bus_find_device(&cyttsp4_bus_type, NULL, &pdev->dev,
+			cyttsp4_match_dev)) {
+		put_device(&pdev->dev);
+		return -EEXIST;
+	}
+
+	pdev->core = core;
+	pdev->dev.parent = get_device(&core->dev);
+	pdev->dev.bus = &cyttsp4_bus_type;
+	pdev->dev.type = &cyttsp4_dev_type;
+	dev_set_name(&pdev->dev, "%s.%s", pdev->name,  core->id);
+
+	ret = device_register(&pdev->dev);
+	dev_dbg(&pdev->dev,
+		"%s: Registering device '%s'. Parent at '%s', err = %d\n",
+		 __func__, dev_name(&pdev->dev),
+		 dev_name(pdev->dev.parent), ret);
+	if (ret) {
+		dev_err(&pdev->dev, "%s: failed to register device, err %d\n",
+			__func__, ret);
+		pdev->core = NULL;
+	}
+	return ret;
+}
+
+static void _cyttsp4_unregister_dev(struct cyttsp4_device *pdev)
+{
+	/* Check if the device is registered with the system */
+	if (!bus_find_device(&cyttsp4_bus_type, NULL, &pdev->dev,
+			cyttsp4_match_dev))
+		return;
+
+	dev_dbg(&pdev->dev, "%s: Unregistering device '%s'.\n",
+		__func__, dev_name(&pdev->dev));
+	/* Put reference taken by bus_find_device() */
+	put_device(&pdev->dev);
+	device_unregister(&pdev->dev);
+}
+
+static int _cyttsp4_register_core(struct cyttsp4_core *pdev,
+		struct cyttsp4_adapter *adap)
+{
+	int ret;
+
+	/* Check if the device is registered with the system */
+	if (bus_find_device(&cyttsp4_bus_type, NULL, &pdev->dev,
+			cyttsp4_match_dev)) {
+		put_device(&pdev->dev);
+		return -EEXIST;
+	}
+
+	pdev->adap = adap;
+	pdev->dev.parent = get_device(adap->dev);
+	pdev->dev.bus = &cyttsp4_bus_type;
+	pdev->dev.type = &cyttsp4_core_type;
+	dev_set_name(&pdev->dev, "%s.%s", pdev->id,  adap->id);
+
+	ret = device_register(&pdev->dev);
+	dev_dbg(&pdev->dev,
+		"%s: Registering device '%s'. Parent at '%s', err = %d\n",
+		 __func__, dev_name(&pdev->dev),
+		 dev_name(pdev->dev.parent), ret);
+	if (ret) {
+		dev_err(&pdev->dev, "%s: failed to register device, err %d\n",
+			__func__, ret);
+		pdev->adap = NULL;
+	}
+	return ret;
+}
+
+static void _cyttsp4_unregister_core(struct cyttsp4_core *pdev)
+{
+	/* Check if the core is registered with the system */
+	if (!bus_find_device(&cyttsp4_bus_type, NULL, &pdev->dev,
+			cyttsp4_match_dev))
+		return;
+
+	dev_dbg(&pdev->dev, "%s: Unregistering core '%s'.\n",
+		__func__, dev_name(&pdev->dev));
+	/* Put reference taken by bus_find_device() */
+	put_device(&pdev->dev);
+	device_unregister(&pdev->dev);
+}
+
+static void _cyttsp4_unregister_and_reinitialize_devices(
+		struct cyttsp4_core *core)
+{
+	struct cyttsp4_device *dev;
+
+	list_for_each_entry(dev, &cyttsp4_dev_list, node)
+		if (dev->core == core) {
+			_cyttsp4_unregister_dev(dev);
+			_cyttsp4_reinitialize_device(dev);
+		}
+}
+
+static struct cyttsp4_adapter *find_adapter(char const *adap_id)
+{
+	struct cyttsp4_adapter *a;
+
+	list_for_each_entry(a, &adapter_list, node)
+		if (!strncmp(a->id, adap_id, NAME_MAX))
+			return a;
+	return NULL;
+}
+
+static struct cyttsp4_core *find_core(char const *core_id)
+{
+	struct cyttsp4_core *d;
+
+	list_for_each_entry(d, &core_dev_list, node)
+		if (!strncmp(d->id, core_id, NAME_MAX))
+			return d;
+	return NULL;
+}
+
+static struct cyttsp4_core *find_core_with_driver(char const *core_id)
+{
+	struct cyttsp4_core *d;
+
+	d = find_core(core_id);
+	if (d && d->dev.driver)
+		return d;
+	return NULL;
+}
+
+static struct cyttsp4_device *find_device(char const *name,
+		char const *core_id)
+{
+	struct cyttsp4_device *d;
+
+	list_for_each_entry(d, &cyttsp4_dev_list, node)
+		if (!strncmp(d->name, name, NAME_MAX) &&
+				!strncmp(d->core_id, core_id, NAME_MAX))
+			return d;
+	return NULL;
+}
+
+static void rescan_devices(struct cyttsp4_core *core)
+{
+	struct cyttsp4_device *d;
+
+	list_for_each_entry(d, &cyttsp4_dev_list, node)
+		if (!d->core && !strncmp(core->id, d->core_id, NAME_MAX))
+			_cyttsp4_register_dev(d, core);
+}
+
+static void rescan_cores(struct cyttsp4_adapter *adap)
+{
+	struct cyttsp4_core *d;
+
+	list_for_each_entry(d, &core_dev_list, node)
+		if (!d->adap && !strncmp(adap->id, d->adap_id, NAME_MAX))
+			_cyttsp4_register_core(d, adap);
+}
+
+static int cyttsp4_check_device_info(
+	struct cyttsp4_device_info const *dev_info)
+{
+	int len;
+
+	if (!dev_info->name)
+		return -EINVAL;
+	if (!dev_info->core_id)
+		return -EINVAL;
+
+	len = strnlen(dev_info->name, NAME_MAX);
+	if (len == 0 || len == NAME_MAX)
+		return -EINVAL;
+
+	len = strnlen(dev_info->core_id, NAME_MAX);
+	if (len == 0 || len == NAME_MAX)
+		return -EINVAL;
+
+	return 0;
+}
+
+static int cyttsp4_check_core_info(
+	struct cyttsp4_core_info const *core_info)
+{
+	int len;
+
+	if (!core_info->name)
+		return -EINVAL;
+	if (!core_info->id)
+		return -EINVAL;
+	if (!core_info->adap_id)
+		return -EINVAL;
+
+	len = strnlen(core_info->name, NAME_MAX);
+	if (len == 0 || len == NAME_MAX)
+		return -EINVAL;
+
+	len = strnlen(core_info->id, NAME_MAX);
+	if (len == 0 || len == NAME_MAX)
+		return -EINVAL;
+
+	len = strnlen(core_info->adap_id, NAME_MAX);
+	if (len == 0 || len == NAME_MAX)
+		return -EINVAL;
+
+	return 0;
+}
+
+int cyttsp4_register_device(struct cyttsp4_device_info const *dev_info)
+{
+	struct cyttsp4_device *dev;
+	struct cyttsp4_core *core;
+	int ret;
+
+	if (!dev_info) {
+		ret = -EINVAL;
+		goto fail;
+	}
+
+	ret = cyttsp4_check_device_info(dev_info);
+	if (ret) {
+		pr_debug("%s: dev_info is invalid\n", __func__);
+		goto fail;
+	}
+
+	mutex_lock(&core_lock);
+	if (find_device(dev_info->name, dev_info->core_id)) {
+		pr_debug("%s: device '%s' with core id '%s' already exists\n",
+			__func__, dev_info->name, dev_info->core_id);
+		ret = -EEXIST;
+		goto fail_unlock;
+	}
+	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
+	if (!dev) {
+		pr_err("%s: failed to allocate device '%s'\n",
+			__func__, dev_info->name);
+		ret = -ENOMEM;
+		goto fail_unlock;
+	}
+	cyttsp4_initialize_device(dev, dev_info);
+	list_add(&dev->node, &cyttsp4_dev_list);
+	pr_debug("%s: '%s' added to cyttsp4_dev_list\n", __func__, dev->name);
+	core = find_core_with_driver(dev->core_id);
+	if (core)
+		ret = _cyttsp4_register_dev(dev, core);
+fail_unlock:
+	mutex_unlock(&core_lock);
+fail:
+	return ret;
+}
+EXPORT_SYMBOL_GPL(cyttsp4_register_device);
+
+int cyttsp4_unregister_device(char const *name, char const *core_id)
+{
+	struct cyttsp4_device *dev;
+	int ret = 0;
+
+	if (!name || !core_id) {
+		ret = -EINVAL;
+		goto fail;
+	}
+
+	mutex_lock(&core_lock);
+	dev = find_device(name, core_id);
+	if (!dev) {
+		pr_err("%s: device '%s' could not be found\n", __func__, name);
+		ret = -ENODEV;
+		goto fail_unlock;
+	}
+	_cyttsp4_unregister_dev(dev);
+	list_del(&dev->node);
+	pr_debug("%s: '%s' removed from cyttsp4_dev_list\n", __func__,
+		dev->name);
+	kfree(dev);
+fail_unlock:
+	mutex_unlock(&core_lock);
+fail:
+	return ret;
+}
+EXPORT_SYMBOL_GPL(cyttsp4_unregister_device);
+
+int cyttsp4_register_core_device(struct cyttsp4_core_info const *core_info)
+{
+	struct cyttsp4_core *core;
+	struct cyttsp4_adapter *adap;
+	int ret;
+
+	if (!core_info) {
+		ret = -EINVAL;
+		goto fail;
+	}
+
+	ret = cyttsp4_check_core_info(core_info);
+	if (ret) {
+		pr_debug("%s: core_info is invalid\n", __func__);
+		goto fail;
+	}
+
+	mutex_lock(&core_lock);
+	if (find_core(core_info->id)) {
+		pr_debug("%s: core id '%s' already exists\n",
+				__func__, core_info->id);
+		ret = -EEXIST;
+		goto fail_unlock;
+	}
+	core = kzalloc(sizeof(*core), GFP_KERNEL);
+	if (!core) {
+		pr_err("%s: failed to allocate core device '%s'\n",
+			__func__, core_info->name);
+		ret = -ENOMEM;
+		goto fail_unlock;
+	}
+	cyttsp4_initialize_core(core, core_info);
+	list_add(&core->node, &core_dev_list);
+	pr_debug("%s: '%s' added to core_dev_list\n", __func__, core->name);
+	adap = find_adapter(core->adap_id);
+	if (adap) {
+		pr_debug("%s: adapter for '%s' is '%s'\n", __func__,
+				core->id, dev_name(adap->dev));
+		ret = _cyttsp4_register_core(core, adap);
+		if (!ret)
+			rescan_devices(core);
+	}
+fail_unlock:
+	mutex_unlock(&core_lock);
+fail:
+	return ret;
+}
+EXPORT_SYMBOL_GPL(cyttsp4_register_core_device);
+
+int cyttsp4_add_adapter(char const *id, struct cyttsp4_ops const *ops,
+		struct device *parent)
+{
+	int rc = 0;
+	struct cyttsp4_adapter *a;
+
+	if (!parent) {
+		dev_err(parent, "%s: need parent for '%s'\n", __func__, id);
+		return -EINVAL;
+	}
+	mutex_lock(&core_lock);
+	if (find_adapter(id)) {
+		dev_err(parent, "%s: adapter '%s' already exists\n",
+				__func__, id);
+		rc = -EEXIST;
+		goto fail;
+	}
+	a = kzalloc(sizeof(*a), GFP_KERNEL);
+	if (!a) {
+		dev_err(parent, "%s: failed to allocate adapter '%s'\n",
+				__func__, id);
+		rc = -ENOMEM;
+		goto fail;
+	}
+	memcpy(a->id, id, sizeof(a->id));
+	a->id[sizeof(a->id) - 1] = 0;
+	a->read = ops->read;
+	a->write = ops->write;
+	a->dev = parent;
+	list_add(&a->node, &adapter_list);
+	dev_dbg(parent, "%s: '%s' added to adapter_list\n", __func__, id);
+	rescan_cores(a);
+fail:
+	mutex_unlock(&core_lock);
+	return rc;
+}
+EXPORT_SYMBOL_GPL(cyttsp4_add_adapter);
+
+int cyttsp4_del_adapter(char const *id)
+{
+	int rc = 0;
+	struct cyttsp4_adapter *adap;
+	struct cyttsp4_core *core;
+
+	mutex_lock(&core_lock);
+	adap = find_adapter(id);
+	if (!adap) {
+		pr_err("%s: adapter '%s' does not exist\n",
+			__func__, id);
+		rc = -ENODEV;
+		goto fail;
+	}
+
+	/* Unregister core and devices linked to this adapter
+	 * This is to prevent core and devices get probed until
+	 * their corresponding adapter is re-added
+	 */
+	list_for_each_entry(core, &core_dev_list, node) {
+		if (core->adap != adap)
+			continue;
+		_cyttsp4_unregister_and_reinitialize_devices(core);
+		_cyttsp4_unregister_core(core);
+		_cyttsp4_reinitialize_core(core);
+	}
+
+	list_del(&adap->node);
+	kfree(adap);
+	pr_debug("%s: '%s' removed from adapter_list\n", __func__, id);
+fail:
+	mutex_unlock(&core_lock);
+	return rc;
+}
+EXPORT_SYMBOL_GPL(cyttsp4_del_adapter);
+
+static struct cyttsp4_device *verify_device_type(struct device *dev)
+{
+	return dev->type == &cyttsp4_dev_type ? to_cyttsp4_device(dev) : NULL;
+}
+
+static struct cyttsp4_core *verify_core_type(struct device *dev)
+{
+	return dev->type == &cyttsp4_core_type ? to_cyttsp4_core(dev) : NULL;
+}
+
+static int cyttsp4_device_match(struct device *dev, struct device_driver *drv)
+{
+	struct cyttsp4_device *cyttsp4_dev = verify_device_type(dev);
+	struct cyttsp4_core *cyttsp4_core;
+	int match;
+
+	if (cyttsp4_dev) {
+		match = strncmp(cyttsp4_dev->name, drv->name, NAME_MAX) == 0;
+		goto exit;
+	}
+	cyttsp4_core = verify_core_type(dev);
+	if (cyttsp4_core) {
+		match = strncmp(cyttsp4_core->name, drv->name, NAME_MAX) == 0;
+		goto exit;
+	}
+	match = 0;
+exit:
+	dev_dbg(dev, "%s: %s matching '%s' driver\n", __func__,
+			match ? "is" : "isn't", drv->name);
+	return match;
+}
+
+static ssize_t modalias_show(struct device *dev, struct device_attribute *a,
+			     char *buf)
+{
+	struct cyttsp4_device *cyttsp4_dev = verify_device_type(dev);
+	struct cyttsp4_core *cyttsp4_core;
+
+	char const *name;
+	int len;
+
+	if (cyttsp4_dev) {
+		name = cyttsp4_dev->name;
+		goto exit;
+	}
+	cyttsp4_core = verify_core_type(dev);
+	if (cyttsp4_core) {
+		name = cyttsp4_core->id;
+		goto exit;
+	}
+	name = "none";
+exit:
+	len = snprintf(buf, PAGE_SIZE, "ttsp4:%s\n", name);
+	return (len >= PAGE_SIZE) ? (PAGE_SIZE - 1) : len;
+}
+
+static struct device_attribute cyttsp4_dev_attrs[] = {
+	__ATTR_RO(modalias),
+	__ATTR_NULL,
+};
+
+#ifdef CONFIG_SUSPEND
+static int cyttsp4_pm_suspend(struct device *dev)
+{
+	struct device_driver *drv = dev->driver;
+
+	dev_dbg(dev, "%s\n", __func__);
+	if (drv && drv->pm && drv->pm->suspend)
+		return drv->pm->suspend(dev);
+	return 0;
+}
+
+static int cyttsp4_pm_resume(struct device *dev)
+{
+	struct device_driver *drv = dev->driver;
+
+	dev_dbg(dev, "%s\n", __func__);
+	if (drv && drv->pm && drv->pm->resume)
+		return drv->pm->resume(dev);
+	return 0;
+}
+#else /* !CONFIG_SUSPEND */
+#define cyttsp4_pm_suspend		NULL
+#define cyttsp4_pm_resume		NULL
+#endif /* !CONFIG_SUSPEND */
+
+#ifdef CONFIG_PM_RUNTIME
+#define cyttsp4_pm_rt_suspend		pm_generic_runtime_suspend
+#define cyytsp4_pm_rt_resume		pm_generic_runtime_resume
+#define cyytsp4_pm_rt_idle		pm_generic_runtime_idle
+#else /* !CONFIG_PM_RUNTIME */
+#define cyttsp4_pm_rt_suspend		NULL
+#define cyytsp4_pm_rt_resume		NULL
+#define cyytsp4_pm_rt_idle		NULL
+#endif /* !CONFIG_PM_RUNTIME */
+
+static const struct dev_pm_ops cyttsp4_dev_pm_ops = {
+	.suspend = cyttsp4_pm_suspend,
+	.resume = cyttsp4_pm_resume,
+	.runtime_suspend = cyttsp4_pm_rt_suspend,
+	.runtime_resume = cyytsp4_pm_rt_resume,
+	.runtime_idle = cyytsp4_pm_rt_idle,
+};
+
+struct bus_type cyttsp4_bus_type = {
+	.name		= "ttsp4",
+	.dev_attrs	= cyttsp4_dev_attrs,
+	.match		= cyttsp4_device_match,
+	.uevent		= NULL,
+	.pm		= &cyttsp4_dev_pm_ops,
+};
+EXPORT_SYMBOL_GPL(cyttsp4_bus_type);
+
+static int cyttsp4_drv_remove(struct device *_dev)
+{
+	struct cyttsp4_driver *drv = to_cyttsp4_driver(_dev->driver);
+	struct cyttsp4_device *dev = to_cyttsp4_device(_dev);
+	struct cyttsp4_core *core = dev->core;
+	int ret;
+
+	ret = drv->remove(dev);
+	/* Decrease usage count of the core driver */
+	module_put(core->dev.driver->owner);
+	return ret;
+}
+
+static int cyttsp4_core_drv_remove(struct device *_dev)
+{
+	struct cyttsp4_core_driver *drv = to_cyttsp4_core_driver(_dev->driver);
+	struct cyttsp4_core *core = to_cyttsp4_core(_dev);
+	struct cyttsp4_adapter *adap = core->adap;
+	int ret;
+
+	ret = drv->remove(core);
+	/* Decrease usage count of the adapter driver */
+	module_put(adap->dev->driver->owner);
+
+	mutex_lock(&core_lock);
+	/* Unregister devices linked to this core
+	 * This is to prevent devices get probed until
+	 * their corresponding core driver is re-added
+	 */
+	_cyttsp4_unregister_and_reinitialize_devices(core);
+	mutex_unlock(&core_lock);
+
+	return ret;
+}
+
+static int cyttsp4_drv_probe(struct device *_dev)
+{
+	struct cyttsp4_driver *drv = to_cyttsp4_driver(_dev->driver);
+	struct cyttsp4_device *dev = to_cyttsp4_device(_dev);
+	struct cyttsp4_core *core = dev->core;
+	int rc;
+
+	if (!core || !core->dev.driver)
+		return -ENODEV;
+
+	/* Increase usage count of the core driver*/
+	__module_get(core->dev.driver->owner);
+
+	rc = drv->probe(dev);
+	if (rc)
+		module_put(core->dev.driver->owner);
+	dev_dbg(_dev, "%s: for %s = %d\n", __func__, dev->name, rc);
+	return rc;
+}
+
+static int cyttsp4_core_drv_probe(struct device *_dev)
+{
+	struct cyttsp4_core_driver *drv = to_cyttsp4_core_driver(_dev->driver);
+	struct cyttsp4_core *dev = to_cyttsp4_core(_dev);
+	struct cyttsp4_adapter *adap = dev->adap;
+	int rc;
+
+	if (!adap || !adap->dev->driver)
+		return -ENODEV;
+
+	/* Increase usage count of the adapter driver*/
+	__module_get(adap->dev->driver->owner);
+
+	rc = drv->probe(dev);
+	dev_dbg(_dev, "%s: for %s = %d\n", __func__, dev->name, rc);
+	if (!rc)
+		rescan_devices(dev);
+	else
+		module_put(adap->dev->driver->owner);
+	return rc;
+}
+
+int cyttsp4_register_driver(struct cyttsp4_driver *drv)
+{
+	int ret;
+
+	drv->driver.bus = &cyttsp4_bus_type;
+	if (drv->probe)
+		drv->driver.probe = cyttsp4_drv_probe;
+	if (drv->remove)
+		drv->driver.remove = cyttsp4_drv_remove;
+	ret = driver_register(&drv->driver);
+	pr_debug("%s: '%s' returned %d\n", __func__, drv->driver.name, ret);
+	return ret;
+}
+EXPORT_SYMBOL_GPL(cyttsp4_register_driver);
+
+int cyttsp4_register_core_driver(struct cyttsp4_core_driver *drv)
+{
+	int ret;
+
+	drv->driver.bus = &cyttsp4_bus_type;
+	if (drv->probe)
+		drv->driver.probe = cyttsp4_core_drv_probe;
+	if (drv->remove)
+		drv->driver.remove = cyttsp4_core_drv_remove;
+	ret = driver_register(&drv->driver);
+	pr_debug("%s: '%s' returned %d\n", __func__, drv->driver.name, ret);
+	return ret;
+}
+EXPORT_SYMBOL_GPL(cyttsp4_register_core_driver);
+
+void cyttsp4_unregister_driver(struct cyttsp4_driver *drv)
+{
+	driver_unregister(&drv->driver);
+}
+EXPORT_SYMBOL_GPL(cyttsp4_unregister_driver);
+
+void cyttsp4_unregister_core_driver(struct cyttsp4_core_driver *drv)
+{
+	driver_unregister(&drv->driver);
+}
+EXPORT_SYMBOL_GPL(cyttsp4_unregister_core_driver);
+
+static int __init cyttsp4_bus_init(void)
+{
+	int error;
+	error =  bus_register(&cyttsp4_bus_type);
+	if (error)
+		pr_err("%s: error %d\n", __func__, error);
+	else
+		pr_debug("%s: ok\n", __func__);
+	return error;
+}
+
+static void __exit cyttsp4_bus_exit(void)
+{
+	pr_debug("%s: ok\n", __func__);
+}
+
+subsys_initcall(cyttsp4_bus_init);
+module_exit(cyttsp4_bus_exit);
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Aleksej Makarov <aleksej.makarov@sonyericsson.com>");
diff --git a/drivers/input/touchscreen/cypress/cyttsp4_core.c b/drivers/input/touchscreen/cypress/cyttsp4_core.c
new file mode 100644
index 0000000..74fbe0e
--- /dev/null
+++ b/drivers/input/touchscreen/cypress/cyttsp4_core.c
@@ -0,0 +1,3983 @@
+/*
+ * cyttsp4_core.c
+ * Cypress TrueTouch(TM) Standard Product V4 Core driver module.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2012 Cypress Semiconductor
+ * Copyright (C) 2011 Sony Ericsson Mobile Communications AB.
+ *
+ * Author: Aleksej Makarov <aleksej.makarov@sonyericsson.com>
+ * Modified by: Cypress Semiconductor to add device functions
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#include <linux/cyttsp4_bus.h>
+
+#include <asm/unaligned.h>
+#include <linux/delay.h>
+#include <linux/gpio.h>
+#include <linux/input.h>
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+#include <linux/limits.h>
+#include <linux/module.h>
+#include <linux/pm_runtime.h>
+#include <linux/sched.h>
+#include <linux/slab.h>
+#include <linux/workqueue.h>
+
+#include <linux/cyttsp4_core.h>
+#include "cyttsp4_regs.h"
+
+/* Timeout in ms. */
+#define CY_CORE_REQUEST_EXCLUSIVE_TIMEOUT	500
+#define CY_CORE_SLEEP_REQUEST_EXCLUSIVE_TIMEOUT	5000
+#define CY_CORE_WAIT_SYSINFO_MODE_TIMEOUT	2000
+#define CY_CORE_MODE_CHANGE_TIMEOUT		1000
+#define CY_CORE_RESET_AND_WAIT_TIMEOUT		500
+#define CY_CORE_WAKEUP_TIMEOUT			50
+
+#define CY_CORE_STARTUP_RETRY_COUNT		3
+
+#define IS_DEEP_SLEEP_CONFIGURED(x) \
+		((x) == 0 || (x) == 0xFF)
+
+#define IS_TMO(t)	((t) == 0)
+
+#define PUT_FIELD16(si, val, addr) \
+do { \
+	if (IS_LITTLEENDIAN((si)->si_ptrs.cydata->device_info)) \
+		put_unaligned_le16(val, addr); \
+	else \
+		put_unaligned_be16(val, addr); \
+} while (0)
+
+#define GET_FIELD16(si, addr) \
+({ \
+	u16 __val; \
+	if (IS_LITTLEENDIAN((si)->si_ptrs.cydata->device_info)) \
+		__val = get_unaligned_le16(addr); \
+	else \
+		__val = get_unaligned_be16(addr); \
+	__val; \
+})
+
+#define RETRY_OR_EXIT(retry_cnt, retry_label, exit_label) \
+do { \
+	if (retry_cnt) \
+		goto retry_label; \
+	goto exit_label; \
+} while (0)
+
+static const u8 security_key[] = {
+	0xA5, 0x01, 0x02, 0x03, 0xFF, 0xFE, 0xFD, 0x5A
+};
+
+static const u8 ldr_exit[] = {
+	0xFF, 0x01, 0x3B, 0x00, 0x00, 0x4F, 0x6D, 0x17
+};
+
+static const u8 ldr_err_app[] = {
+	0x01, 0x02, 0x00, 0x00, 0x55, 0xDD, 0x17
+};
+
+MODULE_FIRMWARE(CY_FW_FILE_NAME);
+
+const char *cy_driver_core_name = CYTTSP4_CORE_NAME;
+const char *cy_driver_core_version = CY_DRIVER_VERSION;
+const char *cy_driver_core_date = CY_DRIVER_DATE;
+
+enum cyttsp4_sleep_state {
+	SS_SLEEP_OFF,
+	SS_SLEEP_ON,
+	SS_SLEEPING,
+	SS_WAKING,
+};
+
+enum cyttsp4_startup_state {
+	STARTUP_NONE,
+	STARTUP_QUEUED,
+	STARTUP_RUNNING,
+};
+
+struct cyttsp4_core_data {
+	struct device *dev;
+	struct cyttsp4_core *core;
+	struct list_head atten_list[CY_ATTEN_NUM_ATTEN];
+	struct mutex system_lock;
+	struct mutex adap_lock;
+	enum cyttsp4_mode mode;
+	enum cyttsp4_sleep_state sleep_state;
+	enum cyttsp4_startup_state startup_state;
+	int int_status;
+	int cmd_toggle;
+	spinlock_t spinlock;
+	struct cyttsp4_core_platform_data *pdata;
+	wait_queue_head_t wait_q;
+	int irq;
+	struct work_struct startup_work;
+	struct cyttsp4_sysinfo sysinfo;
+	void *exclusive_dev;
+	int exclusive_waits;
+	atomic_t ignore_irq;
+	bool irq_enabled;
+	bool irq_wake;
+	bool wake_initiated_by_device;
+	bool invalid_touch_app;
+	int max_xfer;
+	int apa_mc_en;
+	int glove_en;
+	int stylus_en;
+	int proximity_en;
+	u8 default_scantype;
+	u8 easy_wakeup_gesture;
+	unsigned int active_refresh_cycle_ms;
+	u8 heartbeat_count;
+#ifdef VERBOSE_DEBUG
+	u8 pr_buf[CY_MAX_PRBUF_SIZE];
+#endif
+	struct work_struct watchdog_work;
+	struct timer_list watchdog_timer;
+};
+
+struct atten_node {
+	struct list_head node;
+	int (*func)(struct cyttsp4_device *);
+	struct cyttsp4_device *ttsp;
+	int mode;
+};
+
+static int _cyttsp4_put_device_into_deep_sleep(struct cyttsp4_core_data *cd,
+		u8 hst_mode_reg);
+
+static inline size_t merge_bytes(u8 high, u8 low)
+{
+	return (high << 8) + low;
+}
+
+#ifdef VERBOSE_DEBUG
+void cyttsp4_pr_buf(struct device *dev, u8 *pr_buf, u8 *dptr, int size,
+		const char *data_name)
+{
+	int i, k;
+	const char fmt[] = "%02X ";
+	int max;
+
+	if (!size)
+		return;
+
+	max = (CY_MAX_PRBUF_SIZE - 1) - sizeof(CY_PR_TRUNCATED);
+
+	pr_buf[0] = 0;
+	for (i = k = 0; i < size && k < max; i++, k += 3)
+		scnprintf(pr_buf + k, CY_MAX_PRBUF_SIZE, fmt, dptr[i]);
+
+	dev_vdbg(dev, "%s:  %s[0..%d]=%s%s\n", __func__, data_name, size - 1,
+			pr_buf, size <= max ? "" : CY_PR_TRUNCATED);
+}
+EXPORT_SYMBOL_GPL(cyttsp4_pr_buf);
+#endif
+
+static inline int cyttsp4_adap_read(struct cyttsp4_core_data *cd, u16 addr,
+		void *buf, int size)
+{
+	return cd->core->adap->read(cd->core->adap, addr, buf, size,
+			cd->max_xfer);
+}
+
+static inline int cyttsp4_adap_write(struct cyttsp4_core_data *cd, u16 addr,
+		const void *buf, int size)
+{
+	return cd->core->adap->write(cd->core->adap, addr, buf, size,
+			cd->max_xfer);
+}
+
+/* cyttsp4_platform_detect_read()
+ *
+ * This function is passed to platform detect
+ * function to perform a read operation
+ */
+static int cyttsp4_platform_detect_read(struct device *dev, u16 addr,
+		void *buf, int size)
+{
+	struct cyttsp4_core_data *cd = dev_get_drvdata(dev);
+	return cd->core->adap->read(cd->core->adap, addr, buf, size,
+			cd->max_xfer);
+}
+
+static u16 cyttsp4_calc_partial_app_crc(const u8 *data, int size, u16 crc)
+{
+	int i, j;
+
+	for (i = 0; i < size; i++) {
+		crc ^= ((u16)data[i] << 8);
+		for (j = 8; j > 0; j--)
+			if (crc & 0x8000)
+				crc = (crc << 1) ^ 0x1021;
+			else
+				crc <<= 1;
+	}
+
+	return crc;
+}
+
+static inline u16 cyttsp4_calc_app_crc(const u8 *data, int size)
+{
+	return cyttsp4_calc_partial_app_crc(data, size, 0xFFFF);
+}
+
+static const u8 *cyttsp4_get_security_key_(struct cyttsp4_device *ttsp,
+		int *size)
+{
+	if (size)
+		*size = sizeof(security_key);
+
+	return security_key;
+}
+
+static inline void cyttsp4_get_touch_axis(struct cyttsp4_core_data *cd,
+		int *axis, int size, int max, u8 *xy_data, int bofs)
+{
+	int nbyte;
+	int next;
+
+	for (nbyte = 0, *axis = 0, next = 0; nbyte < size; nbyte++) {
+		dev_vdbg(cd->dev,
+			"%s: *axis=%02X(%d) size=%d max=%08X xy_data=%p"
+			" xy_data[%d]=%02X(%d) bofs=%d\n",
+			__func__, *axis, *axis, size, max, xy_data, next,
+			xy_data[next], xy_data[next], bofs);
+		*axis = (*axis * 256) + (xy_data[next] >> bofs);
+		next++;
+	}
+
+	*axis &= max - 1;
+
+	dev_vdbg(cd->dev,
+		"%s: *axis=%02X(%d) size=%d max=%08X xy_data=%p"
+		" xy_data[%d]=%02X(%d)\n",
+		__func__, *axis, *axis, size, max, xy_data, next,
+		xy_data[next], xy_data[next]);
+}
+
+/*
+ * cyttsp4_get_touch_record_()
+ *
+ * Fills touch info for a touch record specified by rec_no
+ * Should only be called in Operational mode IRQ attention and
+ * rec_no should be less than the number of current touch records
+ */
+static void cyttsp4_get_touch_record_(struct cyttsp4_device *ttsp,
+		int rec_no, int *rec_abs)
+{
+	struct cyttsp4_core *core = ttsp->core;
+	struct cyttsp4_core_data *cd = dev_get_drvdata(&core->dev);
+	struct device *dev = cd->dev;
+	struct cyttsp4_sysinfo *si = &cd->sysinfo;
+	u8 *xy_data = si->xy_data + (rec_no * si->si_ofs.tch_rec_size);
+	enum cyttsp4_tch_abs abs;
+
+	memset(rec_abs, 0, CY_TCH_NUM_ABS * sizeof(int));
+	for (abs = CY_TCH_X; abs < CY_TCH_NUM_ABS; abs++) {
+		cyttsp4_get_touch_axis(cd, &rec_abs[abs],
+			si->si_ofs.tch_abs[abs].size,
+			si->si_ofs.tch_abs[abs].max,
+			xy_data + si->si_ofs.tch_abs[abs].ofs,
+			si->si_ofs.tch_abs[abs].bofs);
+		dev_vdbg(dev, "%s: get %s=%04X(%d)\n", __func__,
+			cyttsp4_tch_abs_string[abs],
+			rec_abs[abs], rec_abs[abs]);
+	}
+}
+
+static int cyttsp4_load_status_and_touch_regs(struct cyttsp4_core_data *cd,
+		bool optimize)
+{
+	struct cyttsp4_sysinfo *si = &cd->sysinfo;
+	struct device *dev = cd->dev;
+	int first_read_len;
+	int second_read_off;
+	int num_read_rec;
+	u8 num_cur_rec;
+	u8 hst_mode;
+	u8 rep_len;
+	u8 rep_stat;
+	u8 tt_stat;
+	int rc;
+
+	if (!si->xy_mode) {
+		dev_err(cd->dev, "%s: NULL xy_mode pointer\n",
+			__func__);
+		return -EINVAL;
+	}
+
+	first_read_len = si->si_ofs.rep_hdr_size;
+	/* Read one touch record additionally */
+	if (optimize)
+		first_read_len += si->si_ofs.tch_rec_size;
+
+	rc = cyttsp4_adap_read(cd, si->si_ofs.rep_ofs,
+			&si->xy_mode[si->si_ofs.rep_ofs], first_read_len);
+	if (rc < 0) {
+		dev_err(dev, "%s: fail read mode regs r=%d\n",
+			__func__, rc);
+		return rc;
+	}
+
+	/* print xy data */
+	cyttsp4_pr_buf(dev, cd->pr_buf, si->xy_mode,
+		si->si_ofs.mode_size, "xy_mode");
+
+	hst_mode = si->xy_mode[CY_REG_BASE];
+	rep_len = si->xy_mode[si->si_ofs.rep_ofs];
+	rep_stat = si->xy_mode[si->si_ofs.rep_ofs + 1];
+	tt_stat = si->xy_mode[si->si_ofs.tt_stat_ofs];
+	dev_vdbg(dev, "%s: %s%02X %s%d %s%02X %s%02X\n", __func__,
+		"hst_mode=", hst_mode, "rep_len=", rep_len,
+		"rep_stat=", rep_stat, "tt_stat=", tt_stat);
+
+	num_cur_rec = GET_NUM_TOUCH_RECORDS(tt_stat);
+	dev_vdbg(dev, "%s: num_cur_rec=%d\n", __func__, num_cur_rec);
+
+	if (rep_len == 0 && num_cur_rec > 0) {
+		dev_err(dev, "%s: report length error rep_len=%d num_rec=%d\n",
+			__func__, rep_len, num_cur_rec);
+		return -EIO;
+	}
+
+	num_read_rec = num_cur_rec;
+	second_read_off = si->si_ofs.tt_stat_ofs + 1;
+	if (optimize) {
+		num_read_rec--;
+		second_read_off += si->si_ofs.tch_rec_size;
+	}
+
+	if (num_read_rec <= 0)
+		goto exit_print;
+
+	rc = cyttsp4_adap_read(cd, second_read_off,
+			&si->xy_mode[second_read_off],
+			num_read_rec * si->si_ofs.tch_rec_size);
+	if (rc < 0) {
+		dev_err(dev, "%s: read fail on touch regs r=%d\n",
+			__func__, rc);
+		return rc;
+	}
+
+exit_print:
+	/* print xy data */
+	cyttsp4_pr_buf(dev, cd->pr_buf, si->xy_data,
+		num_cur_rec * si->si_ofs.tch_rec_size, "xy_data");
+
+	return 0;
+}
+
+static int cyttsp4_handshake(struct cyttsp4_core_data *cd, u8 mode)
+{
+	u8 cmd = mode ^ CY_HST_TOGGLE;
+	int rc;
+
+	if (mode & CY_HST_MODE_CHANGE) {
+		dev_err(cd->dev, "%s: Host mode change bit set, NO handshake\n",
+				__func__);
+		return 0;
+	}
+
+	rc = cyttsp4_adap_write(cd, CY_REG_BASE, &cmd, sizeof(cmd));
+	if (rc < 0)
+		dev_err(cd->dev, "%s: bus write fail on handshake (ret=%d)\n",
+				__func__, rc);
+
+	return rc;
+}
+
+static int cyttsp4_toggle_low_power_(struct cyttsp4_core_data *cd, u8 mode)
+{
+	u8 cmd = mode ^ CY_HST_LOWPOW;
+
+	int rc = cyttsp4_adap_write(cd, CY_REG_BASE, &cmd, sizeof(cmd));
+	if (rc < 0)
+		dev_err(cd->dev,
+			"%s: bus write fail on toggle low power (ret=%d)\n",
+			__func__, rc);
+	return rc;
+}
+
+static int cyttsp4_toggle_low_power(struct cyttsp4_core_data *cd, u8 mode)
+{
+	int rc;
+
+	mutex_lock(&cd->system_lock);
+	rc = cyttsp4_toggle_low_power_(cd, mode);
+	mutex_unlock(&cd->system_lock);
+
+	return rc;
+}
+
+static int cyttsp4_hw_soft_reset_(struct cyttsp4_core_data *cd)
+{
+	u8 cmd = CY_HST_RESET;
+
+	int rc = cyttsp4_adap_write(cd, CY_REG_BASE, &cmd, sizeof(cmd));
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: FAILED to execute SOFT reset\n",
+				__func__);
+		return rc;
+	}
+	dev_dbg(cd->dev, "%s: execute SOFT reset\n", __func__);
+	return 0;
+}
+
+static int cyttsp4_hw_soft_reset(struct cyttsp4_core_data *cd)
+{
+	int rc;
+
+	mutex_lock(&cd->system_lock);
+	rc = cyttsp4_hw_soft_reset_(cd);
+	mutex_unlock(&cd->system_lock);
+
+	return rc;
+}
+
+static int cyttsp4_hw_hard_reset_(struct cyttsp4_core_data *cd)
+{
+	if (cd->pdata->xres) {
+		cd->pdata->xres(cd->pdata, cd->dev);
+		dev_dbg(cd->dev, "%s: execute HARD reset\n", __func__);
+		return 0;
+	}
+	dev_err(cd->dev, "%s: FAILED to execute HARD reset\n", __func__);
+	return -ENOSYS;
+}
+
+static int cyttsp4_hw_hard_reset(struct cyttsp4_core_data *cd)
+{
+	int rc;
+
+	mutex_lock(&cd->system_lock);
+	rc = cyttsp4_hw_hard_reset_(cd);
+	mutex_unlock(&cd->system_lock);
+
+	return rc;
+}
+
+static int cyttsp4_hw_reset_(struct cyttsp4_core_data *cd)
+{
+	int rc = cyttsp4_hw_hard_reset_(cd);
+	if (rc == -ENOSYS)
+		rc = cyttsp4_hw_soft_reset_(cd);
+	return rc;
+}
+
+static inline int cyttsp4_bits_2_bytes(int nbits, int *max)
+{
+	*max = 1 << nbits;
+	return (nbits + 7) / 8;
+}
+
+static int cyttsp4_si_data_offsets(struct cyttsp4_core_data *cd)
+{
+	struct cyttsp4_sysinfo *si = &cd->sysinfo;
+	int rc = cyttsp4_adap_read(cd, CY_REG_BASE, &si->si_data,
+				   sizeof(si->si_data));
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: fail read sysinfo data offsets r=%d\n",
+			__func__, rc);
+		return rc;
+	}
+
+	/* Print sysinfo data offsets */
+	cyttsp4_pr_buf(cd->dev, cd->pr_buf, (u8 *)&si->si_data,
+		       sizeof(si->si_data), "sysinfo_data_offsets");
+
+	/* convert sysinfo data offset bytes into integers */
+
+	si->si_ofs.map_sz = merge_bytes(si->si_data.map_szh,
+			si->si_data.map_szl);
+	si->si_ofs.map_sz = merge_bytes(si->si_data.map_szh,
+			si->si_data.map_szl);
+	si->si_ofs.cydata_ofs = merge_bytes(si->si_data.cydata_ofsh,
+			si->si_data.cydata_ofsl);
+	si->si_ofs.test_ofs = merge_bytes(si->si_data.test_ofsh,
+			si->si_data.test_ofsl);
+	si->si_ofs.pcfg_ofs = merge_bytes(si->si_data.pcfg_ofsh,
+			si->si_data.pcfg_ofsl);
+	si->si_ofs.opcfg_ofs = merge_bytes(si->si_data.opcfg_ofsh,
+			si->si_data.opcfg_ofsl);
+	si->si_ofs.ddata_ofs = merge_bytes(si->si_data.ddata_ofsh,
+			si->si_data.ddata_ofsl);
+	si->si_ofs.mdata_ofs = merge_bytes(si->si_data.mdata_ofsh,
+			si->si_data.mdata_ofsl);
+	return rc;
+}
+
+static int cyttsp4_si_get_cydata(struct cyttsp4_core_data *cd)
+{
+	struct cyttsp4_sysinfo *si = &cd->sysinfo;
+	int read_offset;
+	int mfgid_sz, calc_mfgid_sz;
+	void *p;
+	int rc;
+
+	si->si_ofs.cydata_size = si->si_ofs.test_ofs - si->si_ofs.cydata_ofs;
+	dev_dbg(cd->dev, "%s: cydata size: %d\n", __func__,
+			si->si_ofs.cydata_size);
+
+	if (si->si_ofs.cydata_size <= 0)
+		return -EINVAL;
+
+	p = krealloc(si->si_ptrs.cydata, si->si_ofs.cydata_size, GFP_KERNEL);
+	if (p == NULL) {
+		dev_err(cd->dev, "%s: fail alloc cydata memory\n", __func__);
+		return -ENOMEM;
+	}
+	si->si_ptrs.cydata = p;
+
+	read_offset = si->si_ofs.cydata_ofs;
+
+	/* Read the CYDA registers up to MFGID field */
+	rc = cyttsp4_adap_read(cd, read_offset, si->si_ptrs.cydata,
+			offsetof(struct cyttsp4_cydata, mfgid_sz)
+			+ sizeof(si->si_ptrs.cydata->mfgid_sz));
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: fail read cydata r=%d\n",
+			__func__, rc);
+		return rc;
+	}
+
+	/* Check MFGID size */
+	mfgid_sz = si->si_ptrs.cydata->mfgid_sz;
+	calc_mfgid_sz = si->si_ofs.cydata_size - sizeof(struct cyttsp4_cydata);
+	if (mfgid_sz != calc_mfgid_sz) {
+		dev_err(cd->dev, "%s: mismatch in MFGID size, reported:%d calculated:%d\n",
+			__func__, mfgid_sz, calc_mfgid_sz);
+		return -EINVAL;
+	}
+
+	read_offset += offsetof(struct cyttsp4_cydata, mfgid_sz)
+			+ sizeof(si->si_ptrs.cydata->mfgid_sz);
+
+	/* Read the CYDA registers for MFGID field */
+	rc = cyttsp4_adap_read(cd, read_offset, si->si_ptrs.cydata->mfg_id,
+			si->si_ptrs.cydata->mfgid_sz);
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: fail read cydata r=%d\n",
+			__func__, rc);
+		return rc;
+	}
+
+	read_offset += si->si_ptrs.cydata->mfgid_sz;
+
+	/* Read the rest of the CYDA registers */
+	rc = cyttsp4_adap_read(cd, read_offset, &si->si_ptrs.cydata->cyito_idh,
+			sizeof(struct cyttsp4_cydata)
+			- offsetof(struct cyttsp4_cydata, cyito_idh));
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: fail read cydata r=%d\n",
+			__func__, rc);
+		return rc;
+	}
+
+	cyttsp4_pr_buf(cd->dev, cd->pr_buf, (u8 *)si->si_ptrs.cydata,
+		si->si_ofs.cydata_size - mfgid_sz, "sysinfo_cydata");
+	cyttsp4_pr_buf(cd->dev, cd->pr_buf, si->si_ptrs.cydata->mfg_id,
+		mfgid_sz, "sysinfo_cydata_mfgid");
+	return rc;
+}
+
+static int cyttsp4_si_get_test_data(struct cyttsp4_core_data *cd)
+{
+	struct cyttsp4_sysinfo *si = &cd->sysinfo;
+	void *p;
+	int rc;
+
+	si->si_ofs.test_size = si->si_ofs.pcfg_ofs - si->si_ofs.test_ofs;
+
+	if (si->si_ofs.test_size <= 0)
+		return -EINVAL;
+
+	p = krealloc(si->si_ptrs.test, si->si_ofs.test_size, GFP_KERNEL);
+	if (p == NULL) {
+		dev_err(cd->dev, "%s: fail alloc test memory\n", __func__);
+		return -ENOMEM;
+	}
+	si->si_ptrs.test = p;
+
+	rc = cyttsp4_adap_read(cd, si->si_ofs.test_ofs, si->si_ptrs.test,
+			si->si_ofs.test_size);
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: fail read test data r=%d\n",
+			__func__, rc);
+		return rc;
+	}
+
+	cyttsp4_pr_buf(cd->dev, cd->pr_buf,
+		       (u8 *)si->si_ptrs.test, si->si_ofs.test_size,
+		       "sysinfo_test_data");
+	if (si->si_ptrs.test->post_codel &
+	    CY_POST_CODEL_WDG_RST)
+		dev_info(cd->dev, "%s: %s codel=%02X\n",
+			 __func__, "Reset was a WATCHDOG RESET",
+			 si->si_ptrs.test->post_codel);
+
+	if (!(si->si_ptrs.test->post_codel &
+	      CY_POST_CODEL_CFG_DATA_CRC_FAIL))
+		dev_info(cd->dev, "%s: %s codel=%02X\n", __func__,
+			 "Config Data CRC FAIL",
+			 si->si_ptrs.test->post_codel);
+
+	if (!(si->si_ptrs.test->post_codel &
+	      CY_POST_CODEL_PANEL_TEST_FAIL))
+		dev_info(cd->dev, "%s: %s codel=%02X\n",
+			 __func__, "PANEL TEST FAIL",
+			 si->si_ptrs.test->post_codel);
+
+	dev_info(cd->dev, "%s: SCANNING is %s codel=%02X\n",
+		 __func__, si->si_ptrs.test->post_codel & 0x08 ?
+		 "ENABLED" : "DISABLED",
+		 si->si_ptrs.test->post_codel);
+	return rc;
+}
+
+static int cyttsp4_si_get_pcfg_data(struct cyttsp4_core_data *cd)
+{
+	struct cyttsp4_sysinfo *si = &cd->sysinfo;
+	void *p;
+	int rc;
+
+	dev_vdbg(cd->dev, "%s: get pcfg data\n", __func__);
+	si->si_ofs.pcfg_size = si->si_ofs.opcfg_ofs - si->si_ofs.pcfg_ofs;
+
+	if (si->si_ofs.pcfg_size <= 0)
+		return -EINVAL;
+
+	p = krealloc(si->si_ptrs.pcfg, si->si_ofs.pcfg_size, GFP_KERNEL);
+	if (p == NULL) {
+		rc = -ENOMEM;
+		dev_err(cd->dev, "%s: fail alloc pcfg memory r=%d\n",
+			__func__, rc);
+		return rc;
+	}
+	si->si_ptrs.pcfg = p;
+
+	rc = cyttsp4_adap_read(cd, si->si_ofs.pcfg_ofs, si->si_ptrs.pcfg,
+			si->si_ofs.pcfg_size);
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: fail read pcfg data r=%d\n",
+			__func__, rc);
+		return rc;
+	}
+
+	si->si_ofs.max_x = merge_bytes((si->si_ptrs.pcfg->res_xh
+			& CY_PCFG_RESOLUTION_X_MASK), si->si_ptrs.pcfg->res_xl);
+	si->si_ofs.x_origin = !!(si->si_ptrs.pcfg->res_xh
+			& CY_PCFG_ORIGIN_X_MASK);
+	si->si_ofs.max_y = merge_bytes((si->si_ptrs.pcfg->res_yh
+			& CY_PCFG_RESOLUTION_Y_MASK), si->si_ptrs.pcfg->res_yl);
+	si->si_ofs.y_origin = !!(si->si_ptrs.pcfg->res_yh
+			& CY_PCFG_ORIGIN_Y_MASK);
+	si->si_ofs.max_p = merge_bytes(si->si_ptrs.pcfg->max_zh,
+			si->si_ptrs.pcfg->max_zl);
+
+	cyttsp4_pr_buf(cd->dev, cd->pr_buf,
+		       (u8 *)si->si_ptrs.pcfg,
+		       si->si_ofs.pcfg_size, "sysinfo_pcfg_data");
+	return rc;
+}
+
+static int cyttsp4_si_get_opcfg_data(struct cyttsp4_core_data *cd)
+{
+	struct cyttsp4_sysinfo *si = &cd->sysinfo;
+	int i;
+	enum cyttsp4_tch_abs abs;
+	void *p;
+	int rc;
+
+	dev_vdbg(cd->dev, "%s: get opcfg data\n", __func__);
+	si->si_ofs.opcfg_size = si->si_ofs.ddata_ofs - si->si_ofs.opcfg_ofs;
+
+	if (si->si_ofs.opcfg_size <= 0)
+		return -EINVAL;
+
+	p = krealloc(si->si_ptrs.opcfg, si->si_ofs.opcfg_size, GFP_KERNEL);
+	if (p == NULL) {
+		dev_err(cd->dev, "%s: fail alloc opcfg memory\n", __func__);
+		rc = -ENOMEM;
+		goto cyttsp4_si_get_opcfg_data_exit;
+	}
+	si->si_ptrs.opcfg = p;
+
+	rc = cyttsp4_adap_read(cd, si->si_ofs.opcfg_ofs, si->si_ptrs.opcfg,
+			si->si_ofs.opcfg_size);
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: fail read opcfg data r=%d\n",
+			__func__, rc);
+		goto cyttsp4_si_get_opcfg_data_exit;
+	}
+	si->si_ofs.cmd_ofs = si->si_ptrs.opcfg->cmd_ofs;
+	si->si_ofs.rep_ofs = si->si_ptrs.opcfg->rep_ofs;
+	si->si_ofs.rep_sz = (si->si_ptrs.opcfg->rep_szh * 256) +
+		si->si_ptrs.opcfg->rep_szl;
+	si->si_ofs.num_btns = si->si_ptrs.opcfg->num_btns;
+	si->si_ofs.num_btn_regs = (si->si_ofs.num_btns +
+		CY_NUM_BTN_PER_REG - 1) / CY_NUM_BTN_PER_REG;
+	si->si_ofs.tt_stat_ofs = si->si_ptrs.opcfg->tt_stat_ofs;
+	si->si_ofs.obj_cfg0 = si->si_ptrs.opcfg->obj_cfg0;
+	si->si_ofs.max_tchs = si->si_ptrs.opcfg->max_tchs &
+		CY_BYTE_OFS_MASK;
+	si->si_ofs.tch_rec_size = si->si_ptrs.opcfg->tch_rec_size &
+		CY_BYTE_OFS_MASK;
+
+	/* Get the old touch fields */
+	for (abs = CY_TCH_X; abs < CY_NUM_TCH_FIELDS; abs++) {
+		si->si_ofs.tch_abs[abs].ofs =
+			si->si_ptrs.opcfg->tch_rec_old[abs].loc &
+			CY_BYTE_OFS_MASK;
+		si->si_ofs.tch_abs[abs].size =
+			cyttsp4_bits_2_bytes
+			(si->si_ptrs.opcfg->tch_rec_old[abs].size,
+			&si->si_ofs.tch_abs[abs].max);
+		si->si_ofs.tch_abs[abs].bofs =
+			(si->si_ptrs.opcfg->tch_rec_old[abs].loc &
+			CY_BOFS_MASK) >> CY_BOFS_SHIFT;
+	}
+
+	/* button fields */
+	si->si_ofs.btn_rec_size = si->si_ptrs.opcfg->btn_rec_size;
+	si->si_ofs.btn_diff_ofs = si->si_ptrs.opcfg->btn_diff_ofs;
+	si->si_ofs.btn_diff_size = si->si_ptrs.opcfg->btn_diff_size;
+
+	if (IS_TTSP_VER_GE(si, 2, 3)) {
+		/* Get the extended touch fields */
+		for (i = 0; i < CY_NUM_EXT_TCH_FIELDS; abs++, i++) {
+			si->si_ofs.tch_abs[abs].ofs =
+				si->si_ptrs.opcfg->tch_rec_new[i].loc &
+				CY_BYTE_OFS_MASK;
+			si->si_ofs.tch_abs[abs].size =
+				cyttsp4_bits_2_bytes
+				(si->si_ptrs.opcfg->tch_rec_new[i].size,
+				&si->si_ofs.tch_abs[abs].max);
+			si->si_ofs.tch_abs[abs].bofs =
+				(si->si_ptrs.opcfg->tch_rec_new[i].loc
+				& CY_BOFS_MASK) >> CY_BOFS_SHIFT;
+		}
+	}
+
+	if (IS_TTSP_VER_GE(si, 2, 4)) {
+		si->si_ofs.noise_data_ofs = si->si_ptrs.opcfg->noise_data_ofs;
+		si->si_ofs.noise_data_sz = si->si_ptrs.opcfg->noise_data_sz;
+	}
+
+	for (abs = 0; abs < CY_TCH_NUM_ABS; abs++) {
+		dev_dbg(cd->dev, "%s: tch_rec_%s\n", __func__,
+			cyttsp4_tch_abs_string[abs]);
+		dev_dbg(cd->dev, "%s:     ofs =%2d\n", __func__,
+			si->si_ofs.tch_abs[abs].ofs);
+		dev_dbg(cd->dev, "%s:     siz =%2d\n", __func__,
+			si->si_ofs.tch_abs[abs].size);
+		dev_dbg(cd->dev, "%s:     max =%2d\n", __func__,
+			si->si_ofs.tch_abs[abs].max);
+		dev_dbg(cd->dev, "%s:     bofs=%2d\n", __func__,
+			si->si_ofs.tch_abs[abs].bofs);
+	}
+
+	si->si_ofs.mode_size = si->si_ofs.tt_stat_ofs + 1;
+	si->si_ofs.data_size = si->si_ofs.max_tchs *
+		si->si_ptrs.opcfg->tch_rec_size;
+	si->si_ofs.rep_hdr_size = si->si_ofs.mode_size - si->si_ofs.rep_ofs;
+
+	cyttsp4_pr_buf(cd->dev, cd->pr_buf, (u8 *)si->si_ptrs.opcfg,
+		si->si_ofs.opcfg_size, "sysinfo_opcfg_data");
+
+cyttsp4_si_get_opcfg_data_exit:
+	return rc;
+}
+
+static int cyttsp4_si_get_ddata(struct cyttsp4_core_data *cd)
+{
+	struct cyttsp4_sysinfo *si = &cd->sysinfo;
+	void *p;
+	int rc;
+
+	dev_vdbg(cd->dev, "%s: get ddata data\n", __func__);
+	si->si_ofs.ddata_size = si->si_ofs.mdata_ofs - si->si_ofs.ddata_ofs;
+
+	if (si->si_ofs.ddata_size <= 0)
+		return -EINVAL;
+
+	p = krealloc(si->si_ptrs.ddata, si->si_ofs.ddata_size, GFP_KERNEL);
+	if (p == NULL) {
+		dev_err(cd->dev, "%s: fail alloc ddata memory\n", __func__);
+		return -ENOMEM;
+	}
+	si->si_ptrs.ddata = p;
+
+	rc = cyttsp4_adap_read(cd, si->si_ofs.ddata_ofs, si->si_ptrs.ddata,
+			si->si_ofs.ddata_size);
+	if (rc < 0)
+		dev_err(cd->dev, "%s: fail read ddata data r=%d\n",
+			__func__, rc);
+	else
+		cyttsp4_pr_buf(cd->dev, cd->pr_buf,
+			       (u8 *)si->si_ptrs.ddata,
+			       si->si_ofs.ddata_size, "sysinfo_ddata");
+	return rc;
+}
+
+static int cyttsp4_si_get_mdata(struct cyttsp4_core_data *cd)
+{
+	struct cyttsp4_sysinfo *si = &cd->sysinfo;
+	void *p;
+	int rc;
+
+	dev_vdbg(cd->dev, "%s: get mdata data\n", __func__);
+	si->si_ofs.mdata_size = si->si_ofs.map_sz - si->si_ofs.mdata_ofs;
+
+	if (si->si_ofs.mdata_size <= 0)
+		return -EINVAL;
+
+	p = krealloc(si->si_ptrs.mdata, si->si_ofs.mdata_size, GFP_KERNEL);
+	if (p == NULL) {
+		dev_err(cd->dev, "%s: fail alloc mdata memory\n", __func__);
+		return -ENOMEM;
+	}
+	si->si_ptrs.mdata = p;
+
+	rc = cyttsp4_adap_read(cd, si->si_ofs.mdata_ofs, si->si_ptrs.mdata,
+			si->si_ofs.mdata_size);
+	if (rc < 0)
+		dev_err(cd->dev, "%s: fail read mdata data r=%d\n",
+			__func__, rc);
+	else
+		cyttsp4_pr_buf(cd->dev, cd->pr_buf,
+			       (u8 *)si->si_ptrs.mdata,
+			       si->si_ofs.mdata_size, "sysinfo_mdata");
+	return rc;
+}
+
+static int cyttsp4_si_get_btn_data(struct cyttsp4_core_data *cd)
+{
+	struct cyttsp4_sysinfo *si = &cd->sysinfo;
+	int btn;
+	int num_defined_keys;
+	u16 *key_table;
+	void *p;
+	int rc = 0;
+
+	dev_vdbg(cd->dev, "%s: get btn data\n", __func__);
+
+	if (!si->si_ofs.num_btns) {
+		si->si_ofs.btn_keys_size = 0;
+		kfree(si->btn);
+		si->btn = NULL;
+		return rc;
+	}
+
+	si->si_ofs.btn_keys_size = si->si_ofs.num_btns *
+		sizeof(struct cyttsp4_btn);
+
+	if (si->si_ofs.btn_keys_size <= 0)
+		return -EINVAL;
+
+	p = krealloc(si->btn, si->si_ofs.btn_keys_size, GFP_KERNEL|__GFP_ZERO);
+	if (p == NULL) {
+		dev_err(cd->dev, "%s: %s\n", __func__,
+			"fail alloc btn_keys memory");
+		return -ENOMEM;
+	}
+	si->btn = p;
+
+	if (cd->pdata->sett[CY_IC_GRPNUM_BTN_KEYS] == NULL)
+		num_defined_keys = 0;
+	else if (cd->pdata->sett[CY_IC_GRPNUM_BTN_KEYS]->data == NULL)
+		num_defined_keys = 0;
+	else
+		num_defined_keys = cd->pdata->sett[CY_IC_GRPNUM_BTN_KEYS]->size;
+
+	for (btn = 0; btn < si->si_ofs.num_btns
+			&& btn < num_defined_keys; btn++) {
+		key_table = (u16 *)cd->pdata->sett[CY_IC_GRPNUM_BTN_KEYS]->data;
+		si->btn[btn].key_code = key_table[btn];
+		si->btn[btn].state = CY_BTN_RELEASED;
+		si->btn[btn].enabled = true;
+	}
+	for (; btn < si->si_ofs.num_btns; btn++) {
+		si->btn[btn].key_code = KEY_RESERVED;
+		si->btn[btn].state = CY_BTN_RELEASED;
+		si->btn[btn].enabled = true;
+	}
+
+	return rc;
+}
+
+static int cyttsp4_si_get_op_data_ptrs(struct cyttsp4_core_data *cd)
+{
+	struct cyttsp4_sysinfo *si = &cd->sysinfo;
+	void *p;
+	int size;
+
+	p = krealloc(si->xy_mode, si->si_ofs.mode_size +
+			si->si_ofs.data_size, GFP_KERNEL|__GFP_ZERO);
+	if (p == NULL)
+		return -ENOMEM;
+	si->xy_mode = p;
+	si->xy_data = &si->xy_mode[si->si_ofs.tt_stat_ofs + 1];
+
+	size = si->si_ofs.btn_rec_size * si->si_ofs.num_btns;
+	if (!size)
+		return 0;
+
+	p = krealloc(si->btn_rec_data, size, GFP_KERNEL|__GFP_ZERO);
+	if (p == NULL)
+		return -ENOMEM;
+	si->btn_rec_data = p;
+
+	return 0;
+}
+
+static void cyttsp4_si_put_log_data(struct cyttsp4_core_data *cd)
+{
+	struct cyttsp4_sysinfo *si = &cd->sysinfo;
+	dev_dbg(cd->dev, "%s: cydata_ofs =%4d siz=%4d\n", __func__,
+		si->si_ofs.cydata_ofs, si->si_ofs.cydata_size);
+	dev_dbg(cd->dev, "%s: test_ofs   =%4d siz=%4d\n", __func__,
+		si->si_ofs.test_ofs, si->si_ofs.test_size);
+	dev_dbg(cd->dev, "%s: pcfg_ofs   =%4d siz=%4d\n", __func__,
+		si->si_ofs.pcfg_ofs, si->si_ofs.pcfg_size);
+	dev_dbg(cd->dev, "%s: opcfg_ofs  =%4d siz=%4d\n", __func__,
+		si->si_ofs.opcfg_ofs, si->si_ofs.opcfg_size);
+	dev_dbg(cd->dev, "%s: ddata_ofs  =%4d siz=%4d\n", __func__,
+		si->si_ofs.ddata_ofs, si->si_ofs.ddata_size);
+	dev_dbg(cd->dev, "%s: mdata_ofs  =%4d siz=%4d\n", __func__,
+		si->si_ofs.mdata_ofs, si->si_ofs.mdata_size);
+
+	dev_dbg(cd->dev, "%s: cmd_ofs       =%4d\n", __func__,
+		si->si_ofs.cmd_ofs);
+	dev_dbg(cd->dev, "%s: rep_ofs       =%4d\n", __func__,
+		si->si_ofs.rep_ofs);
+	dev_dbg(cd->dev, "%s: rep_sz        =%4d\n", __func__,
+		si->si_ofs.rep_sz);
+	dev_dbg(cd->dev, "%s: num_btns      =%4d\n", __func__,
+		si->si_ofs.num_btns);
+	dev_dbg(cd->dev, "%s: num_btn_regs  =%4d\n", __func__,
+		si->si_ofs.num_btn_regs);
+	dev_dbg(cd->dev, "%s: tt_stat_ofs   =%4d\n", __func__,
+		si->si_ofs.tt_stat_ofs);
+	dev_dbg(cd->dev, "%s: tch_rec_size   =%4d\n", __func__,
+		si->si_ofs.tch_rec_size);
+	dev_dbg(cd->dev, "%s: max_tchs      =%4d\n", __func__,
+		si->si_ofs.max_tchs);
+	dev_dbg(cd->dev, "%s: mode_size     =%4d\n", __func__,
+		si->si_ofs.mode_size);
+	dev_dbg(cd->dev, "%s: data_size     =%4d\n", __func__,
+		si->si_ofs.data_size);
+	dev_dbg(cd->dev, "%s: rep_hdr_size  =%4d\n", __func__,
+		si->si_ofs.rep_hdr_size);
+	dev_dbg(cd->dev, "%s: map_sz        =%4d\n", __func__,
+		si->si_ofs.map_sz);
+
+	dev_dbg(cd->dev, "%s: btn_rec_size   =%2d\n", __func__,
+		si->si_ofs.btn_rec_size);
+	dev_dbg(cd->dev, "%s: btn_diff_ofs  =%2d\n", __func__,
+		si->si_ofs.btn_diff_ofs);
+	dev_dbg(cd->dev, "%s: btn_diff_size  =%2d\n", __func__,
+		si->si_ofs.btn_diff_size);
+
+	dev_dbg(cd->dev, "%s: max_x    = 0x%04X (%d)\n", __func__,
+		si->si_ofs.max_x, si->si_ofs.max_x);
+	dev_dbg(cd->dev, "%s: x_origin = %d (%s)\n", __func__,
+		si->si_ofs.x_origin,
+		si->si_ofs.x_origin == CY_NORMAL_ORIGIN ?
+		"left corner" : "right corner");
+	dev_dbg(cd->dev, "%s: max_y    = 0x%04X (%d)\n", __func__,
+		si->si_ofs.max_y, si->si_ofs.max_y);
+	dev_dbg(cd->dev, "%s: y_origin = %d (%s)\n", __func__,
+		si->si_ofs.y_origin,
+		si->si_ofs.y_origin == CY_NORMAL_ORIGIN ?
+		"upper corner" : "lower corner");
+	dev_dbg(cd->dev, "%s: max_p    = 0x%04X (%d)\n", __func__,
+		si->si_ofs.max_p, si->si_ofs.max_p);
+
+	dev_dbg(cd->dev, "%s: xy_mode=%p xy_data=%p\n", __func__,
+		si->xy_mode, si->xy_data);
+}
+
+static int cyttsp4_get_sysinfo_regs(struct cyttsp4_core_data *cd)
+{
+	struct cyttsp4_sysinfo *si = &cd->sysinfo;
+	int rc;
+
+	rc = cyttsp4_si_data_offsets(cd);
+	if (rc < 0)
+		return rc;
+
+	rc = cyttsp4_si_get_cydata(cd);
+	if (rc < 0)
+		return rc;
+
+	rc = cyttsp4_si_get_test_data(cd);
+	if (rc < 0)
+		return rc;
+
+	rc = cyttsp4_si_get_pcfg_data(cd);
+	if (rc < 0)
+		return rc;
+
+	rc = cyttsp4_si_get_opcfg_data(cd);
+	if (rc < 0)
+		return rc;
+
+	rc = cyttsp4_si_get_ddata(cd);
+	if (rc < 0)
+		return rc;
+
+	rc = cyttsp4_si_get_mdata(cd);
+	if (rc < 0)
+		return rc;
+
+	rc = cyttsp4_si_get_btn_data(cd);
+	if (rc < 0)
+		return rc;
+
+	rc = cyttsp4_si_get_op_data_ptrs(cd);
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: failed to get_op_data\n",
+			__func__);
+		return rc;
+	}
+
+	cyttsp4_si_put_log_data(cd);
+
+	/* provide flow control handshake */
+	rc = cyttsp4_handshake(cd, si->si_data.hst_mode);
+	if (rc < 0)
+		dev_err(cd->dev, "%s: handshake fail on sysinfo reg\n",
+			__func__);
+
+	mutex_lock(&cd->system_lock);
+	si->ready = true;
+	mutex_unlock(&cd->system_lock);
+	return rc;
+}
+
+static void cyttsp4_queue_startup_(struct cyttsp4_core_data *cd)
+{
+	if (cd->startup_state == STARTUP_NONE) {
+		cd->startup_state = STARTUP_QUEUED;
+		schedule_work(&cd->startup_work);
+		dev_info(cd->dev, "%s: cyttsp4_startup queued\n", __func__);
+	} else {
+		dev_dbg(cd->dev, "%s: startup_state = %d\n", __func__,
+			cd->startup_state);
+	}
+}
+
+static void cyttsp4_queue_startup(struct cyttsp4_core_data *cd)
+{
+	dev_vdbg(cd->dev, "%s: enter\n", __func__);
+	mutex_lock(&cd->system_lock);
+	cyttsp4_queue_startup_(cd);
+	mutex_unlock(&cd->system_lock);
+}
+
+static void call_atten_cb(struct cyttsp4_core_data *cd,
+		enum cyttsp4_atten_type type, int mode)
+{
+	struct atten_node *atten, *atten_n;
+
+	dev_vdbg(cd->dev, "%s: check list type=%d mode=%d\n",
+		__func__, type, mode);
+	spin_lock(&cd->spinlock);
+	list_for_each_entry_safe(atten, atten_n,
+			&cd->atten_list[type], node) {
+		if (!mode || atten->mode & mode) {
+			spin_unlock(&cd->spinlock);
+			dev_vdbg(cd->dev, "%s: attention for '%s'", __func__,
+				dev_name(&atten->ttsp->dev));
+			atten->func(atten->ttsp);
+			spin_lock(&cd->spinlock);
+		}
+	}
+	spin_unlock(&cd->spinlock);
+}
+
+static irqreturn_t cyttsp4_hard_irq(int irq, void *handle)
+{
+	struct cyttsp4_core_data *cd = handle;
+
+	/*
+	 * Check whether this IRQ should be ignored (external)
+	 * This should be the very first thing to check since
+	 * ignore_irq may be set for a very short period of time
+	 */
+	if (atomic_read(&cd->ignore_irq)) {
+		dev_vdbg(cd->dev, "%s: Ignoring IRQ\n", __func__);
+		return IRQ_HANDLED;
+	}
+
+	return IRQ_WAKE_THREAD;
+}
+
+static irqreturn_t cyttsp4_irq(int irq, void *handle)
+{
+	struct cyttsp4_core_data *cd = handle;
+	struct device *dev = cd->dev;
+	enum cyttsp4_mode cur_mode;
+	u8 cmd_ofs = cd->sysinfo.si_ofs.cmd_ofs;
+	bool command_complete = false;
+	u8 mode[3];
+	int rc;
+	u8 cat_masked_cmd;
+
+	dev_dbg(dev, "%s int:0x%x\n", __func__, cd->int_status);
+
+	mutex_lock(&cd->system_lock);
+
+	rc = cyttsp4_adap_read(cd, CY_REG_BASE, mode, sizeof(mode));
+	if (rc) {
+		dev_err(cd->dev, "%s: Fail read adapter r=%d\n", __func__, rc);
+		goto cyttsp4_irq_exit;
+	}
+	dev_vdbg(dev, "%s mode[0-2]:0x%X 0x%X 0x%X\n", __func__,
+			mode[0], mode[1], mode[2]);
+
+	if (IS_BOOTLOADER(mode[0], mode[1])) {
+		cur_mode = CY_MODE_BOOTLOADER;
+		dev_vdbg(dev, "%s: bl running\n", __func__);
+		call_atten_cb(cd, CY_ATTEN_IRQ, cur_mode);
+
+		/* switch to bootloader */
+		if (cd->mode != CY_MODE_BOOTLOADER)
+			dev_dbg(dev, "%s: restart switch to bl m=%d -> m=%d\n",
+			__func__, cd->mode, cur_mode);
+
+		/* catch operation->bl glitch */
+		if (cd->mode != CY_MODE_BOOTLOADER
+				&& cd->mode != CY_MODE_UNKNOWN) {
+			/* Incase startup_state do not let startup_() */
+			cd->mode = CY_MODE_UNKNOWN;
+			cyttsp4_queue_startup_(cd);
+			goto cyttsp4_irq_exit;
+		}
+
+		/* Recover if stuck in bootloader idle mode */
+		if (cd->mode == CY_MODE_BOOTLOADER) {
+			if (IS_BOOTLOADER_IDLE(mode[0], mode[1])) {
+				if (cd->heartbeat_count > 3) {
+					cd->heartbeat_count = 0;
+					cyttsp4_queue_startup_(cd);
+					goto cyttsp4_irq_exit;
+				}
+				cd->heartbeat_count++;
+			}
+		}
+
+		cd->mode = cur_mode;
+		/* Signal bootloader heartbeat heard */
+		wake_up(&cd->wait_q);
+		goto cyttsp4_irq_exit;
+	}
+
+	switch (mode[0] & CY_HST_DEVICE_MODE) {
+	case CY_HST_OPERATE:
+		cur_mode = CY_MODE_OPERATIONAL;
+		dev_vdbg(dev, "%s: operational\n", __func__);
+		break;
+	case CY_HST_CAT:
+		cur_mode = CY_MODE_CAT;
+		/* set the start sensor mode state. */
+		cat_masked_cmd = mode[2] & CY_CMD_MASK;
+
+		/* Get the Debug info for the interrupt. */
+		if (cat_masked_cmd != CY_CMD_CAT_NULL &&
+				cat_masked_cmd !=
+					CY_CMD_CAT_RETRIEVE_PANEL_SCAN &&
+				cat_masked_cmd != CY_CMD_CAT_EXEC_PANEL_SCAN)
+			dev_info(cd->dev,
+				"%s: cyttsp4_CaT_IRQ=%02X %02X %02X\n",
+				__func__, mode[0], mode[1], mode[2]);
+		dev_vdbg(dev, "%s: CaT\n", __func__);
+		break;
+	case CY_HST_SYSINFO:
+		cur_mode = CY_MODE_SYSINFO;
+		dev_vdbg(dev, "%s: sysinfo\n", __func__);
+		break;
+	default:
+		cur_mode = CY_MODE_UNKNOWN;
+		dev_err(dev, "%s: unknown HST mode 0x%02X\n", __func__,
+			mode[0]);
+		break;
+	}
+
+	/* Check whether this IRQ should be ignored (internal) */
+	if (cd->int_status & CY_INT_IGNORE) {
+		if (IS_DEEP_SLEEP_CONFIGURED(cd->easy_wakeup_gesture)) {
+			/* Put device back to sleep on premature wakeup */
+			dev_dbg(dev, "%s: Put device back to sleep\n",
+				__func__);
+			_cyttsp4_put_device_into_deep_sleep(cd, mode[0]);
+			goto cyttsp4_irq_exit;
+		}
+		/* Check for Wait for Event command */
+		if ((mode[cmd_ofs] & CY_CMD_MASK) == CY_CMD_OP_WAIT_FOR_EVENT
+				&& mode[cmd_ofs] & CY_CMD_COMPLETE) {
+			cd->wake_initiated_by_device = 1;
+			call_atten_cb(cd, CY_ATTEN_WAKE, 0);
+			goto cyttsp4_irq_handshake;
+		}
+	}
+
+	/* Check for wake up interrupt */
+	if (cd->int_status & CY_INT_AWAKE) {
+		cd->int_status &= ~CY_INT_AWAKE;
+		wake_up(&cd->wait_q);
+		dev_vdbg(dev, "%s: Received wake up interrupt\n", __func__);
+		goto cyttsp4_irq_handshake;
+	}
+
+	/* Expecting mode change interrupt */
+	if ((cd->int_status & CY_INT_MODE_CHANGE)
+			&& (mode[0] & CY_HST_MODE_CHANGE) == 0) {
+		cd->int_status &= ~CY_INT_MODE_CHANGE;
+		dev_dbg(dev, "%s: finish mode switch m=%d -> m=%d\n",
+				__func__, cd->mode, cur_mode);
+		cd->mode = cur_mode;
+		wake_up(&cd->wait_q);
+		goto cyttsp4_irq_handshake;
+	}
+
+	/* compare current core mode to current device mode */
+	dev_vdbg(dev, "%s: cd->mode=%d cur_mode=%d\n",
+			__func__, cd->mode, cur_mode);
+	if ((mode[0] & CY_HST_MODE_CHANGE) == 0 && cd->mode != cur_mode) {
+		/* Unexpected mode change occurred */
+		dev_err(dev, "%s %d->%d 0x%x\n", __func__, cd->mode,
+				cur_mode, cd->int_status);
+		dev_vdbg(dev, "%s: Unexpected mode change, startup\n",
+				__func__);
+		cyttsp4_queue_startup_(cd);
+		goto cyttsp4_irq_exit;
+	}
+
+	/* Expecting command complete interrupt */
+	dev_vdbg(dev, "%s: command byte:0x%x, toggle:0x%x\n",
+			__func__, mode[cmd_ofs], cd->cmd_toggle);
+	if ((cd->int_status & CY_INT_EXEC_CMD)
+			&& mode[cmd_ofs] & CY_CMD_COMPLETE) {
+		command_complete = true;
+		cd->int_status &= ~CY_INT_EXEC_CMD;
+		dev_vdbg(dev, "%s: Received command complete interrupt\n",
+				__func__);
+		wake_up(&cd->wait_q);
+		/*
+		 * It is possible to receive a single interrupt for
+		 * command complete and touch/button status report.
+		 * Continue processing for a possible status report.
+		 */
+	}
+
+	/* Copy the mode registers */
+	if (cd->sysinfo.xy_mode)
+		memcpy(cd->sysinfo.xy_mode, mode, sizeof(mode));
+
+	/* This should be status report, read status and touch regs */
+	if (cd->mode == CY_MODE_OPERATIONAL) {
+		dev_vdbg(dev, "%s: Read status and touch registers\n",
+			__func__);
+		rc = cyttsp4_load_status_and_touch_regs(cd, !command_complete);
+		if (rc < 0)
+			dev_err(dev, "%s: fail read mode/touch regs r=%d\n",
+				__func__, rc);
+	}
+
+	/* attention IRQ */
+	call_atten_cb(cd, CY_ATTEN_IRQ, cd->mode);
+
+cyttsp4_irq_handshake:
+	/* handshake the event */
+	dev_vdbg(dev, "%s: Handshake mode=0x%02X r=%d\n",
+			__func__, mode[0], rc);
+	rc = cyttsp4_handshake(cd, mode[0]);
+	if (rc < 0)
+		dev_err(dev, "%s: Fail handshake mode=0x%02X r=%d\n",
+				__func__, mode[0], rc);
+
+	/*
+	 * a non-zero udelay period is required for using
+	 * IRQF_TRIGGER_LOW in order to delay until the
+	 * device completes isr deassert
+	 */
+	udelay(cd->pdata->level_irq_udelay);
+
+cyttsp4_irq_exit:
+	mutex_unlock(&cd->system_lock);
+	dev_vdbg(dev, "%s: irq done\n", __func__);
+	return IRQ_HANDLED;
+}
+
+static void cyttsp4_start_wd_timer(struct cyttsp4_core_data *cd)
+{
+	if (!CY_WATCHDOG_TIMEOUT)
+		return;
+
+	mod_timer(&cd->watchdog_timer, jiffies +
+			msecs_to_jiffies(CY_WATCHDOG_TIMEOUT));
+}
+
+static void cyttsp4_stop_wd_timer(struct cyttsp4_core_data *cd)
+{
+	if (!CY_WATCHDOG_TIMEOUT)
+		return;
+
+	/*
+	 * Ensure we wait until the watchdog timer
+	 * running on a different CPU finishes
+	 */
+	del_timer_sync(&cd->watchdog_timer);
+	cancel_work_sync(&cd->watchdog_work);
+	del_timer_sync(&cd->watchdog_timer);
+}
+
+static void cyttsp4_watchdog_timer(unsigned long handle)
+{
+	struct cyttsp4_core_data *cd = (struct cyttsp4_core_data *)handle;
+
+	dev_vdbg(cd->dev, "%s: Timer triggered\n", __func__);
+
+	if (!cd)
+		return;
+
+	if (!work_pending(&cd->watchdog_work))
+		schedule_work(&cd->watchdog_work);
+
+	return;
+}
+
+static int cyttsp4_write_(struct cyttsp4_device *ttsp, int mode, u16 addr,
+	const void *buf, int size)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_core *core = ttsp->core;
+	struct cyttsp4_core_data *cd = dev_get_drvdata(&core->dev);
+	int rc = 0;
+
+	mutex_lock(&cd->adap_lock);
+	if (mode != cd->mode) {
+		dev_dbg(dev, "%s: %s (having %x while %x requested)\n",
+			__func__, "attempt to write in missing mode",
+			cd->mode, mode);
+		rc = -EACCES;
+		goto exit;
+	}
+	rc = cyttsp4_adap_write(cd, addr, buf, size);
+exit:
+	mutex_unlock(&cd->adap_lock);
+	return rc;
+}
+
+static int cyttsp4_read_(struct cyttsp4_device *ttsp, int mode, u16 addr,
+	void *buf, int size)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_core *core = ttsp->core;
+	struct cyttsp4_core_data *cd = dev_get_drvdata(&core->dev);
+	int rc = 0;
+
+	mutex_lock(&cd->adap_lock);
+	if (mode != cd->mode) {
+		dev_dbg(dev, "%s: %s (having %x while %x requested)\n",
+			__func__, "attempt to read in missing mode",
+			cd->mode, mode);
+		rc = -EACCES;
+		goto exit;
+	}
+	rc = cyttsp4_adap_read(cd, addr, buf, size);
+exit:
+	mutex_unlock(&cd->adap_lock);
+	return rc;
+}
+
+static int cyttsp4_subscribe_attention_(struct cyttsp4_device *ttsp,
+	enum cyttsp4_atten_type type,
+	int (*func)(struct cyttsp4_device *), int mode)
+{
+	struct cyttsp4_core *core = ttsp->core;
+	struct cyttsp4_core_data *cd = dev_get_drvdata(&core->dev);
+	struct atten_node *atten, *atten_new;
+
+	atten_new = kzalloc(sizeof(*atten_new), GFP_KERNEL);
+	if (!atten_new) {
+		dev_err(cd->dev, "%s: Fail alloc atten node\n", __func__);
+		return -ENOMEM;
+	}
+
+	dev_dbg(cd->dev, "%s from '%s'\n", __func__, dev_name(cd->dev));
+
+	spin_lock(&cd->spinlock);
+	list_for_each_entry(atten, &cd->atten_list[type], node) {
+		if (atten->ttsp == ttsp && atten->mode == mode) {
+			spin_unlock(&cd->spinlock);
+			kfree(atten_new);
+			dev_vdbg(cd->dev, "%s: %s=%p %s=%d\n",
+				 __func__,
+				 "already subscribed attention",
+				 ttsp, "mode", mode);
+
+			return 0;
+		}
+	}
+
+	atten_new->ttsp = ttsp;
+	atten_new->mode = mode;
+	atten_new->func = func;
+
+	list_add(&atten_new->node, &cd->atten_list[type]);
+	spin_unlock(&cd->spinlock);
+
+	return 0;
+}
+
+static int cyttsp4_unsubscribe_attention_(struct cyttsp4_device *ttsp,
+	enum cyttsp4_atten_type type, int (*func)(struct cyttsp4_device *),
+	int mode)
+{
+	struct cyttsp4_core *core = ttsp->core;
+	struct cyttsp4_core_data *cd = dev_get_drvdata(&core->dev);
+	struct atten_node *atten, *atten_n;
+
+	spin_lock(&cd->spinlock);
+	list_for_each_entry_safe(atten, atten_n, &cd->atten_list[type], node) {
+		if (atten->ttsp == ttsp && atten->mode == mode) {
+			list_del(&atten->node);
+			spin_unlock(&cd->spinlock);
+			kfree(atten);
+			dev_vdbg(cd->dev, "%s: %s=%p %s=%d\n",
+				__func__,
+				"unsub for atten->ttsp", atten->ttsp,
+				"atten->mode", atten->mode);
+			return 0;
+		}
+	}
+	spin_unlock(&cd->spinlock);
+
+	return -ENODEV;
+}
+
+static int request_exclusive(struct cyttsp4_core_data *cd, void *ownptr,
+		int timeout_ms)
+{
+	int t = msecs_to_jiffies(timeout_ms);
+	bool with_timeout = (timeout_ms != 0);
+
+	mutex_lock(&cd->system_lock);
+	if (!cd->exclusive_dev && cd->exclusive_waits == 0) {
+		cd->exclusive_dev = ownptr;
+		goto exit;
+	}
+
+	cd->exclusive_waits++;
+wait:
+	mutex_unlock(&cd->system_lock);
+	if (with_timeout) {
+		t = wait_event_timeout(cd->wait_q, !cd->exclusive_dev, t);
+		if (IS_TMO(t)) {
+			dev_err(cd->dev, "%s: tmo waiting exclusive access\n",
+				__func__);
+			mutex_lock(&cd->system_lock);
+			cd->exclusive_waits--;
+			mutex_unlock(&cd->system_lock);
+			return -ETIME;
+		}
+	} else {
+		wait_event(cd->wait_q, !cd->exclusive_dev);
+	}
+	mutex_lock(&cd->system_lock);
+	if (cd->exclusive_dev)
+		goto wait;
+	cd->exclusive_dev = ownptr;
+	cd->exclusive_waits--;
+exit:
+	mutex_unlock(&cd->system_lock);
+	dev_vdbg(cd->dev, "%s: request_exclusive ok=%p\n",
+		__func__, ownptr);
+
+	return 0;
+}
+
+static int cyttsp4_request_exclusive_(struct cyttsp4_device *ttsp,
+		int timeout_ms)
+{
+	struct cyttsp4_core *core = ttsp->core;
+	struct cyttsp4_core_data *cd = dev_get_drvdata(&core->dev);
+	return request_exclusive(cd, (void *)ttsp, timeout_ms);
+}
+
+/*
+ * returns error if was not owned
+ */
+static int release_exclusive(struct cyttsp4_core_data *cd, void *ownptr)
+{
+	mutex_lock(&cd->system_lock);
+	if (cd->exclusive_dev != ownptr) {
+		mutex_unlock(&cd->system_lock);
+		return -EINVAL;
+	}
+
+	dev_vdbg(cd->dev, "%s: exclusive_dev %p freed\n",
+		__func__, cd->exclusive_dev);
+	cd->exclusive_dev = NULL;
+	wake_up(&cd->wait_q);
+	mutex_unlock(&cd->system_lock);
+	return 0;
+}
+
+static int cyttsp4_release_exclusive_(struct cyttsp4_device *ttsp)
+{
+	struct cyttsp4_core *core = ttsp->core;
+	struct cyttsp4_core_data *cd = dev_get_drvdata(&core->dev);
+	return release_exclusive(cd, (void *)ttsp);
+}
+
+static int cyttsp4_wait_bl_heartbeat(struct cyttsp4_core_data *cd)
+{
+	long t;
+	int rc = 0;
+
+	/* wait heartbeat */
+	dev_vdbg(cd->dev, "%s: wait heartbeat...\n", __func__);
+	t = wait_event_timeout(cd->wait_q, cd->mode == CY_MODE_BOOTLOADER,
+			msecs_to_jiffies(CY_CORE_RESET_AND_WAIT_TIMEOUT));
+	if (IS_TMO(t)) {
+		dev_err(cd->dev, "%s: tmo waiting bl heartbeat cd->mode=%d\n",
+			__func__, cd->mode);
+		rc = -ETIME;
+	}
+
+	return rc;
+}
+
+static int cyttsp4_wait_sysinfo_mode(struct cyttsp4_core_data *cd)
+{
+	long t;
+
+	dev_vdbg(cd->dev, "%s: wait sysinfo...\n", __func__);
+
+	t = wait_event_timeout(cd->wait_q, cd->mode == CY_MODE_SYSINFO,
+			msecs_to_jiffies(CY_CORE_WAIT_SYSINFO_MODE_TIMEOUT));
+	if (IS_TMO(t)) {
+		dev_err(cd->dev, "%s: tmo waiting exit bl cd->mode=%d\n",
+			__func__, cd->mode);
+		mutex_lock(&cd->system_lock);
+		cd->int_status &= ~CY_INT_MODE_CHANGE;
+		mutex_unlock(&cd->system_lock);
+		return -ETIME;
+	}
+
+	return 0;
+}
+
+static int cyttsp4_reset_and_wait(struct cyttsp4_core_data *cd)
+{
+	int rc;
+
+	/* reset hardware */
+	mutex_lock(&cd->system_lock);
+	dev_dbg(cd->dev, "%s: reset hw...\n", __func__);
+	rc = cyttsp4_hw_reset_(cd);
+	cd->mode = CY_MODE_UNKNOWN;
+	mutex_unlock(&cd->system_lock);
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: %s adap='%s' r=%d\n", __func__,
+			"Fail hw reset", cd->core->adap->id, rc);
+		return rc;
+	}
+
+	return cyttsp4_wait_bl_heartbeat(cd);
+}
+
+/*
+ * returns err if refused or timeout; block until mode change complete
+ * bit is set (mode change interrupt)
+ */
+static int set_mode(struct cyttsp4_core_data *cd, int new_mode)
+{
+	u8 new_dev_mode;
+	u8 mode;
+	long t;
+	int rc;
+
+	switch (new_mode) {
+	case CY_MODE_OPERATIONAL:
+		new_dev_mode = CY_HST_OPERATE;
+		break;
+	case CY_MODE_SYSINFO:
+		new_dev_mode = CY_HST_SYSINFO;
+		break;
+	case CY_MODE_CAT:
+		new_dev_mode = CY_HST_CAT;
+		break;
+	default:
+		dev_err(cd->dev, "%s: invalid mode: %02X(%d)\n",
+			__func__, new_mode, new_mode);
+		return -EINVAL;
+	}
+
+	/* change mode */
+	dev_dbg(cd->dev, "%s: %s=%p new_dev_mode=%02X new_mode=%d\n",
+			__func__, "have exclusive", cd->exclusive_dev,
+			new_dev_mode, new_mode);
+
+	mutex_lock(&cd->system_lock);
+	rc = cyttsp4_adap_read(cd, CY_REG_BASE, &mode, sizeof(mode));
+	if (rc < 0) {
+		mutex_unlock(&cd->system_lock);
+		dev_err(cd->dev, "%s: Fail read mode r=%d\n",
+			__func__, rc);
+		goto exit;
+	}
+
+	/* Clear device mode bits and set to new mode */
+	mode &= ~CY_HST_DEVICE_MODE;
+	mode |= new_dev_mode | CY_HST_MODE_CHANGE;
+
+	cd->int_status |= CY_INT_MODE_CHANGE;
+	rc = cyttsp4_adap_write(cd, CY_REG_BASE, &mode, sizeof(mode));
+	mutex_unlock(&cd->system_lock);
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: Fail write mode change r=%d\n",
+				__func__, rc);
+		goto exit;
+	}
+
+	/* wait for mode change done interrupt */
+	t = wait_event_timeout(cd->wait_q,
+			(cd->int_status & CY_INT_MODE_CHANGE) == 0,
+			msecs_to_jiffies(CY_CORE_MODE_CHANGE_TIMEOUT));
+	dev_dbg(cd->dev, "%s: back from wait t=%ld cd->mode=%d\n",
+			__func__, t, cd->mode);
+
+	if (IS_TMO(t)) {
+		dev_err(cd->dev, "%s: %s\n", __func__,
+				"tmo waiting mode change");
+		mutex_lock(&cd->system_lock);
+		cd->int_status &= ~CY_INT_MODE_CHANGE;
+		mutex_unlock(&cd->system_lock);
+		rc = -EINVAL;
+	}
+
+exit:
+	return rc;
+}
+
+/*
+ * returns err if refused or timeout(core uses fixed timeout period) occurs;
+ * blocks until ISR occurs
+ */
+static int cyttsp4_request_reset_(struct cyttsp4_device *ttsp)
+{
+	struct cyttsp4_core *core = ttsp->core;
+	struct cyttsp4_core_data *cd = dev_get_drvdata(&core->dev);
+	int rc;
+
+	mutex_lock(&cd->system_lock);
+	cd->sysinfo.ready = false;
+	mutex_unlock(&cd->system_lock);
+
+	rc = cyttsp4_reset_and_wait(cd);
+	if (rc < 0)
+		dev_err(cd->dev, "%s: Error on h/w reset r=%d\n",
+			__func__, rc);
+
+	return rc;
+}
+
+/*
+ * returns err if refused ; if no error then restart has completed
+ * and system is in normal operating mode
+ */
+static int cyttsp4_request_restart_(struct cyttsp4_device *ttsp, bool wait)
+{
+	struct cyttsp4_core *core = ttsp->core;
+	struct cyttsp4_core_data *cd = dev_get_drvdata(&core->dev);
+
+	mutex_lock(&cd->system_lock);
+	cd->sysinfo.ready = false;
+	mutex_unlock(&cd->system_lock);
+
+	cyttsp4_queue_startup(cd);
+
+	if (wait)
+		wait_event(cd->wait_q, cd->startup_state == STARTUP_NONE);
+
+	return 0;
+}
+
+static int cyttsp4_request_set_mode_(struct cyttsp4_device *ttsp, int mode)
+{
+	struct cyttsp4_core *core = ttsp->core;
+	struct cyttsp4_core_data *cd = dev_get_drvdata(&core->dev);
+	int rc;
+
+	rc = set_mode(cd, mode);
+	if (rc < 0)
+		dev_err(cd->dev, "%s: fail set_mode=%02X(%d)\n",
+			__func__, cd->mode, cd->mode);
+
+	return rc;
+}
+
+/*
+ * returns NULL if sysinfo has not been acquired from the device yet
+ */
+static struct cyttsp4_sysinfo *cyttsp4_request_sysinfo_(
+		struct cyttsp4_device *ttsp)
+{
+	struct cyttsp4_core *core = ttsp->core;
+	struct cyttsp4_core_data *cd = dev_get_drvdata(&core->dev);
+	bool ready;
+
+	mutex_lock(&cd->system_lock);
+	ready = cd->sysinfo.ready;
+	mutex_unlock(&cd->system_lock);
+	if (ready)
+		return &cd->sysinfo;
+
+	return NULL;
+}
+
+static struct cyttsp4_loader_platform_data *cyttsp4_request_loader_pdata_(
+		struct cyttsp4_device *ttsp)
+{
+	struct cyttsp4_core *core = ttsp->core;
+	struct cyttsp4_core_data *cd = dev_get_drvdata(&core->dev);
+	return cd->pdata->loader_pdata;
+}
+
+static int cyttsp4_request_handshake_(struct cyttsp4_device *ttsp, u8 mode)
+{
+	struct cyttsp4_core *core = ttsp->core;
+	struct cyttsp4_core_data *cd = dev_get_drvdata(&core->dev);
+	int rc;
+
+	rc = cyttsp4_handshake(cd, mode);
+	if (rc < 0)
+		dev_err(&core->dev, "%s: Fail handshake r=%d\n", __func__, rc);
+
+	return rc;
+}
+
+static int cyttsp4_request_toggle_lowpower_(struct cyttsp4_device *ttsp,
+		u8 mode)
+{
+	struct cyttsp4_core *core = ttsp->core;
+	struct cyttsp4_core_data *cd = dev_get_drvdata(&core->dev);
+	int rc = cyttsp4_toggle_low_power(cd, mode);
+	if (rc < 0)
+		dev_err(&core->dev, "%s: Fail toggle low power r=%d\n",
+				__func__, rc);
+	return rc;
+}
+
+static int _cyttsp4_wait_cmd_exec(struct cyttsp4_core_data *cd, int timeout_ms)
+{
+	struct device *dev = cd->dev;
+	int rc;
+
+	rc = wait_event_timeout(cd->wait_q,
+			(cd->int_status & CY_INT_EXEC_CMD) == 0,
+			msecs_to_jiffies(timeout_ms));
+	if (IS_TMO(rc)) {
+		dev_err(dev, "%s: Command execution timed out\n",
+				__func__);
+		cd->int_status &= ~CY_INT_EXEC_CMD;
+		return -ETIME;
+	}
+	return 0;
+}
+
+static int _get_cmd_offs(struct cyttsp4_core_data *cd, u8 mode)
+{
+	struct cyttsp4_sysinfo *si = &cd->sysinfo;
+	struct device *dev = cd->dev;
+	int cmd_ofs;
+
+	switch (mode) {
+	case CY_MODE_CAT:
+		cmd_ofs = CY_REG_CAT_CMD;
+		break;
+	case CY_MODE_OPERATIONAL:
+		cmd_ofs = si->si_ofs.cmd_ofs;
+		break;
+	default:
+		dev_err(dev, "%s: Unsupported mode %x for exec cmd\n",
+				__func__, mode);
+		return -EACCES;
+	}
+
+	return cmd_ofs;
+}
+
+/*
+ * Send command to device for CAT and OP modes
+ * return negative value on error, 0 on success
+ */
+static int _cyttsp4_exec_cmd(struct cyttsp4_core_data *cd, u8 mode,
+		u8 *cmd_buf, size_t cmd_size)
+{
+	struct device *dev = cd->dev;
+	int cmd_ofs;
+	int cmd_param_ofs;
+	u8 command;
+	u8 *cmd_param_buf;
+	size_t cmd_param_size;
+	int rc;
+
+	if (mode != cd->mode) {
+		dev_err(dev, "%s: %s (having %x while %x requested)\n",
+				__func__, "attempt to exec cmd in missing mode",
+				cd->mode, mode);
+		return -EACCES;
+	}
+
+	cmd_ofs = _get_cmd_offs(cd, mode);
+	if (cmd_ofs < 0)
+		return -EACCES;
+
+	cmd_param_ofs = cmd_ofs + 1;
+	cmd_param_buf = cmd_buf + 1;
+	cmd_param_size = cmd_size - 1;
+
+	/* Check if complete is set, so write new command */
+	rc = cyttsp4_adap_read(cd, cmd_ofs, &command, 1);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error on read r=%d\n", __func__, rc);
+		return rc;
+	}
+
+	cd->cmd_toggle = GET_TOGGLE(command);
+	cd->int_status |= CY_INT_EXEC_CMD;
+
+	if ((command & CY_CMD_COMPLETE_MASK) == 0)
+		return -EBUSY;
+
+	/*
+	 * Write new command
+	 * Only update command bits 0:5
+	 * Clear command complete bit & toggle bit
+	 */
+	cmd_buf[0] = cmd_buf[0] & CY_CMD_MASK;
+	/* Write command parameters first */
+	if (cmd_size > 1) {
+		rc = cyttsp4_adap_write(cd, cmd_param_ofs, cmd_param_buf,
+				cmd_param_size);
+		if (rc < 0) {
+			dev_err(dev, "%s: Error on write command parameters r=%d\n",
+				__func__, rc);
+			return rc;
+		}
+	}
+	/* Write the command */
+	rc = cyttsp4_adap_write(cd, cmd_ofs, cmd_buf, 1);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error on write command r=%d\n",
+				__func__, rc);
+		return rc;
+	}
+
+	return 0;
+}
+
+static int cyttsp4_exec_cmd(struct cyttsp4_core_data *cd, u8 mode,
+		u8 *cmd_buf, size_t cmd_size, u8 *return_buf,
+		size_t return_buf_size, int timeout_ms)
+{
+	struct device *dev = cd->dev;
+	int cmd_ofs;
+	int cmd_return_ofs;
+	int rc;
+
+	mutex_lock(&cd->system_lock);
+	rc = _cyttsp4_exec_cmd(cd, mode, cmd_buf, cmd_size);
+	mutex_unlock(&cd->system_lock);
+
+	if (rc == -EBUSY) {
+		rc = _cyttsp4_wait_cmd_exec(cd, CY_COMMAND_COMPLETE_TIMEOUT);
+		if (rc)
+			return rc;
+		mutex_lock(&cd->system_lock);
+		rc = _cyttsp4_exec_cmd(cd, mode, cmd_buf, cmd_size);
+		mutex_unlock(&cd->system_lock);
+	}
+
+	if (rc < 0)
+		return rc;
+
+	if (timeout_ms == 0)
+		return 0;
+
+	/*
+	 * Wait command to be completed
+	 */
+	rc = _cyttsp4_wait_cmd_exec(cd, timeout_ms);
+	if (rc < 0)
+		return rc;
+
+	if (return_buf_size == 0 || return_buf == NULL)
+		return 0;
+
+	mutex_lock(&cd->system_lock);
+	cmd_ofs = _get_cmd_offs(cd, mode);
+	mutex_unlock(&cd->system_lock);
+	if (cmd_ofs < 0)
+		return -EACCES;
+
+	cmd_return_ofs = cmd_ofs + 1;
+
+	rc = cyttsp4_adap_read(cd, cmd_return_ofs, return_buf, return_buf_size);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error on read 3 r=%d\n", __func__, rc);
+		return rc;
+	}
+
+	return 0;
+}
+
+static int cyttsp4_request_exec_cmd_(struct cyttsp4_device *ttsp, u8 mode,
+		u8 *cmd_buf, size_t cmd_size, u8 *return_buf,
+		size_t return_buf_size, int timeout_ms)
+{
+	struct cyttsp4_core *core = ttsp->core;
+	struct cyttsp4_core_data *cd = dev_get_drvdata(&core->dev);
+	return cyttsp4_exec_cmd(cd, mode, cmd_buf, cmd_size,
+			return_buf, return_buf_size, timeout_ms);
+}
+
+static int cyttsp4_get_parameter(struct cyttsp4_core_data *cd, u8 param_id,
+		u32 *param_value)
+{
+	u8 command_buf[CY_CMD_OP_GET_PARAM_CMD_SZ];
+	u8 return_buf[CY_CMD_OP_GET_PARAM_RET_SZ];
+	u8 param_size;
+	u8 *value_buf;
+	int rc;
+
+	command_buf[0] = CY_CMD_OP_GET_PARAM;
+	command_buf[1] = param_id;
+	rc = cyttsp4_exec_cmd(cd, CY_MODE_OPERATIONAL,
+			command_buf, CY_CMD_OP_GET_PARAM_CMD_SZ,
+			return_buf, CY_CMD_OP_GET_PARAM_RET_SZ,
+			CY_COMMAND_COMPLETE_TIMEOUT);
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: Unable to execute get parameter command.\n",
+			__func__);
+		return rc;
+	}
+
+	if (return_buf[0] != param_id) {
+		dev_err(cd->dev, "%s: Fail to execute get parameter command.\n",
+			__func__);
+		return -EIO;
+	}
+
+	param_size = return_buf[1];
+	value_buf = &return_buf[2];
+
+	*param_value = 0;
+	while (param_size--)
+		*param_value += *(value_buf++) << (8 * param_size);
+
+	return 0;
+}
+
+static int cyttsp4_set_parameter(struct cyttsp4_core_data *cd, u8 param_id,
+		u8 param_size, u32 param_value)
+{
+	u8 command_buf[CY_CMD_OP_SET_PARAM_CMD_SZ];
+	u8 return_buf[CY_CMD_OP_SET_PARAM_RET_SZ];
+	int rc;
+
+	command_buf[0] = CY_CMD_OP_SET_PARAM;
+	command_buf[1] = param_id;
+	command_buf[2] = param_size;
+
+	if (param_size == 1) {
+		command_buf[3] = (u8)param_value;
+	} else if (param_size == 2) {
+		command_buf[3] = (u8)(param_value >> 8);
+		command_buf[4] = (u8)param_value;
+	} else if (param_size == 4) {
+		command_buf[3] = (u8)(param_value >> 24);
+		command_buf[4] = (u8)(param_value >> 16);
+		command_buf[5] = (u8)(param_value >> 8);
+		command_buf[6] = (u8)param_value;
+	} else {
+		dev_err(cd->dev, "%s: Invalid parameter size %d\n",
+			__func__, param_size);
+		return -EINVAL;
+	}
+
+	rc = cyttsp4_exec_cmd(cd, CY_MODE_OPERATIONAL,
+			command_buf, 3 + param_size,
+			return_buf, CY_CMD_OP_SET_PARAM_RET_SZ,
+			CY_COMMAND_COMPLETE_TIMEOUT);
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: Unable to execute set parameter command.\n",
+			__func__);
+		return rc;
+	}
+
+	if (return_buf[0] != param_id || return_buf[1] != param_size) {
+		dev_err(cd->dev, "%s: Fail to execute set parameter command.\n",
+			__func__);
+		return -EIO;
+	}
+
+	return 0;
+}
+
+static int cyttsp4_get_scantype(struct cyttsp4_core_data *cd, u8 *scantype)
+{
+	int rc;
+	u32 value;
+
+	rc = cyttsp4_get_parameter(cd, CY_RAM_ID_SCAN_TYPE, &value);
+	if (!rc)
+		*scantype = (u8)value;
+
+	return rc;
+}
+
+static int cyttsp4_set_scantype(struct cyttsp4_core_data *cd, u8 scantype)
+{
+	int rc;
+
+	rc = cyttsp4_set_parameter(cd, CY_RAM_ID_SCAN_TYPE, 1, scantype);
+
+	return rc;
+}
+
+static u8 _cyttsp4_generate_new_scantype(struct cyttsp4_core_data *cd)
+{
+	u8 new_scantype = cd->default_scantype;
+
+	if (cd->apa_mc_en)
+		new_scantype |= CY_SCAN_TYPE_APA_MC;
+	if (cd->glove_en)
+		new_scantype |= CY_SCAN_TYPE_GLOVE;
+	if (cd->stylus_en)
+		new_scantype |= CY_SCAN_TYPE_STYLUS;
+	if (cd->proximity_en)
+		new_scantype |= CY_SCAN_TYPE_PROXIMITY;
+
+	return new_scantype;
+}
+
+static int cyttsp4_set_new_scan_type(struct cyttsp4_core_data *cd,
+		u8 scan_type, bool enable)
+{
+	int inc = enable ? 1 : -1;
+	int *en;
+	int rc;
+	u8 new_scantype;
+
+	switch (scan_type) {
+	case CY_ST_GLOVE:
+		en = &cd->glove_en;
+		break;
+	case CY_ST_STYLUS:
+		en = &cd->stylus_en;
+		break;
+	case CY_ST_PROXIMITY:
+		en = &cd->proximity_en;
+		break;
+	case CY_ST_APA_MC:
+		en = &cd->apa_mc_en;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	*en += inc;
+
+	new_scantype = _cyttsp4_generate_new_scantype(cd);
+
+	rc = cyttsp4_set_scantype(cd, new_scantype);
+	if (rc)
+		*en -= inc;
+
+	return rc;
+}
+
+static int cyttsp4_request_enable_scan_type_(struct cyttsp4_device *ttsp,
+		u8 scan_type)
+{
+	struct cyttsp4_core *core = ttsp->core;
+	struct cyttsp4_core_data *cd = dev_get_drvdata(&core->dev);
+
+	return cyttsp4_set_new_scan_type(cd, scan_type, true);
+}
+
+static int cyttsp4_request_disable_scan_type_(struct cyttsp4_device *ttsp,
+		u8 scan_type)
+{
+	struct cyttsp4_core *core = ttsp->core;
+	struct cyttsp4_core_data *cd = dev_get_drvdata(&core->dev);
+
+	return cyttsp4_set_new_scan_type(cd, scan_type, false);
+}
+
+static int cyttsp4_read_config_block(struct cyttsp4_core_data *cd, u8 ebid,
+		u16 row, u8 *data, u16 length)
+{
+	u8 command_buf[CY_CMD_CAT_READ_CFG_BLK_CMD_SZ];
+	u8 *return_buf;
+	int return_buf_sz;
+	u16 crc;
+	int rc;
+
+	/* Allocate buffer for read config block command response
+	 * Header(5) + Data(length) + CRC(2)
+	 */
+	return_buf_sz = CY_CMD_CAT_READ_CFG_BLK_RET_SZ + length;
+	return_buf = kmalloc(return_buf_sz, GFP_KERNEL);
+	if (!return_buf) {
+		dev_err(cd->dev, "%s: Cannot allocate buffer\n",
+			__func__);
+		rc = -ENOMEM;
+		goto exit;
+	}
+
+	command_buf[0] = CY_CMD_CAT_READ_CFG_BLK;
+	command_buf[1] = HI_BYTE(row);
+	command_buf[2] = LO_BYTE(row);
+	command_buf[3] = HI_BYTE(length);
+	command_buf[4] = LO_BYTE(length);
+	command_buf[5] = ebid;
+
+	rc = cyttsp4_exec_cmd(cd, CY_MODE_CAT,
+			command_buf, CY_CMD_CAT_READ_CFG_BLK_CMD_SZ,
+			return_buf, return_buf_sz,
+			CY_COMMAND_COMPLETE_TIMEOUT);
+	if (rc) {
+		dev_err(cd->dev, "%s: Error executing command r=%d\n",
+			__func__, rc);
+		goto free_buffer;
+	}
+
+	crc = cyttsp4_calc_app_crc(
+		&return_buf[CY_CMD_CAT_READ_CFG_BLK_RET_HDR_SZ], length);
+
+	/* Validate response */
+	if (return_buf[0] != CY_CMD_STATUS_SUCCESS
+			|| return_buf[1] != ebid
+			|| return_buf[2] != HI_BYTE(length)
+			|| return_buf[3] != LO_BYTE(length)
+			|| return_buf[CY_CMD_CAT_READ_CFG_BLK_RET_HDR_SZ
+				+ length] != HI_BYTE(crc)
+			|| return_buf[CY_CMD_CAT_READ_CFG_BLK_RET_HDR_SZ
+				+ length + 1] != LO_BYTE(crc)) {
+		dev_err(cd->dev, "%s: Fail executing command\n",
+				__func__);
+		rc = -EINVAL;
+		goto free_buffer;
+	}
+
+	memcpy(data, &return_buf[CY_CMD_CAT_READ_CFG_BLK_RET_HDR_SZ], length);
+
+	cyttsp4_pr_buf(cd->dev, cd->pr_buf, data, length, "read_config_block");
+
+free_buffer:
+	kfree(return_buf);
+exit:
+	return rc;
+}
+
+static int cyttsp4_write_config_block(struct cyttsp4_core_data *cd, u8 ebid,
+		u16 row, const u8 *data, u16 length)
+{
+	u8 return_buf[CY_CMD_CAT_WRITE_CFG_BLK_RET_SZ];
+	u8 *command_buf;
+	int command_buf_sz;
+	u16 crc;
+	int rc;
+
+	/* Allocate buffer for write config block command
+	 * Header(6) + Data(length) + Security Key(8) + CRC(2)
+	 */
+	command_buf_sz = CY_CMD_CAT_WRITE_CFG_BLK_CMD_SZ + length
+		+ sizeof(security_key);
+	command_buf = kmalloc(command_buf_sz, GFP_KERNEL);
+	if (!command_buf) {
+		dev_err(cd->dev, "%s: Cannot allocate buffer\n",
+			__func__);
+		rc = -ENOMEM;
+		goto exit;
+	}
+
+	crc = cyttsp4_calc_app_crc(data, length);
+
+	command_buf[0] = CY_CMD_CAT_WRITE_CFG_BLK;
+	command_buf[1] = HI_BYTE(row);
+	command_buf[2] = LO_BYTE(row);
+	command_buf[3] = HI_BYTE(length);
+	command_buf[4] = LO_BYTE(length);
+	command_buf[5] = ebid;
+
+	command_buf[CY_CMD_CAT_WRITE_CFG_BLK_CMD_HDR_SZ + length
+		+ sizeof(security_key)] = HI_BYTE(crc);
+	command_buf[CY_CMD_CAT_WRITE_CFG_BLK_CMD_HDR_SZ + 1 + length
+		+ sizeof(security_key)] = LO_BYTE(crc);
+
+	memcpy(&command_buf[CY_CMD_CAT_WRITE_CFG_BLK_CMD_HDR_SZ], data,
+		length);
+	memcpy(&command_buf[CY_CMD_CAT_WRITE_CFG_BLK_CMD_HDR_SZ + length],
+		security_key, sizeof(security_key));
+
+	cyttsp4_pr_buf(cd->dev, cd->pr_buf, command_buf, command_buf_sz,
+		"write_config_block");
+
+	rc = cyttsp4_exec_cmd(cd, CY_MODE_CAT,
+			command_buf, command_buf_sz,
+			return_buf, CY_CMD_CAT_WRITE_CFG_BLK_RET_SZ,
+			CY_COMMAND_COMPLETE_TIMEOUT);
+	if (rc) {
+		dev_err(cd->dev, "%s: Error executing command r=%d\n",
+			__func__, rc);
+		goto free_buffer;
+	}
+
+	/* Validate response */
+	if (return_buf[0] != CY_CMD_STATUS_SUCCESS
+			|| return_buf[1] != ebid
+			|| return_buf[2] != HI_BYTE(length)
+			|| return_buf[3] != LO_BYTE(length)) {
+		dev_err(cd->dev, "%s: Fail executing command\n",
+				__func__);
+		rc = -EINVAL;
+		goto free_buffer;
+	}
+
+free_buffer:
+	kfree(command_buf);
+exit:
+	return rc;
+}
+
+static int cyttsp4_get_config_row_size(struct cyttsp4_core_data *cd,
+		u16 *config_row_size)
+{
+	u8 command_buf[CY_CMD_CAT_GET_CFG_ROW_SIZE_CMD_SZ];
+	u8 return_buf[CY_CMD_CAT_GET_CFG_ROW_SIZE_RET_SZ];
+	int rc;
+
+	command_buf[0] = CY_CMD_CAT_GET_CFG_ROW_SZ;
+
+	rc = cyttsp4_exec_cmd(cd, CY_MODE_CAT,
+			command_buf, CY_CMD_CAT_GET_CFG_ROW_SIZE_CMD_SZ,
+			return_buf, CY_CMD_CAT_GET_CFG_ROW_SIZE_RET_SZ,
+			CY_COMMAND_COMPLETE_TIMEOUT);
+	if (rc) {
+		dev_err(cd->dev, "%s: Error executing command r=%d\n",
+			__func__, rc);
+		goto exit;
+	}
+
+	*config_row_size = get_unaligned_be16(&return_buf[0]);
+
+exit:
+	return rc;
+}
+
+static int cyttsp4_request_config_row_size_(struct cyttsp4_device *ttsp,
+		u16 *config_row_size)
+{
+	struct cyttsp4_core *core = ttsp->core;
+	struct cyttsp4_core_data *cd = dev_get_drvdata(&core->dev);
+
+	return cyttsp4_get_config_row_size(cd, config_row_size);
+}
+
+static int cyttsp4_verify_config_block_crc(struct cyttsp4_core_data *cd,
+		u8 ebid, u16 *calc_crc, u16 *stored_crc, bool *match)
+{
+	u8 command_buf[CY_CMD_CAT_VERIFY_CFG_BLK_CRC_CMD_SZ];
+	u8 return_buf[CY_CMD_CAT_VERIFY_CFG_BLK_CRC_RET_SZ];
+	int rc;
+
+	command_buf[0] = CY_CMD_CAT_VERIFY_CFG_BLK_CRC;
+	command_buf[1] = ebid;
+
+	rc = cyttsp4_exec_cmd(cd, CY_MODE_CAT,
+			command_buf, CY_CMD_CAT_VERIFY_CFG_BLK_CRC_CMD_SZ,
+			return_buf, CY_CMD_CAT_VERIFY_CFG_BLK_CRC_RET_SZ,
+			CY_COMMAND_COMPLETE_TIMEOUT);
+	if (rc) {
+		dev_err(cd->dev, "%s: Error executing command r=%d\n",
+			__func__, rc);
+		goto exit;
+	}
+
+	*calc_crc = get_unaligned_be16(&return_buf[1]);
+	*stored_crc = get_unaligned_be16(&return_buf[3]);
+	if (match)
+		*match = !return_buf[0];
+exit:
+	return rc;
+}
+
+static int cyttsp4_get_config_block_crc(struct cyttsp4_core_data *cd,
+		u8 ebid, u16 *crc)
+{
+	u8 command_buf[CY_CMD_OP_GET_CFG_BLK_CRC_CMD_SZ];
+	u8 return_buf[CY_CMD_OP_GET_CFG_BLK_CRC_RET_SZ];
+	int rc;
+
+	command_buf[0] = CY_CMD_OP_GET_CRC;
+	command_buf[1] = ebid;
+
+	rc = cyttsp4_exec_cmd(cd, CY_MODE_OPERATIONAL,
+			command_buf, CY_CMD_OP_GET_CFG_BLK_CRC_CMD_SZ,
+			return_buf, CY_CMD_OP_GET_CFG_BLK_CRC_RET_SZ,
+			CY_COMMAND_COMPLETE_TIMEOUT);
+	if (rc) {
+		dev_err(cd->dev, "%s: Error executing command r=%d\n",
+			__func__, rc);
+		goto exit;
+	}
+
+	/* Validate response */
+	if (return_buf[0] != CY_CMD_STATUS_SUCCESS) {
+		dev_err(cd->dev, "%s: Fail executing command\n",
+				__func__);
+		rc = -EINVAL;
+		goto exit;
+	}
+
+	*crc = get_unaligned_be16(&return_buf[1]);
+
+exit:
+	return rc;
+}
+
+static int cyttsp4_get_ttconfig_version(struct cyttsp4_core_data *cd,
+		u16 *version)
+{
+	struct cyttsp4_sysinfo *si = &cd->sysinfo;
+	u8 data[CY_TTCONFIG_VERSION_OFFSET + CY_TTCONFIG_VERSION_SIZE];
+	int rc;
+	bool ready;
+
+	mutex_lock(&cd->system_lock);
+	ready = si->ready;
+	mutex_unlock(&cd->system_lock);
+
+	if (!ready) {
+		rc  = -ENODEV;
+		goto exit;
+	}
+
+	rc = cyttsp4_read_config_block(cd, CY_TCH_PARM_EBID,
+			CY_TTCONFIG_VERSION_ROW, data, sizeof(data));
+	if (rc) {
+		dev_err(cd->dev, "%s: Error on read config block\n",
+			__func__);
+		goto exit;
+	}
+
+	*version = GET_FIELD16(si, &data[CY_TTCONFIG_VERSION_OFFSET]);
+
+exit:
+	return rc;
+}
+
+static int cyttsp4_get_config_length(struct cyttsp4_core_data *cd, u8 ebid,
+		u16 *length, u16 *max_length)
+{
+	struct cyttsp4_sysinfo *si = &cd->sysinfo;
+	u8 data[CY_CONFIG_LENGTH_INFO_SIZE];
+	int rc;
+	bool ready;
+
+	mutex_lock(&cd->system_lock);
+	ready = si->ready;
+	mutex_unlock(&cd->system_lock);
+
+	if (!ready) {
+		rc  = -ENODEV;
+		goto exit;
+	}
+
+	rc = cyttsp4_read_config_block(cd, ebid, CY_CONFIG_LENGTH_INFO_OFFSET,
+			data, sizeof(data));
+	if (rc) {
+		dev_err(cd->dev, "%s: Error on read config block\n",
+			__func__);
+		goto exit;
+	}
+
+	*length = GET_FIELD16(si, &data[CY_CONFIG_LENGTH_OFFSET]);
+	*max_length = GET_FIELD16(si, &data[CY_CONFIG_MAXLENGTH_OFFSET]);
+
+exit:
+	return rc;
+}
+
+static int cyttsp4_write_config_common(struct cyttsp4_core_data *cd, u8 ebid,
+		u16 offset, u8 *data, u16 length)
+{
+	u16 cur_block, cur_off, end_block, end_off;
+	int copy_len;
+	u16 config_row_size = 0;
+	u8 *row_data = NULL;
+	int rc;
+
+	rc = cyttsp4_get_config_row_size(cd, &config_row_size);
+	if (rc) {
+		dev_err(cd->dev, "%s: Cannot get config row size\n",
+			__func__);
+		goto exit;
+	}
+
+	cur_block = offset / config_row_size;
+	cur_off = offset % config_row_size;
+
+	end_block = (offset + length) / config_row_size;
+	end_off = (offset + length) % config_row_size;
+
+	/* Check whether we need to fetch the whole block first */
+	if (cur_off == 0)
+		goto no_offset;
+
+	row_data = kmalloc(config_row_size, GFP_KERNEL);
+	if (!row_data) {
+		dev_err(cd->dev, "%s: Cannot allocate buffer\n", __func__);
+		rc = -ENOMEM;
+		goto exit;
+	}
+
+	copy_len = (cur_block == end_block) ?
+		length : config_row_size - cur_off;
+
+	/* Read up to current offset, append the new data and write it back */
+	rc = cyttsp4_read_config_block(cd, ebid, cur_block, row_data, cur_off);
+	if (rc) {
+		dev_err(cd->dev, "%s: Error on read config block\n", __func__);
+		goto free_row_data;
+	}
+
+	memcpy(&row_data[cur_off], data, copy_len);
+
+	rc = cyttsp4_write_config_block(cd, ebid, cur_block, row_data,
+			cur_off + copy_len);
+	if (rc) {
+		dev_err(cd->dev, "%s: Error on initial write config block\n",
+			__func__);
+		goto free_row_data;
+	}
+
+	data += copy_len;
+	cur_off = 0;
+	cur_block++;
+
+no_offset:
+	while (cur_block < end_block) {
+		rc = cyttsp4_write_config_block(cd, ebid, cur_block, data,
+				config_row_size);
+		if (rc) {
+			dev_err(cd->dev, "%s: Error on write config block\n",
+				__func__);
+			goto free_row_data;
+		}
+
+		data += config_row_size;
+		cur_block++;
+	}
+
+	/* Last block */
+	if (cur_block == end_block) {
+		rc = cyttsp4_write_config_block(cd, ebid, end_block, data,
+				end_off);
+		if (rc) {
+			dev_err(cd->dev, "%s: Error on last write config block\n",
+				__func__);
+			goto free_row_data;
+		}
+	}
+
+free_row_data:
+	kfree(row_data);
+exit:
+	return rc;
+}
+
+static int cyttsp4_write_config(struct cyttsp4_core_data *cd, u8 ebid,
+		u16 offset, u8 *data, u16 length) {
+	struct cyttsp4_sysinfo *si = &cd->sysinfo;
+	u16 crc_new, crc_old;
+	u16 crc_offset;
+	u16 conf_len;
+	u8 crc_data[2];
+	int rc;
+	bool ready;
+
+	mutex_lock(&cd->system_lock);
+	ready = si->ready;
+	mutex_unlock(&cd->system_lock);
+
+	if (!ready) {
+		rc  = -ENODEV;
+		goto exit;
+	}
+
+	/* CRC is stored at config max length offset */
+	rc = cyttsp4_get_config_length(cd, ebid, &conf_len, &crc_offset);
+	if (rc) {
+		dev_err(cd->dev, "%s: Error on get config length\n",
+			__func__);
+		goto exit;
+	}
+
+	/* Allow CRC update also */
+	if (offset + length > crc_offset + 2) {
+		dev_err(cd->dev, "%s: offset + length exceeds max length(%d)\n",
+			__func__, crc_offset + 2);
+		rc = -EINVAL;
+		goto exit;
+	}
+
+	rc = cyttsp4_write_config_common(cd, ebid, offset, data, length);
+	if (rc) {
+		dev_err(cd->dev, "%s: Error on write config\n",
+			__func__);
+		goto exit;
+	}
+
+	/* Verify config block CRC */
+	rc = cyttsp4_verify_config_block_crc(cd, ebid,
+			&crc_new, &crc_old, NULL);
+	if (rc) {
+		dev_err(cd->dev, "%s: Error on verify config block crc\n",
+			__func__);
+		goto exit;
+	}
+
+	dev_vdbg(cd->dev, "%s: crc_new:%04X crc_old:%04X\n",
+		__func__, crc_new, crc_old);
+
+	if (crc_new == crc_old) {
+		dev_vdbg(cd->dev, "%s: Calculated crc matches stored crc\n",
+			__func__);
+		goto exit;
+	}
+
+	PUT_FIELD16(si, crc_new, crc_data);
+
+	rc = cyttsp4_write_config_common(cd, ebid, crc_offset, crc_data, 2);
+	if (rc) {
+		dev_err(cd->dev, "%s: Error on write config crc\n",
+			__func__);
+		goto exit;
+	}
+
+exit:
+	return rc;
+}
+
+static int cyttsp4_request_write_config_(struct cyttsp4_device *ttsp, u8 ebid,
+		u16 offset, u8 *data, u16 length) {
+	struct cyttsp4_core *core = ttsp->core;
+	struct cyttsp4_core_data *cd = dev_get_drvdata(&core->dev);
+
+	return cyttsp4_write_config(cd, ebid, offset, data, length);
+}
+
+#ifdef CYTTSP4_WATCHDOG_NULL_CMD
+static void cyttsp4_watchdog_work(struct work_struct *work)
+{
+	struct cyttsp4_core_data *cd =
+		container_of(work, struct cyttsp4_core_data, watchdog_work);
+	u8 cmd_buf[CY_CMD_OP_NULL_CMD_SZ];
+	bool restart = false;
+	int rc;
+
+	rc = request_exclusive(cd, cd->core, 1);
+	if (rc < 0) {
+		dev_vdbg(cd->dev, "%s: fail get exclusive ex=%p own=%p\n",
+				__func__, cd->exclusive_dev, cd->core);
+		goto exit;
+	}
+
+	cmd_buf[0] = CY_CMD_OP_NULL;
+	rc = cyttsp4_exec_cmd(cd, cd->mode,
+			cmd_buf, CY_CMD_OP_NULL_CMD_SZ,
+			NULL, CY_CMD_OP_NULL_RET_SZ,
+			CY_COMMAND_COMPLETE_TIMEOUT);
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: Watchdog NULL cmd failed.\n", __func__);
+		restart = true;
+	}
+
+	if (release_exclusive(cd, cd->core) < 0)
+		dev_err(cd->dev, "%s: fail to release exclusive\n", __func__);
+	else
+		dev_vdbg(cd->dev, "%s: pass release exclusive\n", __func__);
+exit:
+	if (restart)
+		cyttsp4_queue_startup(cd);
+	else
+		cyttsp4_start_wd_timer(cd);
+}
+#else
+static void cyttsp4_watchdog_work(struct work_struct *work)
+{
+	struct cyttsp4_core_data *cd =
+		container_of(work, struct cyttsp4_core_data, watchdog_work);
+	u8 mode[2];
+	bool restart = false;
+	int rc;
+
+	if (cd == NULL) {
+		dev_err(cd->dev, "%s: NULL context pointer\n", __func__);
+		return;
+	}
+
+	mutex_lock(&cd->system_lock);
+	rc = cyttsp4_adap_read(cd, CY_REG_BASE, &mode, sizeof(mode));
+	if (rc) {
+		dev_err(cd->dev, "%s: failed to access device r=%d\n",
+			__func__, rc);
+		restart = true;
+		goto exit;
+	}
+
+	if (IS_BOOTLOADER(mode[0], mode[1])) {
+		dev_err(cd->dev, "%s: device found in bootloader mode\n",
+			__func__);
+		restart = true;
+		goto exit;
+	}
+exit:
+	if (restart)
+		cyttsp4_queue_startup_(cd);
+	else
+		cyttsp4_start_wd_timer(cd);
+	mutex_unlock(&cd->system_lock);
+}
+#endif
+
+static int cyttsp4_request_stop_wd_(struct cyttsp4_device *ttsp)
+{
+	struct cyttsp4_core *core = ttsp->core;
+	struct cyttsp4_core_data *cd = dev_get_drvdata(&core->dev);
+	cyttsp4_stop_wd_timer(cd);
+	return 0;
+}
+
+static int _cyttsp4_put_device_into_deep_sleep(struct cyttsp4_core_data *cd,
+		u8 hst_mode_reg)
+{
+	int rc;
+
+	hst_mode_reg |= CY_HST_SLEEP;
+
+	dev_vdbg(cd->dev, "%s: write DEEP SLEEP...\n", __func__);
+	rc = cyttsp4_adap_write(cd, CY_REG_BASE, &hst_mode_reg,
+			sizeof(hst_mode_reg));
+	if (rc) {
+		dev_err(cd->dev, "%s: Fail write adapter r=%d\n", __func__, rc);
+		return -EINVAL;
+	}
+	dev_vdbg(cd->dev, "%s: write DEEP SLEEP succeeded\n", __func__);
+
+	if (cd->pdata->power) {
+		dev_dbg(cd->dev, "%s: Power down HW\n", __func__);
+		rc = cd->pdata->power(cd->pdata, 0, cd->dev, &cd->ignore_irq);
+	} else {
+		dev_dbg(cd->dev, "%s: No power function\n", __func__);
+		rc = 0;
+	}
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: HW Power down fails r=%d\n",
+				__func__, rc);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int _cyttsp4_put_device_into_easy_wakeup(struct cyttsp4_core_data *cd)
+{
+	u8 command_buf[CY_CMD_OP_WAIT_FOR_EVENT_CMD_SZ];
+	int rc;
+
+	if (!IS_TTSP_VER_GE(&cd->sysinfo, 2, 5))
+		return -EINVAL;
+
+	command_buf[0] = CY_CMD_OP_WAIT_FOR_EVENT;
+	command_buf[1] = cd->easy_wakeup_gesture;
+
+	rc = _cyttsp4_exec_cmd(cd, CY_MODE_OPERATIONAL, command_buf,
+			CY_CMD_OP_WAIT_FOR_EVENT_CMD_SZ);
+	cd->int_status &= ~CY_INT_EXEC_CMD;
+	if (rc)
+		dev_err(cd->dev, "%s: Error executing command r=%d\n",
+			__func__, rc);
+
+	return rc;
+}
+
+static int _cyttsp4_wait_for_refresh_cycle(struct cyttsp4_core_data *cd,
+		int cycle)
+{
+	int active_refresh_cycle_ms;
+
+	if (cd->active_refresh_cycle_ms)
+		active_refresh_cycle_ms = cd->active_refresh_cycle_ms;
+	else
+		active_refresh_cycle_ms = 20;
+
+	msleep(cycle * active_refresh_cycle_ms);
+
+	return 0;
+}
+
+static int _cyttsp4_put_device_into_sleep(struct cyttsp4_core_data *cd,
+		u8 hst_mode_reg)
+{
+	int rc;
+
+	if (IS_DEEP_SLEEP_CONFIGURED(cd->easy_wakeup_gesture))
+		rc = _cyttsp4_put_device_into_deep_sleep(cd, hst_mode_reg);
+	else
+		rc = _cyttsp4_put_device_into_easy_wakeup(cd);
+
+	return rc;
+}
+
+static int cyttsp4_core_sleep_(struct cyttsp4_core_data *cd)
+{
+	u8 mode[2];
+	int rc = 0;
+
+	cyttsp4_stop_wd_timer(cd);
+
+	/* Wait until currently running IRQ handler exits and disable IRQ */
+	disable_irq(cd->irq);
+
+	mutex_lock(&cd->system_lock);
+	/* Already in sleep mode? */
+	if (cd->sleep_state == SS_SLEEP_ON)
+		goto exit;
+
+	cd->sleep_state = SS_SLEEPING;
+
+	rc = cyttsp4_adap_read(cd, CY_REG_BASE, &mode, sizeof(mode));
+	if (rc) {
+		dev_err(cd->dev, "%s: Fail read adapter r=%d\n", __func__, rc);
+		goto exit;
+	}
+
+	if (IS_BOOTLOADER(mode[0], mode[1])) {
+		dev_err(cd->dev, "%s: Device in BOOTLADER mode.\n", __func__);
+		rc = -EINVAL;
+		goto exit;
+	}
+
+	/* Deep sleep is only allowed in Operating mode */
+	if (GET_HSTMODE(mode[0]) != CY_HST_OPERATE) {
+		dev_err(cd->dev, "%s: Device is not in Operating mode (%02X)\n",
+			__func__, GET_HSTMODE(mode[0]));
+		mutex_unlock(&cd->system_lock);
+		enable_irq(cd->irq);
+		/* Try switching to Operating mode */
+		rc = set_mode(cd, CY_MODE_OPERATIONAL);
+		disable_irq(cd->irq);
+		mutex_lock(&cd->system_lock);
+		if (rc < 0) {
+			dev_err(cd->dev, "%s: failed to set mode to Operational rc=%d\n",
+				__func__, rc);
+			cyttsp4_queue_startup_(cd);
+			rc = 0;
+			goto exit;
+		}
+
+		/* Get the new host mode register value */
+		rc = cyttsp4_adap_read(cd, CY_REG_BASE, &mode, sizeof(mode));
+		if (rc) {
+			dev_err(cd->dev, "%s: Fail read adapter r=%d\n",
+				__func__, rc);
+			goto exit;
+		}
+	}
+
+	rc = _cyttsp4_put_device_into_sleep(cd, mode[0]);
+
+exit:
+	if (rc) {
+		cd->sleep_state = SS_SLEEP_OFF;
+		cyttsp4_start_wd_timer(cd);
+	} else {
+		cd->sleep_state = SS_SLEEP_ON;
+		cd->int_status |= CY_INT_IGNORE;
+	}
+
+	mutex_unlock(&cd->system_lock);
+	enable_irq(cd->irq);
+
+	return rc;
+}
+
+static int cyttsp4_core_sleep(struct cyttsp4_core_data *cd)
+{
+	int rc;
+
+	rc = request_exclusive(cd, cd->core,
+			CY_CORE_SLEEP_REQUEST_EXCLUSIVE_TIMEOUT);
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: fail get exclusive ex=%p own=%p\n",
+				__func__, cd->exclusive_dev, cd->core);
+		return 0;
+	}
+
+	rc = cyttsp4_core_sleep_(cd);
+
+	if (release_exclusive(cd, cd->core) < 0)
+		dev_err(cd->dev, "%s: fail to release exclusive\n", __func__);
+	else
+		dev_vdbg(cd->dev, "%s: pass release exclusive\n", __func__);
+
+	/* Give time to FW to sleep */
+	_cyttsp4_wait_for_refresh_cycle(cd, 2);
+
+	return rc;
+}
+
+static int _cyttsp4_awake_device_from_deep_sleep(struct cyttsp4_core_data *cd,
+		int timeout_ms)
+{
+	struct device *dev = cd->dev;
+	u8 mode;
+	int t;
+	int rc;
+
+	cd->int_status |= CY_INT_AWAKE;
+
+	if (cd->pdata->power) {
+		/* Wake up using platform power function */
+		dev_dbg(dev, "%s: Power up HW\n", __func__);
+		rc = cd->pdata->power(cd->pdata, 1, dev, &cd->ignore_irq);
+	} else {
+		/* Initiate a read transaction to wake up */
+		rc = cyttsp4_adap_read(cd, CY_REG_BASE, &mode, sizeof(mode));
+	}
+	if (rc < 0) {
+		dev_err(dev, "%s: HW Power up fails r=%d\n", __func__, rc);
+		/* Initiate another read transaction to wake up */
+		rc = cyttsp4_adap_read(cd, CY_REG_BASE, &mode, sizeof(mode));
+	} else
+		dev_vdbg(cd->dev, "%s: HW power up succeeds\n", __func__);
+	mutex_unlock(&cd->system_lock);
+
+	t = wait_event_timeout(cd->wait_q,
+			(cd->int_status & CY_INT_AWAKE) == 0,
+			msecs_to_jiffies(timeout_ms));
+	mutex_lock(&cd->system_lock);
+	if (IS_TMO(t)) {
+		dev_dbg(dev, "%s: TMO waiting for wakeup\n", __func__);
+		cd->int_status &= ~CY_INT_AWAKE;
+		/* Perform a read transaction to check if device is awake */
+		rc = cyttsp4_adap_read(cd, CY_REG_BASE, &mode, sizeof(mode));
+		if (rc < 0 || GET_HSTMODE(mode) != CY_HST_OPERATE) {
+			dev_err(dev, "%s: Queueing startup\n", __func__);
+			/* Try starting up */
+			cyttsp4_queue_startup_(cd);
+		}
+	}
+
+	return rc;
+}
+
+static int _cyttsp4_awake_device(struct cyttsp4_core_data *cd)
+{
+	int timeout_ms;
+
+	if (cd->wake_initiated_by_device) {
+		cd->wake_initiated_by_device = 0;
+		/* To prevent sequential wake/sleep caused by ttsp modules */
+		msleep(20);
+		return 0;
+	}
+
+	if (IS_DEEP_SLEEP_CONFIGURED(cd->easy_wakeup_gesture))
+		timeout_ms = CY_CORE_WAKEUP_TIMEOUT;
+	else
+		timeout_ms = CY_CORE_WAKEUP_TIMEOUT * 4;
+
+	return _cyttsp4_awake_device_from_deep_sleep(cd, timeout_ms);
+}
+
+static int cyttsp4_core_wake_(struct cyttsp4_core_data *cd)
+{
+	int rc;
+
+	/* Already woken? */
+	mutex_lock(&cd->system_lock);
+	if (cd->sleep_state == SS_SLEEP_OFF) {
+		mutex_unlock(&cd->system_lock);
+		return 0;
+	}
+
+	cd->int_status &= ~CY_INT_IGNORE;
+	cd->sleep_state = SS_WAKING;
+
+	rc = _cyttsp4_awake_device(cd);
+
+	cd->sleep_state = SS_SLEEP_OFF;
+	mutex_unlock(&cd->system_lock);
+
+	cyttsp4_start_wd_timer(cd);
+
+	return 0;
+}
+
+static int cyttsp4_core_wake(struct cyttsp4_core_data *cd)
+{
+	int rc;
+
+	rc = request_exclusive(cd, cd->core,
+			CY_CORE_REQUEST_EXCLUSIVE_TIMEOUT);
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: fail get exclusive ex=%p own=%p\n",
+				__func__, cd->exclusive_dev, cd->core);
+		return 0;
+	}
+
+	rc = cyttsp4_core_wake_(cd);
+
+	if (release_exclusive(cd, cd->core) < 0)
+		dev_err(cd->dev, "%s: fail to release exclusive\n", __func__);
+	else
+		dev_vdbg(cd->dev, "%s: pass release exclusive\n", __func__);
+
+	/* If a startup queued in wake, wait it to finish */
+	wait_event_timeout(cd->wait_q, cd->startup_state == STARTUP_NONE,
+			msecs_to_jiffies(CY_CORE_RESET_AND_WAIT_TIMEOUT));
+
+	return rc;
+}
+
+static int cyttsp4_get_ttconfig_info(struct cyttsp4_core_data *cd)
+{
+	struct cyttsp4_sysinfo *si = &cd->sysinfo;
+	u16 length, max_length;
+	u16 version = 0;
+	u16 crc = 0;
+	int rc;
+
+	rc = set_mode(cd, CY_MODE_CAT);
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: failed to set mode to CAT rc=%d\n",
+			__func__, rc);
+		return rc;
+	}
+
+	rc = cyttsp4_get_ttconfig_version(cd, &version);
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: failed to get ttconfig version rc=%d\n",
+			__func__, rc);
+		return rc;
+	}
+
+	rc = cyttsp4_get_config_length(cd, CY_TCH_PARM_EBID,
+			&length, &max_length);
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: failed to get ttconfig length rc=%d\n",
+			__func__, rc);
+		return rc;
+	}
+
+	rc = set_mode(cd, CY_MODE_OPERATIONAL);
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: failed to set mode to Operational rc=%d\n",
+			__func__, rc);
+		return rc;
+	}
+
+	rc = cyttsp4_get_config_block_crc(cd, CY_TCH_PARM_EBID, &crc);
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: failed to get ttconfig crc rc=%d\n",
+			__func__, rc);
+		return rc;
+	}
+
+	si->ttconfig.version = version;
+	si->ttconfig.length = length;
+	si->ttconfig.max_length = max_length;
+	si->ttconfig.crc = crc;
+
+	dev_vdbg(cd->dev, "%s: TT Config Version:%04X Length:%d Max Length:%d CRC:%04X\n",
+		__func__, si->ttconfig.version, si->ttconfig.length,
+		si->ttconfig.length, si->ttconfig.crc);
+
+	return 0;
+}
+static int cyttsp4_get_active_refresh_cycle(struct cyttsp4_core_data *cd)
+{
+	int rc;
+	u32 value;
+
+	rc = cyttsp4_get_parameter(cd, CY_RAM_ID_REFRESH_INTERVAL, &value);
+	if (!rc)
+		cd->active_refresh_cycle_ms = (u8)value;
+
+	return rc;
+}
+
+static int cyttsp4_set_initial_scantype(struct cyttsp4_core_data *cd)
+{
+	u8 new_scantype;
+	int rc;
+
+	rc = cyttsp4_get_scantype(cd, &cd->default_scantype);
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: failed to get scantype rc=%d\n",
+			__func__, rc);
+		goto exit;
+	}
+
+	/* Disable proximity sensing by default */
+	cd->default_scantype &= ~CY_SCAN_TYPE_PROXIMITY;
+
+	new_scantype = _cyttsp4_generate_new_scantype(cd);
+
+	rc = cyttsp4_set_scantype(cd, new_scantype);
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: failed to set scantype rc=%d\n",
+			__func__, rc);
+		goto exit;
+	}
+exit:
+	return rc;
+}
+
+static int cyttsp4_startup_(struct cyttsp4_core_data *cd)
+{
+	int retry = CY_CORE_STARTUP_RETRY_COUNT;
+	int rc;
+	bool detected = false;
+
+	dev_dbg(cd->dev, "%s: enter...\n", __func__);
+
+	cyttsp4_stop_wd_timer(cd);
+
+reset:
+	if (retry != CY_CORE_STARTUP_RETRY_COUNT)
+		dev_dbg(cd->dev, "%s: Retry %d\n", __func__,
+			CY_CORE_STARTUP_RETRY_COUNT - retry);
+
+	/* reset hardware and wait for heartbeat */
+	rc = cyttsp4_reset_and_wait(cd);
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: Error on h/w reset r=%d\n", __func__, rc);
+		RETRY_OR_EXIT(retry--, reset, exit);
+	}
+
+	detected = true;
+
+	/* exit bl into sysinfo mode */
+	dev_vdbg(cd->dev, "%s: write exit ldr...\n", __func__);
+	mutex_lock(&cd->system_lock);
+	cd->int_status &= ~CY_INT_IGNORE;
+	cd->int_status |= CY_INT_MODE_CHANGE;
+
+	rc = cyttsp4_adap_write(cd, CY_REG_BASE, (u8 *)ldr_exit,
+			sizeof(ldr_exit));
+	mutex_unlock(&cd->system_lock);
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: Fail write adap='%s' r=%d\n",
+			__func__, cd->core->adap->id, rc);
+		RETRY_OR_EXIT(retry--, reset, exit);
+	}
+	msleep(2000);
+	rc = cyttsp4_wait_sysinfo_mode(cd);
+#if 1
+	if (rc < 0) {
+		u8 buf[sizeof(ldr_err_app)];
+		int rc1;
+
+		/* Check for invalid/corrupted touch application */
+		rc1 = cyttsp4_adap_read(cd, CY_REG_BASE, buf,
+				sizeof(ldr_err_app));
+		if (rc1) {
+			dev_err(cd->dev, "%s: Fail read adap='%s' r=%d\n",
+				__func__, cd->core->adap->id, rc1);
+		} else if (!memcmp(buf, ldr_err_app, sizeof(ldr_err_app))) {
+			dev_err(cd->dev, "%s: Error launching touch application\n",
+				__func__);
+			mutex_lock(&cd->system_lock);
+			cd->invalid_touch_app = true;
+			mutex_unlock(&cd->system_lock);
+			goto exit_no_wd;
+		}
+
+		RETRY_OR_EXIT(retry--, reset, exit);
+	}
+#endif
+#if 0
+        if (rc) {
+		u8 buf[sizeof(ldr_err_app)];
+		int rc1;
+
+		rc1 = cyttsp4_adap_read(cd, CY_REG_BASE,
+			buf, sizeof(ldr_err_app));
+		if (!rc1 && !memcmp(buf, ldr_err_app, sizeof(ldr_err_app)))
+			dev_err(cd->dev, "%s: Invalid touch application\n", __func__);
+
+		cyttsp4_start_wd_timer(cd);
+
+		/*
+		 * Unable to switch to SYSINFO mode,
+		 * Corrupted FW may cause crash, exit here.
+		 */
+		 dev_err(cd->dev, "%s: HGZ: Fail enter sysinfo mode\n",
+			__func__); //hgz
+		//return rc;// return 0 --> return rc
+		return 0;
+	}
+#endif
+	mutex_lock(&cd->system_lock);
+	cd->invalid_touch_app = false;
+	mutex_unlock(&cd->system_lock);
+
+	/* read sysinfo data */
+	dev_vdbg(cd->dev, "%s: get sysinfo regs..\n", __func__);
+	rc = cyttsp4_get_sysinfo_regs(cd);
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: failed to get sysinfo regs rc=%d\n",
+			__func__, rc);
+		RETRY_OR_EXIT(retry--, reset, exit);
+	}
+
+	rc = set_mode(cd, CY_MODE_OPERATIONAL);
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: failed to set mode to operational rc=%d\n",
+			__func__, rc);
+		RETRY_OR_EXIT(retry--, reset, exit);
+	}
+
+	rc = cyttsp4_set_initial_scantype(cd);
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: failed to get scantype rc=%d\n",
+			__func__, rc);
+		RETRY_OR_EXIT(retry--, reset, exit);
+	}
+
+	rc = cyttsp4_get_ttconfig_info(cd);
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: failed to get ttconfig info rc=%d\n",
+			__func__, rc);
+		RETRY_OR_EXIT(retry--, reset, exit);
+	}
+
+	rc = cyttsp4_get_active_refresh_cycle(cd);
+	if (rc < 0)
+		dev_err(cd->dev, "%s: failed to get refresh cycle time rc=%d\n",
+			__func__, rc);
+
+	/* attention startup */
+	call_atten_cb(cd, CY_ATTEN_STARTUP, 0);
+
+	/* restore to sleep if was suspended */
+	mutex_lock(&cd->system_lock);
+	if (cd->sleep_state == SS_SLEEP_ON) {
+		cd->sleep_state = SS_SLEEP_OFF;
+		mutex_unlock(&cd->system_lock);
+		/* watchdog is restarted by cyttsp4_core_sleep_() on error */
+		cyttsp4_core_sleep_(cd);
+		goto exit_no_wd;
+	}
+	mutex_unlock(&cd->system_lock);
+
+exit:
+	cyttsp4_start_wd_timer(cd);
+
+exit_no_wd:
+	if (!detected)
+		rc = -ENODEV;
+
+	/* Required for signal to the TTHE */
+	dev_info(cd->dev, "%s: cyttsp4_exit startup r=%d...\n", __func__, rc);
+
+	return rc;
+}
+
+static int cyttsp4_startup(struct cyttsp4_core_data *cd)
+{
+	int rc;
+
+	mutex_lock(&cd->system_lock);
+	cd->startup_state = STARTUP_RUNNING;
+	mutex_unlock(&cd->system_lock);
+
+	rc = request_exclusive(cd, cd->core,
+			CY_CORE_REQUEST_EXCLUSIVE_TIMEOUT);
+	if (rc < 0) {
+		dev_err(cd->dev, "%s: fail get exclusive ex=%p own=%p\n",
+				__func__, cd->exclusive_dev, cd->core);
+		goto exit;
+	}
+
+	rc = cyttsp4_startup_(cd);
+
+	if (release_exclusive(cd, cd->core) < 0)
+		/* Don't return fail code, mode is already changed. */
+		dev_err(cd->dev, "%s: fail to release exclusive\n", __func__);
+	else
+		dev_vdbg(cd->dev, "%s: pass release exclusive\n", __func__);
+
+exit:
+	mutex_lock(&cd->system_lock);
+	cd->startup_state = STARTUP_NONE;
+	mutex_unlock(&cd->system_lock);
+
+	/* Wake the waiters for end of startup */
+	wake_up(&cd->wait_q);
+
+	return rc;
+}
+
+static void cyttsp4_startup_work_function(struct work_struct *work)
+{
+	struct cyttsp4_core_data *cd =  container_of(work,
+		struct cyttsp4_core_data, startup_work);
+	int rc;
+
+	/*
+	 * Force clear exclusive access
+	 * startup queue is called for abnormal case,
+	 * and when a this called access can be acquired in other context
+	 */
+	mutex_lock(&cd->system_lock);
+	if (cd->exclusive_dev != cd->core)
+		cd->exclusive_dev = NULL;
+	mutex_unlock(&cd->system_lock);
+	rc = cyttsp4_startup(cd);
+	if (rc < 0)
+		dev_err(cd->dev, "%s: Fail queued startup r=%d\n",
+			__func__, rc);
+}
+
+static void cyttsp4_free_si_ptrs(struct cyttsp4_core_data *cd)
+{
+	struct cyttsp4_sysinfo *si = &cd->sysinfo;
+
+	if (!si)
+		return;
+
+	kfree(si->si_ptrs.cydata);
+	kfree(si->si_ptrs.test);
+	kfree(si->si_ptrs.pcfg);
+	kfree(si->si_ptrs.opcfg);
+	kfree(si->si_ptrs.ddata);
+	kfree(si->si_ptrs.mdata);
+	kfree(si->btn);
+	kfree(si->xy_mode);
+	kfree(si->btn_rec_data);
+}
+
+#if defined(CONFIG_PM_RUNTIME)
+static int cyttsp4_core_rt_suspend(struct device *dev)
+{
+	struct cyttsp4_core_data *cd = dev_get_drvdata(dev);
+	int rc;
+
+	rc = cyttsp4_core_sleep(cd);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error on sleep\n", __func__);
+		return -EAGAIN;
+	}
+	return 0;
+}
+
+static int cyttsp4_core_rt_resume(struct device *dev)
+{
+	struct cyttsp4_core_data *cd = dev_get_drvdata(dev);
+	int rc;
+
+	rc = cyttsp4_core_wake(cd);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error on wake\n", __func__);
+		return -EAGAIN;
+	}
+
+	return 0;
+}
+#endif
+
+#if defined(CONFIG_PM_SLEEP)
+static int cyttsp4_core_suspend(struct device *dev)
+{
+	struct cyttsp4_core_data *cd = dev_get_drvdata(dev);
+
+	if (!(cd->pdata->flags & CY_CORE_FLAG_WAKE_ON_GESTURE))
+		return 0;
+
+	/*
+	 * This will not prevent resume
+	 * Required to prevent interrupts before i2c awake
+	 */
+	disable_irq(cd->irq);
+
+	if (device_may_wakeup(dev)) {
+		dev_dbg(dev, "%s Device MAY wakeup\n", __func__);
+		if (!enable_irq_wake(cd->irq))
+			cd->irq_wake = 1;
+	} else {
+		dev_dbg(dev, "%s Device may NOT wakeup\n", __func__);
+	}
+
+	return 0;
+}
+
+static int cyttsp4_core_resume(struct device *dev)
+{
+	struct cyttsp4_core_data *cd = dev_get_drvdata(dev);
+
+	if (!(cd->pdata->flags & CY_CORE_FLAG_WAKE_ON_GESTURE))
+		return 0;
+
+	enable_irq(cd->irq);
+
+	if (device_may_wakeup(dev)) {
+		dev_dbg(dev, "%s Device MAY wakeup\n", __func__);
+		if (cd->irq_wake) {
+			disable_irq_wake(cd->irq);
+			cd->irq_wake = 0;
+		}
+	} else {
+		dev_dbg(dev, "%s Device may NOT wakeup\n", __func__);
+	}
+
+	return 0;
+}
+#endif
+
+static const struct dev_pm_ops cyttsp4_core_pm_ops = {
+	SET_SYSTEM_SLEEP_PM_OPS(cyttsp4_core_suspend, cyttsp4_core_resume)
+	SET_RUNTIME_PM_OPS(cyttsp4_core_rt_suspend, cyttsp4_core_rt_resume,
+			NULL)
+};
+
+/*
+ * Show Firmware version via sysfs
+ */
+static ssize_t cyttsp4_ic_ver_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct cyttsp4_core_data *cd = dev_get_drvdata(dev);
+	struct cyttsp4_cydata *cydata;
+
+	mutex_lock(&cd->system_lock);
+	if (!cd->sysinfo.ready) {
+		if (cd->invalid_touch_app) {
+			mutex_unlock(&cd->system_lock);
+			return snprintf(buf, CY_MAX_PRBUF_SIZE,
+					"Corrupted Touch application!\n");
+		} else {
+			mutex_unlock(&cd->system_lock);
+			return snprintf(buf, CY_MAX_PRBUF_SIZE,
+					"System Information not ready!\n");
+		}
+	}
+	mutex_unlock(&cd->system_lock);
+
+	cydata = cd->sysinfo.si_ptrs.cydata;
+
+	return snprintf(buf, CY_MAX_PRBUF_SIZE,
+		"%s: 0x%02X 0x%02X\n"
+		"%s: 0x%02X\n"
+		"%s: 0x%02X\n"
+		"%s: 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X\n"
+		"%s: 0x%04X\n"
+		"%s: 0x%02X\n"
+		"%s: 0x%02X\n",
+		"TrueTouch Product ID", cydata->ttpidh, cydata->ttpidl,
+		"Firmware Major Version", cydata->fw_ver_major,
+		"Firmware Minor Version", cydata->fw_ver_minor,
+		"Revision Control Number", cydata->revctrl[0],
+		cydata->revctrl[1], cydata->revctrl[2], cydata->revctrl[3],
+		cydata->revctrl[4], cydata->revctrl[5], cydata->revctrl[6],
+		cydata->revctrl[7],
+		"TrueTouch Config Version", cd->sysinfo.ttconfig.version,
+		"Bootloader Major Version", cydata->blver_major,
+		"Bootloader Minor Version", cydata->blver_minor);
+}
+
+/*
+ * Show TT Config version via sysfs
+ */
+static ssize_t cyttsp4_ttconfig_ver_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct cyttsp4_core_data *cd = dev_get_drvdata(dev);
+
+	return snprintf(buf, CY_MAX_PRBUF_SIZE, "0x%04X\n",
+			cd->sysinfo.ttconfig.version);
+}
+
+/*
+ * Show Driver version via sysfs
+ */
+static ssize_t cyttsp4_drv_ver_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	return snprintf(buf, CY_MAX_PRBUF_SIZE,
+		"Driver: %s\nVersion: %s\nDate: %s\n",
+		cy_driver_core_name, cy_driver_core_version,
+		cy_driver_core_date);
+}
+
+/*
+ * HW reset via sysfs
+ */
+static ssize_t cyttsp4_hw_reset_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)
+{
+	struct cyttsp4_core_data *cd = dev_get_drvdata(dev);
+	int rc = 0;
+
+	rc = cyttsp4_startup(cd);
+	if (rc < 0)
+		dev_err(dev, "%s: HW reset failed r=%d\n",
+			__func__, rc);
+
+	return size;
+}
+
+/*
+ * Show IRQ status via sysfs
+ */
+static ssize_t cyttsp4_hw_irq_stat_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct cyttsp4_core_data *cd = dev_get_drvdata(dev);
+	int retval;
+
+	if (cd->pdata->irq_stat) {
+		retval = cd->pdata->irq_stat(cd->pdata, dev);
+		switch (retval) {
+		case 0:
+			return snprintf(buf, CY_MAX_PRBUF_SIZE,
+				"Interrupt line is LOW.\n");
+		case 1:
+			return snprintf(buf, CY_MAX_PRBUF_SIZE,
+				"Interrupt line is HIGH.\n");
+		default:
+			return snprintf(buf, CY_MAX_PRBUF_SIZE,
+				"Function irq_stat() returned %d.\n", retval);
+		}
+	}
+
+	return snprintf(buf, CY_MAX_PRBUF_SIZE,
+		"Function irq_stat() undefined.\n");
+}
+
+/*
+ * Show IRQ enable/disable status via sysfs
+ */
+static ssize_t cyttsp4_drv_irq_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct cyttsp4_core_data *cd = dev_get_drvdata(dev);
+	ssize_t ret;
+
+	mutex_lock(&cd->system_lock);
+	if (cd->irq_enabled)
+		ret = snprintf(buf, CY_MAX_PRBUF_SIZE,
+			"Driver interrupt is ENABLED\n");
+	else
+		ret = snprintf(buf, CY_MAX_PRBUF_SIZE,
+			"Driver interrupt is DISABLED\n");
+	mutex_unlock(&cd->system_lock);
+
+	return ret;
+}
+
+/*
+ * Enable/disable IRQ via sysfs
+ */
+static ssize_t cyttsp4_drv_irq_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)
+{
+	struct cyttsp4_core_data *cd = dev_get_drvdata(dev);
+	unsigned long value;
+	int retval;
+
+	retval = kstrtoul(buf, 10, &value);
+	if (retval < 0) {
+		dev_err(dev, "%s: Invalid value\n", __func__);
+		goto cyttsp4_drv_irq_store_error_exit;
+	}
+
+	mutex_lock(&cd->system_lock);
+	switch (value) {
+	case 0:
+		if (cd->irq_enabled) {
+			cd->irq_enabled = false;
+			/* Disable IRQ */
+			disable_irq_nosync(cd->irq);
+			dev_info(dev, "%s: Driver IRQ now disabled\n",
+				__func__);
+		} else
+			dev_info(dev, "%s: Driver IRQ already disabled\n",
+				__func__);
+		break;
+
+	case 1:
+		if (cd->irq_enabled == false) {
+			cd->irq_enabled = true;
+			/* Enable IRQ */
+			enable_irq(cd->irq);
+			dev_info(dev, "%s: Driver IRQ now enabled\n",
+				__func__);
+		} else
+			dev_info(dev, "%s: Driver IRQ already enabled\n",
+				__func__);
+		break;
+
+	default:
+		dev_err(dev, "%s: Invalid value\n", __func__);
+	}
+	mutex_unlock(&(cd->system_lock));
+
+cyttsp4_drv_irq_store_error_exit:
+
+	return size;
+}
+
+/*
+ * Debugging options via sysfs
+ */
+static ssize_t cyttsp4_drv_debug_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)
+{
+	struct cyttsp4_core_data *cd = dev_get_drvdata(dev);
+	unsigned long value = 0;
+	int rc = 0;
+
+	rc = kstrtoul(buf, 10, &value);
+	if (rc < 0) {
+		dev_err(dev, "%s: Invalid value\n", __func__);
+		goto cyttsp4_drv_debug_store_exit;
+	}
+
+	switch (value) {
+	case CY_DBG_SUSPEND:
+		dev_info(dev, "%s: SUSPEND (cd=%p)\n", __func__, cd);
+		rc = cyttsp4_core_sleep(cd);
+		if (rc)
+			dev_err(dev, "%s: Suspend failed rc=%d\n",
+				__func__, rc);
+		else
+			dev_info(dev, "%s: Suspend succeeded\n", __func__);
+		break;
+
+	case CY_DBG_RESUME:
+		dev_info(dev, "%s: RESUME (cd=%p)\n", __func__, cd);
+		rc = cyttsp4_core_wake(cd);
+		if (rc)
+			dev_err(dev, "%s: Resume failed rc=%d\n",
+				__func__, rc);
+		else
+			dev_info(dev, "%s: Resume succeeded\n", __func__);
+		break;
+	case CY_DBG_SOFT_RESET:
+		dev_info(dev, "%s: SOFT RESET (cd=%p)\n", __func__, cd);
+		rc = cyttsp4_hw_soft_reset(cd);
+		break;
+	case CY_DBG_RESET:
+		dev_info(dev, "%s: HARD RESET (cd=%p)\n", __func__, cd);
+		rc = cyttsp4_hw_hard_reset(cd);
+		break;
+	default:
+		dev_err(dev, "%s: Invalid value\n", __func__);
+	}
+
+cyttsp4_drv_debug_store_exit:
+	return size;
+}
+
+/*
+ * Show system status on deep sleep status via sysfs
+ */
+static ssize_t cyttsp4_sleep_status_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct cyttsp4_core_data *cd = dev_get_drvdata(dev);
+	ssize_t ret;
+
+	mutex_lock(&cd->system_lock);
+	if (cd->sleep_state == SS_SLEEP_ON)
+		ret = snprintf(buf, CY_MAX_PRBUF_SIZE,
+				"Deep Sleep is ENABLED\n");
+	else
+		ret = snprintf(buf, CY_MAX_PRBUF_SIZE,
+				"Deep Sleep is DISABLED\n");
+	mutex_unlock(&cd->system_lock);
+
+	return ret;
+}
+
+static ssize_t cyttsp4_easy_wakeup_gesture_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct cyttsp4_core_data *cd = dev_get_drvdata(dev);
+	ssize_t ret;
+
+	mutex_lock(&cd->system_lock);
+	ret = snprintf(buf, CY_MAX_PRBUF_SIZE, "0x%02X\n",
+			cd->easy_wakeup_gesture);
+	mutex_unlock(&cd->system_lock);
+	return ret;
+}
+
+static ssize_t cyttsp4_easy_wakeup_gesture_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)
+{
+	struct cyttsp4_core_data *cd = dev_get_drvdata(dev);
+	unsigned long value;
+	int ret;
+
+	ret = kstrtoul(buf, 10, &value);
+	if (ret < 0)
+		return ret;
+
+	if (value > 0xFF && value < 0)
+		return -EINVAL;
+
+	pm_runtime_get_sync(dev);
+
+	mutex_lock(&cd->system_lock);
+	if (cd->sysinfo.ready && IS_TTSP_VER_GE(&cd->sysinfo, 2, 5))
+		cd->easy_wakeup_gesture = (u8)value;
+	else
+		ret = -ENODEV;
+	mutex_unlock(&cd->system_lock);
+
+	pm_runtime_put(dev);
+
+	if (ret)
+		return ret;
+
+	return size;
+}
+
+static struct device_attribute attributes[] = {
+	__ATTR(ic_ver, S_IRUGO, cyttsp4_ic_ver_show, NULL),
+	__ATTR(ttconfig_ver, S_IRUGO, cyttsp4_ttconfig_ver_show, NULL),
+	__ATTR(drv_ver, S_IRUGO, cyttsp4_drv_ver_show, NULL),
+	__ATTR(hw_reset, S_IWUSR, NULL, cyttsp4_hw_reset_store),
+	__ATTR(hw_irq_stat, S_IRUSR, cyttsp4_hw_irq_stat_show, NULL),
+	__ATTR(drv_irq, S_IRUSR | S_IWUSR, cyttsp4_drv_irq_show,
+		cyttsp4_drv_irq_store),
+	__ATTR(drv_debug, S_IWUSR, NULL, cyttsp4_drv_debug_store),
+	__ATTR(sleep_status, S_IRUSR, cyttsp4_sleep_status_show, NULL),
+	__ATTR(easy_wakeup_gesture, S_IRUSR | S_IWUSR,
+		cyttsp4_easy_wakeup_gesture_show,
+		cyttsp4_easy_wakeup_gesture_store),
+};
+
+static int add_sysfs_interfaces(struct cyttsp4_core_data *cd,
+		struct device *dev)
+{
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(attributes); i++)
+		if (device_create_file(dev, attributes + i))
+			goto undo;
+
+	return 0;
+undo:
+	for (i--; i >= 0 ; i--)
+		device_remove_file(dev, attributes + i);
+	dev_err(dev, "%s: failed to create sysfs interface\n", __func__);
+	return -ENODEV;
+}
+
+static void remove_sysfs_interfaces(struct cyttsp4_core_data *cd,
+		struct device *dev)
+{
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(attributes); i++)
+		device_remove_file(dev, attributes + i);
+}
+
+static int cyttsp4_core_probe(struct cyttsp4_core *core)
+{
+	struct cyttsp4_core_data *cd;
+	struct device *dev = &core->dev;
+	struct cyttsp4_core_platform_data *pdata = dev_get_platdata(dev);
+	enum cyttsp4_atten_type type;
+	unsigned long irq_flags;
+	int rc = 0;
+
+	dev_info(dev, "%s: startup\n", __func__);
+	dev_dbg(dev, "%s: debug on\n", __func__);
+	dev_vdbg(dev, "%s: verbose debug on\n", __func__);
+
+	if (pdata == NULL) {
+		dev_err(dev, "%s: Missing platform data\n", __func__);
+		rc = -ENODEV;
+		goto error_no_pdata;
+	}
+
+	/* get context and debug print buffers */
+	cd = kzalloc(sizeof(*cd), GFP_KERNEL);
+	if (cd == NULL) {
+		dev_err(dev, "%s: Error, kzalloc\n", __func__);
+		rc = -ENOMEM;
+		goto error_alloc_data;
+	}
+
+	/* Initialize device info */
+	cd->core = core;
+	cd->dev = dev;
+	cd->pdata = pdata;
+	cd->max_xfer = CY_DEFAULT_ADAP_MAX_XFER;
+	if (pdata->max_xfer_len) {
+		if (pdata->max_xfer_len < CY_ADAP_MIN_XFER) {
+			dev_err(dev, "%s: max_xfer_len invalid (min=%d)\n",
+				__func__, CY_ADAP_MIN_XFER);
+			rc = -EINVAL;
+			goto error_max_xfer;
+		}
+		cd->max_xfer = pdata->max_xfer_len;
+		dev_dbg(dev, "%s: max_xfer set to %d\n",
+			__func__, cd->max_xfer);
+	}
+
+	/* Initialize mutexes and spinlocks */
+	mutex_init(&cd->system_lock);
+	mutex_init(&cd->adap_lock);
+	spin_lock_init(&cd->spinlock);
+
+	/* Initialize attention lists */
+	for (type = 0; type < CY_ATTEN_NUM_ATTEN; type++)
+		INIT_LIST_HEAD(&cd->atten_list[type]);
+
+	/* Initialize wait queue */
+	init_waitqueue_head(&cd->wait_q);
+
+	/* Initialize works */
+	INIT_WORK(&cd->startup_work, cyttsp4_startup_work_function);
+	INIT_WORK(&cd->watchdog_work, cyttsp4_watchdog_work);
+
+	/* Initialize IRQ */
+	cd->irq = gpio_to_irq(pdata->irq_gpio);
+	if (cd->irq < 0) {
+		rc = -EINVAL;
+		goto error_gpio_irq;
+	}
+	cd->irq_enabled = true;
+
+	dev_set_drvdata(dev, cd);
+
+	/* Call platform init function */
+	if (cd->pdata->init) {
+		dev_info(cd->dev, "%s: Init HW\n", __func__);
+		rc = cd->pdata->init(cd->pdata, 1, cd->dev);
+	} else {
+		dev_info(cd->dev, "%s: No HW INIT function\n", __func__);
+		rc = 0;
+	}
+	if (rc < 0)
+		dev_err(cd->dev, "%s: HW Init fail r=%d\n", __func__, rc);
+
+	/* Call platform detect function */
+	if (cd->pdata->detect) {
+		dev_info(cd->dev, "%s: Detect HW\n", __func__);
+		rc = cd->pdata->detect(cd->pdata, cd->dev,
+				cyttsp4_platform_detect_read);
+		if (rc) {
+			dev_info(cd->dev, "%s: No HW detected\n", __func__);
+			rc = -ENODEV;
+			goto error_detect;
+		}
+	}
+
+	dev_dbg(dev, "%s: initialize threaded irq=%d\n", __func__, cd->irq);
+	if (cd->pdata->level_irq_udelay > 0)
+		/* use level triggered interrupts */
+		irq_flags = IRQF_TRIGGER_LOW | IRQF_ONESHOT;
+	else
+		/* use edge triggered interrupts */
+		irq_flags = IRQF_TRIGGER_FALLING | IRQF_ONESHOT;
+
+	rc = request_threaded_irq(cd->irq, cyttsp4_hard_irq, cyttsp4_irq,
+			irq_flags, dev_name(dev), cd);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error, could not request irq\n", __func__);
+		goto error_request_irq;
+	}
+
+	/* Setup watchdog timer */
+	setup_timer(&cd->watchdog_timer, cyttsp4_watchdog_timer,
+		(unsigned long)cd);
+
+	pm_runtime_enable(dev);
+
+	/*
+	 * call startup directly to ensure that the device
+	 * is tested before leaving the probe
+	 */
+	dev_dbg(dev, "%s: call startup\n", __func__);
+
+	pm_runtime_get_sync(dev);
+	rc = cyttsp4_startup(cd);
+	pm_runtime_put(dev);
+
+	/* Do not fail probe if startup fails but the device is detected */
+	if (rc == -ENODEV) {
+		dev_err(cd->dev, "%s: Fail initial startup r=%d\n",
+			__func__, rc);
+		goto error_startup;
+	}
+
+	if (IS_TTSP_VER_GE(&cd->sysinfo, 2, 5))
+		cd->easy_wakeup_gesture = pdata->easy_wakeup_gesture;
+	else
+		cd->easy_wakeup_gesture = 0xFF;
+
+	dev_dbg(dev, "%s: add sysfs interfaces\n", __func__);
+	rc = add_sysfs_interfaces(cd, dev);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error, fail sysfs init\n", __func__);
+		goto error_startup;
+	}
+
+	device_init_wakeup(dev, 1);
+
+	dev_dbg(dev, "%s: ok\n", __func__);
+	return 0;
+
+error_startup:
+	cancel_work_sync(&cd->startup_work);
+	cyttsp4_stop_wd_timer(cd);
+	pm_runtime_disable(dev);
+	cyttsp4_free_si_ptrs(cd);
+	free_irq(cd->irq, cd);
+error_request_irq:
+error_detect:
+	if (pdata->init)
+		pdata->init(pdata, 0, dev);
+	dev_set_drvdata(dev, NULL);
+error_gpio_irq:
+error_max_xfer:
+	kfree(cd);
+error_alloc_data:
+error_no_pdata:
+	dev_err(dev, "%s failed.\n", __func__);
+	return rc;
+}
+
+static int cyttsp4_core_release(struct cyttsp4_core *core)
+{
+	struct device *dev = &core->dev;
+	struct cyttsp4_core_data *cd = dev_get_drvdata(dev);
+
+	dev_dbg(dev, "%s\n", __func__);
+
+	/*
+	 * Suspend the device before freeing the startup_work and stopping
+	 * the watchdog since sleep function restarts watchdog on failure
+	 */
+	pm_runtime_suspend(dev);
+	pm_runtime_disable(dev);
+
+	cancel_work_sync(&cd->startup_work);
+
+	cyttsp4_stop_wd_timer(cd);
+
+	remove_sysfs_interfaces(cd, dev);
+	free_irq(cd->irq, cd);
+	if (cd->pdata->init)
+		cd->pdata->init(cd->pdata, 0, dev);
+	dev_set_drvdata(dev, NULL);
+	cyttsp4_free_si_ptrs(cd);
+	kfree(cd);
+	return 0;
+}
+
+static struct cyttsp4_core_driver cyttsp4_core_driver = {
+	.probe = cyttsp4_core_probe,
+	.remove = cyttsp4_core_release,
+	.subscribe_attention = cyttsp4_subscribe_attention_,
+	.unsubscribe_attention = cyttsp4_unsubscribe_attention_,
+	.request_exclusive = cyttsp4_request_exclusive_,
+	.release_exclusive = cyttsp4_release_exclusive_,
+	.request_reset = cyttsp4_request_reset_,
+	.request_restart = cyttsp4_request_restart_,
+	.request_set_mode = cyttsp4_request_set_mode_,
+	.request_sysinfo = cyttsp4_request_sysinfo_,
+	.request_loader_pdata = cyttsp4_request_loader_pdata_,
+	.request_handshake = cyttsp4_request_handshake_,
+	.request_exec_cmd = cyttsp4_request_exec_cmd_,
+	.request_stop_wd = cyttsp4_request_stop_wd_,
+	.request_toggle_lowpower = cyttsp4_request_toggle_lowpower_,
+	.request_config_row_size = cyttsp4_request_config_row_size_,
+	.request_write_config = cyttsp4_request_write_config_,
+	.request_enable_scan_type = cyttsp4_request_enable_scan_type_,
+	.request_disable_scan_type = cyttsp4_request_disable_scan_type_,
+	.get_security_key = cyttsp4_get_security_key_,
+	.get_touch_record = cyttsp4_get_touch_record_,
+	.write = cyttsp4_write_,
+	.read = cyttsp4_read_,
+	.driver = {
+		.name = CYTTSP4_CORE_NAME,
+		.bus = &cyttsp4_bus_type,
+		.owner = THIS_MODULE,
+		.pm = &cyttsp4_core_pm_ops,
+	},
+};
+
+static int __init cyttsp4_core_init(void)
+{
+	int rc = 0;
+
+	rc = cyttsp4_register_core_driver(&cyttsp4_core_driver);
+	pr_info("%s: Cypress TTSP v4 core driver (Built %s) rc=%d\n",
+		 __func__, CY_DRIVER_DATE, rc);
+	return rc;
+}
+module_init(cyttsp4_core_init);
+
+static void __exit cyttsp4_core_exit(void)
+{
+	cyttsp4_unregister_core_driver(&cyttsp4_core_driver);
+	pr_info("%s: module exit\n", __func__);
+}
+module_exit(cyttsp4_core_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Cypress TrueTouch(R) Standard touchscreen core driver");
+MODULE_AUTHOR("Aleksej Makarov <aleksej.makarov@sonyericsson.com>");
diff --git a/drivers/input/touchscreen/cypress/cyttsp4_debug.c b/drivers/input/touchscreen/cypress/cyttsp4_debug.c
new file mode 100644
index 0000000..18e56da
--- /dev/null
+++ b/drivers/input/touchscreen/cypress/cyttsp4_debug.c
@@ -0,0 +1,608 @@
+/*
+ * cyttsp4_debug.c
+ * Cypress TrueTouch(TM) Standard Product V4 Core driver module.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2012 Cypress Semiconductor
+ * Copyright (C) 2011 Sony Ericsson Mobile Communications AB.
+ *
+ * Author: Aleksej Makarov <aleksej.makarov@sonyericsson.com>
+ * Modified by: Cypress Semiconductor to add device functions
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#include <linux/cyttsp4_bus.h>
+#include <linux/cyttsp4_core.h>
+
+#include <linux/delay.h>
+#include <linux/gpio.h>
+#include <linux/input.h>
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+#include <linux/limits.h>
+#include <linux/module.h>
+#include <linux/pm_runtime.h>
+#include <linux/sched.h>
+#include <linux/slab.h>
+#include <linux/workqueue.h>
+
+#include "cyttsp4_regs.h"
+
+#define CYTTSP4_DEBUG_NAME "cyttsp4_debug"
+
+enum cyttsp4_monitor_status {
+	CY_MNTR_DISABLED,
+	CY_MNTR_ENABLED,
+};
+
+struct cyttsp4_sensor_monitor {
+	enum cyttsp4_monitor_status mntr_status;
+	u8 sensor_data[150];		/* operational sensor data */
+};
+
+struct cyttsp4_debug_data {
+	struct cyttsp4_device *ttsp;
+	struct cyttsp4_debug_platform_data *pdata;
+	struct cyttsp4_sysinfo *si;
+	uint32_t interrupt_count;
+	uint32_t formated_output;
+	struct mutex sysfs_lock;
+	struct cyttsp4_sensor_monitor monitor;
+	u8 pr_buf[CY_MAX_PRBUF_SIZE];
+};
+
+struct cyttsp4_debug_platform_data {
+	char const *debug_dev_name;
+};
+
+/*
+ * This function provide output of combined xy_mode and xy_data.
+ * Required by TTHE.
+ */
+static void cyttsp4_pr_buf_op_mode(struct device *dev, u8 *pr_buf,
+		struct cyttsp4_sysinfo *si, u8 cur_touch)
+{
+	int i, k;
+	const char fmt[] = "%02X ";
+	int max = (CY_MAX_PRBUF_SIZE - 1) - sizeof(CY_PR_TRUNCATED);
+	int total_size = si->si_ofs.mode_size
+			+ (cur_touch * si->si_ofs.tch_rec_size);
+	u8 num_btns = si->si_ofs.num_btns;
+
+	pr_buf[0] = 0;
+	for (i = k = 0; i < si->si_ofs.mode_size && i < max; i++, k += 3)
+		scnprintf(pr_buf + k, CY_MAX_PRBUF_SIZE, fmt, si->xy_mode[i]);
+
+	for (i = 0; i < (cur_touch * si->si_ofs.tch_rec_size) && i < max;
+			i++, k += 3)
+		scnprintf(pr_buf + k, CY_MAX_PRBUF_SIZE, fmt, si->xy_data[i]);
+
+	if (num_btns) {
+		/* print btn diff data for TTHE */
+		scnprintf(pr_buf + k, CY_MAX_PRBUF_SIZE, "%s", "=");
+		k++;
+		for (i = 0; i < (num_btns * si->si_ofs.btn_rec_size) && i < max;
+				i++, k += 3)
+			scnprintf(pr_buf + k, CY_MAX_PRBUF_SIZE, fmt,
+					si->btn_rec_data[i]);
+		total_size += num_btns * si->si_ofs.btn_rec_size + 1;
+	}
+	pr_info("%s=%s%s\n", "cyttsp4_OpModeData", pr_buf,
+			total_size <= max ? "" : CY_PR_TRUNCATED);
+}
+
+static void cyttsp4_debug_print(struct device *dev, u8 *pr_buf, u8 *sptr,
+		int size, const char *data_name)
+{
+	int i, j;
+	int elem_size = sizeof("XX ") - 1;
+	int max = (CY_MAX_PRBUF_SIZE - 1) / elem_size;
+	int limit = size < max ? size : max;
+
+	if (limit < 0)
+		limit = 0;
+
+	pr_buf[0] = 0;
+	for (i = j = 0; i < limit; i++, j += elem_size)
+		scnprintf(pr_buf + j, CY_MAX_PRBUF_SIZE - j, "%02X ", sptr[i]);
+
+	pr_info("%s[0..%d]=%s%s\n", data_name, size ? size - 1 : 0, pr_buf,
+			size <= max ? "" : CY_PR_TRUNCATED);
+}
+
+static void cyttsp4_debug_formated(struct device *dev, u8 *pr_buf,
+		struct cyttsp4_sysinfo *si, u8 num_cur_rec)
+{
+	u8 mode_size = si->si_ofs.mode_size;
+	u8 rep_len = si->xy_mode[si->si_ofs.rep_ofs];
+	u8 tch_rec_size = si->si_ofs.tch_rec_size;
+	u8 num_btns = si->si_ofs.num_btns;
+	u8 num_btn_regs = (num_btns + CY_NUM_BTN_PER_REG - 1)
+			/ CY_NUM_BTN_PER_REG;
+	u8 num_btn_tch;
+	u8 data_name[] = "touch[99]";
+	int max_print_length = 18;
+	int i;
+
+	/* xy_mode */
+	cyttsp4_debug_print(dev, pr_buf, si->xy_mode, mode_size, "xy_mode");
+
+	/* xy_data */
+	if (rep_len > max_print_length) {
+		pr_info("xy_data[0..%d]:\n", rep_len);
+		for (i = 0; i < rep_len - max_print_length;
+				i += max_print_length) {
+			cyttsp4_debug_print(dev, pr_buf, si->xy_data + i,
+					max_print_length, " ");
+		}
+		if (rep_len - i)
+			cyttsp4_debug_print(dev, pr_buf, si->xy_data + i,
+					rep_len - i, " ");
+	} else {
+		cyttsp4_debug_print(dev, pr_buf, si->xy_data,
+				rep_len - si->si_ofs.rep_hdr_size, "xy_data");
+	}
+
+	/* touches */
+	for (i = 0; i < num_cur_rec; i++) {
+		scnprintf(data_name, sizeof(data_name) - 1, "touch[%u]", i);
+		cyttsp4_debug_print(dev, pr_buf,
+				si->xy_data + (i * tch_rec_size),
+				tch_rec_size, data_name);
+	}
+
+	/* buttons */
+	if (num_btns) {
+		num_btn_tch = 0;
+		for (i = 0; i < num_btn_regs; i++) {
+			if (si->xy_mode[si->si_ofs.rep_ofs + 2 + i]) {
+				num_btn_tch++;
+				break;
+			}
+		}
+		if (num_btn_tch)
+			cyttsp4_debug_print(dev, pr_buf,
+					&si->xy_mode[si->si_ofs.rep_ofs + 2],
+					num_btn_regs, "button");
+	}
+}
+
+/* read xy_data for all touches for debug */
+static int cyttsp4_xy_worker(struct cyttsp4_debug_data *dd)
+{
+	struct device *dev = &dd->ttsp->dev;
+	struct cyttsp4_sysinfo *si = dd->si;
+	u8 tt_stat = si->xy_mode[si->si_ofs.tt_stat_ofs];
+	u8 num_cur_rec = GET_NUM_TOUCH_RECORDS(tt_stat);
+	uint32_t formated_output;
+	int rc;
+
+	mutex_lock(&dd->sysfs_lock);
+	dd->interrupt_count++;
+	formated_output = dd->formated_output;
+	mutex_unlock(&dd->sysfs_lock);
+
+	/* Read command parameters */
+	rc = cyttsp4_read(dd->ttsp, CY_MODE_OPERATIONAL,
+			si->si_ofs.cmd_ofs + 1,
+			&si->xy_mode[si->si_ofs.cmd_ofs + 1],
+			si->si_ofs.rep_ofs - si->si_ofs.cmd_ofs - 1);
+	if (rc < 0) {
+		dev_err(dev, "%s: read fail on command parameter regs r=%d\n",
+				__func__, rc);
+	}
+
+	if (si->si_ofs.num_btns > 0) {
+		/* read button diff data */
+		rc = cyttsp4_read(dd->ttsp, CY_MODE_OPERATIONAL,
+				/*  replace with btn_diff_ofs when that field
+				 *  becomes supported in the firmware */
+				si->si_ofs.tt_stat_ofs + 1 +
+				si->si_ofs.max_tchs * si->si_ofs.tch_rec_size,
+				si->btn_rec_data,
+				si->si_ofs.num_btns * si->si_ofs.btn_rec_size);
+		if (rc < 0) {
+			dev_err(dev, "%s: read fail on button regs r=%d\n",
+					__func__, rc);
+		}
+	}
+
+	/* Interrupt */
+	pr_info("Interrupt(%u)\n", dd->interrupt_count);
+
+	if (formated_output)
+		cyttsp4_debug_formated(dev, dd->pr_buf, si, num_cur_rec);
+	else
+		/* print data for TTHE */
+		cyttsp4_pr_buf_op_mode(dev, dd->pr_buf, si, num_cur_rec);
+
+	if (dd->monitor.mntr_status == CY_MNTR_ENABLED) {
+		int offset = (si->si_ofs.max_tchs * si->si_ofs.tch_rec_size)
+				+ (si->si_ofs.num_btns
+					* si->si_ofs.btn_rec_size)
+				+ (si->si_ofs.tt_stat_ofs + 1);
+		rc = cyttsp4_read(dd->ttsp, CY_MODE_OPERATIONAL,
+				offset, &(dd->monitor.sensor_data[0]), 150);
+		if (rc < 0)
+			dev_err(dev, "%s: read fail on sensor monitor regs r=%d\n",
+					__func__, rc);
+		/* print data for the sensor monitor */
+		cyttsp4_debug_print(dev, dd->pr_buf, dd->monitor.sensor_data,
+				150, "cyttsp4_sensor_monitor");
+	}
+
+	pr_info("\n");
+
+	dev_vdbg(dev, "%s: done\n", __func__);
+
+	return 0;
+}
+
+static int cyttsp4_debug_op_attention(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_debug_data *dd = dev_get_drvdata(dev);
+	int rc = 0;
+
+	dev_vdbg(dev, "%s\n", __func__);
+
+	/* core handles handshake */
+	rc = cyttsp4_xy_worker(dd);
+	if (rc < 0)
+		dev_err(dev, "%s: xy_worker error r=%d\n", __func__, rc);
+
+	return rc;
+}
+
+static int cyttsp4_debug_cat_attention(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_debug_data *dd = dev_get_drvdata(dev);
+	struct cyttsp4_sysinfo *si = dd->si;
+	u8 cat_masked_cmd;
+
+	dev_vdbg(dev, "%s\n", __func__);
+
+	/* Check for CaT command executed */
+	cat_masked_cmd = si->xy_mode[CY_REG_CAT_CMD] & CY_CMD_MASK;
+	if (cat_masked_cmd == CY_CMD_CAT_START_SENSOR_DATA_MODE) {
+		dev_vdbg(dev, "%s: Sensor data mode enabled\n", __func__);
+		dd->monitor.mntr_status = CY_MNTR_ENABLED;
+	} else if (cat_masked_cmd == CY_CMD_CAT_STOP_SENSOR_DATA_MODE) {
+		dev_vdbg(dev, "%s: Sensor data mode disabled\n", __func__);
+		dd->monitor.mntr_status = CY_MNTR_DISABLED;
+	}
+
+	return 0;
+}
+
+static int cyttsp4_debug_startup_attention(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_debug_data *dd = dev_get_drvdata(dev);
+
+	dev_vdbg(dev, "%s\n", __func__);
+
+	dd->monitor.mntr_status = CY_MNTR_DISABLED;
+
+	return 0;
+}
+
+static ssize_t cyttsp4_interrupt_count_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct cyttsp4_debug_data *dd = dev_get_drvdata(dev);
+	int val;
+
+	mutex_lock(&dd->sysfs_lock);
+	val = dd->interrupt_count;
+	mutex_unlock(&dd->sysfs_lock);
+
+	return scnprintf(buf, CY_MAX_PRBUF_SIZE, "Interrupt Count: %d\n", val);
+}
+
+static ssize_t cyttsp4_interrupt_count_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)
+{
+	struct cyttsp4_debug_data *dd = dev_get_drvdata(dev);
+	mutex_lock(&dd->sysfs_lock);
+	dd->interrupt_count = 0;
+	mutex_unlock(&dd->sysfs_lock);
+	return size;
+}
+
+static DEVICE_ATTR(int_count, S_IRUSR | S_IWUSR,
+	cyttsp4_interrupt_count_show, cyttsp4_interrupt_count_store);
+
+static ssize_t cyttsp4_formated_output_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct cyttsp4_debug_data *dd = dev_get_drvdata(dev);
+	int val;
+
+	mutex_lock(&dd->sysfs_lock);
+	val = dd->formated_output;
+	mutex_unlock(&dd->sysfs_lock);
+
+	return scnprintf(buf, CY_MAX_PRBUF_SIZE,
+			"Formated debug output: %x\n", val);
+}
+
+static ssize_t cyttsp4_formated_output_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)
+{
+	struct cyttsp4_debug_data *dd = dev_get_drvdata(dev);
+	unsigned long value;
+	int rc;
+
+	rc = kstrtoul(buf, 10, &value);
+	if (rc < 0) {
+		dev_err(dev, "%s: Invalid value\n", __func__);
+		return size;
+	}
+
+	/* Expecting only 0 or 1 */
+	if (value != 0 && value != 1) {
+		dev_err(dev, "%s: Invalid value %lu\n", __func__, value);
+		return size;
+	}
+
+	mutex_lock(&dd->sysfs_lock);
+	dd->formated_output = value;
+	mutex_unlock(&dd->sysfs_lock);
+	return size;
+}
+
+static DEVICE_ATTR(formated_output, S_IRUSR | S_IWUSR,
+	cyttsp4_formated_output_show, cyttsp4_formated_output_store);
+
+static int cyttsp4_debug_probe(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_debug_data *dd;
+	struct cyttsp4_debug_platform_data *pdata = dev_get_platdata(dev);
+	int rc;
+
+	dev_info(dev, "%s: startup\n", __func__);
+	dev_dbg(dev, "%s: debug on\n", __func__);
+	dev_vdbg(dev, "%s: verbose debug on\n", __func__);
+
+	/* get context and debug print buffers */
+	dd = kzalloc(sizeof(*dd), GFP_KERNEL);
+	if (dd == NULL) {
+		dev_err(dev, "%s: Error, kzalloc\n", __func__);
+		rc = -ENOMEM;
+		goto cyttsp4_debug_probe_alloc_failed;
+	}
+
+	rc = device_create_file(dev, &dev_attr_int_count);
+	if (rc) {
+		dev_err(dev, "%s: Error, could not create int_count\n",
+				__func__);
+		goto cyttsp4_debug_probe_create_int_count_failed;
+	}
+
+	rc = device_create_file(dev, &dev_attr_formated_output);
+	if (rc) {
+		dev_err(dev, "%s: Error, could not create formated_output\n",
+				__func__);
+		goto cyttsp4_debug_probe_create_formated_failed;
+	}
+
+	mutex_init(&dd->sysfs_lock);
+	dd->ttsp = ttsp;
+	dd->pdata = pdata;
+	dev_set_drvdata(dev, dd);
+
+	pm_runtime_enable(dev);
+
+	dd->si = cyttsp4_request_sysinfo(ttsp);
+	if (dd->si == NULL) {
+		dev_err(dev, "%s: Fail get sysinfo pointer from core\n",
+				__func__);
+		rc = -ENODEV;
+		goto cyttsp4_debug_probe_sysinfo_failed;
+	}
+
+	rc = cyttsp4_subscribe_attention(ttsp, CY_ATTEN_IRQ,
+		cyttsp4_debug_op_attention, CY_MODE_OPERATIONAL);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error, could not subscribe Operating mode attention cb\n",
+				__func__);
+		goto cyttsp4_debug_probe_subscribe_op_failed;
+	}
+
+	rc = cyttsp4_subscribe_attention(ttsp, CY_ATTEN_IRQ,
+		cyttsp4_debug_cat_attention, CY_MODE_CAT);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error, could not subscribe CaT mode attention cb\n",
+				__func__);
+		goto cyttsp4_debug_probe_subscribe_cat_failed;
+	}
+
+	rc = cyttsp4_subscribe_attention(ttsp, CY_ATTEN_STARTUP,
+		cyttsp4_debug_startup_attention, 0);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error, could not subscribe startup attention cb\n",
+				__func__);
+		goto cyttsp4_debug_probe_subscribe_startup_failed;
+	}
+	return 0;
+
+cyttsp4_debug_probe_subscribe_startup_failed:
+	cyttsp4_unsubscribe_attention(ttsp, CY_ATTEN_IRQ,
+		cyttsp4_debug_cat_attention, CY_MODE_CAT);
+cyttsp4_debug_probe_subscribe_cat_failed:
+	cyttsp4_unsubscribe_attention(ttsp, CY_ATTEN_IRQ,
+		cyttsp4_debug_op_attention, CY_MODE_OPERATIONAL);
+cyttsp4_debug_probe_subscribe_op_failed:
+cyttsp4_debug_probe_sysinfo_failed:
+	pm_runtime_suspend(dev);
+	pm_runtime_disable(dev);
+	dev_set_drvdata(dev, NULL);
+	device_remove_file(dev, &dev_attr_formated_output);
+cyttsp4_debug_probe_create_formated_failed:
+	device_remove_file(dev, &dev_attr_int_count);
+cyttsp4_debug_probe_create_int_count_failed:
+	kfree(dd);
+cyttsp4_debug_probe_alloc_failed:
+	dev_err(dev, "%s failed.\n", __func__);
+	return rc;
+}
+
+static int cyttsp4_debug_release(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_debug_data *dd = dev_get_drvdata(dev);
+	int rc = 0;
+	dev_dbg(dev, "%s\n", __func__);
+
+	if (dev_get_drvdata(&ttsp->core->dev) == NULL) {
+		dev_err(dev, "%s: Unable to un-subscribe attention\n",
+				__func__);
+		goto cyttsp4_debug_release_exit;
+	}
+
+	/* Unsubscribe from attentions */
+	cyttsp4_unsubscribe_attention(ttsp, CY_ATTEN_IRQ,
+		cyttsp4_debug_op_attention, CY_MODE_OPERATIONAL);
+	cyttsp4_unsubscribe_attention(ttsp, CY_ATTEN_IRQ,
+		cyttsp4_debug_cat_attention, CY_MODE_CAT);
+	cyttsp4_unsubscribe_attention(ttsp, CY_ATTEN_STARTUP,
+		cyttsp4_debug_startup_attention, 0);
+
+cyttsp4_debug_release_exit:
+	pm_runtime_suspend(dev);
+	pm_runtime_disable(dev);
+	device_remove_file(dev, &dev_attr_int_count);
+	dev_set_drvdata(dev, NULL);
+	kfree(dd);
+
+	return rc;
+}
+
+static struct cyttsp4_driver cyttsp4_debug_driver = {
+	.probe = cyttsp4_debug_probe,
+	.remove = cyttsp4_debug_release,
+	.driver = {
+		.name = CYTTSP4_DEBUG_NAME,
+		.bus = &cyttsp4_bus_type,
+		.owner = THIS_MODULE,
+	},
+};
+
+static struct cyttsp4_debug_platform_data
+	_cyttsp4_debug_platform_data = {
+	.debug_dev_name = CYTTSP4_DEBUG_NAME,
+};
+
+static const char cyttsp4_debug_name[] = CYTTSP4_DEBUG_NAME;
+static struct cyttsp4_device_info
+	cyttsp4_debug_infos[CY_MAX_NUM_CORE_DEVS];
+
+static char *core_ids[CY_MAX_NUM_CORE_DEVS] = {
+	CY_DEFAULT_CORE_ID,
+	NULL,
+	NULL,
+	NULL,
+	NULL
+};
+
+static int num_core_ids = 1;
+
+module_param_array(core_ids, charp, &num_core_ids, 0);
+MODULE_PARM_DESC(core_ids,
+	"Core id list of cyttsp4 core devices for debug module");
+
+static int __init cyttsp4_debug_init(void)
+{
+	int rc = 0;
+	int i, j;
+
+	/* Check for invalid or duplicate core_ids */
+	for (i = 0; i < num_core_ids; i++) {
+		if (!strlen(core_ids[i])) {
+			pr_err("%s: core_id %d is empty\n",
+				__func__, i+1);
+			return -EINVAL;
+		}
+		for (j = i+1; j < num_core_ids; j++)
+			if (!strcmp(core_ids[i], core_ids[j])) {
+				pr_err("%s: core_ids %d and %d are same\n",
+					__func__, i+1, j+1);
+				return -EINVAL;
+			}
+	}
+
+	for (i = 0; i < num_core_ids; i++) {
+		cyttsp4_debug_infos[i].name = cyttsp4_debug_name;
+		cyttsp4_debug_infos[i].core_id = core_ids[i];
+		cyttsp4_debug_infos[i].platform_data =
+			&_cyttsp4_debug_platform_data;
+		pr_info("%s: Registering debug device for core_id: %s\n",
+			__func__, cyttsp4_debug_infos[i].core_id);
+		rc = cyttsp4_register_device(&cyttsp4_debug_infos[i]);
+		if (rc < 0) {
+			pr_err("%s: Error, failed registering device\n",
+				__func__);
+			goto fail_unregister_devices;
+		}
+	}
+	rc = cyttsp4_register_driver(&cyttsp4_debug_driver);
+	if (rc) {
+		pr_err("%s: Error, failed registering driver\n", __func__);
+		goto fail_unregister_devices;
+	}
+
+	pr_info("%s: Cypress TTSP Debug (Built %s) rc=%d\n",
+		 __func__, CY_DRIVER_DATE, rc);
+	return 0;
+
+fail_unregister_devices:
+	for (i--; i >= 0; i--) {
+		cyttsp4_unregister_device(cyttsp4_debug_infos[i].name,
+			cyttsp4_debug_infos[i].core_id);
+		pr_info("%s: Unregistering device access device for core_id: %s\n",
+			__func__, cyttsp4_debug_infos[i].core_id);
+	}
+	return rc;
+}
+module_init(cyttsp4_debug_init);
+
+static void __exit cyttsp4_debug_exit(void)
+{
+	int i;
+
+	cyttsp4_unregister_driver(&cyttsp4_debug_driver);
+	for (i = 0; i < num_core_ids; i++) {
+		cyttsp4_unregister_device(cyttsp4_debug_infos[i].name,
+			cyttsp4_debug_infos[i].core_id);
+		pr_info("%s: Unregistering debug device for core_id: %s\n",
+			__func__, cyttsp4_debug_infos[i].core_id);
+	}
+	pr_info("%s: module exit\n", __func__);
+}
+module_exit(cyttsp4_debug_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Cypress TrueTouch(R) Standard touchscreen debug driver");
+MODULE_AUTHOR("Cypress Semiconductor");
diff --git a/drivers/input/touchscreen/cypress/cyttsp4_device_access.c b/drivers/input/touchscreen/cypress/cyttsp4_device_access.c
new file mode 100644
index 0000000..1dce67e
--- /dev/null
+++ b/drivers/input/touchscreen/cypress/cyttsp4_device_access.c
@@ -0,0 +1,2208 @@
+/*
+ * cyttsp4_device_access.c
+ * Cypress TrueTouch(TM) Standard Product V4 Device Access module.
+ * Configuration and Test command/status user interface.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2012 Cypress Semiconductor
+ * Copyright (C) 2011 Sony Ericsson Mobile Communications AB.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#include <linux/cyttsp4_bus.h>
+#include <linux/cyttsp4_core.h>
+#include <linux/cyttsp4_mt.h>
+
+#include <linux/delay.h>
+#include <linux/gpio.h>
+#include <linux/input.h>
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+#include <linux/limits.h>
+#include <linux/module.h>
+#include <linux/pm_runtime.h>
+#include <linux/sched.h>
+#include <linux/slab.h>
+#include <linux/wait.h>
+#include <linux/workqueue.h>
+#include "cyttsp4_device_access.h"
+#include "cyttsp4_regs.h"
+
+#define CY_MAX_CONFIG_BYTES    256
+#define CY_CMD_INDEX             0
+#define CY_NULL_CMD_INDEX        1
+#define CY_NULL_CMD_MODE_INDEX   2
+#define CY_NULL_CMD_SIZE_INDEX   3
+#define CY_NULL_CMD_SIZEL_INDEX  2
+#define CY_NULL_CMD_SIZEH_INDEX  3
+
+struct heatmap_param {
+	bool scan_start;
+	enum cyttsp4_scan_data_type data_type; /* raw, base, diff */
+	int num_element;
+};
+
+struct cyttsp4_device_access_data {
+	struct cyttsp4_device *ttsp;
+	struct cyttsp4_device_access_platform_data *pdata;
+	struct cyttsp4_sysinfo *si;
+	struct cyttsp4_test_mode_params test;
+	struct mutex sysfs_lock;
+	uint32_t ic_grpnum;
+	uint32_t ic_grpoffset;
+	bool own_exclusive;
+	bool sysfs_nodes_created;
+#ifdef VERBOSE_DEBUG
+	u8 pr_buf[CY_MAX_PRBUF_SIZE];
+#endif
+	wait_queue_head_t wait_q;
+	u8 ic_buf[CY_MAX_PRBUF_SIZE];
+	u8 return_buf[CY_MAX_PRBUF_SIZE];
+	struct heatmap_param heatmap;
+};
+
+/*
+ * Show function prototype.
+ * Returns response length or Linux error code on error.
+ */
+typedef int (*cyttsp4_show_function) (struct device *dev, u8 *ic_buf,
+		size_t length);
+
+/*
+ * Store function prototype.
+ * Returns Linux error code on error.
+ */
+typedef int (*cyttsp4_store_function) (struct device *dev, u8 *ic_buf,
+		size_t length);
+
+/*
+ * grpdata show function to be used by
+ * reserved and not implemented ic group numbers.
+ */
+static int cyttsp4_grpdata_show_void (struct device *dev, u8 *ic_buf,
+		size_t length)
+{
+	return -ENOSYS;
+}
+
+/*
+ * grpdata store function to be used by
+ * reserved and not implemented ic group numbers.
+ */
+static int cyttsp4_grpdata_store_void (struct device *dev, u8 *ic_buf,
+		size_t length)
+{
+	return -ENOSYS;
+}
+
+/*
+ * SysFs group number entry show function.
+ */
+static ssize_t cyttsp4_ic_grpnum_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	int val = 0;
+
+	mutex_lock(&dad->sysfs_lock);
+	val = dad->ic_grpnum;
+	mutex_unlock(&dad->sysfs_lock);
+
+	return scnprintf(buf, CY_MAX_PRBUF_SIZE, "Current Group: %d\n", val);
+}
+
+/*
+ * SysFs group number entry store function.
+ */
+static ssize_t cyttsp4_ic_grpnum_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	unsigned long value;
+	int prev_grpnum;
+	int rc;
+
+	rc = kstrtoul(buf, 10, &value);
+	if (rc < 0) {
+		dev_err(dev, "%s: Invalid value\n", __func__);
+		return size;
+	}
+
+	if (value >= CY_IC_GRPNUM_NUM) {
+		dev_err(dev, "%s: Group %lu does not exist.\n",
+				__func__, value);
+		return size;
+	}
+
+	if (value > 0xFF)
+		value = 0xFF;
+
+	mutex_lock(&dad->sysfs_lock);
+	/*
+	 * Block grpnum change when own_exclusive flag is set
+	 * which means the current grpnum implementation requires
+	 * running exclusively on some consecutive grpdata operations
+	 */
+	if (dad->own_exclusive) {
+		mutex_unlock(&dad->sysfs_lock);
+		dev_err(dev, "%s: own_exclusive\n", __func__);
+		return -EBUSY;
+	}
+	prev_grpnum = dad->ic_grpnum;
+	dad->ic_grpnum = (int) value;
+	mutex_unlock(&dad->sysfs_lock);
+
+	dev_vdbg(dev, "%s: ic_grpnum=%d, return size=%d\n",
+			__func__, (int)value, (int)size);
+	return size;
+}
+
+static DEVICE_ATTR(ic_grpnum, S_IRUSR | S_IWUSR,
+		   cyttsp4_ic_grpnum_show, cyttsp4_ic_grpnum_store);
+
+/*
+ * SysFs group offset entry show function.
+ */
+static ssize_t cyttsp4_ic_grpoffset_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	int val = 0;
+
+	mutex_lock(&dad->sysfs_lock);
+	val = dad->ic_grpoffset;
+	mutex_unlock(&dad->sysfs_lock);
+
+	return scnprintf(buf, CY_MAX_PRBUF_SIZE, "Current Offset: %d\n", val);
+}
+
+/*
+ * SysFs group offset entry store function.
+ */
+static ssize_t cyttsp4_ic_grpoffset_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	unsigned long value;
+	int ret;
+
+	ret = kstrtoul(buf, 10, &value);
+	if (ret < 0) {
+		dev_err(dev, "%s: Invalid value\n", __func__);
+		return size;
+	}
+
+	if (value > 0xFFFF)
+		value = 0xFFFF;
+
+	mutex_lock(&dad->sysfs_lock);
+	dad->ic_grpoffset = (int)value;
+	mutex_unlock(&dad->sysfs_lock);
+
+	dev_vdbg(dev, "%s: ic_grpoffset=%d, return size=%d\n", __func__,
+			(int)value, (int)size);
+	return size;
+}
+
+static DEVICE_ATTR(ic_grpoffset, S_IRUSR | S_IWUSR,
+		   cyttsp4_ic_grpoffset_show, cyttsp4_ic_grpoffset_store);
+
+/*
+ * Prints part of communication registers.
+ */
+static int cyttsp4_grpdata_show_registers(struct device *dev, u8 *ic_buf,
+		size_t length, int num_read, int offset, int mode)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	int rc;
+
+	if (dad->ic_grpoffset >= num_read)
+		return -EINVAL;
+
+	num_read -= dad->ic_grpoffset;
+
+	if (length < num_read) {
+		dev_err(dev, "%s: not sufficient buffer req_bug_len=%d, length=%d\n",
+				__func__, num_read, length);
+		return -EINVAL;
+	}
+
+	pm_runtime_get_sync(dev);
+	rc = cyttsp4_read(dad->ttsp, mode, offset + dad->ic_grpoffset, ic_buf,
+			num_read);
+	pm_runtime_put(dev);
+	if (rc < 0)
+		return rc;
+
+	return num_read;
+}
+
+/*
+ * SysFs grpdata show function implementation of group 1.
+ * Prints status register contents of Operational mode registers.
+ */
+static int cyttsp4_grpdata_show_operational_regs(struct device *dev, u8 *ic_buf,
+		size_t length)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	int num_read = dad->si->si_ofs.rep_ofs - dad->si->si_ofs.cmd_ofs;
+	int i;
+
+	if (dad->ic_grpoffset >= num_read) {
+		dev_err(dev,
+			"%s: ic_grpoffset bigger than command registers, cmd_registers=%d\n",
+			__func__, num_read);
+		return -EINVAL;
+	}
+
+	num_read -= dad->ic_grpoffset;
+
+	if (length < num_read) {
+		dev_err(dev,
+			"%s: not sufficient buffer req_bug_len=%d, length=%d\n",
+			__func__, num_read, length);
+		return -EINVAL;
+	}
+
+	if (dad->ic_grpoffset + num_read > CY_MAX_PRBUF_SIZE) {
+		dev_err(dev,
+			"%s: not sufficient source buffer req_bug_len=%d, length=%d\n",
+			__func__, dad->ic_grpoffset + num_read,
+			CY_MAX_PRBUF_SIZE);
+		return -EINVAL;
+	}
+
+
+	/* cmd result already put into dad->return_buf */
+	for (i = 0; i < num_read; i++)
+		ic_buf[i] = dad->return_buf[dad->ic_grpoffset + i];
+
+	return num_read;
+}
+
+/*
+ * SysFs grpdata show function implementation of group 2.
+ * Prints current contents of the touch registers (full set).
+ */
+static int cyttsp4_grpdata_show_touch_regs(struct device *dev, u8 *ic_buf,
+		size_t length)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	int num_read = dad->si->si_ofs.rep_sz;
+	int offset = dad->si->si_ofs.rep_ofs;
+
+	return cyttsp4_grpdata_show_registers(dev, ic_buf, length, num_read,
+			offset, CY_MODE_OPERATIONAL);
+}
+
+/*
+ * Prints some content of the system information
+ */
+static int cyttsp4_grpdata_show_sysinfo(struct device *dev, u8 *ic_buf,
+		size_t length, int num_read, int offset)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	int rc = 0, rc2 = 0, rc3 = 0;
+
+	if (dad->ic_grpoffset >= num_read)
+		return -EINVAL;
+
+	num_read -= dad->ic_grpoffset;
+
+	if (length < num_read) {
+		dev_err(dev, "%s: not sufficient buffer req_bug_len=%d, length=%d\n",
+				__func__, num_read, length);
+		return -EINVAL;
+	}
+
+	pm_runtime_get_sync(dev);
+
+	rc = cyttsp4_request_exclusive(dad->ttsp,
+			CY_DA_REQUEST_EXCLUSIVE_TIMEOUT);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error on request exclusive r=%d\n",
+				__func__, rc);
+		goto cyttsp4_grpdata_show_sysinfo_err_put;
+	}
+
+	rc = cyttsp4_request_set_mode(dad->ttsp, CY_MODE_SYSINFO);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error on request set mode r=%d\n",
+				__func__, rc);
+		goto cyttsp4_grpdata_show_sysinfo_err_release;
+	}
+
+	rc = cyttsp4_read(dad->ttsp, CY_MODE_SYSINFO,
+			offset + dad->ic_grpoffset,
+			ic_buf, num_read);
+	if (rc < 0)
+		dev_err(dev, "%s: Fail read cmd regs r=%d\n",
+				__func__, rc);
+
+	rc2 = cyttsp4_request_set_mode(dad->ttsp, CY_MODE_OPERATIONAL);
+	if (rc2 < 0)
+		dev_err(dev, "%s: Error on request set mode 2 r=%d\n",
+				__func__, rc2);
+
+cyttsp4_grpdata_show_sysinfo_err_release:
+	rc3 = cyttsp4_release_exclusive(dad->ttsp);
+	if (rc3 < 0)
+		dev_err(dev, "%s: Error on release exclusive r=%d\n",
+				__func__, rc3);
+
+cyttsp4_grpdata_show_sysinfo_err_put:
+	pm_runtime_put(dev);
+
+	if (rc < 0)
+		return rc;
+	if (rc2 < 0)
+		return rc2;
+	if (rc3 < 0)
+		return rc3;
+
+	return num_read;
+}
+
+/*
+ * SysFs grpdata show function implementation of group 3.
+ * Prints content of the system information DATA record.
+ */
+static int cyttsp4_grpdata_show_sysinfo_data_rec(struct device *dev, u8 *ic_buf,
+		size_t length)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	int num_read = dad->si->si_ofs.cydata_size;
+	int offset = dad->si->si_ofs.cydata_ofs;
+
+	return cyttsp4_grpdata_show_sysinfo(dev, ic_buf, length, num_read,
+			offset);
+}
+
+/*
+ * SysFs grpdata show function implementation of group 4.
+ * Prints content of the system information TEST record.
+ */
+static int cyttsp4_grpdata_show_sysinfo_test_rec(struct device *dev, u8 *ic_buf,
+		size_t length)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	int num_read = dad->si->si_ofs.test_size;
+	int offset = dad->si->si_ofs.test_ofs;
+
+	return cyttsp4_grpdata_show_sysinfo(dev, ic_buf, length, num_read,
+			offset);
+}
+
+/*
+ * SysFs grpdata show function implementation of group 5.
+ * Prints content of the system information PANEL data.
+ */
+static int cyttsp4_grpdata_show_sysinfo_panel(struct device *dev, u8 *ic_buf,
+		size_t length)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	int num_read = dad->si->si_ofs.pcfg_size;
+	int offset = dad->si->si_ofs.pcfg_ofs;
+
+	return cyttsp4_grpdata_show_sysinfo(dev, ic_buf, length, num_read,
+			offset);
+}
+
+/*
+ * SysFs grpdata show function implementation of group 6.
+ * Prints contents of the touch parameters a row at a time.
+ */
+static int cyttsp4_grpdata_show_touch_params(struct device *dev, u8 *ic_buf,
+		size_t length)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	u8 cmd_buf[CY_CMD_CAT_READ_CFG_BLK_CMD_SZ];
+	int return_buf_size = CY_CMD_CAT_READ_CFG_BLK_RET_SZ;
+	u16 config_row_size;
+	int row_offset;
+	int offset_in_single_row = 0;
+	int rc;
+	int rc2 = 0;
+	int rc3;
+	int i, j;
+
+	pm_runtime_get_sync(dev);
+
+	rc = cyttsp4_request_exclusive(dad->ttsp,
+			CY_DA_REQUEST_EXCLUSIVE_TIMEOUT);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error on request exclusive r=%d\n",
+				__func__, rc);
+		goto cyttsp4_grpdata_show_touch_params_err_put;
+	}
+
+	rc = cyttsp4_request_set_mode(dad->ttsp, CY_MODE_CAT);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error on request set mode r=%d\n",
+				__func__, rc);
+		goto cyttsp4_grpdata_show_touch_params_err_release;
+	}
+
+	rc = cyttsp4_request_config_row_size(dad->ttsp, &config_row_size);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error on request config row size r=%d\n",
+				__func__, rc);
+		goto cyttsp4_grpdata_show_touch_params_err_change_mode;
+	}
+
+	/* Perform buffer size check since we have just acquired row size */
+	return_buf_size += config_row_size;
+
+	if (length < return_buf_size) {
+		dev_err(dev, "%s: not sufficient buffer req_buf_len=%d, length=%d\n",
+				__func__, return_buf_size, length);
+		rc = -EINVAL;
+		goto cyttsp4_grpdata_show_touch_params_err_change_mode;
+	}
+
+	row_offset = dad->ic_grpoffset / config_row_size;
+
+	cmd_buf[0] = CY_CMD_CAT_READ_CFG_BLK;
+	cmd_buf[1] = HI_BYTE(row_offset);
+	cmd_buf[2] = LO_BYTE(row_offset);
+	cmd_buf[3] = HI_BYTE(config_row_size);
+	cmd_buf[4] = LO_BYTE(config_row_size);
+	cmd_buf[5] = CY_TCH_PARM_EBID;
+	rc = cyttsp4_request_exec_cmd(dad->ttsp, CY_MODE_CAT,
+			cmd_buf, CY_CMD_CAT_READ_CFG_BLK_CMD_SZ,
+			ic_buf, return_buf_size,
+			CY_COMMAND_COMPLETE_TIMEOUT);
+
+	offset_in_single_row = dad->ic_grpoffset % config_row_size;
+
+	/* Remove Header data from return buffer */
+	for (i = 0, j = CY_CMD_CAT_READ_CFG_BLK_RET_HDR_SZ
+				+ offset_in_single_row;
+			i < (config_row_size - offset_in_single_row);
+			i++, j++)
+		ic_buf[i] = ic_buf[j];
+
+cyttsp4_grpdata_show_touch_params_err_change_mode:
+	rc2 = cyttsp4_request_set_mode(dad->ttsp, CY_MODE_OPERATIONAL);
+	if (rc2 < 0)
+		dev_err(dev, "%s: Error on request set mode r=%d\n",
+				__func__, rc2);
+
+cyttsp4_grpdata_show_touch_params_err_release:
+	rc3 = cyttsp4_release_exclusive(dad->ttsp);
+	if (rc3 < 0)
+		dev_err(dev, "%s: Error on release exclusive r=%d\n",
+				__func__, rc3);
+
+cyttsp4_grpdata_show_touch_params_err_put:
+	pm_runtime_put(dev);
+
+	if (rc < 0)
+		return rc;
+	if (rc2 < 0)
+		return rc2;
+	if (rc3 < 0)
+		return rc3;
+
+	return config_row_size - offset_in_single_row;
+}
+
+/*
+ * SysFs grpdata show function implementation of group 7.
+ * Prints contents of the touch parameters sizes.
+ */
+static int cyttsp4_grpdata_show_touch_params_sizes(struct device *dev,
+		u8 *ic_buf, size_t length)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	struct cyttsp4_core_platform_data *pdata =
+			dev_get_platdata(&dad->ttsp->core->dev);
+	int max_size;
+	int block_start;
+	int block_end;
+	int num_read;
+
+	if (pdata->sett[CY_IC_GRPNUM_TCH_PARM_SIZE] == NULL) {
+		dev_err(dev, "%s: Missing platform data Touch Parameters Sizes table\n",
+				__func__);
+		return -EINVAL;
+	}
+
+	if (pdata->sett[CY_IC_GRPNUM_TCH_PARM_SIZE]->data == NULL) {
+		dev_err(dev, "%s: Missing platform data Touch Parameters Sizes table data\n",
+				__func__);
+		return -EINVAL;
+	}
+
+	max_size = pdata->sett[CY_IC_GRPNUM_TCH_PARM_SIZE]->size;
+	max_size *= sizeof(uint16_t);
+	if (dad->ic_grpoffset >= max_size)
+		return -EINVAL;
+
+	block_start = (dad->ic_grpoffset / CYTTSP4_TCH_PARAM_SIZE_BLK_SZ)
+			* CYTTSP4_TCH_PARAM_SIZE_BLK_SZ;
+	block_end = CYTTSP4_TCH_PARAM_SIZE_BLK_SZ + block_start;
+	if (block_end > max_size)
+		block_end = max_size;
+	num_read = block_end - dad->ic_grpoffset;
+	if (length < num_read) {
+		dev_err(dev, "%s: not sufficient buffer %s=%d, %s=%d\n",
+				__func__, "req_buf_len", num_read, "length",
+				length);
+		return -EINVAL;
+	}
+
+	memcpy(ic_buf, (u8 *)pdata->sett[CY_IC_GRPNUM_TCH_PARM_SIZE]->data
+			+ dad->ic_grpoffset, num_read);
+
+	return num_read;
+}
+
+/*
+ * SysFs grpdata show function implementation of group 10.
+ * Prints content of the system information Operational Configuration data.
+ */
+static int cyttsp4_grpdata_show_sysinfo_opcfg(struct device *dev, u8 *ic_buf,
+		size_t length)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	int num_read = dad->si->si_ofs.opcfg_size;
+	int offset = dad->si->si_ofs.opcfg_ofs;
+
+	return cyttsp4_grpdata_show_sysinfo(dev, ic_buf, length, num_read,
+			offset);
+}
+
+/*
+ * SysFs grpdata show function implementation of group 11.
+ * Prints content of the system information Design data.
+ */
+static int cyttsp4_grpdata_show_sysinfo_design(struct device *dev, u8 *ic_buf,
+		size_t length)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	int num_read = dad->si->si_ofs.ddata_size;
+	int offset = dad->si->si_ofs.ddata_ofs;
+
+	return cyttsp4_grpdata_show_sysinfo(dev, ic_buf, length, num_read,
+			offset);
+}
+
+/*
+ * SysFs grpdata show function implementation of group 12.
+ * Prints content of the system information Manufacturing data.
+ */
+static int cyttsp4_grpdata_show_sysinfo_manufacturing(struct device *dev,
+		u8 *ic_buf, size_t length)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	int num_read = dad->si->si_ofs.mdata_size;
+	int offset = dad->si->si_ofs.mdata_ofs;
+
+	return cyttsp4_grpdata_show_sysinfo(dev, ic_buf, length, num_read,
+			offset);
+}
+
+/*
+ * SysFs grpdata show function implementation of group 13.
+ * Prints status register contents of Configuration and
+ * Test registers.
+ */
+static int cyttsp4_grpdata_show_test_regs(struct device *dev, u8 *ic_buf,
+		size_t length)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	u8 mode;
+	int rc = 0;
+	int num_read = 0;
+	int i;
+
+	dev_vdbg(dev, "%s: test.cur_cmd=%d test.cur_mode=%d\n",
+			__func__, dad->test.cur_cmd, dad->test.cur_mode);
+
+	if (dad->test.cur_cmd == CY_CMD_CAT_NULL) {
+		num_read = 1;
+		if (length < num_read) {
+			dev_err(dev, "%s: not sufficient buffer %s=%d, %s=%d\n",
+					__func__, "req_buf_len", num_read,
+					"length", length);
+			return -EINVAL;
+		}
+
+		dev_vdbg(dev, "%s: GRP=TEST_REGS: NULL CMD: host_mode=%02X\n",
+				__func__, ic_buf[0]);
+		pm_runtime_get_sync(dev);
+		rc = cyttsp4_read(dad->ttsp,
+				dad->test.cur_mode == CY_TEST_MODE_CAT ?
+					CY_MODE_CAT : CY_MODE_OPERATIONAL,
+				CY_REG_BASE, &mode, sizeof(mode));
+		pm_runtime_put(dev);
+		if (rc < 0) {
+			ic_buf[0] = 0xFF;
+			dev_err(dev, "%s: failed to read host mode r=%d\n",
+					__func__, rc);
+		} else {
+			ic_buf[0] = mode;
+		}
+	} else if (dad->test.cur_mode == CY_TEST_MODE_CAT) {
+		num_read = dad->test.cur_status_size;
+		if (length < num_read) {
+			dev_err(dev, "%s: not sufficient buffer %s=%d, %s=%d\n",
+					__func__, "req_buf_len", num_read,
+					"length", length);
+			return -EINVAL;
+		}
+		if (dad->ic_grpoffset + num_read > CY_MAX_PRBUF_SIZE) {
+			dev_err(dev,
+				"%s: not sufficient source buffer req_bug_len=%d, length=%d\n",
+				__func__, dad->ic_grpoffset + num_read,
+				CY_MAX_PRBUF_SIZE);
+			return -EINVAL;
+		}
+
+		dev_vdbg(dev, "%s: GRP=TEST_REGS: num_rd=%d at ofs=%d + grpofs=%d\n",
+				__func__, num_read, dad->si->si_ofs.cmd_ofs,
+				dad->ic_grpoffset);
+
+		/* cmd result already put into dad->return_buf */
+		for (i = 0; i < num_read; i++)
+			ic_buf[i] = dad->return_buf[dad->ic_grpoffset + i];
+	} else {
+		dev_err(dev, "%s: Not in Config/Test mode\n", __func__);
+	}
+
+	return num_read;
+}
+
+/*
+ * SysFs grpdata show function implementation of group 14.
+ * Prints CapSense button keycodes.
+ */
+static int cyttsp4_grpdata_show_btn_keycodes(struct device *dev, u8 *ic_buf,
+		size_t length)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	struct cyttsp4_btn *btn = dad->si->btn;
+	int num_btns = dad->si->si_ofs.num_btns - dad->ic_grpoffset;
+	int n;
+
+	if (num_btns <= 0 || btn == NULL || length < num_btns)
+		return -EINVAL;
+
+	for (n = 0; n < num_btns; n++)
+		ic_buf[n] = (u8) btn[dad->ic_grpoffset + n].key_code;
+
+	return n;
+}
+
+/*
+ * SysFs grpdata show function implementation of group 15.
+ * Prints status register contents of Configuration and
+ * Test registers.
+ */
+static int cyttsp4_grpdata_show_tthe_test_regs(struct device *dev, u8 *ic_buf,
+		size_t length)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	int rc = 0;
+	int num_read = 0;
+
+	dev_vdbg(dev, "%s: test.cur_cmd=%d test.cur_mode=%d\n",
+			__func__, dad->test.cur_cmd, dad->test.cur_mode);
+
+	if (dad->test.cur_cmd == CY_CMD_CAT_NULL) {
+		num_read = dad->test.cur_status_size;
+		if (length < num_read) {
+			dev_err(dev, "%s: not sufficient buffer %s=%d, %s=%d\n",
+					__func__, "req_buf_len", num_read,
+					"length", length);
+			return -EINVAL;
+		}
+
+		dev_vdbg(dev, "%s: GRP=TEST_REGS: NULL CMD: host_mode=%02X\n",
+				__func__, ic_buf[0]);
+		rc = cyttsp4_read(dad->ttsp,
+				(dad->test.cur_mode == CY_TEST_MODE_CAT)
+					? CY_MODE_CAT :
+				(dad->test.cur_mode == CY_TEST_MODE_SYSINFO)
+					? CY_MODE_SYSINFO : CY_MODE_OPERATIONAL,
+				CY_REG_BASE, ic_buf, num_read);
+		if (rc < 0) {
+			ic_buf[0] = 0xFF;
+			dev_err(dev, "%s: failed to read host mode r=%d\n",
+					__func__, rc);
+		}
+	} else if (dad->test.cur_mode == CY_TEST_MODE_CAT
+			|| dad->test.cur_mode == CY_TEST_MODE_SYSINFO) {
+		num_read = dad->test.cur_status_size;
+		if (length < num_read) {
+			dev_err(dev, "%s: not sufficient buffer %s=%d, %s=%d\n",
+					__func__, "req_buf_len", num_read,
+					"length", length);
+			return -EINVAL;
+		}
+		dev_vdbg(dev, "%s: GRP=TEST_REGS: num_rd=%d at ofs=%d + grpofs=%d\n",
+				__func__, num_read, dad->si->si_ofs.cmd_ofs,
+				dad->ic_grpoffset);
+		rc = cyttsp4_read(dad->ttsp,
+				(dad->test.cur_mode == CY_TEST_MODE_CAT)
+					? CY_MODE_CAT : CY_MODE_SYSINFO,
+				CY_REG_BASE, ic_buf, num_read);
+		if (rc < 0)
+			return rc;
+	} else {
+		dev_err(dev, "%s: In unsupported mode\n", __func__);
+	}
+
+	return num_read;
+}
+
+static cyttsp4_show_function
+		cyttsp4_grpdata_show_functions[CY_IC_GRPNUM_NUM] = {
+	[CY_IC_GRPNUM_RESERVED] = cyttsp4_grpdata_show_void,
+	[CY_IC_GRPNUM_CMD_REGS] = cyttsp4_grpdata_show_operational_regs,
+	[CY_IC_GRPNUM_TCH_REP] = cyttsp4_grpdata_show_touch_regs,
+	[CY_IC_GRPNUM_DATA_REC] = cyttsp4_grpdata_show_sysinfo_data_rec,
+	[CY_IC_GRPNUM_TEST_REC] = cyttsp4_grpdata_show_sysinfo_test_rec,
+	[CY_IC_GRPNUM_PCFG_REC] = cyttsp4_grpdata_show_sysinfo_panel,
+	[CY_IC_GRPNUM_TCH_PARM_VAL] = cyttsp4_grpdata_show_touch_params,
+	[CY_IC_GRPNUM_TCH_PARM_SIZE] = cyttsp4_grpdata_show_touch_params_sizes,
+	[CY_IC_GRPNUM_RESERVED1] = cyttsp4_grpdata_show_void,
+	[CY_IC_GRPNUM_RESERVED2] = cyttsp4_grpdata_show_void,
+	[CY_IC_GRPNUM_OPCFG_REC] = cyttsp4_grpdata_show_sysinfo_opcfg,
+	[CY_IC_GRPNUM_DDATA_REC] = cyttsp4_grpdata_show_sysinfo_design,
+	[CY_IC_GRPNUM_MDATA_REC] = cyttsp4_grpdata_show_sysinfo_manufacturing,
+	[CY_IC_GRPNUM_TEST_REGS] = cyttsp4_grpdata_show_test_regs,
+	[CY_IC_GRPNUM_BTN_KEYS] = cyttsp4_grpdata_show_btn_keycodes,
+	[CY_IC_GRPNUM_TTHE_REGS] = cyttsp4_grpdata_show_tthe_test_regs,
+};
+
+static ssize_t cyttsp4_ic_grpdata_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	int i;
+	ssize_t num_read;
+	int index;
+
+	mutex_lock(&dad->sysfs_lock);
+	dev_vdbg(dev, "%s: grpnum=%d grpoffset=%u\n",
+			__func__, dad->ic_grpnum, dad->ic_grpoffset);
+
+	index = scnprintf(buf, CY_MAX_PRBUF_SIZE,
+			"Group %d, Offset %u:\n", dad->ic_grpnum,
+			dad->ic_grpoffset);
+
+	num_read = cyttsp4_grpdata_show_functions[dad->ic_grpnum] (dev,
+			dad->ic_buf, CY_MAX_PRBUF_SIZE);
+	if (num_read < 0) {
+		index = num_read;
+		if (num_read == -ENOSYS) {
+			dev_err(dev, "%s: Group %d is not implemented.\n",
+				__func__, dad->ic_grpnum);
+			goto cyttsp4_ic_grpdata_show_error;
+		}
+		dev_err(dev, "%s: Cannot read Group %d Data.\n",
+				__func__, dad->ic_grpnum);
+		goto cyttsp4_ic_grpdata_show_error;
+	}
+
+	for (i = 0; i < num_read; i++) {
+		index += scnprintf(buf + index, CY_MAX_PRBUF_SIZE - index,
+				"0x%02X\n", dad->ic_buf[i]);
+	}
+
+	index += scnprintf(buf + index, CY_MAX_PRBUF_SIZE - index,
+			"(%d bytes)\n", num_read);
+
+cyttsp4_ic_grpdata_show_error:
+	mutex_unlock(&dad->sysfs_lock);
+	return index;
+}
+
+static int _cyttsp4_cmd_handshake(struct cyttsp4_device_access_data *dad)
+{
+	struct device *dev = &dad->ttsp->dev;
+	u8 mode;
+	int rc;
+
+	rc = cyttsp4_read(dad->ttsp, CY_MODE_CAT,
+			CY_REG_BASE, &mode, sizeof(mode));
+	if (rc < 0) {
+		dev_err(dev, "%s: Fail read host mode r=%d\n", __func__, rc);
+		return rc;
+	}
+
+	rc = cyttsp4_request_handshake(dad->ttsp, mode);
+	if (rc < 0)
+		dev_err(dev, "%s: Fail cmd handshake r=%d\n", __func__, rc);
+
+	return rc;
+}
+
+static int _cyttsp4_cmd_toggle_lowpower(struct cyttsp4_device_access_data *dad)
+{
+	struct device *dev = &dad->ttsp->dev;
+	u8 mode;
+	int rc = cyttsp4_read(dad->ttsp,
+			(dad->test.cur_mode == CY_TEST_MODE_CAT)
+				? CY_MODE_CAT : CY_MODE_OPERATIONAL,
+			CY_REG_BASE, &mode, sizeof(mode));
+	if (rc < 0) {
+		dev_err(dev, "%s: Fail read host mode r=%d\n",
+				__func__, rc);
+		return rc;
+	}
+
+	rc = cyttsp4_request_toggle_lowpower(dad->ttsp, mode);
+	if (rc < 0)
+		dev_err(dev, "%s: Fail cmd handshake r=%d\n",
+				__func__, rc);
+	return rc;
+}
+
+static int cyttsp4_test_cmd_mode(struct cyttsp4_device_access_data *dad,
+		u8 *ic_buf, size_t length)
+{
+	struct device *dev = &dad->ttsp->dev;
+	int rc = -ENOSYS;
+	u8 mode;
+
+	if (length < CY_NULL_CMD_MODE_INDEX + 1)  {
+		dev_err(dev, "%s: %s length=%d\n", __func__,
+				"Buffer length is not valid", length);
+		return -EINVAL;
+	}
+	mode = ic_buf[CY_NULL_CMD_MODE_INDEX];
+
+	if (mode == CY_HST_CAT) {
+		pm_runtime_get_sync(dev);
+		rc = cyttsp4_request_exclusive(dad->ttsp,
+				CY_DA_REQUEST_EXCLUSIVE_TIMEOUT);
+		if (rc < 0) {
+			dev_err(dev, "%s: Fail rqst exclusive r=%d\n",
+					__func__, rc);
+			pm_runtime_put(dev);
+			goto cyttsp4_test_cmd_mode_exit;
+		}
+		rc = cyttsp4_request_set_mode(dad->ttsp, CY_MODE_CAT);
+		if (rc < 0) {
+			dev_err(dev, "%s: Fail rqst set mode=%02X r=%d\n",
+					__func__, mode, rc);
+			rc = cyttsp4_release_exclusive(dad->ttsp);
+			if (rc < 0)
+				dev_err(dev, "%s: %s r=%d\n", __func__,
+						"Fail release exclusive", rc);
+			pm_runtime_put(dev);
+			goto cyttsp4_test_cmd_mode_exit;
+		}
+		dad->test.cur_mode = CY_TEST_MODE_CAT;
+		dad->own_exclusive = true;
+		dev_vdbg(dev, "%s: %s=%d %s=%02X %s=%d(CaT)\n", __func__,
+				"own_exclusive", dad->own_exclusive == true,
+				"mode", mode, "test.cur_mode",
+				dad->test.cur_mode);
+	} else if (mode == CY_HST_OPERATE) {
+		if (dad->own_exclusive) {
+			rc = cyttsp4_request_set_mode(dad->ttsp,
+					CY_MODE_OPERATIONAL);
+			if (rc < 0)
+				dev_err(dev, "%s: %s=%02X r=%d\n", __func__,
+						"Fail rqst set mode", mode, rc);
+				/* continue anyway */
+
+			rc = cyttsp4_release_exclusive(dad->ttsp);
+			if (rc < 0) {
+				dev_err(dev, "%s: %s r=%d\n", __func__,
+						"Fail release exclusive", rc);
+				/* continue anyway */
+				rc = 0;
+			}
+			dad->test.cur_mode = CY_TEST_MODE_NORMAL_OP;
+			dad->own_exclusive = false;
+			pm_runtime_put(dev);
+			dev_vdbg(dev, "%s: %s=%d %s=%02X %s=%d(Operate)\n",
+					__func__, "own_exclusive",
+					dad->own_exclusive == true,
+					"mode", mode,
+					"test.cur_mode", dad->test.cur_mode);
+		} else
+			dev_vdbg(dev, "%s: %s mode=%02X(Operate)\n", __func__,
+					"do not own exclusive; cannot switch",
+					mode);
+	} else
+		dev_vdbg(dev, "%s: unsupported mode switch=%02X\n",
+				__func__, mode);
+
+cyttsp4_test_cmd_mode_exit:
+	return rc;
+}
+
+static int cyttsp4_test_tthe_cmd_mode(struct cyttsp4_device_access_data *dad,
+		u8 *ic_buf, size_t length)
+{
+	struct device *dev = &dad->ttsp->dev;
+	int rc = -ENOSYS;
+	u8 mode;
+	enum cyttsp4_test_mode test_mode;
+	int new_mode;
+
+	if (length < CY_NULL_CMD_MODE_INDEX + 1)  {
+		dev_err(dev, "%s: %s length=%d\n", __func__,
+				"Buffer length is not valid", length);
+		return -EINVAL;
+	}
+	mode = ic_buf[CY_NULL_CMD_MODE_INDEX];
+
+	switch (mode) {
+	case CY_HST_CAT:
+		new_mode = CY_MODE_CAT;
+		test_mode = CY_TEST_MODE_CAT;
+		break;
+	case CY_HST_OPERATE:
+		new_mode = CY_MODE_OPERATIONAL;
+		test_mode = CY_TEST_MODE_NORMAL_OP;
+		break;
+	case CY_HST_SYSINFO:
+		new_mode = CY_MODE_SYSINFO;
+		test_mode = CY_TEST_MODE_SYSINFO;
+		break;
+	default:
+		dev_vdbg(dev, "%s: unsupported mode switch=%02X\n",
+				__func__, mode);
+		goto cyttsp4_test_tthe_cmd_mode_exit;
+	}
+
+	rc = cyttsp4_request_exclusive(dad->ttsp,
+			CY_DA_REQUEST_EXCLUSIVE_TIMEOUT);
+	if (rc < 0) {
+		dev_err(dev, "%s: Fail rqst exclusive r=%d\n", __func__, rc);
+		goto cyttsp4_test_tthe_cmd_mode_exit;
+	}
+	rc = cyttsp4_request_set_mode(dad->ttsp, new_mode);
+	if (rc < 0)
+		dev_err(dev, "%s: Fail rqst set mode=%02X r=%d\n",
+				__func__, mode, rc);
+	rc = cyttsp4_release_exclusive(dad->ttsp);
+	if (rc < 0) {
+		dev_err(dev, "%s: %s r=%d\n", __func__,
+				"Fail release exclusive", rc);
+		if (mode == CY_HST_OPERATE)
+			rc = 0;
+		else
+			goto cyttsp4_test_tthe_cmd_mode_exit;
+	}
+	dad->test.cur_mode = test_mode;
+	dev_vdbg(dev, "%s: %s=%d %s=%02X %s=%d\n", __func__,
+			"own_exclusive", dad->own_exclusive == true,
+			"mode", mode,
+			"test.cur_mode", dad->test.cur_mode);
+
+cyttsp4_test_tthe_cmd_mode_exit:
+	return rc;
+}
+
+/*
+ * SysFs grpdata store function implementation of group 1.
+ * Stores to command and parameter registers of Operational mode.
+ */
+static int cyttsp4_grpdata_store_operational_regs(struct device *dev,
+		u8 *ic_buf, size_t length)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	size_t cmd_ofs = dad->si->si_ofs.cmd_ofs;
+	int num_read = dad->si->si_ofs.rep_ofs - dad->si->si_ofs.cmd_ofs;
+	u8 *return_buf = dad->return_buf;
+	int rc, rc2 = 0;
+
+	if ((cmd_ofs + length) > dad->si->si_ofs.rep_ofs) {
+		dev_err(dev, "%s: %s length=%d\n", __func__,
+				"Buffer length is not valid", length);
+		return -EINVAL;
+	}
+
+	pm_runtime_get_sync(dev);
+
+	rc = cyttsp4_request_exclusive(dad->ttsp,
+			CY_DA_REQUEST_EXCLUSIVE_TIMEOUT);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error on request exclusive r=%d\n",
+				__func__, rc);
+		goto cyttsp4_grpdata_store_operational_regs_err_put;
+	}
+
+	return_buf[0] = ic_buf[0];
+	rc = cyttsp4_request_exec_cmd(dad->ttsp, CY_MODE_OPERATIONAL,
+			ic_buf, length,
+			return_buf + 1, num_read,
+			CY_COMMAND_COMPLETE_TIMEOUT);
+	if (rc < 0)
+		dev_err(dev, "%s: Fail to execute cmd r=%d\n", __func__, rc);
+
+	rc2 = cyttsp4_release_exclusive(dad->ttsp);
+	if (rc2 < 0)
+		dev_err(dev, "%s: Error on release exclusive r=%d\n",
+				__func__, rc2);
+
+cyttsp4_grpdata_store_operational_regs_err_put:
+	pm_runtime_put(dev);
+
+	if (rc < 0)
+		return rc;
+	if (rc2 < 0)
+		return rc2;
+
+	return rc;
+}
+
+/*
+ * SysFs store function of Test Regs group.
+ */
+static int cyttsp4_grpdata_store_test_regs(struct device *dev, u8 *ic_buf,
+		size_t length)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	int rc;
+	u8 *return_buf = dad->return_buf;
+
+	/* Caller function guaranties, length is not bigger than ic_buf size */
+	if (length < CY_CMD_INDEX + 1) {
+		dev_err(dev, "%s: %s length=%d\n", __func__,
+				"Buffer length is not valid", length);
+		return -EINVAL;
+	}
+
+	dad->test.cur_cmd = ic_buf[CY_CMD_INDEX];
+	if (dad->test.cur_cmd == CY_CMD_CAT_NULL) {
+		if (length < CY_NULL_CMD_INDEX + 1) {
+			dev_err(dev, "%s: %s length=%d\n", __func__,
+					"Buffer length is not valid", length);
+			return -EINVAL;
+		}
+		dev_vdbg(dev, "%s: test-cur_cmd=%d null-cmd=%d\n", __func__,
+				dad->test.cur_cmd, ic_buf[CY_NULL_CMD_INDEX]);
+		switch (ic_buf[CY_NULL_CMD_INDEX]) {
+		case CY_NULL_CMD_NULL:
+			dev_err(dev, "%s: empty NULL cmd\n", __func__);
+			break;
+		case CY_NULL_CMD_MODE:
+			if (length < CY_NULL_CMD_MODE_INDEX + 1) {
+				dev_err(dev, "%s: %s length=%d\n", __func__,
+						"Buffer length is not valid",
+						length);
+				return -EINVAL;
+			}
+			dev_vdbg(dev, "%s: Set cmd mode=%02X\n", __func__,
+					ic_buf[CY_NULL_CMD_MODE_INDEX]);
+			cyttsp4_test_cmd_mode(dad, ic_buf, length);
+			break;
+		case CY_NULL_CMD_STATUS_SIZE:
+			if (length < CY_NULL_CMD_SIZE_INDEX + 1) {
+				dev_err(dev, "%s: %s length=%d\n", __func__,
+						"Buffer length is not valid",
+						length);
+				return -EINVAL;
+			}
+			dad->test.cur_status_size =
+				ic_buf[CY_NULL_CMD_SIZEL_INDEX]
+				+ (ic_buf[CY_NULL_CMD_SIZEH_INDEX] << 8);
+			dev_vdbg(dev, "%s: test-cur_status_size=%d\n",
+					__func__, dad->test.cur_status_size);
+			break;
+		case CY_NULL_CMD_HANDSHAKE:
+			dev_vdbg(dev, "%s: try null cmd handshake\n",
+					__func__);
+			rc = _cyttsp4_cmd_handshake(dad);
+			if (rc < 0)
+				dev_err(dev, "%s: %s r=%d\n", __func__,
+						"Fail test cmd handshake", rc);
+		default:
+			break;
+		}
+	} else {
+		dev_dbg(dev, "%s: TEST CMD=0x%02X length=%d %s%d\n",
+				__func__, ic_buf[0], length, "cmd_ofs+grpofs=",
+				dad->ic_grpoffset + dad->si->si_ofs.cmd_ofs);
+		cyttsp4_pr_buf(dev, dad->pr_buf, ic_buf, length, "test_cmd");
+		return_buf[0] = ic_buf[0]; /* Save cmd byte to return_buf */
+		rc = cyttsp4_request_exec_cmd(dad->ttsp, CY_MODE_CAT,
+				ic_buf, length,
+				return_buf + 1, dad->test.cur_status_size,
+				max(CY_COMMAND_COMPLETE_TIMEOUT,
+					CY_CALIBRATE_COMPLETE_TIMEOUT));
+		if (rc < 0)
+			dev_err(dev, "%s: Fail to execute cmd r=%d\n",
+					__func__, rc);
+	}
+	return 0;
+}
+
+/*
+ * SysFs store function of Test Regs group.
+ */
+static int cyttsp4_grpdata_store_tthe_test_regs(struct device *dev, u8 *ic_buf,
+		size_t length)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	int rc;
+
+	/* Caller function guaranties, length is not bigger than ic_buf size */
+	if (length < CY_CMD_INDEX + 1) {
+		dev_err(dev, "%s: %s length=%d\n", __func__,
+				"Buffer length is not valid", length);
+		return -EINVAL;
+	}
+
+	dad->test.cur_cmd = ic_buf[CY_CMD_INDEX];
+	if (dad->test.cur_cmd == CY_CMD_CAT_NULL) {
+		if (length < CY_NULL_CMD_INDEX + 1) {
+			dev_err(dev, "%s: %s length=%d\n", __func__,
+					"Buffer length is not valid", length);
+			return -EINVAL;
+		}
+		dev_vdbg(dev, "%s: test-cur_cmd=%d null-cmd=%d\n", __func__,
+				dad->test.cur_cmd, ic_buf[CY_NULL_CMD_INDEX]);
+		switch (ic_buf[CY_NULL_CMD_INDEX]) {
+		case CY_NULL_CMD_NULL:
+			dev_err(dev, "%s: empty NULL cmd\n", __func__);
+			break;
+		case CY_NULL_CMD_MODE:
+			if (length < CY_NULL_CMD_MODE_INDEX + 1) {
+				dev_err(dev, "%s: %s length=%d\n", __func__,
+						"Buffer length is not valid",
+						length);
+				return -EINVAL;
+			}
+			dev_vdbg(dev, "%s: Set cmd mode=%02X\n", __func__,
+					ic_buf[CY_NULL_CMD_MODE_INDEX]);
+			cyttsp4_test_tthe_cmd_mode(dad, ic_buf, length);
+			break;
+		case CY_NULL_CMD_STATUS_SIZE:
+			if (length < CY_NULL_CMD_SIZE_INDEX + 1) {
+				dev_err(dev, "%s: %s length=%d\n", __func__,
+						"Buffer length is not valid",
+						length);
+				return -EINVAL;
+			}
+			dad->test.cur_status_size =
+				ic_buf[CY_NULL_CMD_SIZEL_INDEX]
+				+ (ic_buf[CY_NULL_CMD_SIZEH_INDEX] << 8);
+			dev_vdbg(dev, "%s: test-cur_status_size=%d\n",
+					__func__, dad->test.cur_status_size);
+			break;
+		case CY_NULL_CMD_HANDSHAKE:
+			dev_vdbg(dev, "%s: try null cmd handshake\n",
+					__func__);
+			rc = _cyttsp4_cmd_handshake(dad);
+			if (rc < 0)
+				dev_err(dev, "%s: %s r=%d\n", __func__,
+						"Fail test cmd handshake", rc);
+		case CY_NULL_CMD_LOW_POWER:
+			dev_vdbg(dev, "%s: try null cmd low power\n", __func__);
+			rc = _cyttsp4_cmd_toggle_lowpower(dad);
+			if (rc < 0)
+				dev_err(dev, "%s: %s r=%d\n", __func__,
+					"Fail test cmd toggle low power", rc);
+		default:
+			break;
+		}
+	} else {
+		dev_dbg(dev, "%s: TEST CMD=0x%02X length=%d %s%d\n",
+				__func__, ic_buf[0], length, "cmd_ofs+grpofs=",
+				dad->ic_grpoffset + dad->si->si_ofs.cmd_ofs);
+		cyttsp4_pr_buf(dev, dad->pr_buf, ic_buf, length, "test_cmd");
+		/* Support Operating mode command. */
+		/* Write command parameters first */
+		if (length > 1) {
+			rc = cyttsp4_write(dad->ttsp,
+				(dad->test.cur_mode == CY_TEST_MODE_CAT)
+					?  CY_MODE_CAT : CY_MODE_OPERATIONAL,
+				dad->ic_grpoffset + dad->si->si_ofs.cmd_ofs
+					+ 1, ic_buf + 1, length - 1);
+			if (rc < 0) {
+				dev_err(dev, "%s: Fail write cmd param regs r=%d\n",
+					__func__, rc);
+				return 0;
+			}
+		}
+		/* Write command */
+		rc = cyttsp4_write(dad->ttsp,
+				(dad->test.cur_mode == CY_TEST_MODE_CAT)
+					?  CY_MODE_CAT : CY_MODE_OPERATIONAL,
+				dad->ic_grpoffset + dad->si->si_ofs.cmd_ofs,
+				ic_buf, 1);
+		if (rc < 0)
+			dev_err(dev, "%s: Fail write cmd reg r=%d\n",
+					__func__, rc);
+	}
+	return 0;
+}
+
+/*
+ * SysFs grpdata store function implementation of group 6.
+ * Stores the contents of the touch parameters.
+ */
+static int cyttsp4_grpdata_store_touch_params(struct device *dev,
+		u8 *ic_buf, size_t length)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	int rc, rc2 = 0, rc3;
+
+	pm_runtime_get_sync(dev);
+
+	rc = cyttsp4_request_exclusive(dad->ttsp,
+			CY_DA_REQUEST_EXCLUSIVE_TIMEOUT);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error on request exclusive r=%d\n",
+				__func__, rc);
+		goto cyttsp4_grpdata_store_touch_params_err_put;
+	}
+
+	rc = cyttsp4_request_set_mode(dad->ttsp, CY_MODE_CAT);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error on request set mode r=%d\n",
+				__func__, rc);
+		goto cyttsp4_grpdata_store_touch_params_err_release;
+	}
+
+	rc = cyttsp4_request_write_config(dad->ttsp, CY_TCH_PARM_EBID,
+			dad->ic_grpoffset, ic_buf, length);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error on request write config r=%d\n",
+				__func__, rc);
+		goto cyttsp4_grpdata_store_touch_params_err_change_mode;
+	}
+
+cyttsp4_grpdata_store_touch_params_err_change_mode:
+	rc2 = cyttsp4_request_set_mode(dad->ttsp, CY_MODE_OPERATIONAL);
+	if (rc2 < 0)
+		dev_err(dev, "%s: Error on request set mode r=%d\n",
+				__func__, rc2);
+
+cyttsp4_grpdata_store_touch_params_err_release:
+	rc3 = cyttsp4_release_exclusive(dad->ttsp);
+	if (rc3 < 0)
+		dev_err(dev, "%s: Error on release exclusive r=%d\n",
+				__func__, rc3);
+
+cyttsp4_grpdata_store_touch_params_err_put:
+	pm_runtime_put(dev);
+
+	if (rc == 0)
+		cyttsp4_request_restart(dad->ttsp, true);
+	else
+		return rc;
+	if (rc2 < 0)
+		return rc2;
+	if (rc3 < 0)
+		return rc3;
+
+	return rc;
+}
+
+/*
+ * Gets user input from sysfs and parse it
+ * return size of parsed output buffer
+ */
+static int cyttsp4_ic_parse_input(struct device *dev, const char *buf,
+		size_t buf_size, u8 *ic_buf, size_t ic_buf_size)
+{
+	const char *pbuf = buf;
+	unsigned long value;
+	char scan_buf[CYTTSP4_INPUT_ELEM_SZ];
+	int i = 0;
+	int j;
+	int last = 0;
+	int ret;
+
+	dev_dbg(dev, "%s: pbuf=%p buf=%p size=%d %s=%d buf=%s\n", __func__,
+			pbuf, buf, (int) buf_size, "scan buf size",
+			CYTTSP4_INPUT_ELEM_SZ, buf);
+
+	while (pbuf <= (buf + buf_size)) {
+		if (i >= CY_MAX_CONFIG_BYTES) {
+			dev_err(dev, "%s: %s size=%d max=%d\n", __func__,
+					"Max cmd size exceeded", i,
+					CY_MAX_CONFIG_BYTES);
+			return -EINVAL;
+		}
+		if (i >= ic_buf_size) {
+			dev_err(dev, "%s: %s size=%d buf_size=%d\n", __func__,
+					"Buffer size exceeded", i, ic_buf_size);
+			return -EINVAL;
+		}
+		while (((*pbuf == ' ') || (*pbuf == ','))
+				&& (pbuf < (buf + buf_size))) {
+			last = *pbuf;
+			pbuf++;
+		}
+
+		if (pbuf >= (buf + buf_size))
+			break;
+
+		memset(scan_buf, 0, CYTTSP4_INPUT_ELEM_SZ);
+		if ((last == ',') && (*pbuf == ',')) {
+			dev_err(dev, "%s: %s \",,\" not allowed.\n", __func__,
+					"Invalid data format.");
+			return -EINVAL;
+		}
+		for (j = 0; j < (CYTTSP4_INPUT_ELEM_SZ - 1)
+				&& (pbuf < (buf + buf_size))
+				&& (*pbuf != ' ')
+				&& (*pbuf != ','); j++) {
+			last = *pbuf;
+			scan_buf[j] = *pbuf++;
+		}
+
+		ret = kstrtoul(scan_buf, 16, &value);
+		if (ret < 0) {
+			dev_err(dev, "%s: %s '%s' %s%s i=%d r=%d\n", __func__,
+					"Invalid data format. ", scan_buf,
+					"Use \"0xHH,...,0xHH\"", " instead.",
+					i, ret);
+			return ret;
+		}
+
+		ic_buf[i] = value;
+		i++;
+	}
+
+	return i;
+}
+
+/*
+ * SysFs store functions of each group member.
+ */
+static cyttsp4_store_function
+		cyttsp4_grpdata_store_functions[CY_IC_GRPNUM_NUM] = {
+	[CY_IC_GRPNUM_RESERVED] = cyttsp4_grpdata_store_void,
+	[CY_IC_GRPNUM_CMD_REGS] = cyttsp4_grpdata_store_operational_regs,
+	[CY_IC_GRPNUM_TCH_REP] = cyttsp4_grpdata_store_void,
+	[CY_IC_GRPNUM_DATA_REC] = cyttsp4_grpdata_store_void,
+	[CY_IC_GRPNUM_TEST_REC] = cyttsp4_grpdata_store_void,
+	[CY_IC_GRPNUM_PCFG_REC] = cyttsp4_grpdata_store_void,
+	[CY_IC_GRPNUM_TCH_PARM_VAL] = cyttsp4_grpdata_store_touch_params,
+	[CY_IC_GRPNUM_TCH_PARM_SIZE] = cyttsp4_grpdata_store_void,
+	[CY_IC_GRPNUM_RESERVED1] = cyttsp4_grpdata_store_void,
+	[CY_IC_GRPNUM_RESERVED2] = cyttsp4_grpdata_store_void,
+	[CY_IC_GRPNUM_OPCFG_REC] = cyttsp4_grpdata_store_void,
+	[CY_IC_GRPNUM_DDATA_REC] = cyttsp4_grpdata_store_void,
+	[CY_IC_GRPNUM_MDATA_REC] = cyttsp4_grpdata_store_void,
+	[CY_IC_GRPNUM_TEST_REGS] = cyttsp4_grpdata_store_test_regs,
+	[CY_IC_GRPNUM_BTN_KEYS] = cyttsp4_grpdata_store_void,
+	[CY_IC_GRPNUM_TTHE_REGS] = cyttsp4_grpdata_store_tthe_test_regs,
+};
+
+static ssize_t cyttsp4_ic_grpdata_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	ssize_t length;
+	int rc;
+
+	mutex_lock(&dad->sysfs_lock);
+	length = cyttsp4_ic_parse_input(dev, buf, size, dad->ic_buf,
+			CY_MAX_PRBUF_SIZE);
+	if (length <= 0) {
+		dev_err(dev, "%s: %s Group Data store\n", __func__,
+				"Malformed input for");
+		goto cyttsp4_ic_grpdata_store_exit;
+	}
+
+	dev_vdbg(dev, "%s: grpnum=%d grpoffset=%u\n",
+			__func__, dad->ic_grpnum, dad->ic_grpoffset);
+
+	if (dad->ic_grpnum >= CY_IC_GRPNUM_NUM) {
+		dev_err(dev, "%s: Group %d does not exist.\n",
+				__func__, dad->ic_grpnum);
+		goto cyttsp4_ic_grpdata_store_exit;
+	}
+
+	/* write ic_buf to log */
+	cyttsp4_pr_buf(dev, dad->pr_buf, dad->ic_buf, length, "ic_buf");
+
+	/* Call relevant store handler. */
+	rc = cyttsp4_grpdata_store_functions[dad->ic_grpnum] (dev, dad->ic_buf,
+			length);
+	if (rc < 0)
+		dev_err(dev, "%s: Failed to store for grpmun=%d.\n",
+				__func__, dad->ic_grpnum);
+
+cyttsp4_ic_grpdata_store_exit:
+	mutex_unlock(&dad->sysfs_lock);
+	dev_vdbg(dev, "%s: return size=%d\n", __func__, size);
+	return size;
+}
+
+static DEVICE_ATTR(ic_grpdata, S_IRUSR | S_IWUSR,
+	cyttsp4_ic_grpdata_show, cyttsp4_ic_grpdata_store);
+
+/*
+ * Execute scan command
+ */
+static int _cyttsp4_exec_scan_cmd(struct device *dev)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	u8 cmd_buf[CY_CMD_CAT_EXECUTE_PANEL_SCAN_CMD_SZ];
+	u8 return_buf[CY_CMD_CAT_EXECUTE_PANEL_SCAN_RET_SZ];
+
+	cmd_buf[0] = CY_CMD_CAT_EXEC_PANEL_SCAN;
+
+	return cyttsp4_request_exec_cmd(dad->ttsp, CY_MODE_CAT,
+			cmd_buf, CY_CMD_CAT_EXECUTE_PANEL_SCAN_CMD_SZ,
+			return_buf, CY_CMD_CAT_EXECUTE_PANEL_SCAN_RET_SZ,
+			CY_COMMAND_COMPLETE_TIMEOUT);
+}
+
+/*
+ * Retrieve panel data command
+ */
+static int _cyttsp4_ret_scan_data_cmd(struct device *dev, int read_offset,
+		int num_element, u8 data_type, u8 *return_buf)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	u8 cmd_buf[CY_CMD_CAT_RETRIEVE_PANEL_SCAN_CMD_SZ];
+
+	cmd_buf[0] = CY_CMD_CAT_RETRIEVE_PANEL_SCAN;
+	cmd_buf[1] = HI_BYTE(read_offset);
+	cmd_buf[2] = LO_BYTE(read_offset);
+	cmd_buf[3] = HI_BYTE(num_element);
+	cmd_buf[4] = LO_BYTE(num_element);
+	cmd_buf[5] = data_type;
+
+	return cyttsp4_request_exec_cmd(dad->ttsp, CY_MODE_CAT,
+			cmd_buf, CY_CMD_CAT_RETRIEVE_PANEL_SCAN_CMD_SZ,
+			return_buf, CY_CMD_CAT_RETRIEVE_PANEL_SCAN_RET_SZ,
+			CY_COMMAND_COMPLETE_TIMEOUT);
+}
+
+/*
+ * SysFs grpdata show function implementation of group 6.
+ * Prints contents of the touch parameters a row at a time.
+ */
+static ssize_t cyttsp4_get_panel_data_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	u8 return_buf[CY_CMD_CAT_RETRIEVE_PANEL_SCAN_RET_SZ];
+
+	int rc = 0;
+	int rc1 = 0;
+	int data_idx = 0;
+	int i = 0;
+	int print_idx = -1;
+	u8 cmd_param_ofs = dad->si->si_ofs.cmd_ofs + 1;
+	int read_byte = CY_CMD_CAT_RETRIEVE_PANEL_SCAN_RET_SZ + cmd_param_ofs;
+	int left_over_element = dad->heatmap.num_element;
+	int read_element_offset = CY_CMD_IN_DATA_OFFSET_VALUE;
+	int returned_element;
+	u8 element_start_offset = cmd_param_ofs
+		+ CY_CMD_CAT_RETRIEVE_PANEL_SCAN_RET_SZ;
+
+
+	rc = cyttsp4_request_exclusive(dad->ttsp,
+			CY_DA_REQUEST_EXCLUSIVE_TIMEOUT);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error on request exclusive r=%d\n",
+				__func__, rc);
+		goto cyttsp4_get_panel_data_show_err_release;
+	}
+
+	if (dad->heatmap.scan_start)	{
+		/* Start scan */
+		rc = _cyttsp4_exec_scan_cmd(dev);
+		if (rc < 0) {
+			dev_err(dev, "%s: Error on _cyttsp4_exec_scan_cmd()\n",
+				__func__);
+			goto cyttsp4_get_panel_data_show_err_release;
+		}
+	}
+
+	/* retrieve scan data */
+	rc = _cyttsp4_ret_scan_data_cmd(dev, read_element_offset,
+			left_over_element, dad->heatmap.data_type, return_buf);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error on _cyttsp4_ret_scan_data_cmd(), offset=%d num_element:%d\n",
+			__func__, read_element_offset, left_over_element);
+		goto cyttsp4_get_panel_data_show_err_release;
+	}
+	if (return_buf[CY_CMD_OUT_STATUS_OFFSET] != CY_CMD_STATUS_SUCCESS) {
+		dev_err(dev, "%s: Fail on _cyttsp4_ret_scan_data_cmd(), offset=%d num_element:%d\n",
+			__func__, read_element_offset, left_over_element);
+		goto cyttsp4_get_panel_data_show_err_release;
+	}
+
+	returned_element = return_buf[CY_CMD_RET_PNL_OUT_ELMNT_SZ_OFFS_H] * 256
+		+ return_buf[CY_CMD_RET_PNL_OUT_ELMNT_SZ_OFFS_L];
+
+	dev_dbg(dev, "%s: _cyttsp4_ret_scan_data_cmd(): num_element:%d\n",
+		__func__, returned_element);
+
+	/* read data */
+	read_byte += returned_element *
+			(return_buf[CY_CMD_RET_PNL_OUT_DATA_FORMAT_OFFS] &
+				CY_CMD_RET_PANEL_ELMNT_SZ_MASK);
+
+	rc = cyttsp4_read(dad->ttsp, CY_MODE_CAT, 0, dad->ic_buf, read_byte);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error on read r=%d\n", __func__, rc);
+		goto cyttsp4_get_panel_data_show_err_release;
+	}
+
+	left_over_element = dad->heatmap.num_element - returned_element;
+	read_element_offset = returned_element;
+	data_idx = read_byte;
+
+	while (left_over_element > 0) {
+		/* get the data */
+		rc = _cyttsp4_ret_scan_data_cmd(dev, read_element_offset,
+				left_over_element, dad->heatmap.data_type,
+				return_buf);
+		if (rc < 0) {
+			dev_err(dev, "%s: Error %d  on _cyttsp4_ret_scan_data_cmd(), offset=%d num_element:%d\n",
+				__func__, rc, read_element_offset,
+				left_over_element);
+			goto cyttsp4_get_panel_data_show_err_release;
+		}
+		if (return_buf[CY_CMD_OUT_STATUS_OFFSET]
+				!= CY_CMD_STATUS_SUCCESS) {
+			dev_err(dev, "%s: Fail on _cyttsp4_ret_scan_data_cmd(), offset=%d num_element:%d\n",
+				__func__, read_element_offset,
+				left_over_element);
+			goto cyttsp4_get_panel_data_show_err_release;
+		}
+
+		returned_element =
+			return_buf[CY_CMD_RET_PNL_OUT_ELMNT_SZ_OFFS_H] * 256
+			+ return_buf[CY_CMD_RET_PNL_OUT_ELMNT_SZ_OFFS_L];
+
+		dev_dbg(dev, "%s: _cyttsp4_ret_scan_data_cmd(): num_element:%d\n",
+			__func__, returned_element);
+
+		/* Check if we requested more elements than the device has */
+		if (returned_element == 0) {
+			dev_dbg(dev, "%s: returned_element=0, left_over_element=%d\n",
+				__func__, left_over_element);
+			break;
+		}
+
+		/* DO read */
+		read_byte = returned_element *
+			(return_buf[CY_CMD_RET_PNL_OUT_DATA_FORMAT_OFFS]
+				& CY_CMD_RET_PANEL_ELMNT_SZ_MASK);
+
+		rc = cyttsp4_read(dad->ttsp, CY_MODE_CAT,
+				element_start_offset,
+				dad->ic_buf + data_idx,
+				read_byte);
+		if (rc < 0) {
+			dev_err(dev, "%s: Error on read r=%d\n", __func__, rc);
+			goto cyttsp4_get_panel_data_show_err_release;
+		}
+
+		/* Update element status */
+		left_over_element -= returned_element;
+		read_element_offset += returned_element;
+		data_idx += read_byte;
+
+	}
+	/* update on the buffer */
+	dad->ic_buf[CY_CMD_RET_PNL_OUT_ELMNT_SZ_OFFS_H + cmd_param_ofs] =
+		HI_BYTE(read_element_offset);
+	dad->ic_buf[CY_CMD_RET_PNL_OUT_ELMNT_SZ_OFFS_L + cmd_param_ofs] =
+		LO_BYTE(read_element_offset);
+
+cyttsp4_get_panel_data_show_err_release:
+	rc1 = cyttsp4_release_exclusive(dad->ttsp);
+	if (rc1 < 0) {
+		dev_err(dev, "%s: Error on release exclusive r=%d\n",
+				__func__, rc1);
+		goto cyttsp4_get_panel_data_show_err_sysfs;
+	}
+
+	if (rc < 0)
+		goto cyttsp4_get_panel_data_show_err_sysfs;
+
+	print_idx = 0;
+	print_idx += scnprintf(buf, CY_MAX_PRBUF_SIZE, "CY_DATA:");
+	for (i = 0; i < data_idx; i++) {
+		print_idx += scnprintf(buf + print_idx,
+				CY_MAX_PRBUF_SIZE - print_idx,
+				"%02X ", dad->ic_buf[i]);
+	}
+	print_idx += scnprintf(buf + print_idx, CY_MAX_PRBUF_SIZE - print_idx,
+			":(%d bytes)\n", data_idx);
+
+cyttsp4_get_panel_data_show_err_sysfs:
+	return print_idx;
+}
+
+/*
+ * SysFs grpdata show function implementation of group 6.
+ * Prints contents of the touch parameters a row at a time.
+ */
+static int cyttsp4_get_panel_data_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	ssize_t length;
+
+	mutex_lock(&dad->sysfs_lock);
+
+	length = cyttsp4_ic_parse_input(dev, buf, size, dad->ic_buf,
+			CY_MAX_PRBUF_SIZE);
+	if (length <= 0) {
+		dev_err(dev, "%s: %s Group Data store\n", __func__,
+				"Malformed input for");
+		goto cyttsp4_get_panel_data_store_exit;
+	}
+
+	dev_vdbg(dev, "%s: grpnum=%d grpoffset=%u\n",
+			__func__, dad->ic_grpnum, dad->ic_grpoffset);
+
+	if (dad->ic_grpnum >= CY_IC_GRPNUM_NUM) {
+		dev_err(dev, "%s: Group %d does not exist.\n",
+				__func__, dad->ic_grpnum);
+		goto cyttsp4_get_panel_data_store_exit;
+	}
+
+	pm_runtime_get_sync(dev);
+	/*update parameter value */
+	dad->heatmap.num_element = dad->ic_buf[4] + (dad->ic_buf[3] * 256);
+	dad->heatmap.data_type = dad->ic_buf[5];
+
+	if (dad->ic_buf[6] > 0)
+		dad->heatmap.scan_start = true;
+	else
+		dad->heatmap.scan_start = false;
+	pm_runtime_put(dev);
+
+cyttsp4_get_panel_data_store_exit:
+	mutex_unlock(&dad->sysfs_lock);
+	dev_vdbg(dev, "%s: return size=%d\n", __func__, size);
+	return size;
+}
+
+static DEVICE_ATTR(get_panel_data, S_IRUSR | S_IWUSR,
+	cyttsp4_get_panel_data_show, cyttsp4_get_panel_data_store);
+
+#ifdef CONFIG_PM_SLEEP
+static int cyttsp4_device_access_suspend(struct device *dev)
+{
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+
+	dev_dbg(dev, "%s\n", __func__);
+
+	if (!mutex_trylock(&dad->sysfs_lock))
+		return -EBUSY;
+
+	mutex_unlock(&dad->sysfs_lock);
+	return 0;
+}
+
+static int cyttsp4_device_access_resume(struct device *dev)
+{
+	dev_dbg(dev, "%s\n", __func__);
+
+	return 0;
+}
+#endif
+
+static const struct dev_pm_ops cyttsp4_device_access_pm_ops = {
+	SET_SYSTEM_SLEEP_PM_OPS(cyttsp4_device_access_suspend,
+			cyttsp4_device_access_resume)
+};
+
+static int cyttsp4_setup_sysfs(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	int rc = 0;
+
+	rc = device_create_file(dev, &dev_attr_ic_grpnum);
+	if (rc) {
+		dev_err(dev, "%s: Error, could not create ic_grpnum\n",
+				__func__);
+		goto exit;
+	}
+
+	rc = device_create_file(dev, &dev_attr_ic_grpoffset);
+	if (rc) {
+		dev_err(dev, "%s: Error, could not create ic_grpoffset\n",
+				__func__);
+		goto unregister_grpnum;
+	}
+
+	rc = device_create_file(dev, &dev_attr_ic_grpdata);
+	if (rc) {
+		dev_err(dev, "%s: Error, could not create ic_grpdata\n",
+				__func__);
+		goto unregister_grpoffset;
+	}
+
+	rc = device_create_file(dev, &dev_attr_get_panel_data);
+	if (rc) {
+		dev_err(dev, "%s: Error, could not create get_panel_data\n",
+				__func__);
+		goto unregister_grpdata;
+	}
+
+	dad->sysfs_nodes_created = true;
+	return rc;
+
+unregister_grpdata:
+	device_remove_file(dev, &dev_attr_get_panel_data);
+unregister_grpoffset:
+	device_remove_file(dev, &dev_attr_ic_grpoffset);
+unregister_grpnum:
+	device_remove_file(dev, &dev_attr_ic_grpnum);
+exit:
+	return rc;
+}
+
+static int cyttsp4_setup_sysfs_attention(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	int rc = 0;
+
+	dev_vdbg(dev, "%s\n", __func__);
+
+	dad->si = cyttsp4_request_sysinfo(ttsp);
+	if (!dad->si)
+		return -1;
+
+	rc = cyttsp4_setup_sysfs(ttsp);
+
+	cyttsp4_unsubscribe_attention(ttsp, CY_ATTEN_STARTUP,
+		cyttsp4_setup_sysfs_attention, 0);
+
+	return rc;
+
+}
+
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_DEVICE_ACCESS_API
+static struct cyttsp4_device *device_access_devices[CY_MAX_NUM_CORE_DEVS];
+static DEFINE_MUTEX(device_access_devices_lock);
+
+static void insert_da_device(struct cyttsp4_device *ttsp)
+{
+	int i;
+
+	mutex_lock(&device_access_devices_lock);
+	for (i = 0; i < ARRAY_SIZE(device_access_devices); i++)
+		if (!device_access_devices[i]) {
+			device_access_devices[i] = ttsp;
+			goto exit;
+		}
+exit:
+	mutex_unlock(&device_access_devices_lock);
+}
+
+static void remove_da_device(struct cyttsp4_device *ttsp)
+{
+	int i;
+
+	mutex_lock(&device_access_devices_lock);
+	for (i = 0; i < ARRAY_SIZE(device_access_devices); i++)
+		if (device_access_devices[i] == ttsp) {
+			device_access_devices[i] = NULL;
+			goto exit;
+		}
+exit:
+	mutex_unlock(&device_access_devices_lock);
+}
+
+static struct cyttsp4_device *_find_da_device(const char *core_name)
+{
+	char ttsp_name[64];
+	int i;
+
+	scnprintf(ttsp_name, 64, "%s.%s", CYTTSP4_DEVICE_ACCESS_NAME,
+			core_name);
+
+	for (i = 0; i < ARRAY_SIZE(device_access_devices); i++) {
+		struct cyttsp4_device *ttsp = device_access_devices[i];
+		if (!ttsp || strncmp(dev_name(&ttsp->dev), ttsp_name, 64))
+			continue;
+
+		return ttsp;
+	}
+
+	return NULL;
+}
+
+int cyttsp4_device_access_read_command(const char *core_name, int ic_grpnum,
+		int ic_grpoffset, u8 *buf, int buf_size)
+{
+	struct cyttsp4_device_access_data *dad;
+	struct cyttsp4_device *ttsp;
+	struct device *dev;
+	int prev_grpnum;
+	int rc;
+
+	might_sleep();
+
+	/* Validate ic_grpnum */
+	if (ic_grpnum >= CY_IC_GRPNUM_NUM) {
+		pr_err("%s: Group %d does not exist.\n", __func__, ic_grpnum);
+		return -EINVAL;
+	}
+
+	/* Validate ic_grpoffset */
+	if (ic_grpoffset > 0xFFFF) {
+		pr_err("%s: Offset %d invalid.\n", __func__, ic_grpoffset);
+		return -EINVAL;
+	}
+
+	if (!core_name)
+		core_name = CY_DEFAULT_CORE_ID;
+
+	mutex_lock(&device_access_devices_lock);
+	/* Find device */
+	ttsp = _find_da_device(core_name);
+	if (!ttsp) {
+		pr_err("%s: No device.\n", __func__);
+		rc = -ENODEV;
+		goto exit_unlock_da;
+	}
+
+	dev = &ttsp->dev;
+	dad = dev_get_drvdata(dev);
+
+	/* Check sysinfo */
+	if (!dad->si) {
+		pr_err("%s: No sysinfo.\n", __func__);
+		rc = -ENODEV;
+		goto exit_unlock_da;
+	}
+
+	mutex_lock(&dad->sysfs_lock);
+	/*
+	 * Block grpnum change when own_exclusive flag is set
+	 * which means the current grpnum implementation requires
+	 * running exclusively on some consecutive grpdata operations
+	 */
+	if (dad->own_exclusive && dad->ic_grpnum != ic_grpnum) {
+		dev_err(dev, "%s: own_exclusive\n", __func__);
+		rc = -EBUSY;
+		goto exit;
+	}
+
+	prev_grpnum = dad->ic_grpnum;
+	dad->ic_grpnum = ic_grpnum;
+	dad->ic_grpoffset = ic_grpoffset;
+
+	rc = cyttsp4_grpdata_show_functions[dad->ic_grpnum] (dev,
+			buf, buf_size);
+
+exit:
+	mutex_unlock(&dad->sysfs_lock);
+exit_unlock_da:
+	mutex_unlock(&device_access_devices_lock);
+	return rc;
+}
+EXPORT_SYMBOL_GPL(cyttsp4_device_access_read_command);
+
+int cyttsp4_device_access_write_command(const char *core_name, int ic_grpnum,
+		int ic_grpoffset, u8 *buf, int length)
+{
+	struct cyttsp4_device_access_data *dad;
+	struct cyttsp4_device *ttsp;
+	struct device *dev;
+	int prev_grpnum;
+	int rc;
+
+	might_sleep();
+
+	/* Validate ic_grpnum */
+	if (ic_grpnum >= CY_IC_GRPNUM_NUM) {
+		pr_err("%s: Group %d does not exist.\n", __func__, ic_grpnum);
+		return -EINVAL;
+	}
+
+	/* Validate ic_grpoffset */
+	if (ic_grpoffset > 0xFFFF) {
+		pr_err("%s: Offset %d invalid.\n", __func__, ic_grpoffset);
+		return -EINVAL;
+	}
+
+	if (!core_name)
+		core_name = CY_DEFAULT_CORE_ID;
+
+	mutex_lock(&device_access_devices_lock);
+	/* Find device */
+	ttsp = _find_da_device(core_name);
+	if (!ttsp) {
+		pr_err("%s: No device.\n", __func__);
+		rc = -ENODEV;
+		goto exit_unlock_da;
+	}
+
+	dev = &ttsp->dev;
+	dad = dev_get_drvdata(dev);
+
+	/* Check sysinfo */
+	if (!dad->si) {
+		pr_err("%s: No sysinfo.\n", __func__);
+		rc = -ENODEV;
+		goto exit_unlock_da;
+	}
+
+	mutex_lock(&dad->sysfs_lock);
+	/*
+	 * Block grpnum change when own_exclusive flag is set
+	 * which means the current grpnum implementation requires
+	 * running exclusively on some consecutive grpdata operations
+	 */
+	if (dad->own_exclusive && dad->ic_grpnum != ic_grpnum) {
+		dev_err(dev, "%s: own_exclusive\n", __func__);
+		rc = -EBUSY;
+		goto exit;
+	}
+
+	prev_grpnum = dad->ic_grpnum;
+	dad->ic_grpnum = ic_grpnum;
+	dad->ic_grpoffset = ic_grpoffset;
+
+	/* write ic_buf to log */
+	cyttsp4_pr_buf(dev, dad->pr_buf, buf, length, "ic_buf");
+
+	/* Call relevant store handler. */
+	rc = cyttsp4_grpdata_store_functions[dad->ic_grpnum] (dev, buf,
+			length);
+	if (rc < 0)
+		dev_err(dev, "%s: Failed to store for grpmun=%d.\n",
+				__func__, dad->ic_grpnum);
+
+exit:
+	mutex_unlock(&dad->sysfs_lock);
+exit_unlock_da:
+	mutex_unlock(&device_access_devices_lock);
+	return rc;
+}
+EXPORT_SYMBOL_GPL(cyttsp4_device_access_write_command);
+#endif
+
+static int cyttsp4_device_access_probe(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_device_access_data *dad;
+	struct cyttsp4_device_access_platform_data *pdata =
+			dev_get_platdata(dev);
+	int rc = 0;
+
+	dev_info(dev, "%s\n", __func__);
+	dev_dbg(dev, "%s: debug on\n", __func__);
+	dev_vdbg(dev, "%s: verbose debug on\n", __func__);
+
+	dad = kzalloc(sizeof(*dad), GFP_KERNEL);
+	if (dad == NULL) {
+		dev_err(dev, "%s: Error, kzalloc\n", __func__);
+		rc = -ENOMEM;
+		goto cyttsp4_device_access_probe_data_failed;
+	}
+
+	mutex_init(&dad->sysfs_lock);
+	init_waitqueue_head(&dad->wait_q);
+	dad->ttsp = ttsp;
+	dad->pdata = pdata;
+	dad->ic_grpnum = CY_IC_GRPNUM_TCH_REP;
+	dad->test.cur_cmd = -1;
+	dad->heatmap.num_element = 200;
+	dev_set_drvdata(dev, dad);
+
+	pm_runtime_enable(dev);
+
+	/* get sysinfo */
+	dad->si = cyttsp4_request_sysinfo(ttsp);
+	if (dad->si) {
+		rc = cyttsp4_setup_sysfs(ttsp);
+		if (rc)
+			goto cyttsp4_device_access_setup_sysfs_failed;
+	} else {
+		dev_err(dev, "%s: Fail get sysinfo pointer from core p=%p\n",
+				__func__, dad->si);
+		cyttsp4_subscribe_attention(ttsp, CY_ATTEN_STARTUP,
+			cyttsp4_setup_sysfs_attention, 0);
+	}
+
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_DEVICE_ACCESS_API
+	insert_da_device(ttsp);
+#endif
+	dev_dbg(dev, "%s: ok\n", __func__);
+	return 0;
+
+ cyttsp4_device_access_setup_sysfs_failed:
+	pm_runtime_suspend(dev);
+	pm_runtime_disable(dev);
+	dev_set_drvdata(dev, NULL);
+	kfree(dad);
+ cyttsp4_device_access_probe_data_failed:
+	dev_err(dev, "%s failed.\n", __func__);
+	return rc;
+}
+
+static int cyttsp4_device_access_release(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_device_access_data *dad = dev_get_drvdata(dev);
+	u8 ic_buf[CY_NULL_CMD_MODE_INDEX + 1];
+	dev_dbg(dev, "%s\n", __func__);
+
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_DEVICE_ACCESS_API
+	remove_da_device(ttsp);
+#endif
+
+	if (dad->own_exclusive) {
+		dev_err(dev, "%s: Can't unload in CAT mode. First switch back to Operational mode\n"
+				, __func__);
+		ic_buf[CY_NULL_CMD_MODE_INDEX] = CY_HST_OPERATE;
+		cyttsp4_test_cmd_mode(dad, ic_buf, CY_NULL_CMD_MODE_INDEX + 1);
+	}
+
+	pm_runtime_suspend(dev);
+	pm_runtime_disable(dev);
+
+	if (dad->sysfs_nodes_created) {
+		device_remove_file(dev, &dev_attr_ic_grpnum);
+		device_remove_file(dev, &dev_attr_ic_grpoffset);
+		device_remove_file(dev, &dev_attr_ic_grpdata);
+		device_remove_file(dev, &dev_attr_get_panel_data);
+	} else {
+		cyttsp4_unsubscribe_attention(ttsp, CY_ATTEN_STARTUP,
+			cyttsp4_setup_sysfs_attention, 0);
+	}
+
+	dev_set_drvdata(dev, NULL);
+	kfree(dad);
+	return 0;
+}
+
+static struct cyttsp4_driver cyttsp4_device_access_driver = {
+	.probe = cyttsp4_device_access_probe,
+	.remove = cyttsp4_device_access_release,
+	.driver = {
+		.name = CYTTSP4_DEVICE_ACCESS_NAME,
+		.bus = &cyttsp4_bus_type,
+		.owner = THIS_MODULE,
+		.pm = &cyttsp4_device_access_pm_ops,
+	},
+};
+
+static struct cyttsp4_device_access_platform_data
+	_cyttsp4_device_access_platform_data = {
+	.device_access_dev_name = CYTTSP4_DEVICE_ACCESS_NAME,
+};
+
+static const char cyttsp4_device_access_name[] = CYTTSP4_DEVICE_ACCESS_NAME;
+static struct cyttsp4_device_info
+	cyttsp4_device_access_infos[CY_MAX_NUM_CORE_DEVS];
+
+static char *core_ids[CY_MAX_NUM_CORE_DEVS] = {
+	CY_DEFAULT_CORE_ID,
+	NULL,
+	NULL,
+	NULL,
+	NULL
+};
+
+static int num_core_ids = 1;
+
+module_param_array(core_ids, charp, &num_core_ids, 0);
+MODULE_PARM_DESC(core_ids,
+	"Core id list of cyttsp4 core devices for device access module");
+
+static int __init cyttsp4_device_access_init(void)
+{
+	int rc = 0;
+	int i, j;
+
+	/* Check for invalid or duplicate core_ids */
+	for (i = 0; i < num_core_ids; i++) {
+		if (!strlen(core_ids[i])) {
+			pr_err("%s: core_id %d is empty\n",
+				__func__, i+1);
+			return -EINVAL;
+		}
+		for (j = i+1; j < num_core_ids; j++)
+			if (!strcmp(core_ids[i], core_ids[j])) {
+				pr_err("%s: core_ids %d and %d are same\n",
+					__func__, i+1, j+1);
+				return -EINVAL;
+			}
+	}
+
+	for (i = 0; i < num_core_ids; i++) {
+		cyttsp4_device_access_infos[i].name =
+			cyttsp4_device_access_name;
+		cyttsp4_device_access_infos[i].core_id = core_ids[i];
+		cyttsp4_device_access_infos[i].platform_data =
+			&_cyttsp4_device_access_platform_data;
+		pr_info("%s: Registering device access device for core_id: %s\n",
+			__func__, cyttsp4_device_access_infos[i].core_id);
+		rc = cyttsp4_register_device(&cyttsp4_device_access_infos[i]);
+		if (rc < 0) {
+			pr_err("%s: Error, failed registering device\n",
+				__func__);
+			goto fail_unregister_devices;
+		}
+	}
+	rc = cyttsp4_register_driver(&cyttsp4_device_access_driver);
+	if (rc) {
+		pr_err("%s: Error, failed registering driver\n", __func__);
+		goto fail_unregister_devices;
+	}
+
+	pr_info("%s: Cypress TTSP Device Access (Built %s) rc=%d\n",
+		 __func__, CY_DRIVER_DATE, rc);
+	return 0;
+
+fail_unregister_devices:
+	for (i--; i >= 0; i--) {
+		cyttsp4_unregister_device(cyttsp4_device_access_infos[i].name,
+			cyttsp4_device_access_infos[i].core_id);
+		pr_info("%s: Unregistering device access device for core_id: %s\n",
+			__func__, cyttsp4_device_access_infos[i].core_id);
+	}
+	return rc;
+}
+module_init(cyttsp4_device_access_init);
+
+static void __exit cyttsp4_device_access_exit(void)
+{
+	int i;
+
+	cyttsp4_unregister_driver(&cyttsp4_device_access_driver);
+	for (i = 0; i < num_core_ids; i++) {
+		cyttsp4_unregister_device(cyttsp4_device_access_infos[i].name,
+			cyttsp4_device_access_infos[i].core_id);
+		pr_info("%s: Unregistering device access device for core_id: %s\n",
+			__func__, cyttsp4_device_access_infos[i].core_id);
+	}
+	pr_info("%s: module exit\n", __func__);
+}
+module_exit(cyttsp4_device_access_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Cypress TrueTouch(R) Standard Product Device Access Driver");
+MODULE_AUTHOR("Cypress Semiconductor");
diff --git a/drivers/input/touchscreen/cypress/cyttsp4_device_access.h b/drivers/input/touchscreen/cypress/cyttsp4_device_access.h
new file mode 100644
index 0000000..d480dcb
--- /dev/null
+++ b/drivers/input/touchscreen/cypress/cyttsp4_device_access.h
@@ -0,0 +1,67 @@
+/*
+ * cyttsp4_device_access.h
+ * Cypress TrueTouch(TM) Standard Product V4 Device Access module.
+ * Configuration and Test command/status user interface.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2012 Cypress Semiconductor
+ * Copyright (C) 2011 Sony Ericsson Mobile Communications AB.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#ifndef _LINUX_CYTTSP4_DEVICE_ACCESS_H
+#define _LINUX_CYTTSP4_DEVICE_ACCESS_H
+
+#define CYTTSP4_DEVICE_ACCESS_NAME "cyttsp4_device_access"
+
+#define CYTTSP4_INPUT_ELEM_SZ (sizeof("0xHH") + 1)
+#define CYTTSP4_TCH_PARAM_SIZE_BLK_SZ 128
+
+/* Timeout values in ms. */
+#define CY_DA_REQUEST_EXCLUSIVE_TIMEOUT	500
+
+struct cyttsp4_device_access_platform_data {
+	char const *device_access_dev_name;
+};
+
+#define CY_CMD_IN_DATA_OFFSET_VALUE 0
+
+#define CY_CMD_OUT_STATUS_OFFSET 0
+#define CY_CMD_RET_PNL_OUT_ELMNT_SZ_OFFS_H 2
+#define CY_CMD_RET_PNL_OUT_ELMNT_SZ_OFFS_L 3
+#define CY_CMD_RET_PNL_OUT_DATA_FORMAT_OFFS 4
+
+#define CY_CMD_RET_PANEL_ELMNT_SZ_MASK 0x07
+
+enum cyttsp4_scan_data_type {
+	CY_MUT_RAW,
+	CY_MUT_BASE,
+	CY_MUT_DIFF,
+	CY_SELF_RAW,
+	CY_SELF_BASE,
+	CY_SELF_DIFF,
+	CY_BAL_RAW,
+	CY_BAL_BASE,
+	CY_BAL_DIFF,
+};
+
+#endif /* _LINUX_CYTTSP4_DEVICE_ACCESS_H */
diff --git a/drivers/input/touchscreen/cypress/cyttsp4_devtree.c b/drivers/input/touchscreen/cypress/cyttsp4_devtree.c
new file mode 100644
index 0000000..d593042
--- /dev/null
+++ b/drivers/input/touchscreen/cypress/cyttsp4_devtree.c
@@ -0,0 +1,765 @@
+/*
+ * cyttsp4_devtree.c
+ * Cypress TrueTouch(TM) Standard Product V4 Device Tree Support Driver.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2013 Cypress Semiconductor
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#include <linux/device.h>
+#include <linux/err.h>
+#include <linux/of_device.h>
+#include <linux/slab.h>
+
+/* cyttsp */
+#include <linux/cyttsp4_bus.h>
+#include <linux/cyttsp4_core.h>
+#include <linux/cyttsp4_btn.h>
+#include <linux/cyttsp4_mt.h>
+#include <linux/cyttsp4_proximity.h>
+#include <linux/cyttsp4_platform.h>
+
+#include "cyttsp4_regs.h"
+#include "cyttsp4_devtree.h"
+
+#define ENABLE_VIRTUAL_KEYS
+
+#define MAX_NAME_LENGTH		64
+
+enum cyttsp4_device_type {
+	DEVICE_MT,
+	DEVICE_BTN,
+	DEVICE_PROXIMITY,
+	DEVICE_TYPE_MAX,
+};
+
+struct cyttsp4_device_pdata_func {
+	void *(*create_and_get_pdata)(struct device_node *);
+	void (*free_pdata)(void *);
+};
+
+#ifdef ENABLE_VIRTUAL_KEYS
+static struct kobject *board_properties_kobj;
+
+struct cyttsp4_virtual_keys {
+	struct kobj_attribute kobj_attr;
+	u16 *data;
+	int size;
+};
+#endif
+
+struct cyttsp4_extended_mt_platform_data {
+	struct cyttsp4_mt_platform_data pdata;
+#ifdef ENABLE_VIRTUAL_KEYS
+	struct cyttsp4_virtual_keys vkeys;
+#endif
+};
+
+static inline int get_inp_dev_name(struct device_node *dev_node,
+		const char **inp_dev_name)
+{
+	return of_property_read_string(dev_node, "cy,inp_dev_name",
+			inp_dev_name);
+}
+
+static u16 *create_and_get_u16_array(struct device_node *dev_node,
+		const char *name, int *size)
+{
+	const __be32 *values;
+	u16 *val_array;
+	int len;
+	int sz;
+	int rc;
+	int i;
+
+	values = of_get_property(dev_node, name, &len);
+	if (values == NULL)
+		return NULL;
+
+	sz = len / sizeof(u32);
+	pr_debug("%s: %s size:%d\n", __func__, name, sz);
+
+	val_array = kzalloc(sz * sizeof(u16), GFP_KERNEL);
+	if (val_array == NULL) {
+		rc = -ENOMEM;
+		goto fail;
+	}
+
+	for (i = 0; i < sz; i++)
+		val_array[i] = (u16)be32_to_cpup(values++);
+
+	*size = sz;
+
+	return val_array;
+
+fail:
+	return ERR_PTR(rc);
+}
+
+static struct touch_framework *create_and_get_touch_framework(
+		struct device_node *dev_node)
+{
+	struct touch_framework *frmwrk;
+	u16 *abs;
+	int size;
+	int rc;
+
+	abs = create_and_get_u16_array(dev_node, "cy,abs", &size);
+	if (IS_ERR_OR_NULL(abs))
+		return (void *)abs;
+
+	/* Check for valid abs size */
+	if (size % CY_NUM_ABS_SET) {
+		rc = -EINVAL;
+		goto fail_free_abs;
+	}
+
+	frmwrk = kzalloc(sizeof(*frmwrk), GFP_KERNEL);
+	if (frmwrk == NULL) {
+		rc = -ENOMEM;
+		goto fail_free_abs;
+	}
+
+	frmwrk->abs = abs;
+	frmwrk->size = size;
+
+	return frmwrk;
+
+fail_free_abs:
+	kfree(abs);
+
+	return ERR_PTR(rc);
+}
+
+static void free_touch_framework(struct touch_framework *frmwrk)
+{
+	kfree(frmwrk->abs);
+	kfree(frmwrk);
+}
+
+#ifdef ENABLE_VIRTUAL_KEYS
+#define VIRTUAL_KEY_ELEMENT_SIZE	5
+static ssize_t virtual_keys_show(struct kobject *kobj,
+		struct kobj_attribute *attr, char *buf)
+{
+	struct cyttsp4_virtual_keys *vkeys = container_of(attr,
+		struct cyttsp4_virtual_keys, kobj_attr);
+	u16 *data = vkeys->data;
+	int size = vkeys->size;
+	int index;
+	int i;
+
+	index = 0;
+	for (i = 0; i < size; i += VIRTUAL_KEY_ELEMENT_SIZE)
+		index += scnprintf(buf + index, CY_MAX_PRBUF_SIZE - index,
+			"0x01:%d:%d:%d:%d:%d\n",
+			data[i], data[i+1], data[i+2], data[i+3], data[i+4]);
+
+	return index;
+}
+
+static int setup_virtual_keys(struct device_node *dev_node,
+		const char *inp_dev_name, struct cyttsp4_virtual_keys *vkeys)
+{
+	char *name;
+	u16 *data;
+	int size;
+	int rc;
+
+	data = create_and_get_u16_array(dev_node, "cy,virtual_keys", &size);
+	if (data == NULL)
+		return 0;
+	else if (IS_ERR(data)) {
+		rc = PTR_ERR(data);
+		goto fail;
+	}
+
+	/* Check for valid virtual keys size */
+	if (size % VIRTUAL_KEY_ELEMENT_SIZE) {
+		rc = -EINVAL;
+		goto fail_free_data;
+	}
+
+	name = kzalloc(MAX_NAME_LENGTH, GFP_KERNEL);
+	if (name == NULL) {
+		rc = -ENOMEM;
+		goto fail_free_data;
+	}
+
+	snprintf(name, MAX_NAME_LENGTH, "virtualkeys.%s", inp_dev_name);
+
+	vkeys->data = data;
+	vkeys->size = size;
+
+	/* TODO: Instantiate in board file and export it */
+	if (board_properties_kobj == NULL)
+		board_properties_kobj =
+			kobject_create_and_add("board_properties", NULL);
+	if (board_properties_kobj == NULL) {
+		pr_err("%s: Cannot get board_properties kobject!\n", __func__);
+		rc = -EINVAL;
+		goto fail_free_name;
+	}
+
+	/* Initialize dynamic SysFs attribute */
+	sysfs_attr_init(&vkeys->kobj_attr.attr);
+	vkeys->kobj_attr.attr.name = name;
+	vkeys->kobj_attr.attr.mode = S_IRUGO;
+	vkeys->kobj_attr.show = virtual_keys_show;
+
+	rc = sysfs_create_file(board_properties_kobj, &vkeys->kobj_attr.attr);
+	if (rc)
+		goto fail_del_kobj;
+
+	return 0;
+
+fail_del_kobj:
+	kobject_del(board_properties_kobj);
+fail_free_name:
+	kfree(name);
+	vkeys->kobj_attr.attr.name = NULL;
+fail_free_data:
+	kfree(data);
+	vkeys->data = NULL;
+fail:
+	return rc;
+}
+
+static void free_virtual_keys(struct cyttsp4_virtual_keys *vkeys)
+{
+	if (board_properties_kobj)
+		sysfs_remove_file(board_properties_kobj,
+			&vkeys->kobj_attr.attr);
+
+	kfree(vkeys->data);
+	kfree(vkeys->kobj_attr.attr.name);
+}
+#endif
+
+static void *create_and_get_mt_pdata(struct device_node *dev_node)
+{
+	struct cyttsp4_extended_mt_platform_data *ext_pdata;
+	struct cyttsp4_mt_platform_data *pdata;
+	u32 value;
+	int rc;
+
+	ext_pdata = kzalloc(sizeof(*ext_pdata), GFP_KERNEL);
+	if (ext_pdata == NULL) {
+		rc = -ENOMEM;
+		goto fail;
+	}
+
+	pdata = &ext_pdata->pdata;
+
+	rc = get_inp_dev_name(dev_node, &pdata->inp_dev_name);
+	if (rc)
+		goto fail_free_pdata;
+
+	/* Optional fields */
+	rc = of_property_read_u32(dev_node, "cy,flags", &value);
+	if (!rc)
+		pdata->flags = value;
+
+	rc = of_property_read_u32(dev_node, "cy,vkeys_x", &value);
+	if (!rc)
+		pdata->vkeys_x = value;
+
+	rc = of_property_read_u32(dev_node, "cy,vkeys_y", &value);
+	if (!rc)
+		pdata->vkeys_y = value;
+
+	/* Required fields */
+	pdata->frmwrk = create_and_get_touch_framework(dev_node);
+	if (pdata->frmwrk == NULL) {
+		rc = -EINVAL;
+		goto fail_free_pdata;
+	} else if (IS_ERR(pdata->frmwrk)) {
+		rc = PTR_ERR(pdata->frmwrk);
+		goto fail_free_pdata;
+	}
+#ifdef ENABLE_VIRTUAL_KEYS
+	rc = setup_virtual_keys(dev_node, pdata->inp_dev_name,
+			&ext_pdata->vkeys);
+	if (rc) {
+		pr_err("%s: Cannot setup virtual keys!\n", __func__);
+		goto fail_free_pdata;
+	}
+#endif
+	return pdata;
+
+fail_free_pdata:
+	kfree(ext_pdata);
+fail:
+	return ERR_PTR(rc);
+}
+
+static void free_mt_pdata(void *pdata)
+{
+	struct cyttsp4_mt_platform_data *mt_pdata =
+		(struct cyttsp4_mt_platform_data *)pdata;
+	struct cyttsp4_extended_mt_platform_data *ext_mt_pdata =
+		container_of(mt_pdata,
+			struct cyttsp4_extended_mt_platform_data, pdata);
+
+	free_touch_framework(mt_pdata->frmwrk);
+#ifdef ENABLE_VIRTUAL_KEYS
+	free_virtual_keys(&ext_mt_pdata->vkeys);
+#endif
+	kfree(ext_mt_pdata);
+}
+
+static void *create_and_get_btn_pdata(struct device_node *dev_node)
+{
+	struct cyttsp4_btn_platform_data *pdata;
+	int rc;
+
+	pdata = kzalloc(sizeof(*pdata), GFP_KERNEL);
+	if (pdata == NULL) {
+		rc = -ENOMEM;
+		goto fail;
+	}
+
+	rc = get_inp_dev_name(dev_node, &pdata->inp_dev_name);
+	if (rc)
+		goto fail_free_pdata;
+
+	return pdata;
+
+fail_free_pdata:
+	kfree(pdata);
+fail:
+	return ERR_PTR(rc);
+}
+
+static void free_btn_pdata(void *pdata)
+{
+	struct cyttsp4_btn_platform_data *btn_pdata =
+		(struct cyttsp4_btn_platform_data *)pdata;
+
+	kfree(btn_pdata);
+}
+
+static void *create_and_get_proximity_pdata(struct device_node *dev_node)
+{
+	struct cyttsp4_proximity_platform_data *pdata;
+	int rc;
+
+	pdata = kzalloc(sizeof(*pdata), GFP_KERNEL);
+	if (pdata == NULL) {
+		rc = -ENOMEM;
+		goto fail;
+	}
+
+	rc = get_inp_dev_name(dev_node, &pdata->inp_dev_name);
+	if (rc)
+		goto fail_free_pdata;
+
+	pdata->frmwrk = create_and_get_touch_framework(dev_node);
+	if (pdata->frmwrk == NULL) {
+		rc = -EINVAL;
+		goto fail_free_pdata;
+	} else if (IS_ERR(pdata->frmwrk)) {
+		rc = PTR_ERR(pdata->frmwrk);
+		goto fail_free_pdata;
+	}
+
+	return pdata;
+
+fail_free_pdata:
+	kfree(pdata);
+fail:
+	return ERR_PTR(rc);
+}
+
+static void free_proximity_pdata(void *pdata)
+{
+	struct cyttsp4_proximity_platform_data *proximity_pdata =
+		(struct cyttsp4_proximity_platform_data *)pdata;
+
+	free_touch_framework(proximity_pdata->frmwrk);
+
+	kfree(proximity_pdata);
+}
+
+static struct cyttsp4_device_pdata_func device_pdata_funcs[DEVICE_TYPE_MAX] = {
+	[DEVICE_MT] = {
+		.create_and_get_pdata = create_and_get_mt_pdata,
+		.free_pdata = free_mt_pdata,
+	},
+	[DEVICE_BTN] = {
+		.create_and_get_pdata = create_and_get_btn_pdata,
+		.free_pdata = free_btn_pdata,
+	},
+	[DEVICE_PROXIMITY] = {
+		.create_and_get_pdata = create_and_get_proximity_pdata,
+		.free_pdata = free_proximity_pdata,
+	},
+};
+
+static const char *device_names[DEVICE_TYPE_MAX] = {
+	[DEVICE_MT] = "cy,mt",
+	[DEVICE_BTN] = "cy,btn",
+	[DEVICE_PROXIMITY] = "cy,proximity",
+};
+
+static int get_device_type(struct device_node *dev_node,
+		enum cyttsp4_device_type *type)
+{
+	const char *name;
+	enum cyttsp4_device_type t;
+	int rc;
+
+	rc = of_property_read_string(dev_node, "name", &name);
+	if (rc)
+		return rc;
+
+	for (t = 0; t < DEVICE_TYPE_MAX; t++)
+		if (!strncmp(name, device_names[t], MAX_NAME_LENGTH)) {
+			*type = t;
+			return 0;
+		}
+
+	return -EINVAL;
+}
+
+static inline void *create_and_get_device_pdata(struct device_node *dev_node,
+		enum cyttsp4_device_type type)
+{
+	return device_pdata_funcs[type].create_and_get_pdata(dev_node);
+}
+
+static inline void free_device_pdata(void *pdata,
+		enum cyttsp4_device_type type)
+{
+	device_pdata_funcs[type].free_pdata(pdata);
+}
+
+static int register_device(struct device_node *dev_node,
+		const char *core_id)
+{
+	struct cyttsp4_device_info info = {0};
+	enum cyttsp4_device_type type;
+	int rc;
+
+	info.core_id = core_id;
+
+	rc = of_property_read_string(dev_node, "cy,name", &info.name);
+	if (rc) {
+		pr_err("%s: OF error rc=%d\n", __func__, rc);
+		goto fail;
+	} else
+		pr_debug("%s: OF cy,name: %s\n", __func__, info.name);
+
+	rc = get_device_type(dev_node, &type);
+	if (rc)
+		goto fail;
+
+	info.platform_data = create_and_get_device_pdata(dev_node, type);
+	if (IS_ERR(info.platform_data)) {
+		rc = PTR_ERR(info.platform_data);
+		goto fail;
+	}
+
+	rc = cyttsp4_register_device(&info);
+	if (rc)
+		goto fail_free;
+
+	return 0;
+
+fail_free:
+	free_device_pdata(info.platform_data, type);
+fail:
+	return rc;
+}
+
+static struct touch_settings *create_and_get_touch_setting(
+		struct device_node *core_node, const char *name)
+{
+	struct touch_settings *setting;
+	char *tag_name;
+	u32 tag_value;
+	u16 *data;
+	int size;
+	int rc;
+
+	data = create_and_get_u16_array(core_node, name, &size);
+	if (IS_ERR_OR_NULL(data))
+		return (void *)data;
+
+	pr_debug("%s: Touch setting:'%s' size:%d\n", __func__, name, size);
+
+	setting = kzalloc(sizeof(*setting), GFP_KERNEL);
+	if (setting == NULL) {
+		rc = -ENOMEM;
+		goto fail_free_data;
+	}
+
+	setting->data = (u8 *)data;
+	setting->size = size;
+
+	tag_name = kzalloc(MAX_NAME_LENGTH, GFP_KERNEL);
+	if (tag_name == NULL) {
+		rc = -ENOMEM;
+		goto fail_free_setting;
+	}
+
+	snprintf(tag_name, MAX_NAME_LENGTH, "%s-tag", name);
+
+	rc = of_property_read_u32(core_node, tag_name, &tag_value);
+	if (!rc)
+		setting->tag = tag_value;
+
+	kfree(tag_name);
+
+	return setting;
+
+fail_free_setting:
+	kfree(setting);
+fail_free_data:
+	kfree(data);
+
+	return ERR_PTR(rc);
+}
+
+static void free_touch_setting(struct touch_settings *setting)
+{
+	if (setting) {
+		kfree(setting->data);
+		kfree(setting);
+	}
+}
+
+static char *touch_setting_names[CY_IC_GRPNUM_NUM] = {
+	NULL,			/* CY_IC_GRPNUM_RESERVED */
+	"cy,cmd_regs",		/* CY_IC_GRPNUM_CMD_REGS */
+	"cy,tch_rep",		/* CY_IC_GRPNUM_TCH_REP */
+	"cy,data_rec",		/* CY_IC_GRPNUM_DATA_REC */
+	"cy,test_rec",		/* CY_IC_GRPNUM_TEST_REC */
+	"cy,pcfg_rec",		/* CY_IC_GRPNUM_PCFG_REC */
+	"cy,tch_parm_val",	/* CY_IC_GRPNUM_TCH_PARM_VAL */
+	"cy,tch_parm_size",	/* CY_IC_GRPNUM_TCH_PARM_SIZE */
+	NULL,			/* CY_IC_GRPNUM_RESERVED1 */
+	NULL,			/* CY_IC_GRPNUM_RESERVED2 */
+	"cy,opcfg_rec",		/* CY_IC_GRPNUM_OPCFG_REC */
+	"cy,ddata_rec",		/* CY_IC_GRPNUM_DDATA_REC */
+	"cy,mdata_rec",		/* CY_IC_GRPNUM_MDATA_REC */
+	"cy,test_regs",		/* CY_IC_GRPNUM_TEST_REGS */
+	"cy,btn_keys",		/* CY_IC_GRPNUM_BTN_KEYS */
+	NULL,			/* CY_IC_GRPNUM_TTHE_REGS */
+};
+
+static struct cyttsp4_core_platform_data *create_and_get_core_pdata(
+		struct device_node *core_node)
+{
+	struct cyttsp4_core_platform_data *pdata;
+	u32 value;
+	int rc;
+	int i;
+
+	pdata = kzalloc(sizeof(*pdata), GFP_KERNEL);
+	if (pdata == NULL) {
+		rc = -ENOMEM;
+		goto fail;
+	}
+
+	/* Required fields */
+	rc = of_property_read_u32(core_node, "cy,irq_gpio", &value);
+	if (rc)
+		goto fail_free;
+	pdata->irq_gpio = value;
+
+	/* Optional fields */
+	/* rst_gpio is optional since a platform may use
+	 * power cycling instead of using the XRES pin
+	 */
+	rc = of_property_read_u32(core_node, "cy,rst_gpio", &value);
+	if (!rc)
+		pdata->rst_gpio = value;
+
+	rc = of_property_read_u32(core_node, "cy,level_irq_udelay", &value);
+	if (!rc)
+		pdata->level_irq_udelay = value;
+
+	rc = of_property_read_u32(core_node, "cy,max_xfer_len", &value);
+	if (!rc)
+		pdata->max_xfer_len = value;
+
+	rc = of_property_read_u32(core_node, "cy,flags", &value);
+	if (!rc)
+		pdata->flags = value;
+
+	rc = of_property_read_u32(core_node, "cy,easy_wakeup_gesture", &value);
+	if (!rc)
+		pdata->easy_wakeup_gesture = (u8)value;
+
+	for (i = 0; (unsigned int)i < ARRAY_SIZE(touch_setting_names); i++) {
+		if (touch_setting_names[i] == NULL)
+			continue;
+
+		pdata->sett[i] = create_and_get_touch_setting(core_node,
+				touch_setting_names[i]);
+		if (IS_ERR(pdata->sett[i])) {
+			rc = PTR_ERR(pdata->sett[i]);
+			goto fail_free_sett;
+		} else if (pdata->sett[i] == NULL)
+			pr_debug("%s: No data for setting '%s'\n", __func__,
+				touch_setting_names[i]);
+	}
+
+	pr_debug("%s: irq_gpio:%d rst_gpio:%d level_irq_udelay:%d\n"
+		"max_xfer_len:%d flags:%d easy_wakeup_gesture:%d\n", __func__,
+		pdata->irq_gpio, pdata->rst_gpio, pdata->level_irq_udelay,
+		pdata->max_xfer_len, pdata->flags, pdata->easy_wakeup_gesture);
+
+	pdata->xres = cyttsp4_xres;
+	pdata->init = cyttsp4_init;
+	pdata->power = cyttsp4_power;
+#ifdef CYTTSP4_DETECT_HW
+	pdata->detect = cyttsp4_detect;
+#endif
+	pdata->irq_stat = cyttsp4_irq_stat;
+
+	pdata->loader_pdata = &_cyttsp4_loader_platform_data;
+
+	return pdata;
+
+fail_free_sett:
+	for (i--; i >= 0; i--)
+		free_touch_setting(pdata->sett[i]);
+fail_free:
+	kfree(pdata);
+fail:
+	return ERR_PTR(rc);
+}
+
+static void free_core_pdata(struct cyttsp4_core_platform_data *pdata)
+{
+	int i;
+
+	for (i = 0; i < CY_TOUCH_SETTINGS_MAX; i++)
+		free_touch_setting(pdata->sett[i]);
+
+	kfree(pdata);
+}
+
+static int register_core_device(struct device_node *core_node,
+		const char *adap_id, const char **core_id)
+{
+	struct cyttsp4_core_info info = {0};
+	int rc;
+
+	rc = of_property_read_string(core_node, "cy,name", &info.name);
+	if (rc) {
+		pr_err("%s: OF error rc=%d\n", __func__, rc);
+		goto fail;
+	} else
+		pr_debug("%s: OF cy,name: %s\n", __func__, info.name);
+
+	rc = of_property_read_string(core_node, "cy,id", &info.id);
+	if (rc) {
+		pr_err("%s: OF error rc=%d\n", __func__, rc);
+		goto fail;
+	} else
+		pr_debug("%s: OF cy,id: %s\n", __func__, info.id);
+
+	info.platform_data = create_and_get_core_pdata(core_node);
+	if (IS_ERR(info.platform_data)) {
+		rc = PTR_ERR(info.platform_data);
+		goto fail;
+	}
+
+	info.adap_id = adap_id;
+
+	rc = cyttsp4_register_core_device(&info);
+	if (rc)
+		goto fail_free;
+
+	*core_id = info.id;
+
+	return 0;
+
+fail_free:
+	free_core_pdata(info.platform_data);
+fail:
+	return rc;
+}
+
+int cyttsp4_devtree_register_devices(struct device *adap_dev)
+{
+	struct device_node *core_node, *dev_node;
+	const char *adap_id;
+	int count = 0;
+	int rc;
+
+	if (!adap_dev->of_node)
+		return 0;
+
+	rc = of_property_read_string(adap_dev->of_node, "cy,adapter_id",
+			&adap_id);
+	if (rc)
+		return rc;
+
+	/* There should be only one core node */
+	for_each_child_of_node(adap_dev->of_node, core_node) {
+		const char *core_id = NULL;
+		const char *name;
+
+		rc = of_property_read_string(core_node, "name", &name);
+		if (!rc)
+			pr_debug("%s: name:%s\n", __func__, name);
+
+		rc = register_core_device(core_node, adap_id, &core_id);
+		if (rc)
+			break;
+		/* Increment reference count */
+		of_node_get(core_node);
+
+		for_each_child_of_node(core_node, dev_node) {
+			count++;
+			rc = register_device(dev_node, core_id);
+			if (rc)
+				break;
+			/* Increment reference count */
+			of_node_get(dev_node);
+		}
+	}
+
+	pr_debug("%s: %d child node(s) found\n", __func__, count);
+
+	return rc;
+}
+EXPORT_SYMBOL_GPL(cyttsp4_devtree_register_devices);
+
+static int __init cyttsp4_devtree_init(void)
+{
+	return 0;
+}
+module_init(cyttsp4_devtree_init);
+
+static void __exit cyttsp4_devtree_exit(void)
+{
+}
+module_exit(cyttsp4_devtree_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Cypress Semiconductor");
diff --git a/drivers/input/touchscreen/cypress/cyttsp4_devtree.h b/drivers/input/touchscreen/cypress/cyttsp4_devtree.h
new file mode 100644
index 0000000..2464d75
--- /dev/null
+++ b/drivers/input/touchscreen/cypress/cyttsp4_devtree.h
@@ -0,0 +1,36 @@
+/*
+ * cyttsp4_devtree.h
+ * Cypress TrueTouch(TM) Standard Product V4 Device Tree Support Driver
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2013 Cypress Semiconductor
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_DEVICETREE_SUPPORT
+extern int cyttsp4_devtree_register_devices(struct device *adap_dev);
+#else
+static inline int cyttsp4_devtree_register_devices(struct device *adap_dev)
+{
+	return 0;
+}
+#endif
diff --git a/drivers/input/touchscreen/cypress/cyttsp4_i2c.c b/drivers/input/touchscreen/cypress/cyttsp4_i2c.c
new file mode 100644
index 0000000..7ba8cd0
--- /dev/null
+++ b/drivers/input/touchscreen/cypress/cyttsp4_i2c.c
@@ -0,0 +1,326 @@
+/*
+ * cyttsp4_i2c.c
+ * Cypress TrueTouch(TM) Standard Product V4 I2C Driver module.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2012 Cypress Semiconductor
+ * Copyright (C) 2011 Sony Ericsson Mobile Communications AB.
+ *
+ * Author: Aleksej Makarov <aleksej.makarov@sonyericsson.com>
+ * Modified by: Cypress Semiconductor for test with device
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#include <linux/cyttsp4_bus.h>
+#include <linux/cyttsp4_core.h>
+#include "cyttsp4_i2c.h"
+
+#include <linux/delay.h>
+#include <linux/hrtimer.h>
+#include <linux/i2c.h>
+#include <linux/init.h>
+#include <linux/of_device.h>
+#include <linux/module.h>
+#include <linux/mutex.h>
+#include <linux/pm_runtime.h>
+#include <linux/slab.h>
+ #include <linux/regulator/consumer.h>
+
+#include "cyttsp4_devtree.h"
+
+#define CY_I2C_DATA_SIZE  (3 * 256)
+
+struct cyttsp4_i2c {
+	struct i2c_client *client;
+	u8 wr_buf[CY_I2C_DATA_SIZE];
+	char const *id;
+	struct mutex lock;
+};
+
+static int cyttsp4_i2c_read_block_data(struct cyttsp4_i2c *ts_i2c, u16 addr,
+		int length, void *values, int max_xfer)
+{
+	int rc = -EINVAL;
+	int trans_len;
+	u8 client_addr;
+	u8 addr_lo;
+	struct i2c_msg msgs[2];
+
+	while (length > 0) {
+		client_addr = ts_i2c->client->addr | ((addr >> 8) & 0x1);
+		addr_lo = addr & 0xFF;
+		trans_len = min(length, max_xfer);
+
+		memset(msgs, 0, sizeof(msgs));
+		msgs[0].addr = client_addr;
+		msgs[0].flags = 0;
+		msgs[0].len = 1;
+		msgs[0].buf = &addr_lo;
+
+		msgs[1].addr = client_addr;
+		msgs[1].flags = I2C_M_RD;
+		msgs[1].len = trans_len;
+		msgs[1].buf = values;
+
+		rc = i2c_transfer(ts_i2c->client->adapter, msgs, 2);
+		if (rc != 2)
+			goto exit;
+
+		length -= trans_len;
+		values += trans_len;
+		addr += trans_len;
+	}
+
+exit:
+	return (rc < 0) ? rc : rc != ARRAY_SIZE(msgs) ? -EIO : 0;
+}
+
+static int cyttsp4_i2c_write_block_data(struct cyttsp4_i2c *ts_i2c, u16 addr,
+		int length, const void *values, int max_xfer)
+{
+	int rc = -EINVAL;
+	u8 client_addr;
+	u8 addr_lo;
+	int trans_len;
+	struct i2c_msg msg;
+
+	if (sizeof(ts_i2c->wr_buf) < (length + 1))
+		return -ENOMEM;
+
+	while (length > 0) {
+		client_addr = ts_i2c->client->addr | ((addr >> 8) & 0x1);
+		addr_lo = addr & 0xFF;
+		trans_len = min(length, max_xfer);
+
+		memset(&msg, 0, sizeof(msg));
+		msg.addr = client_addr;
+		msg.flags = 0;
+		msg.len = trans_len + 1;
+		msg.buf = ts_i2c->wr_buf;
+
+		ts_i2c->wr_buf[0] = addr_lo;
+		memcpy(&ts_i2c->wr_buf[1], values, trans_len);
+
+		/* write data */
+		rc = i2c_transfer(ts_i2c->client->adapter, &msg, 1);
+		if (rc != 1)
+			goto exit;
+
+		length -= trans_len;
+		values += trans_len;
+		addr += trans_len;
+	}
+
+exit:
+	return (rc < 0) ? rc : rc != 1 ? -EIO : 0;
+}
+
+static int cyttsp4_i2c_write(struct cyttsp4_adapter *adap, u16 addr,
+	const void *buf, int size, int max_xfer)
+{
+	struct cyttsp4_i2c *ts = dev_get_drvdata(adap->dev);
+	int rc;
+
+	pm_runtime_get_noresume(adap->dev);
+	mutex_lock(&ts->lock);
+	rc = cyttsp4_i2c_write_block_data(ts, addr, size, buf, max_xfer);
+	mutex_unlock(&ts->lock);
+	pm_runtime_put_noidle(adap->dev);
+
+	return rc;
+}
+
+static int cyttsp4_i2c_read(struct cyttsp4_adapter *adap, u16 addr,
+	void *buf, int size, int max_xfer)
+{
+	struct cyttsp4_i2c *ts = dev_get_drvdata(adap->dev);
+	int rc;
+
+	pm_runtime_get_noresume(adap->dev);
+	mutex_lock(&ts->lock);
+	rc = cyttsp4_i2c_read_block_data(ts, addr, size, buf, max_xfer);
+	mutex_unlock(&ts->lock);
+	pm_runtime_put_noidle(adap->dev);
+
+	return rc;
+}
+
+static struct cyttsp4_ops ops = {
+	.write = cyttsp4_i2c_write,
+	.read = cyttsp4_i2c_read,
+};
+
+static struct of_device_id cyttsp4_i2c_of_match[] = {
+	{ .compatible = "cy,cyttsp4_i2c_adapter", }, { }
+};
+MODULE_DEVICE_TABLE(of, cyttsp4_i2c_of_match);
+
+static int __devinit cyttsp4_i2c_probe(struct i2c_client *client,
+	const struct i2c_device_id *i2c_id)
+{
+	struct cyttsp4_i2c *ts_i2c;
+	struct device *dev = &client->dev;
+	const struct of_device_id *match;
+	char const *adap_id;
+	int rc;
+#if 1 
+	struct regulator *vdd;
+    struct regulator *vcc_i2c;
+#endif
+
+	dev_info(dev, "%s: Starting %s probe...\n", __func__, CYTTSP4_I2C_NAME);
+
+	dev_dbg(dev, "%s: debug on\n", __func__);
+	dev_vdbg(dev, "%s: verbose debug on\n", __func__);
+
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
+		dev_err(dev, "%s: fail check I2C functionality\n", __func__);
+		rc = -EIO;
+		goto error_alloc_data_failed;
+	}
+#if 1 
+	vdd = regulator_get(&client->dev, "vdd");
+	vcc_i2c = regulator_get(&client->dev, "vcc_i2c");
+	rc = regulator_set_voltage(vdd,2600000,3300000);
+	if (rc < 0){
+		dev_dbg(dev, "%s:regulator_set_voltage vdd failed \n", __func__);
+		}
+	rc = regulator_set_voltage(vcc_i2c,1800000,1800000);
+	if (rc < 0){
+		dev_dbg(dev, "%s:regulator_set_voltage vcc_i2c failed \n", __func__);
+		}
+	rc = regulator_enable(vdd);
+	if (rc < 0){
+		dev_dbg(dev, "%s:regulator_enable vdd failed \n", __func__);
+		}
+	rc = regulator_enable(vcc_i2c);
+	if (rc < 0){
+		dev_dbg(dev, "%s:regulator_enable vcc_i2c failed \n", __func__);
+		}
+#endif
+	msleep(200);
+
+	ts_i2c = kzalloc(sizeof(struct cyttsp4_i2c), GFP_KERNEL);
+	if (ts_i2c == NULL) {
+		dev_err(dev, "%s: Error, kzalloc.\n", __func__);
+		rc = -ENOMEM;
+		goto error_alloc_data_failed;
+	}
+
+	match = of_match_device(of_match_ptr(cyttsp4_i2c_of_match), dev);
+	if (match) {
+		rc = of_property_read_string(dev->of_node, "cy,adapter_id",
+				&adap_id);
+		if (rc) {
+			dev_err(dev, "%s: OF error rc=%d\n", __func__, rc);
+			goto error_free_data;
+		}
+		cyttsp4_devtree_register_devices(dev);
+	} else {
+		adap_id = dev_get_platdata(dev);
+	}
+
+	mutex_init(&ts_i2c->lock);
+	ts_i2c->client = client;
+	ts_i2c->id = (adap_id) ? adap_id : CYTTSP4_I2C_NAME;
+	client->dev.bus = &i2c_bus_type;
+	i2c_set_clientdata(client, ts_i2c);
+	dev_set_drvdata(&client->dev, ts_i2c);
+
+	dev_dbg(dev, "%s: add adap='%s' (CYTTSP4_I2C_NAME=%s)\n", __func__,
+		ts_i2c->id, CYTTSP4_I2C_NAME);
+
+	pm_runtime_enable(&client->dev);
+
+	rc = cyttsp4_add_adapter(ts_i2c->id, &ops, dev);
+	if (rc) {
+		dev_err(dev, "%s: Error on probe %s\n", __func__,
+			CYTTSP4_I2C_NAME);
+		goto add_adapter_err;
+	}
+
+	dev_info(dev, "%s: Successful probe %s\n", __func__, CYTTSP4_I2C_NAME);
+
+	return 0;
+
+add_adapter_err:
+	pm_runtime_disable(&client->dev);
+	dev_set_drvdata(&client->dev, NULL);
+	i2c_set_clientdata(client, NULL);
+error_free_data:
+	kfree(ts_i2c);
+error_alloc_data_failed:
+	return rc;
+}
+
+/* registered in driver struct */
+static int __devexit cyttsp4_i2c_remove(struct i2c_client *client)
+{
+	struct device *dev = &client->dev;
+	struct cyttsp4_i2c *ts_i2c = dev_get_drvdata(dev);
+
+	dev_info(dev, "%s\n", __func__);
+	cyttsp4_del_adapter(ts_i2c->id);
+	pm_runtime_disable(&client->dev);
+	dev_set_drvdata(&client->dev, NULL);
+	i2c_set_clientdata(client, NULL);
+	kfree(ts_i2c);
+	return 0;
+}
+
+static const struct i2c_device_id cyttsp4_i2c_id[] = {
+	{ CYTTSP4_I2C_NAME, 0 },  { }
+};
+MODULE_DEVICE_TABLE(i2c, cyttsp4_i2c_id);
+
+static struct i2c_driver cyttsp4_i2c_driver = {
+	.driver = {
+		.name = CYTTSP4_I2C_NAME,
+		.owner = THIS_MODULE,
+		.of_match_table = cyttsp4_i2c_of_match,
+	},
+	.probe = cyttsp4_i2c_probe,
+	.remove = __devexit_p(cyttsp4_i2c_remove),
+	.id_table = cyttsp4_i2c_id,
+};
+
+static int __init cyttsp4_i2c_init(void)
+{
+	int rc = i2c_add_driver(&cyttsp4_i2c_driver);
+
+	pr_info("%s: Cypress TTSP I2C Touchscreen Driver (Built %s) rc=%d\n",
+		 __func__, CY_DRIVER_DATE, rc);
+	return rc;
+}
+module_init(cyttsp4_i2c_init);
+
+static void __exit cyttsp4_i2c_exit(void)
+{
+	i2c_del_driver(&cyttsp4_i2c_driver);
+	pr_info("%s: module exit\n", __func__);
+}
+module_exit(cyttsp4_i2c_exit);
+
+MODULE_ALIAS(CYTTSP4_I2C_NAME);
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Cypress TrueTouch(R) Standard Product (TTSP) I2C driver");
+MODULE_AUTHOR("Cypress");
diff --git a/drivers/input/touchscreen/cypress/cyttsp4_i2c.h b/drivers/input/touchscreen/cypress/cyttsp4_i2c.h
new file mode 100644
index 0000000..94fd104
--- /dev/null
+++ b/drivers/input/touchscreen/cypress/cyttsp4_i2c.h
@@ -0,0 +1,35 @@
+/*
+ * cyttsp4_i2c.h
+ * Cypress TrueTouch(TM) Standard Product V4 I2C driver module.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2012 Cypress Semiconductor
+ * Copyright (C) 2011 Sony Ericsson Mobile Communications AB.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#ifndef _LINUX_CYTTSP4_I2C_H
+#define _LINUX_CYTTSP4_I2C_H
+
+#define CYTTSP4_I2C_NAME "cyttsp4_i2c_adapter"
+
+#endif /* _LINUX_CYTTSP4_I2C_H */
diff --git a/drivers/input/touchscreen/cypress/cyttsp4_img.h b/drivers/input/touchscreen/cypress/cyttsp4_img.h
new file mode 100644
index 0000000..52248bc
--- /dev/null
+++ b/drivers/input/touchscreen/cypress/cyttsp4_img.h
@@ -0,0 +1,3990 @@
+/* < DTS2013050605374 shenjinming 20130508 begin */
+
+/*< DTS2013012402104 houming 20130124 beging */
+/* Update the new firmware, support ofilm and truly */
+static u8 cyttsp4_ver[] = {
+	0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x68, 0xB6
+};
+static u8 cyttsp4_img[] = {
+	0x00, 0x00, 0x24, 0x00, 0x80, 0x00, 0x20, 0x00, 0x20, 0x25, 0x13, 0x00, 0x00, 0x55, 0x16, 0x00,
+	0x00, 0x55, 0x16, 0x00, 0x00, 0x55, 0x16, 0x00, 0x00, 0x55, 0x16, 0x00, 0x00, 0x55, 0x16, 0x00,
+	0x00, 0x55, 0x16, 0x00, 0x00, 0x55, 0x16, 0x00, 0x00, 0x55, 0x16, 0x00, 0x00, 0x55, 0x16, 0x00,
+	0x00, 0x55, 0x16, 0x00, 0x00, 0x55, 0x16, 0x00, 0x00, 0x55, 0x16, 0x00, 0x00, 0x55, 0x16, 0x00,
+	0x00, 0x55, 0x16, 0x00, 0x00, 0x55, 0x16, 0x00, 0x00, 0x55, 0x16, 0x00, 0x00, 0x55, 0x16, 0x00,
+	0x00, 0x55, 0x16, 0x00, 0x00, 0x55, 0x16, 0x00, 0x00, 0x55, 0x16, 0x00, 0x00, 0x55, 0x16, 0x00,
+	0x00, 0x55, 0x16, 0x00, 0x00, 0x55, 0x16, 0x00, 0x00, 0x55, 0x16, 0x00, 0x00, 0x55, 0x16, 0x00,
+	0x00, 0x55, 0x16, 0x00, 0x00, 0x55, 0x16, 0x00, 0x00, 0x55, 0x16, 0x00, 0x00, 0x55, 0x16, 0x00,
+	0x00, 0x55, 0x16, 0x00, 0x00, 
+	0x00, 0x00, 0x25, 0x00, 0x80, 0x00, 0xF0, 0x02, 0xF8, 0x00, 0xF0, 0x40, 0xF8, 0x0C, 0xA0, 0x30,
+	0xC8, 0x08, 0x38, 0x24, 0x18, 0x2D, 0x18, 0xA2, 0x46, 0x67, 0x1E, 0xAB, 0x46, 0x54, 0x46, 0x5D,
+	0x46, 0xAC, 0x42, 0x01, 0xD1, 0x00, 0xF0, 0x32, 0xF8, 0x7E, 0x46, 0x0F, 0x3E, 0x0F, 0xCC, 0xB6,
+	0x46, 0x01, 0x26, 0x33, 0x42, 0x00, 0xD0, 0xFB, 0x1A, 0xA2, 0x46, 0xAB, 0x46, 0x33, 0x43, 0x18,
+	0x47, 0xA0, 0xCE, 0x00, 0x00, 0xD0, 0xCE, 0x00, 0x00, 0x10, 0x3A, 0x02, 0xD3, 0x78, 0xC8, 0x78,
+	0xC1, 0xFA, 0xD8, 0x52, 0x07, 0x01, 0xD3, 0x30, 0xC8, 0x30, 0xC1, 0x01, 0xD5, 0x04, 0x68, 0x0C,
+	0x60, 0x70, 0x47, 0x00, 0x00, 0x00, 0x23, 0x00, 0x24, 0x00, 0x25, 0x00, 0x26, 0x10, 0x3A, 0x01,
+	0xD3, 0x78, 0xC1, 0xFB, 0xD8, 0x52, 0x07, 0x00, 0xD3, 0x30, 0xC1, 0x00, 0xD5, 0x0B, 0x60, 0x70,
+	0x47, 0x1F, 0xB5, 0xC0, 0x46, 
+	0x00, 0x00, 0x26, 0x00, 0x80, 0xC0, 0x46, 0x1F, 0xBD, 0x10, 0xB5, 0x10, 0xBD, 0x03, 0x48, 0x85,
+	0x46, 0xFF, 0xF7, 0xF6, 0xFF, 0x00, 0xF0, 0xB9, 0xF9, 0x0C, 0xF0, 0x7E, 0xFC, 0x00, 0x20, 0x00,
+	0x20, 0xFF, 0xF7, 0xF2, 0xFF, 0x0C, 0xF0, 0x7E, 0xFC, 0x01, 0x4B, 0x9D, 0x46, 0x01, 0x48, 0x00,
+	0x47, 0x00, 0x20, 0x00, 0x20, 0x81, 0x12, 0x00, 0x00, 0x70, 0xB5, 0x05, 0x46, 0x0C, 0x46, 0x16,
+	0x46, 0x02, 0xE0, 0x0F, 0xCC, 0x0F, 0xC5, 0x10, 0x3E, 0x10, 0x2E, 0xFA, 0xD2, 0x08, 0x2E, 0x02,
+	0xD3, 0x03, 0xCC, 0x03, 0xC5, 0x08, 0x3E, 0x04, 0x2E, 0x07, 0xD3, 0x01, 0xCC, 0x01, 0xC5, 0x36,
+	0x1F, 0x03, 0xE0, 0x21, 0x78, 0x29, 0x70, 0x64, 0x1C, 0x6D, 0x1C, 0x76, 0x1E, 0xF9, 0xD2, 0x70,
+	0xBD, 0x10, 0xB5, 0x19, 0x4C, 0x19, 0x4B, 0x00, 0x20, 0x21, 0x5C, 0x00, 0x29, 0x0F, 0xD0, 0x4A,
+	0x07, 0x52, 0x0F, 0x52, 0x1C, 
+	0x00, 0x00, 0x27, 0x00, 0x80, 0x09, 0x06, 0xC9, 0x0E, 0x05, 0xD1, 0x07, 0x2A, 0x03, 0xD9, 0x20,
+	0x18, 0x00, 0x7A, 0xD8, 0x61, 0x03, 0xE0, 0x80, 0x18, 0x40, 0x1C, 0x80, 0x28, 0xEC, 0xD3, 0x0E,
+	0x49, 0x0E, 0x4A, 0x00, 0x20, 0x80, 0x31, 0x20, 0x32, 0x84, 0x00, 0x0C, 0x59, 0x94, 0x42, 0x04,
+	0xD1, 0x80, 0x00, 0x40, 0x18, 0x40, 0x68, 0x18, 0x62, 0x02, 0xE0, 0x80, 0x1C, 0x10, 0x28, 0xF3,
+	0xD3, 0x03, 0x20, 0x01, 0x21, 0x00, 0x04, 0x89, 0x07, 0x48, 0x61, 0x04, 0xF0, 0xDF, 0xFD, 0x04,
+	0xF0, 0x47, 0xFC, 0x04, 0xF0, 0xA9, 0xFC, 0xFE, 0xE7, 0x80, 0xF0, 0xFF, 0x0F, 0x00, 0xFF, 0x00,
+	0x40, 0x12, 0x1F, 0x42, 0x60, 0x09, 0x1D, 0x01, 0x60, 0x00, 0x22, 0x40, 0x39, 0xCA, 0x63, 0x70,
+	0x47, 0xC9, 0x1D, 0x89, 0x08, 0x02, 0x68, 0x89, 0x00, 0x53, 0x18, 0x03, 0x60, 0x40, 0x3B, 0xD9,
+	0x63, 0x43, 0x68, 0x59, 0x1A, 
+	0x00, 0x00, 0x28, 0x00, 0x80, 0x41, 0x60, 0x10, 0x46, 0x70, 0x47, 0x02, 0x68, 0x11, 0x46, 0x40,
+	0x39, 0xC9, 0x6B, 0x52, 0x1A, 0x02, 0x60, 0x42, 0x68, 0x51, 0x18, 0x41, 0x60, 0x70, 0x47, 0x00,
+	0x00, 0xF0, 0xB5, 0x8C, 0x46, 0x05, 0x46, 0x3C, 0x49, 0x00, 0x20, 0x03, 0x46, 0x8A, 0x60, 0x89,
+	0x15, 0x29, 0x40, 0x3A, 0x4F, 0x0C, 0x04, 0x96, 0x07, 0xE4, 0x19, 0x00, 0x2E, 0x11, 0x46, 0x13,
+	0xD0, 0xFF, 0x27, 0xCE, 0x07, 0x01, 0x37, 0x2F, 0x40, 0x34, 0x49, 0x3F, 0x04, 0x7F, 0x18, 0x3F,
+	0x0C, 0x00, 0x2E, 0x06, 0xD0, 0x14, 0x70, 0x26, 0x0A, 0x56, 0x70, 0x97, 0x70, 0x24, 0x0E, 0xD4,
+	0x70, 0x03, 0xE0, 0x14, 0x80, 0x57, 0x80, 0x00, 0xE0, 0x0C, 0x60, 0x11, 0x1D, 0x8E, 0x07, 0x7F,
+	0x24, 0x00, 0x2E, 0x0B, 0xD0, 0xCE, 0x07, 0x00, 0x27, 0x00, 0x2E, 0x04, 0xD0, 0x0C, 0x70, 0x4F,
+	0x70, 0x8F, 0x70, 0xCF, 0x70, 
+	0x00, 0x00, 0x29, 0x00, 0x80, 0x03, 0xE0, 0x0C, 0x80, 0x4F, 0x80, 0x00, 0xE0, 0x0C, 0x60, 0x61,
+	0x46, 0xC9, 0x5C, 0xD4, 0x18, 0x5B, 0x1C, 0xDB, 0xB2, 0x21, 0x72, 0x80, 0x2B, 0xF7, 0xD3, 0x1E,
+	0x4B, 0x1F, 0x49, 0x59, 0x60, 0x59, 0x68, 0x00, 0x29, 0xFC, 0xDB, 0x99, 0x68, 0x05, 0x24, 0x64,
+	0x07, 0xA1, 0x42, 0x01, 0xD1, 0x00, 0x20, 0x0A, 0xE0, 0x0E, 0x0F, 0x0F, 0x2E, 0x02, 0xD1, 0x09,
+	0x20, 0xF0, 0xBD, 0x99, 0x68, 0x09, 0x0F, 0x0A, 0x29, 0xFB, 0xD1, 0x00, 0x28, 0xF8, 0xD1, 0x9A,
+	0x60, 0x14, 0x49, 0x2F, 0x04, 0x96, 0x07, 0x79, 0x18, 0x00, 0x2E, 0x10, 0xD0, 0x11, 0x4F, 0x2D,
+	0x04, 0xED, 0x19, 0xD6, 0x07, 0x2D, 0x0C, 0x00, 0x2E, 0x06, 0xD0, 0x11, 0x70, 0x0E, 0x0A, 0x56,
+	0x70, 0x95, 0x70, 0x09, 0x0E, 0xD1, 0x70, 0x03, 0xE0, 0x11, 0x80, 0x55, 0x80, 0x00, 0xE0, 0x11,
+	0x60, 0x07, 0x49, 0x49, 0x1C, 
+	0x00, 0x00, 0x2A, 0x00, 0x80, 0x59, 0x60, 0x59, 0x68, 0x00, 0x29, 0xFC, 0xDB, 0x99, 0x68, 0xA1,
+	0x42, 0xD6, 0xD0, 0x08, 0x46, 0xF0, 0xBD, 0x00, 0x00, 0x00, 0x00, 0x10, 0x40, 0xB6, 0xD7, 0x00,
+	0x00, 0x04, 0x00, 0x00, 0x80, 0xB6, 0xD8, 0x00, 0x00, 0x01, 0x46, 0x00, 0x20, 0xC9, 0x1E, 0x04,
+	0x29, 0x00, 0xD8, 0x02, 0x20, 0x70, 0x47, 0x00, 0xB5, 0x0A, 0x46, 0x00, 0x23, 0xFF, 0xF7, 0xF4,
+	0xFF, 0x00, 0x28, 0x06, 0xD0, 0x82, 0x42, 0x04, 0xD2, 0x06, 0x20, 0x42, 0x43, 0x0B, 0x48, 0x13,
+	0x18, 0x9B, 0x1C, 0x18, 0x46, 0x00, 0xBD, 0x01, 0x46, 0x00, 0x20, 0x89, 0x1E, 0x05, 0x29, 0x00,
+	0xD8, 0x06, 0x48, 0x70, 0x47, 0x05, 0x49, 0x88, 0x79, 0x09, 0x7B, 0x00, 0x07, 0x00, 0x0F, 0x09,
+	0x07, 0x09, 0x0F, 0x88, 0x42, 0x00, 0xD2, 0x08, 0x46, 0x70, 0x47, 0x00, 0x00, 0x50, 0xE7, 0x00,
+	0x00, 0x06, 0x48, 0x40, 0x7E, 
+	0x00, 0x00, 0x2B, 0x00, 0x80, 0x06, 0x49, 0xC0, 0x07, 0xC0, 0x0F, 0x08, 0x70, 0x70, 0x47, 0x04,
+	0x49, 0x00, 0x20, 0x08, 0x70, 0x70, 0x47, 0x02, 0x48, 0x00, 0x78, 0x70, 0x47, 0x80, 0xE8, 0x00,
+	0x00, 0x84, 0x00, 0x00, 0x20, 0xF0, 0xB5, 0x29, 0x4D, 0x84, 0x46, 0x00, 0x24, 0xAF, 0x88, 0x9E,
+	0x46, 0x20, 0x46, 0x27, 0x4E, 0x8F, 0x42, 0x04, 0xD8, 0xF3, 0x68, 0xEF, 0x88, 0xDF, 0x1B, 0x8F,
+	0x42, 0x08, 0xD2, 0x2F, 0x8A, 0x97, 0x42, 0x05, 0xD2, 0x33, 0x69, 0x6F, 0x8A, 0xDF, 0x1B, 0x97,
+	0x42, 0x00, 0xD9, 0x01, 0x24, 0x2F, 0x89, 0x8F, 0x42, 0x0D, 0xD2, 0xF7, 0x68, 0x6B, 0x89, 0xFF,
+	0x1A, 0x8F, 0x42, 0x08, 0xD9, 0xA9, 0x89, 0x91, 0x42, 0x04, 0xD8, 0x31, 0x69, 0xEB, 0x89, 0xC9,
+	0x1A, 0x91, 0x42, 0x00, 0xD2, 0x01, 0x24, 0x17, 0x49, 0x01, 0x26, 0x67, 0x46, 0x73, 0x46, 0x0A,
+	0x88, 0xBE, 0x40, 0x01, 0x2B, 
+	0x00, 0x00, 0x2C, 0x00, 0x80, 0x03, 0xD1, 0x01, 0x2C, 0x08, 0xD1, 0x32, 0x43, 0x05, 0xE0, 0x00,
+	0x2C, 0x04, 0xD1, 0x6B, 0x7D, 0x00, 0x2B, 0x01, 0xD1, 0xB2, 0x43, 0x0A, 0x80, 0x62, 0x46, 0x00,
+	0x2A, 0x02, 0xD1, 0x2A, 0x7D, 0x01, 0x2A, 0x0E, 0xD0, 0x01, 0x2C, 0x03, 0xD1, 0x0A, 0x88, 0x16,
+	0x42, 0x09, 0xD0, 0x07, 0xE0, 0x00, 0x2C, 0x06, 0xD1, 0x0A, 0x88, 0x16, 0x42, 0x03, 0xD0, 0x6A,
+	0x7D, 0x01, 0x2A, 0x00, 0xD1, 0x01, 0x20, 0x00, 0x22, 0x4A, 0x80, 0xF0, 0xBD, 0x60, 0xE6, 0x00,
+	0x00, 0xD0, 0xE7, 0x00, 0x00, 0x86, 0x00, 0x00, 0x20, 0xFE, 0xE7, 0x70, 0xB5, 0x0D, 0x4A, 0x0E,
+	0x4B, 0x00, 0x20, 0x81, 0x00, 0x54, 0x58, 0x40, 0x1C, 0x5C, 0x50, 0x20, 0x28, 0xF9, 0xD3, 0x0B,
+	0x49, 0x01, 0x20, 0x08, 0x60, 0x0A, 0x49, 0x80, 0x04, 0x08, 0x60, 0x0A, 0x4C, 0xE5, 0x69, 0x26,
+	0x6A, 0x04, 0xF0, 0xDF, 0xFC, 
+	0x00, 0x00, 0x2D, 0x00, 0x80, 0xE5, 0x61, 0x26, 0x62, 0x70, 0xBD, 0xFF, 0xF7, 0xE6, 0xFF, 0xFF,
+	0xF7, 0x6F, 0xFE, 0xFE, 0xE7, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x10,
+	0x40, 0x00, 0x00, 0x01, 0x40, 0x00, 0xFF, 0x00, 0x40, 0x10, 0xB5, 0x00, 0xF0, 0xCB, 0xFE, 0x10,
+	0xBD, 0xF0, 0xB5, 0xFC, 0x48, 0xC2, 0x68, 0x10, 0x78, 0x0B, 0x28, 0x01, 0xD9, 0x0B, 0x20, 0x10,
+	0x70, 0x00, 0x20, 0xF9, 0x4F, 0xF9, 0x4D, 0x3E, 0xE0, 0x11, 0x18, 0xC7, 0x23, 0x5B, 0x5C, 0x00,
+	0x2B, 0x13, 0xD0, 0x43, 0x00, 0x9E, 0x18, 0x62, 0x23, 0x9C, 0x5B, 0xC3, 0x00, 0xC3, 0x18, 0x5B,
+	0x19, 0x9C, 0x70, 0x24, 0x0A, 0xDC, 0x70, 0x40, 0x36, 0x74, 0x88, 0x1C, 0x71, 0x24, 0x0A, 0x5C,
+	0x71, 0x10, 0x24, 0xDC, 0x71, 0x80, 0x31, 0x89, 0x78, 0x0E, 0xE0, 0xC3, 0x00, 0xC3, 0x18, 0x8C,
+	0x78, 0x5B, 0x19, 0x9C, 0x70, 
+	0x00, 0x00, 0x2E, 0x00, 0x80, 0x24, 0x0A, 0xDC, 0x70, 0x8C, 0x7C, 0x1C, 0x71, 0x24, 0x0A, 0x5C,
+	0x71, 0x20, 0x24, 0xDC, 0x71, 0x80, 0x31, 0xC9, 0x7C, 0x19, 0x72, 0x39, 0x78, 0x01, 0x29, 0x07,
+	0xD1, 0xC1, 0x00, 0x41, 0x18, 0x49, 0x19, 0x8B, 0x79, 0x1B, 0x09, 0x1B, 0x01, 0x1B, 0x1D, 0x07,
+	0xE0, 0x00, 0x29, 0x06, 0xD1, 0xC1, 0x00, 0x41, 0x18, 0x49, 0x19, 0x8B, 0x79, 0x1B, 0x09, 0x1B,
+	0x01, 0x8B, 0x71, 0x40, 0x1C, 0xC0, 0xB2, 0x11, 0x78, 0x81, 0x42, 0xBD, 0xD8, 0xD8, 0x48, 0x40,
+	0x78, 0x02, 0x28, 0x03, 0xD1, 0xC0, 0x32, 0xD7, 0x49, 0x10, 0x7E, 0x08, 0x70, 0xF0, 0xBD, 0x30,
+	0xB5, 0xD0, 0x4C, 0x13, 0xE0, 0x41, 0x1C, 0x80, 0x32, 0x0B, 0x46, 0x52, 0x6A, 0xC9, 0xB2, 0x55,
+	0x5C, 0x15, 0x54, 0xE2, 0x68, 0x80, 0x32, 0x92, 0x6A, 0x55, 0x5C, 0x15, 0x54, 0xE2, 0x68, 0x49,
+	0x00, 0x80, 0x32, 0xD2, 0x6A, 
+	0x00, 0x00, 0x2F, 0x00, 0x80, 0x40, 0x00, 0x51, 0x5A, 0x11, 0x52, 0xD8, 0xB2, 0xE2, 0x68, 0x11,
+	0x78, 0x49, 0x1E, 0x81, 0x42, 0xE6, 0xDC, 0x30, 0xBD, 0x70, 0xB5, 0x00, 0xF0, 0x9B, 0xFD, 0x01,
+	0x24, 0xC0, 0x4D, 0x0A, 0xE0, 0x00, 0x19, 0xA0, 0x30, 0xC0, 0x7D, 0xFF, 0xF7, 0xD8, 0xFF, 0xE8,
+	0x68, 0x01, 0x78, 0x49, 0x1E, 0x64, 0x1C, 0x01, 0x70, 0xE4, 0xB2, 0xE8, 0x68, 0xB6, 0x21, 0x09,
+	0x5C, 0xA1, 0x42, 0xEF, 0xD8, 0x70, 0xBD, 0x00, 0x28, 0x0B, 0xD0, 0xBB, 0x4A, 0x12, 0x78, 0x52,
+	0x1E, 0x82, 0x42, 0x06, 0xD0, 0x00, 0x29, 0x04, 0xD0, 0xB8, 0x48, 0x00, 0x78, 0x40, 0x1E, 0x88,
+	0x42, 0x01, 0xD1, 0x01, 0x20, 0x70, 0x47, 0x00, 0x20, 0x70, 0x47, 0x70, 0xB5, 0x00, 0x24, 0xAD,
+	0x4D, 0x0B, 0xE0, 0x01, 0x19, 0xA0, 0x31, 0xC9, 0x7D, 0x41, 0x18, 0x88, 0x78, 0x89, 0x7C, 0xFF,
+	0xF7, 0xE2, 0xFF, 0x00, 0x28, 
+	0x00, 0x00, 0x30, 0x00, 0x80, 0x07, 0xD0, 0x64, 0x1C, 0xE4, 0xB2, 0xE8, 0x68, 0xB6, 0x21, 0x09,
+	0x5C, 0xA1, 0x42, 0xEE, 0xD8, 0x01, 0x20, 0x70, 0xBD, 0x70, 0xB5, 0xA2, 0x4D, 0x04, 0x46, 0x28,
+	0x78, 0x20, 0x42, 0x0C, 0xD1, 0xFF, 0xF7, 0xE1, 0xFF, 0x00, 0x28, 0x02, 0xD0, 0x68, 0x78, 0x20,
+	0x43, 0x01, 0xE0, 0x68, 0x78, 0xA0, 0x43, 0x68, 0x70, 0x68, 0x78, 0x20, 0x40, 0x70, 0xBD, 0xFF,
+	0xF7, 0xD4, 0xFF, 0x00, 0x28, 0xF8, 0xD1, 0xF4, 0xE7, 0xFE, 0xB5, 0x05, 0x46, 0x95, 0x48, 0x9B,
+	0x4A, 0x84, 0x68, 0x12, 0x78, 0x61, 0x68, 0x52, 0x1E, 0x91, 0x42, 0x02, 0xD1, 0x22, 0x68, 0x52,
+	0x1C, 0x22, 0x60, 0x95, 0x4B, 0xE2, 0x68, 0x1B, 0x78, 0x5B, 0x1E, 0x9A, 0x42, 0x02, 0xD1, 0xA3,
+	0x68, 0x5B, 0x1C, 0xA3, 0x60, 0x20, 0x68, 0x40, 0x18, 0x40, 0x08, 0x01, 0x90, 0xA3, 0x68, 0x01,
+	0x9E, 0x98, 0x18, 0x40, 0x08, 
+	0x00, 0x00, 0x31, 0x00, 0x80, 0x00, 0x90, 0x27, 0x68, 0xF7, 0x1B, 0x02, 0x2F, 0x09, 0xD8, 0x85,
+	0x4F, 0x89, 0x1B, 0x02, 0x29, 0x05, 0xD8, 0xC1, 0x1A, 0x02, 0x29, 0x02, 0xD8, 0x11, 0x1A, 0x02,
+	0x29, 0x4E, 0xD9, 0x83, 0x48, 0x40, 0x69, 0x00, 0x28, 0x04, 0xD1, 0xE0, 0x6C, 0x01, 0x90, 0x21,
+	0x6D, 0xE1, 0x64, 0x20, 0x65, 0x82, 0x4E, 0xE0, 0x6C, 0x82, 0x4A, 0x61, 0x6D, 0xB0, 0x42, 0x02,
+	0xDD, 0x49, 0x11, 0x40, 0x11, 0xFF, 0xE7, 0x17, 0x68, 0x78, 0x43, 0x0C, 0xF0, 0x02, 0xF9, 0x79,
+	0x10, 0x40, 0x18, 0x00, 0x12, 0x01, 0x90, 0x20, 0x6D, 0x72, 0x4F, 0x7B, 0x4A, 0x61, 0x6D, 0xB0,
+	0x42, 0x02, 0xDD, 0x49, 0x11, 0x40, 0x11, 0xFF, 0xE7, 0x14, 0x68, 0x60, 0x43, 0x0C, 0xF0, 0xF1,
+	0xF8, 0x61, 0x10, 0x40, 0x18, 0x00, 0x12, 0x00, 0x90, 0x69, 0x46, 0x01, 0xA8, 0x02, 0xF0, 0xF5,
+	0xFA, 0xB8, 0x68, 0x6B, 0x4A, 
+	0x00, 0x00, 0x32, 0x00, 0x80, 0x41, 0x6D, 0x92, 0x69, 0x51, 0x43, 0x50, 0x22, 0x51, 0x43, 0xC9,
+	0x0B, 0x41, 0x65, 0xF9, 0x68, 0x68, 0x00, 0x41, 0x18, 0x01, 0x9A, 0x40, 0x31, 0x4A, 0x80, 0xFA,
+	0x68, 0x00, 0x99, 0x80, 0x18, 0x60, 0x30, 0x41, 0x80, 0xB9, 0x68, 0xFF, 0x20, 0x49, 0x6D, 0xFF,
+	0x29, 0x00, 0xDC, 0xC8, 0xB2, 0xF9, 0x68, 0x49, 0x19, 0x80, 0x31, 0x88, 0x70, 0x01, 0x20, 0xFE,
+	0xBD, 0xA1, 0x69, 0x05, 0x29, 0x06, 0xD9, 0xF9, 0x68, 0x49, 0x19, 0x88, 0x70, 0xF9, 0x68, 0x01,
+	0x98, 0x49, 0x19, 0x88, 0x74, 0x00, 0x20, 0xFE, 0xBD, 0xF8, 0xB5, 0x52, 0x4C, 0x01, 0x27, 0xE0,
+	0x68, 0xFD, 0x25, 0x80, 0x30, 0x80, 0x7C, 0xFB, 0x26, 0x01, 0x28, 0x13, 0xD0, 0x02, 0x28, 0x23,
+	0xD0, 0x04, 0x28, 0x47, 0xD0, 0x08, 0x28, 0x1E, 0xD1, 0xFF, 0xF7, 0x4E, 0xFF, 0x60, 0x78, 0x28,
+	0x40, 0xC0, 0xB2, 0x30, 0x40, 
+	0x00, 0x00, 0x33, 0x00, 0x80, 0x60, 0x70, 0xE0, 0x68, 0xC0, 0x30, 0xC1, 0x7D, 0x0A, 0x07, 0x4C,
+	0xD5, 0x80, 0x22, 0x4B, 0xE0, 0x01, 0x20, 0xFF, 0xF7, 0x3F, 0xFF, 0x60, 0x78, 0x28, 0x40, 0xC0,
+	0xB2, 0x30, 0x40, 0x60, 0x70, 0xE0, 0x68, 0xC0, 0x30, 0xC1, 0x7D, 0xCA, 0x07, 0x01, 0xD0, 0x10,
+	0x22, 0x39, 0xE0, 0x39, 0x43, 0xC1, 0x75, 0xF8, 0xBD, 0x44, 0x49, 0x05, 0x20, 0x08, 0x70, 0x02,
+	0x20, 0xFF, 0xF7, 0x2A, 0xFF, 0x60, 0x78, 0xF7, 0x21, 0x30, 0x40, 0xC0, 0xB2, 0x40, 0x08, 0x40,
+	0x00, 0xC0, 0xB2, 0x08, 0x40, 0x60, 0x70, 0xE0, 0x68, 0xC0, 0x30, 0xC1, 0x7D, 0x8A, 0x07, 0x01,
+	0xD5, 0x20, 0x22, 0x00, 0xE0, 0x02, 0x22, 0x11, 0x43, 0xC1, 0x75, 0xFF, 0xF7, 0xD5, 0xFE, 0xE0,
+	0x68, 0x40, 0x78, 0xFF, 0xF7, 0x29, 0xFF, 0x00, 0x28, 0xDD, 0xD0, 0xE0, 0x68, 0x41, 0x78, 0xC7,
+	0x30, 0x0F, 0x54, 0xF8, 0xBD, 
+	0x00, 0x00, 0x34, 0x00, 0x80, 0x04, 0x20, 0xFF, 0xF7, 0x07, 0xFF, 0x60, 0x78, 0x28, 0x40, 0xC0,
+	0xB2, 0x40, 0x08, 0x40, 0x00, 0x60, 0x70, 0xE0, 0x68, 0xC0, 0x30, 0xC1, 0x7D, 0x4A, 0x07, 0x01,
+	0xD5, 0x40, 0x22, 0x00, 0xE0, 0x04, 0x22, 0x11, 0x43, 0xC4, 0xE7, 0x08, 0x22, 0x11, 0x43, 0xC1,
+	0x75, 0xFF, 0xF7, 0xB2, 0xFE, 0xE0, 0x68, 0x40, 0x78, 0xFF, 0xF7, 0x91, 0xFE, 0xE0, 0x68, 0x41,
+	0x78, 0x49, 0x1E, 0x41, 0x70, 0x01, 0x78, 0x49, 0x1E, 0x01, 0x70, 0xC0, 0x30, 0x01, 0x7E, 0x49,
+	0x1C, 0x01, 0x76, 0xF8, 0xBD, 0xF0, 0xB5, 0x8C, 0x46, 0x51, 0x1E, 0x00, 0x25, 0x52, 0x1C, 0x4C,
+	0xB2, 0x96, 0x46, 0x3F, 0xE0, 0x14, 0x49, 0x0A, 0x78, 0x61, 0x46, 0x62, 0x43, 0x97, 0xB2, 0x62,
+	0x46, 0x52, 0x1E, 0x53, 0xB2, 0x49, 0x1C, 0x31, 0xE0, 0x0F, 0x4E, 0x36, 0x78, 0xB3, 0x42, 0x27,
+	0xDA, 0x0E, 0x4E, 0x36, 0x78, 
+	0x00, 0x00, 0x35, 0x00, 0x80, 0xB4, 0x42, 0x23, 0xDA, 0x00, 0x2B, 0x21, 0xDB, 0x00, 0x2C, 0x1F,
+	0xDB, 0x04, 0x4E, 0xDA, 0x19, 0xF6, 0x68, 0x52, 0x00, 0x80, 0x36, 0x36, 0x6B, 0xB6, 0x5A, 0x72,
+	0x19, 0x15, 0xB2, 0x19, 0xE0, 0x8C, 0x00, 0x00, 0x20, 0xE9, 0x00, 0x00, 0x20, 0x88, 0x03, 0x00,
+	0x20, 0xD0, 0xE7, 0x00, 0x00, 0xEF, 0x00, 0x00, 0x20, 0x9E, 0x00, 0x00, 0x20, 0x9D, 0x00, 0x00,
+	0x20, 0xFF, 0xFF, 0x01, 0x00, 0x04, 0x01, 0x00, 0x20, 0x08, 0x01, 0x00, 0x20, 0xE6, 0x00, 0x00,
+	0x20, 0x06, 0x78, 0x40, 0x22, 0x16, 0x43, 0x06, 0x70, 0x5B, 0x1C, 0x5B, 0xB2, 0x8B, 0x42, 0xCB,
+	0xDD, 0x64, 0x1C, 0x64, 0xB2, 0x74, 0x45, 0xBD, 0xDD, 0xA8, 0xB2, 0xF0, 0xBD, 0xF0, 0xB5, 0x81,
+	0x7A, 0xC2, 0x7A, 0x91, 0xB0, 0x04, 0x46, 0xFF, 0x4E, 0xF0, 0x68, 0x41, 0x18, 0x8B, 0x78, 0x03,
+	0x93, 0x89, 0x7C, 0x80, 0x18, 
+	0x00, 0x00, 0x36, 0x00, 0x80, 0x02, 0x91, 0x81, 0x78, 0x01, 0x91, 0x80, 0x7C, 0x00, 0x90, 0x58,
+	0x18, 0xC0, 0xB2, 0x07, 0x90, 0x02, 0x99, 0x00, 0x98, 0x08, 0x18, 0xC0, 0xB2, 0x06, 0x90, 0x20,
+	0x78, 0xBF, 0x21, 0x08, 0x40, 0x20, 0x70, 0x07, 0x98, 0x40, 0x08, 0xA0, 0x70, 0x06, 0x98, 0x40,
+	0x08, 0xE0, 0x70, 0xA0, 0x78, 0x05, 0x90, 0xE0, 0x78, 0x04, 0x90, 0x02, 0x46, 0x20, 0x46, 0x05,
+	0x99, 0xFF, 0xF7, 0x88, 0xFF, 0x05, 0xB2, 0x0A, 0x95, 0xF0, 0x68, 0x01, 0x27, 0x80, 0x30, 0x02,
+	0x6B, 0xE9, 0x48, 0x01, 0x78, 0x04, 0x98, 0x41, 0x43, 0x05, 0x98, 0x08, 0x18, 0x40, 0x00, 0x16,
+	0x5E, 0x07, 0x98, 0x09, 0x96, 0x08, 0x96, 0xC0, 0x07, 0x29, 0xD0, 0x05, 0x98, 0x04, 0x9A, 0x40,
+	0x1C, 0xC1, 0xB2, 0x10, 0x90, 0x20, 0x46, 0xFF, 0xF7, 0x6D, 0xFF, 0x01, 0xB2, 0xDD, 0x48, 0x04,
+	0x9B, 0xC0, 0x68, 0x02, 0x27, 
+	0x00, 0x00, 0x37, 0x00, 0x80, 0x80, 0x30, 0x02, 0x6B, 0xDB, 0x48, 0x00, 0x78, 0x58, 0x43, 0x05,
+	0x9B, 0xC0, 0x18, 0x40, 0x00, 0x80, 0x1C, 0x10, 0x5E, 0x32, 0x18, 0x16, 0xB2, 0x8D, 0x42, 0x02,
+	0xDA, 0x10, 0x9A, 0xA2, 0x70, 0x0D, 0x46, 0x0A, 0x9A, 0x8A, 0x42, 0x00, 0xDD, 0x0A, 0x91, 0x09,
+	0x99, 0x81, 0x42, 0x00, 0xDA, 0x09, 0x90, 0x08, 0x99, 0x81, 0x42, 0x00, 0xDD, 0x08, 0x90, 0x06,
+	0x98, 0xC0, 0x07, 0x2A, 0xD0, 0x04, 0x98, 0x40, 0x1C, 0x0F, 0x90, 0xC2, 0xB2, 0x0E, 0x90, 0x20,
+	0x46, 0x05, 0x99, 0xFF, 0xF7, 0x3F, 0xFF, 0x01, 0xB2, 0xC6, 0x48, 0x7F, 0x1C, 0xC0, 0x68, 0xFF,
+	0xB2, 0x80, 0x30, 0x02, 0x6B, 0xC4, 0x48, 0x03, 0x78, 0x0E, 0x98, 0x43, 0x43, 0x05, 0x98, 0x18,
+	0x18, 0x40, 0x00, 0x10, 0x5E, 0x32, 0x18, 0x16, 0xB2, 0x8D, 0x42, 0x02, 0xDA, 0x0F, 0x9A, 0xE2,
+	0x70, 0x0D, 0x46, 0x0A, 0x9A, 
+	0x00, 0x00, 0x38, 0x00, 0x80, 0x8A, 0x42, 0x00, 0xDD, 0x0A, 0x91, 0x09, 0x99, 0x81, 0x42, 0x00,
+	0xDA, 0x09, 0x90, 0x08, 0x99, 0x81, 0x42, 0x00, 0xDD, 0x08, 0x90, 0x07, 0x99, 0x06, 0x98, 0x08,
+	0x40, 0xC0, 0x07, 0x24, 0xD0, 0x04, 0x99, 0x05, 0x98, 0x49, 0x1C, 0x40, 0x1C, 0x0D, 0x91, 0xCA,
+	0xB2, 0x0C, 0x91, 0xC1, 0xB2, 0x0B, 0x90, 0x20, 0x46, 0xFF, 0xF7, 0x0C, 0xFF, 0xAD, 0x49, 0x7F,
+	0x1C, 0xC9, 0x68, 0x00, 0xB2, 0x80, 0x31, 0x0B, 0x6B, 0xAB, 0x49, 0xFF, 0xB2, 0x0A, 0x78, 0x0C,
+	0x99, 0x4A, 0x43, 0x05, 0x99, 0x51, 0x18, 0x49, 0x00, 0x89, 0x1C, 0x59, 0x5E, 0x72, 0x18, 0x16,
+	0xB2, 0x85, 0x42, 0x04, 0xDA, 0x0B, 0x9A, 0xA2, 0x70, 0x0D, 0x9A, 0xE2, 0x70, 0x05, 0x46, 0x01,
+	0x2F, 0x04, 0xD0, 0x02, 0x2F, 0x01, 0xD1, 0x76, 0x10, 0x00, 0xE0, 0xB6, 0x10, 0x01, 0x9A, 0x03,
+	0x98, 0x9E, 0x49, 0x90, 0x42, 
+	0x00, 0x00, 0x39, 0x00, 0x80, 0x00, 0x9A, 0x02, 0x98, 0x22, 0xD1, 0x90, 0x42, 0x02, 0xD9, 0x10,
+	0x46, 0x02, 0x9B, 0x00, 0xE0, 0x13, 0x46, 0x61, 0x82, 0x97, 0x49, 0x03, 0x9A, 0x09, 0x78, 0x8C,
+	0x46, 0x41, 0x43, 0x89, 0x18, 0x93, 0x4A, 0x40, 0x1C, 0xD7, 0x68, 0x89, 0xB2, 0xC0, 0xB2, 0x80,
+	0x37, 0x0B, 0xE0, 0x61, 0x44, 0x89, 0xB2, 0x3A, 0x6B, 0x4E, 0x00, 0x92, 0x5F, 0x12, 0x26, 0xA6,
+	0x5F, 0xB2, 0x42, 0x00, 0xDA, 0x62, 0x82, 0x40, 0x1C, 0xC0, 0xB2, 0x98, 0x42, 0xF1, 0xD3, 0x26,
+	0xE0, 0x90, 0x42, 0x23, 0xD1, 0x03, 0x9A, 0x01, 0x98, 0x82, 0x42, 0x01, 0xD9, 0x13, 0x46, 0x01,
+	0xE0, 0x01, 0x9B, 0x10, 0x46, 0x61, 0x82, 0x84, 0x49, 0x02, 0x9A, 0x09, 0x78, 0x51, 0x43, 0x09,
+	0x18, 0x80, 0x4A, 0x40, 0x1C, 0xD7, 0x68, 0x89, 0xB2, 0xC0, 0xB2, 0x80, 0x37, 0x0B, 0xE0, 0x49,
+	0x1C, 0x89, 0xB2, 0x3A, 0x6B, 
+	0x00, 0x00, 0x3A, 0x00, 0x80, 0x4E, 0x00, 0x92, 0x5F, 0x12, 0x26, 0xA6, 0x5F, 0xB2, 0x42, 0x00,
+	0xDA, 0x62, 0x82, 0x40, 0x1C, 0xC0, 0xB2, 0x98, 0x42, 0xF1, 0xD3, 0x00, 0xE0, 0x66, 0x82, 0x25,
+	0x82, 0x12, 0x20, 0x06, 0x21, 0x20, 0x5E, 0x61, 0x5E, 0x88, 0x42, 0x03, 0xDA, 0x80, 0x01, 0x0B,
+	0xF0, 0xC6, 0xFE, 0x00, 0xE0, 0x40, 0x20, 0x20, 0x75, 0x28, 0x46, 0x11, 0xB0, 0xF0, 0xBD, 0x70,
+	0xB5, 0x6F, 0x48, 0x6C, 0x4C, 0x02, 0x78, 0x00, 0x21, 0xE0, 0x68, 0x86, 0xB0, 0x01, 0x2A, 0x02,
+	0xD1, 0xA1, 0x70, 0x02, 0x21, 0x54, 0xE0, 0xA1, 0x68, 0x6B, 0x46, 0x8A, 0x69, 0xA0, 0x30, 0x5A,
+	0x70, 0x80, 0x7D, 0x58, 0x71, 0x48, 0x6D, 0xD8, 0x82, 0x00, 0x25, 0x10, 0xE0, 0x41, 0x19, 0xA0,
+	0x31, 0xC9, 0x7D, 0x41, 0x18, 0x88, 0x78, 0x89, 0x7C, 0xFF, 0xF7, 0x25, 0xFD, 0x00, 0x28, 0x04,
+	0xD0, 0x6B, 0x46, 0x18, 0x78, 
+	0x00, 0x00, 0x3B, 0x00, 0x80, 0x80, 0x21, 0x08, 0x43, 0x0A, 0xE0, 0x6D, 0x1C, 0xED, 0xB2, 0xE0,
+	0x68, 0xB6, 0x21, 0x09, 0x5C, 0xA9, 0x42, 0xE9, 0xD8, 0x6B, 0x46, 0x18, 0x78, 0x40, 0x06, 0x40,
+	0x0E, 0x6B, 0x46, 0x18, 0x70, 0xE0, 0x68, 0x01, 0x46, 0xA0, 0x31, 0xCA, 0x7D, 0x9A, 0x72, 0x09,
+	0x7E, 0xD9, 0x72, 0x52, 0x00, 0x01, 0x46, 0x16, 0x18, 0xDB, 0x7A, 0x80, 0x31, 0x5B, 0x00, 0x72,
+	0x8C, 0x18, 0x18, 0x0D, 0x6B, 0x43, 0x8C, 0x52, 0x00, 0xAA, 0x5E, 0x5B, 0x00, 0xED, 0x5E, 0x6B,
+	0x46, 0xAA, 0x42, 0x05, 0xDD, 0xDD, 0x80, 0x08, 0x6B, 0x71, 0x8C, 0x49, 0x00, 0x40, 0x5A, 0x04,
+	0xE0, 0xDA, 0x80, 0x40, 0x8C, 0x09, 0x6B, 0x40, 0x00, 0x08, 0x5A, 0x6B, 0x46, 0x18, 0x81, 0x68,
+	0x46, 0xFF, 0xF7, 0x7C, 0xFE, 0x68, 0x46, 0x00, 0xF0, 0x5A, 0xFB, 0x6B, 0x46, 0x19, 0x79, 0xE0,
+	0x68, 0x80, 0x30, 0x81, 0x74, 
+	0x00, 0x00, 0x3C, 0x00, 0x80, 0x06, 0xB0, 0x70, 0xBD, 0xFE, 0xB5, 0x3A, 0x48, 0x00, 0x25, 0xC2,
+	0x68, 0xAE, 0x46, 0x11, 0x46, 0xA0, 0x31, 0x02, 0x91, 0x89, 0x7D, 0x2C, 0x46, 0x8C, 0x46, 0x02,
+	0x29, 0x51, 0xD9, 0x00, 0x21, 0x26, 0xE0, 0x50, 0x18, 0xA0, 0x30, 0xC0, 0x7D, 0x10, 0x18, 0x83,
+	0x78, 0x01, 0x93, 0x80, 0x7C, 0x00, 0x90, 0x00, 0x20, 0x18, 0xE0, 0x13, 0x18, 0xA0, 0x33, 0xDB,
+	0x7D, 0x00, 0x9E, 0xD3, 0x18, 0x9F, 0x78, 0x9B, 0x7C, 0xF3, 0x1A, 0x01, 0x9E, 0xF6, 0x1B, 0x00,
+	0x2B, 0x00, 0xDA, 0x5B, 0x42, 0x00, 0x2E, 0x00, 0xDA, 0x76, 0x42, 0x9B, 0x19, 0xDB, 0xB2, 0x9D,
+	0x42, 0x02, 0xD2, 0x1D, 0x46, 0x8E, 0x46, 0x04, 0x46, 0x40, 0x1C, 0xC0, 0xB2, 0x84, 0x45, 0xE4,
+	0xD8, 0x49, 0x1C, 0xC9, 0xB2, 0x8C, 0x45, 0xD6, 0xD8, 0x00, 0x2D, 0x24, 0xD0, 0x02, 0x98, 0x1D,
+	0x4D, 0xC1, 0x7D, 0x70, 0x46, 
+	0x00, 0x00, 0x3D, 0x00, 0x80, 0x10, 0x18, 0xA0, 0x30, 0x02, 0x9A, 0xC3, 0x7D, 0xD3, 0x75, 0xC1,
+	0x75, 0x00, 0x2C, 0x00, 0xD1, 0x74, 0x46, 0xE8, 0x68, 0xB6, 0x21, 0x0A, 0x5C, 0x41, 0x18, 0x00,
+	0x19, 0xA0, 0x30, 0x53, 0x5C, 0xC0, 0x7D, 0x50, 0x54, 0xE8, 0x68, 0x00, 0x19, 0xA0, 0x30, 0xC3,
+	0x75, 0xE8, 0x68, 0xA0, 0x30, 0x81, 0x7D, 0x49, 0x1E, 0x81, 0x75, 0xFF, 0xF7, 0x6D, 0xFC, 0xE8,
+	0x68, 0x02, 0x21, 0xA0, 0x30, 0x81, 0x75, 0xFE, 0xBD, 0xF0, 0xB5, 0x00, 0x28, 0x7E, 0xDB, 0x0D,
+	0x4A, 0x12, 0x78, 0x90, 0x42, 0x7A, 0xDA, 0x00, 0x29, 0x78, 0xDB, 0x07, 0x4A, 0x12, 0x78, 0x91,
+	0x42, 0x7C, 0xDA, 0x42, 0x43, 0x03, 0x4E, 0x52, 0x18, 0xB3, 0x68, 0x54, 0x11, 0xA4, 0x00, 0x5A,
+	0x61, 0xE3, 0x18, 0x09, 0xE0, 0x8C, 0x00, 0x00, 0x20, 0x9E, 0x00, 0x00, 0x20, 0xFF, 0x7F, 0x00,
+	0x00, 0xE9, 0x00, 0x00, 0x20, 
+	0x00, 0x00, 0x3E, 0x00, 0x80, 0x9D, 0x00, 0x00, 0x20, 0xD5, 0x06, 0xED, 0x0E, 0x01, 0x22, 0x1C,
+	0x6A, 0xAA, 0x40, 0x25, 0x46, 0x15, 0x42, 0x61, 0xD1, 0x14, 0x43, 0x1C, 0x62, 0xB2, 0x68, 0xFE,
+	0x4C, 0x53, 0x69, 0x5B, 0x00, 0xE3, 0x5E, 0x53, 0x61, 0x14, 0x69, 0xA3, 0x42, 0x45, 0xDD, 0xD2,
+	0x69, 0x03, 0x02, 0x0B, 0x43, 0x9D, 0xB2, 0xD3, 0x88, 0x17, 0x89, 0xDC, 0x1B, 0x02, 0xD5, 0x94,
+	0x88, 0x1C, 0x19, 0xE4, 0x1B, 0xA7, 0xB2, 0x94, 0x88, 0xA7, 0x42, 0x0B, 0xD2, 0x5C, 0x00, 0x5B,
+	0x1C, 0xD3, 0x80, 0x13, 0x68, 0x1D, 0x53, 0xD3, 0x88, 0x94, 0x88, 0xA3, 0x42, 0x15, 0xD1, 0x00,
+	0x23, 0xD3, 0x80, 0x12, 0xE0, 0x5C, 0x00, 0x5B, 0x1C, 0xD3, 0x80, 0x13, 0x68, 0x1D, 0x53, 0xD4,
+	0x88, 0x93, 0x88, 0x9C, 0x42, 0x01, 0xD1, 0x00, 0x24, 0xD4, 0x80, 0xD4, 0x88, 0x64, 0x1C, 0xA4,
+	0xB2, 0x14, 0x81, 0x9C, 0x42, 
+	0x00, 0x00, 0x3F, 0x00, 0x80, 0x01, 0xD1, 0x00, 0x23, 0x13, 0x81, 0xB2, 0x68, 0x93, 0x69, 0x5B,
+	0x1C, 0x93, 0x61, 0x54, 0x69, 0x93, 0x6D, 0x1B, 0x19, 0x93, 0x65, 0x13, 0x68, 0x83, 0x42, 0x00,
+	0xD9, 0x10, 0x60, 0x53, 0x68, 0x83, 0x42, 0x00, 0xD2, 0x50, 0x60, 0x93, 0x68, 0x8B, 0x42, 0x00,
+	0xD9, 0x91, 0x60, 0xD3, 0x68, 0x8B, 0x42, 0x00, 0xD2, 0xD1, 0x60, 0xB2, 0x68, 0x53, 0x69, 0x00,
+	0x2B, 0x0C, 0xDD, 0x54, 0x6D, 0xE4, 0x18, 0x54, 0x65, 0x58, 0x43, 0x00, 0xE0, 0x06, 0xE0, 0xD4,
+	0x6C, 0x4B, 0x43, 0x20, 0x18, 0xD0, 0x64, 0x10, 0x6D, 0xC0, 0x18, 0x10, 0x65, 0xF0, 0xBD, 0xF1,
+	0xB5, 0x3C, 0x21, 0x00, 0x98, 0xFF, 0xF7, 0x04, 0xFA, 0xCC, 0x49, 0xCD, 0x4E, 0x08, 0x60, 0x1E,
+	0x20, 0x88, 0x80, 0x00, 0x20, 0x08, 0x81, 0xC8, 0x80, 0xB2, 0x68, 0xD1, 0x61, 0x01, 0x21, 0x91,
+	0x61, 0xF3, 0x68, 0x18, 0x46, 
+	0x00, 0x00, 0x40, 0x00, 0x80, 0x80, 0x30, 0x5B, 0x78, 0x44, 0x6A, 0x85, 0x6A, 0xE4, 0x5C, 0xED,
+	0x5C, 0xC0, 0x6A, 0x5B, 0x00, 0xC0, 0x5A, 0x43, 0x09, 0x9B, 0x00, 0x9A, 0x18, 0x94, 0x46, 0xC7,
+	0x06, 0x13, 0x6A, 0xFF, 0x0E, 0x0A, 0x46, 0xBA, 0x40, 0x13, 0x43, 0x62, 0x46, 0x13, 0x62, 0xF2,
+	0x68, 0xB6, 0x23, 0x99, 0x54, 0x53, 0x78, 0xB6, 0x32, 0x8B, 0x54, 0xB1, 0x68, 0x43, 0x00, 0x8C,
+	0x60, 0x0D, 0x60, 0x4D, 0x60, 0xCC, 0x60, 0xF2, 0x68, 0x80, 0x32, 0x17, 0x6B, 0xF8, 0x5E, 0xB3,
+	0x4F, 0x0C, 0x37, 0x3F, 0x79, 0x78, 0x43, 0xC0, 0x11, 0x08, 0x61, 0x10, 0x6B, 0xC0, 0x5E, 0x48,
+	0x61, 0x17, 0x6B, 0xFF, 0x5E, 0x4F, 0x65, 0x12, 0x6B, 0xD2, 0x5E, 0x8A, 0x65, 0x02, 0x46, 0x6A,
+	0x43, 0x60, 0x43, 0xCA, 0x64, 0x08, 0x65, 0x21, 0x46, 0x68, 0x1C, 0xFF, 0xF7, 0x25, 0xFF, 0x21,
+	0x46, 0x68, 0x1E, 0xFF, 0xF7, 
+	0x00, 0x00, 0x41, 0x00, 0x80, 0x21, 0xFF, 0x61, 0x1C, 0x28, 0x46, 0xFF, 0xF7, 0x1D, 0xFF, 0x61,
+	0x1E, 0x28, 0x46, 0xFF, 0xF7, 0x19, 0xFF, 0x61, 0x1C, 0x68, 0x1C, 0xFF, 0xF7, 0x15, 0xFF, 0x61,
+	0x1E, 0x68, 0x1E, 0xFF, 0xF7, 0x11, 0xFF, 0x61, 0x1E, 0x68, 0x1C, 0xFF, 0xF7, 0x0D, 0xFF, 0x61,
+	0x1C, 0x68, 0x1E, 0xFF, 0xF7, 0x09, 0xFF, 0xB0, 0x68, 0xC0, 0x69, 0x01, 0x89, 0xC2, 0x88, 0x91,
+	0x42, 0x14, 0xD0, 0x4B, 0x00, 0x49, 0x1C, 0x8A, 0xB2, 0x02, 0x81, 0x01, 0x68, 0xC9, 0x5A, 0x83,
+	0x88, 0x9A, 0x42, 0x01, 0xD1, 0x00, 0x22, 0x02, 0x81, 0x92, 0x48, 0x0D, 0x12, 0x00, 0x78, 0xCC,
+	0xB2, 0x68, 0x43, 0x00, 0x19, 0x87, 0xB2, 0xF0, 0x68, 0x40, 0x78, 0x11, 0xE0, 0x00, 0x98, 0xFF,
+	0xF7, 0x8C, 0xF9, 0xF8, 0xBD, 0xAC, 0x22, 0x52, 0x58, 0x43, 0x00, 0xD2, 0x5A, 0xBA, 0x42, 0x07,
+	0xD1, 0x0B, 0x46, 0xA0, 0x33, 
+	0x00, 0x00, 0x42, 0x00, 0x80, 0x9A, 0x7D, 0x52, 0x1C, 0xD2, 0xB2, 0x9A, 0x75, 0xB6, 0x31, 0x50,
+	0x54, 0xF1, 0x68, 0x40, 0x1C, 0x0A, 0x78, 0xC0, 0xB2, 0x82, 0x42, 0xEB, 0xD8, 0xAB, 0xE7, 0xF0,
+	0xB5, 0x00, 0x21, 0x3F, 0xE0, 0x80, 0x1E, 0x38, 0xE0, 0x7D, 0x4A, 0x44, 0x00, 0xD5, 0x68, 0xA6,
+	0x1C, 0x80, 0x35, 0xEB, 0x6A, 0xB6, 0x46, 0x9C, 0x46, 0x1A, 0x5B, 0x9B, 0x5B, 0x2E, 0x6B, 0x55,
+	0x00, 0x75, 0x5F, 0x5F, 0x00, 0xF6, 0x5F, 0xB5, 0x42, 0x26, 0xDD, 0x75, 0x4D, 0x66, 0x46, 0x33,
+	0x53, 0xEB, 0x68, 0x80, 0x33, 0xDC, 0x6A, 0x73, 0x46, 0xE2, 0x52, 0xEA, 0x68, 0x80, 0x32, 0x53,
+	0x6A, 0x42, 0x1C, 0x1C, 0x5C, 0x9E, 0x5C, 0x1E, 0x54, 0xEB, 0x68, 0x80, 0x33, 0x5B, 0x6A, 0x9C,
+	0x54, 0xEB, 0x68, 0x80, 0x33, 0x9B, 0x6A, 0x1C, 0x5C, 0x9E, 0x5C, 0x1E, 0x54, 0xEB, 0x68, 0x80,
+	0x33, 0x9B, 0x6A, 0x9C, 0x54, 
+	0x00, 0x00, 0x43, 0x00, 0x80, 0xEA, 0x68, 0x12, 0x18, 0x80, 0x32, 0xD3, 0x7C, 0x14, 0x7D, 0xD4,
+	0x74, 0xEA, 0x68, 0x12, 0x18, 0x80, 0x32, 0x13, 0x75, 0x40, 0x1E, 0x40, 0xB2, 0x88, 0x42, 0xC3,
+	0xDA, 0x49, 0x1C, 0x49, 0xB2, 0x5E, 0x4B, 0xD8, 0x68, 0x00, 0x78, 0x42, 0x1E, 0x8A, 0x42, 0xB9,
+	0xDC, 0xF0, 0xBD, 0xF7, 0xB5, 0x00, 0x24, 0x5A, 0x4D, 0x0E, 0x46, 0x17, 0x46, 0x00, 0x29, 0x04,
+	0xD1, 0x2C, 0x70, 0x6C, 0x70, 0xAC, 0x70, 0xAC, 0x80, 0xEC, 0x70, 0xDC, 0x21, 0x00, 0x98, 0xFF,
+	0xF7, 0x0F, 0xF9, 0xE8, 0x60, 0x60, 0x21, 0x00, 0x98, 0xFF, 0xF7, 0x0A, 0xF9, 0xA8, 0x60, 0xE8,
+	0x68, 0x01, 0x46, 0xC0, 0x30, 0x04, 0x76, 0xC4, 0x75, 0x92, 0x20, 0x44, 0x54, 0x00, 0x20, 0xE9,
+	0x68, 0x09, 0x18, 0xC0, 0x31, 0xCC, 0x71, 0xEA, 0x68, 0x41, 0x00, 0x8A, 0x18, 0x40, 0x32, 0x54,
+	0x80, 0xEA, 0x68, 0x40, 0x1C, 
+	0x00, 0x00, 0x44, 0x00, 0x80, 0x89, 0x18, 0x60, 0x31, 0x4C, 0x80, 0x10, 0x28, 0xEF, 0xD3, 0x39,
+	0x46, 0x30, 0x46, 0x00, 0xF0, 0xDF, 0xF8, 0x00, 0xF0, 0xB9, 0xF8, 0xFF, 0xF7, 0x80, 0xFF, 0x00,
+	0x20, 0x81, 0x00, 0xAA, 0x68, 0x40, 0x1C, 0x89, 0x18, 0x0C, 0x62, 0x0B, 0x28, 0xF8, 0xD3, 0xE8,
+	0x68, 0x44, 0x70, 0x22, 0xE0, 0x0B, 0x29, 0x25, 0xD2, 0x49, 0x00, 0x08, 0x18, 0x40, 0x8C, 0xAA,
+	0x68, 0x41, 0x09, 0x89, 0x00, 0x89, 0x18, 0xC2, 0x06, 0x09, 0x6A, 0xD2, 0x0E, 0x01, 0x20, 0x90,
+	0x40, 0x01, 0x42, 0x0E, 0xD1, 0x00, 0x20, 0x81, 0x00, 0xAA, 0x68, 0x40, 0x1C, 0x89, 0x18, 0x0C,
+	0x62, 0x0B, 0x28, 0xF8, 0xD3, 0x00, 0x98, 0xFF, 0xF7, 0xBA, 0xFE, 0x00, 0xF0, 0x5F, 0xF8, 0xFF,
+	0xF7, 0x73, 0xFB, 0xE8, 0x68, 0x41, 0x78, 0x49, 0x1C, 0x41, 0x70, 0xE8, 0x68, 0x41, 0x78, 0x02,
+	0x78, 0x91, 0x42, 0xD7, 0xD3, 
+	0x00, 0x00, 0x45, 0x00, 0x80, 0xFF, 0xF7, 0x14, 0xFA, 0xE8, 0x68, 0xC0, 0x30, 0xC0, 0x7D, 0x41,
+	0x07, 0x89, 0x0F, 0x04, 0xD0, 0xA9, 0x78, 0xFA, 0x29, 0x01, 0xD2, 0x49, 0x1C, 0xA9, 0x70, 0x28,
+	0x70, 0x81, 0x07, 0x01, 0xD5, 0x41, 0x07, 0x09, 0xD4, 0x81, 0x06, 0x07, 0xD4, 0x41, 0x06, 0x05,
+	0xD4, 0x08, 0x28, 0x03, 0xD0, 0x1C, 0x48, 0x00, 0x78, 0x01, 0x28, 0x02, 0xD1, 0xAC, 0x70, 0xEC,
+	0x70, 0x2C, 0x70, 0x00, 0x98, 0xFF, 0xF7, 0xA1, 0xF8, 0x00, 0x98, 0xFF, 0xF7, 0x9E, 0xF8, 0xE8,
+	0x68, 0x00, 0x78, 0xFE, 0xBD, 0x30, 0xB5, 0x01, 0x21, 0x11, 0x4D, 0x16, 0xE0, 0x01, 0x20, 0x0C,
+	0xE0, 0x14, 0x18, 0xA0, 0x34, 0xE2, 0x7D, 0x23, 0x7E, 0x9A, 0x42, 0x04, 0xD2, 0xE3, 0x75, 0xEB,
+	0x68, 0x1B, 0x18, 0xA0, 0x33, 0x1A, 0x76, 0x40, 0x1C, 0xC0, 0xB2, 0xEA, 0x68, 0xB6, 0x23, 0x9B,
+	0x5C, 0x5B, 0x1A, 0x83, 0x42, 
+	0x00, 0x00, 0x46, 0x00, 0x80, 0xEC, 0xDC, 0x49, 0x1C, 0xC9, 0xB2, 0xE8, 0x68, 0xA0, 0x30, 0x80,
+	0x7D, 0x40, 0x1E, 0x88, 0x42, 0xE2, 0xDC, 0x30, 0xBD, 0x92, 0x08, 0x00, 0x20, 0x20, 0x03, 0x00,
+	0x20, 0x8C, 0x00, 0x00, 0x20, 0x9E, 0x00, 0x00, 0x20, 0xE9, 0x00, 0x00, 0x20, 0x10, 0xB5, 0x41,
+	0x4C, 0xA0, 0x68, 0x82, 0x69, 0xE0, 0x68, 0x01, 0x46, 0xA0, 0x31, 0x4B, 0x7D, 0x80, 0x30, 0x9A,
+	0x42, 0x01, 0xD9, 0x08, 0x21, 0x20, 0xE0, 0x89, 0x7D, 0x01, 0x29, 0x1C, 0xD9, 0xFF, 0xF7, 0x5C,
+	0xFD, 0xA0, 0x78, 0x05, 0x28, 0x14, 0xD3, 0x21, 0x78, 0x48, 0x07, 0x02, 0xD4, 0xE0, 0x78, 0x04,
+	0x28, 0x04, 0xD1, 0x04, 0x21, 0xE1, 0x70, 0xE0, 0x68, 0x80, 0x30, 0x0D, 0xE0, 0x89, 0x07, 0x01,
+	0xD4, 0x02, 0x28, 0x05, 0xD1, 0x02, 0x20, 0xE0, 0x70, 0xE1, 0x68, 0x80, 0x31, 0x88, 0x74, 0x10,
+	0xBD, 0xFF, 0xF7, 0xDD, 0xFC, 
+	0x00, 0x00, 0x47, 0x00, 0x80, 0x10, 0xBD, 0x01, 0x21, 0x81, 0x74, 0x10, 0xBD, 0x10, 0xB5, 0x29,
+	0x48, 0x00, 0x23, 0x01, 0x78, 0xC0, 0x68, 0x8C, 0x07, 0xA0, 0x30, 0x27, 0x4A, 0x00, 0x2C, 0x54,
+	0x88, 0x06, 0xDA, 0x02, 0x2C, 0x02, 0xD9, 0x54, 0x88, 0xA4, 0x1E, 0x01, 0xE0, 0x03, 0x75, 0x00,
+	0xE0, 0x04, 0x75, 0x0C, 0x07, 0x0B, 0xD5, 0x0C, 0x06, 0x09, 0xD4, 0x89, 0x07, 0x07, 0xD4, 0x11,
+	0x88, 0x06, 0x29, 0x02, 0xD9, 0x11, 0x88, 0x89, 0x1F, 0x02, 0xE0, 0x43, 0x75, 0x10, 0xBD, 0x11,
+	0x88, 0x41, 0x75, 0x10, 0xBD, 0xF0, 0xB5, 0x84, 0x46, 0x00, 0x22, 0x16, 0x4C, 0x19, 0xE0, 0x53,
+	0x00, 0xE5, 0x68, 0x58, 0x18, 0x40, 0x78, 0xAD, 0x18, 0xA8, 0x70, 0xE5, 0x68, 0xC8, 0x5C, 0xAD,
+	0x18, 0xA8, 0x74, 0xE5, 0x68, 0xA8, 0x18, 0x86, 0x78, 0x87, 0x7C, 0x10, 0x48, 0x5B, 0x19, 0x00,
+	0x78, 0x47, 0x43, 0xF0, 0x19, 
+	0x00, 0x00, 0x48, 0x00, 0x80, 0x58, 0x84, 0xE0, 0x68, 0x80, 0x18, 0x80, 0x30, 0xC2, 0x74, 0x52,
+	0x1C, 0xD2, 0xB2, 0x62, 0x45, 0xE3, 0xD3, 0xE0, 0x68, 0x61, 0x46, 0x01, 0x70, 0x01, 0x46, 0x82,
+	0x1C, 0x80, 0x31, 0x4A, 0x62, 0x10, 0x32, 0x22, 0x30, 0x8A, 0x62, 0xC8, 0x62, 0x04, 0x48, 0x08,
+	0x63, 0xF0, 0xBD, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x20, 0x2C, 0x03, 0x00, 0x20, 0x9E, 0x00, 0x00,
+	0x20, 0x92, 0x08, 0x00, 0x20, 0x70, 0x47, 0x70, 0xB5, 0x20, 0x4D, 0x41, 0x78, 0x2B, 0x88, 0x02,
+	0x22, 0x99, 0x42, 0x02, 0xD8, 0x41, 0x79, 0x05, 0x29, 0x01, 0xD9, 0x02, 0x71, 0x70, 0xBD, 0x01,
+	0x78, 0x04, 0x23, 0x8C, 0x09, 0x1A, 0x49, 0x00, 0x2C, 0x0D, 0xD1, 0x10, 0x24, 0x04, 0x5F, 0x2E,
+	0x89, 0xB4, 0x42, 0x06, 0xDB, 0xED, 0x88, 0xAC, 0x42, 0xEF, 0xDC, 0x04, 0x7D, 0xC9, 0x79, 0x8C,
+	0x42, 0xEB, 0xD8, 0x03, 0x71, 
+	0x00, 0x00, 0x49, 0x00, 0x80, 0x70, 0xBD, 0x04, 0x7D, 0xCD, 0x79, 0xAC, 0x42, 0xF9, 0xD9, 0x16,
+	0x24, 0x04, 0x5F, 0x49, 0x8B, 0x8C, 0x42, 0xF4, 0xDB, 0x02, 0x71, 0x08, 0x21, 0x41, 0x5E, 0x06,
+	0x22, 0x1B, 0x24, 0x82, 0x5E, 0x61, 0x43, 0x49, 0x11, 0x8A, 0x42, 0xEA, 0xDB, 0x70, 0xBD, 0x41,
+	0x79, 0x01, 0x29, 0x00, 0xD9, 0xC7, 0xE7, 0x05, 0x4A, 0x41, 0x78, 0x12, 0x88, 0x91, 0x42, 0x01,
+	0xD3, 0x08, 0x21, 0x00, 0xE0, 0x01, 0x21, 0x01, 0x71, 0x70, 0x47, 0x00, 0x00, 0x2C, 0x03, 0x00,
+	0x20, 0x10, 0xE8, 0x00, 0x00, 0x70, 0x47, 0xFE, 0xB5, 0xFE, 0x4C, 0x25, 0x68, 0x03, 0x21, 0x09,
+	0x02, 0x28, 0x46, 0x88, 0x43, 0x20, 0x60, 0xFB, 0x48, 0x40, 0x30, 0x80, 0x68, 0x01, 0x90, 0xE0,
+	0x6B, 0x00, 0x90, 0x01, 0x98, 0xF7, 0x4A, 0x06, 0x0C, 0x00, 0x98, 0x36, 0x04, 0x07, 0x0C, 0xFF,
+	0x36, 0x02, 0x36, 0x3F, 0x04, 
+	0x00, 0x00, 0x4A, 0x00, 0x80, 0xFF, 0x37, 0xA0, 0x03, 0x31, 0x46, 0x02, 0x37, 0x41, 0x40, 0x40,
+	0x32, 0x91, 0x60, 0x78, 0x40, 0xE0, 0x63, 0x01, 0x20, 0x03, 0xF0, 0x10, 0xFE, 0xED, 0x48, 0x40,
+	0x30, 0x86, 0x60, 0xE7, 0x63, 0x01, 0x20, 0x03, 0xF0, 0x09, 0xFE, 0xEA, 0x49, 0x01, 0x98, 0x40,
+	0x31, 0x88, 0x60, 0x00, 0x98, 0xE0, 0x63, 0x25, 0x60, 0xFE, 0xBD, 0x10, 0xB5, 0xE6, 0x49, 0xC8,
+	0x68, 0x4A, 0x02, 0x10, 0x43, 0xC8, 0x60, 0xE5, 0x48, 0x81, 0x68, 0x05, 0x20, 0x28, 0x29, 0x03,
+	0xD3, 0x06, 0x20, 0x30, 0x29, 0x00, 0xD3, 0x07, 0x20, 0xE1, 0x49, 0x0A, 0x7C, 0x12, 0x09, 0x10,
+	0x18, 0x42, 0x00, 0x08, 0x7C, 0x40, 0x07, 0x40, 0x0F, 0x05, 0x28, 0x00, 0xD9, 0x00, 0x20, 0xDD,
+	0x4B, 0x80, 0x00, 0x1B, 0x58, 0xD7, 0x48, 0x13, 0x43, 0xC0, 0x30, 0x03, 0x61, 0x89, 0x7C, 0xDA,
+	0x4A, 0x09, 0x07, 0x09, 0x0F, 
+	0x00, 0x00, 0x4B, 0x00, 0x80, 0x89, 0x18, 0x41, 0x60, 0x03, 0x21, 0x81, 0x60, 0xD1, 0x49, 0x92,
+	0x0C, 0x40, 0x31, 0x8A, 0x62, 0xD2, 0x4A, 0x60, 0x3A, 0x92, 0x69, 0xCE, 0x4B, 0x80, 0x33, 0x9A,
+	0x63, 0x01, 0x22, 0x12, 0x03, 0x02, 0x60, 0x09, 0x20, 0x00, 0x07, 0x88, 0x61, 0xC9, 0x4C, 0x20,
+	0x68, 0x49, 0x06, 0x08, 0x43, 0x20, 0x60, 0x05, 0x20, 0x03, 0xF0, 0xE7, 0xFD, 0x05, 0x20, 0x03,
+	0xF0, 0xD5, 0xFD, 0x20, 0x68, 0x00, 0x06, 0x80, 0x0F, 0x01, 0xD0, 0xFF, 0xF7, 0x84, 0xFF, 0x10,
+	0xBD, 0x70, 0xB5, 0xC6, 0x48, 0x01, 0x7E, 0x00, 0x29, 0x17, 0xD0, 0xC5, 0x4A, 0x80, 0x8D, 0x51,
+	0x43, 0x80, 0x03, 0x0B, 0xF0, 0x6C, 0xFA, 0xBE, 0x4B, 0x00, 0x21, 0xC2, 0x4C, 0xC2, 0x4D, 0x20,
+	0x3B, 0xDE, 0x69, 0x64, 0x22, 0x00, 0x2E, 0x01, 0xD0, 0x0A, 0x19, 0x12, 0x78, 0x4E, 0x00, 0x42,
+	0x43, 0x12, 0x12, 0x49, 0x1C, 
+	0x00, 0x00, 0x4C, 0x00, 0x80, 0xAA, 0x53, 0x08, 0x29, 0xF2, 0xD3, 0x70, 0xBD, 0xF8, 0xB5, 0x00,
+	0x21, 0x05, 0x20, 0x03, 0xF0, 0xA1, 0xFD, 0xB2, 0x4F, 0x60, 0x3F, 0xF8, 0x69, 0xB3, 0x4C, 0x60,
+	0x70, 0x38, 0x6A, 0xA0, 0x70, 0x00, 0x20, 0xB5, 0x4D, 0x60, 0x77, 0xE8, 0x68, 0xF0, 0x21, 0x08,
+	0x40, 0x20, 0x77, 0x28, 0x6A, 0x20, 0x75, 0xA8, 0x68, 0xA0, 0x75, 0xA8, 0x68, 0x3E, 0x46, 0x00,
+	0x0A, 0x20, 0x76, 0x40, 0x36, 0x70, 0x68, 0xA0, 0x85, 0xFF, 0xF7, 0xC2, 0xFF, 0x68, 0x6F, 0x60,
+	0x75, 0xE8, 0x6D, 0xE0, 0x75, 0xE8, 0x6D, 0xE9, 0x1D, 0x00, 0x0A, 0x60, 0x76, 0xF9, 0x31, 0x49,
+	0x68, 0xC0, 0xB2, 0x0D, 0x0A, 0x39, 0x69, 0x0F, 0x0A, 0x64, 0x21, 0x41, 0x43, 0xB0, 0x68, 0x00,
+	0x03, 0x0B, 0xF0, 0x25, 0xFA, 0xA0, 0x84, 0x29, 0x46, 0x64, 0x20, 0x41, 0x43, 0x30, 0x69, 0x00,
+	0x03, 0x0B, 0xF0, 0x1D, 0xFA, 
+	0x00, 0x00, 0x4D, 0x00, 0x80, 0xE0, 0x84, 0x39, 0x46, 0x64, 0x20, 0x41, 0x43, 0x30, 0x69, 0x00,
+	0x03, 0x0B, 0xF0, 0x15, 0xFA, 0x20, 0x85, 0x92, 0x48, 0xC0, 0x7A, 0xC0, 0x07, 0x02, 0xD0, 0x04,
+	0xF0, 0xDF, 0xFC, 0xF8, 0xBD, 0x04, 0xF0, 0xE0, 0xFC, 0xF8, 0xBD, 0x10, 0xB5, 0x8F, 0x4C, 0x20,
+	0x78, 0x00, 0x28, 0x03, 0xD1, 0xFF, 0xF7, 0xAA, 0xFF, 0x01, 0x20, 0x20, 0x70, 0xFF, 0xF7, 0x3D,
+	0xFF, 0x10, 0xBD, 0x84, 0x49, 0x8E, 0x48, 0x48, 0x61, 0x82, 0x49, 0x8E, 0x48, 0x40, 0x31, 0x48,
+	0x62, 0x01, 0x21, 0x80, 0x48, 0xC9, 0x03, 0xC0, 0x30, 0x01, 0x60, 0x41, 0x68, 0x49, 0x00, 0x49,
+	0x08, 0x41, 0x60, 0x81, 0x68, 0x49, 0x08, 0x49, 0x00, 0x81, 0x60, 0x01, 0x69, 0x01, 0x22, 0x89,
+	0x00, 0x89, 0x08, 0x92, 0x07, 0x89, 0x18, 0x01, 0x61, 0x70, 0x47, 0x10, 0xB5, 0x75, 0x48, 0x01,
+	0x68, 0x49, 0x00, 0x49, 0x08, 
+	0x00, 0x00, 0x4E, 0x00, 0x80, 0x01, 0x60, 0x05, 0x20, 0x03, 0xF0, 0x37, 0xFD, 0x05, 0x20, 0x03,
+	0xF0, 0x3C, 0xFD, 0x10, 0xBD, 0x7C, 0x48, 0x00, 0x88, 0xC0, 0xB2, 0x70, 0x47, 0x30, 0xB5, 0x05,
+	0x68, 0x6C, 0x4C, 0x25, 0x60, 0x45, 0x68, 0xA5, 0x60, 0x85, 0x68, 0x65, 0x61, 0xC5, 0x68, 0xA5,
+	0x61, 0xC5, 0x69, 0xA5, 0x62, 0x05, 0x69, 0xE5, 0x61, 0x45, 0x69, 0x25, 0x62, 0x85, 0x69, 0x65,
+	0x62, 0xC5, 0x69, 0xA5, 0x62, 0x05, 0x6A, 0xE5, 0x62, 0x45, 0x6A, 0x25, 0x63, 0x85, 0x6A, 0x65,
+	0x63, 0xC5, 0x6A, 0xA5, 0x63, 0x05, 0x6B, 0xE5, 0x63, 0x45, 0x6B, 0x5E, 0x4C, 0x40, 0x34, 0x25,
+	0x60, 0x85, 0x6B, 0x65, 0x60, 0xC5, 0x6B, 0xA5, 0x60, 0x05, 0x6C, 0xE5, 0x60, 0x45, 0x6C, 0x25,
+	0x61, 0x85, 0x6C, 0x65, 0x61, 0xC0, 0x6C, 0x60, 0x62, 0x59, 0x48, 0x60, 0x38, 0x40, 0x69, 0x85,
+	0x09, 0xAD, 0x01, 0x54, 0x48, 
+	0x00, 0x00, 0x4F, 0x00, 0x80, 0x0D, 0x43, 0x80, 0x30, 0xC5, 0x63, 0xA2, 0x61, 0x03, 0x61, 0x30,
+	0xBD, 0x02, 0x46, 0x00, 0x20, 0x01, 0x2A, 0x07, 0xD0, 0x02, 0x2A, 0x05, 0xD0, 0x08, 0x2A, 0x02,
+	0xD1, 0x4F, 0x48, 0x60, 0x38, 0xC0, 0x6B, 0x70, 0x47, 0x08, 0x46, 0x70, 0x47, 0x49, 0x48, 0xC0,
+	0x30, 0x01, 0x69, 0x8A, 0x00, 0x92, 0x08, 0x41, 0x06, 0x52, 0x18, 0x02, 0x61, 0x42, 0x68, 0x0A,
+	0x43, 0x42, 0x60, 0x81, 0x68, 0x01, 0x22, 0x11, 0x43, 0x81, 0x60, 0x70, 0x47, 0x70, 0xB5, 0xFF,
+	0xF7, 0xED, 0xFF, 0x01, 0x24, 0x45, 0x4D, 0x00, 0x21, 0xEC, 0x72, 0x20, 0x46, 0xFF, 0xF7, 0xD8,
+	0xFF, 0xE8, 0x70, 0x04, 0xF0, 0x45, 0xFC, 0x00, 0x28, 0x01, 0xD0, 0x48, 0x48, 0x04, 0x70, 0x3C,
+	0x4C, 0x20, 0x3C, 0x20, 0x6A, 0x02, 0x28, 0x01, 0xD1, 0x45, 0x49, 0x00, 0xE0, 0x45, 0x49, 0x05,
+	0x20, 0x03, 0xF0, 0xA3, 0xFC, 
+	0x00, 0x00, 0x50, 0x00, 0x80, 0x00, 0x20, 0x44, 0x4A, 0x28, 0x71, 0x50, 0x69, 0x43, 0x49, 0x01,
+	0x23, 0x09, 0x78, 0x1B, 0x03, 0x00, 0x02, 0xC9, 0x18, 0x08, 0x43, 0x2E, 0x49, 0xC0, 0x31, 0x08,
+	0x60, 0x00, 0x20, 0x3F, 0x4B, 0x0F, 0x21, 0x86, 0x00, 0xF6, 0x18, 0x31, 0x60, 0x40, 0x1C, 0x41,
+	0x28, 0xF9, 0xD3, 0x53, 0x6B, 0x31, 0x4E, 0x0F, 0x22, 0x12, 0x07, 0x00, 0x21, 0x30, 0x1D, 0xFF,
+	0xF7, 0x6D, 0xFF, 0x71, 0x68, 0x68, 0x7F, 0x00, 0x28, 0x05, 0xD0, 0x05, 0x20, 0x81, 0x43, 0xC8,
+	0x06, 0x01, 0xD4, 0xC0, 0x20, 0x81, 0x43, 0xFF, 0xF7, 0x5D, 0xFF, 0x02, 0x09, 0x31, 0x48, 0x03,
+	0xD0, 0x1F, 0x4A, 0x92, 0x7A, 0x01, 0x2A, 0x03, 0xD0, 0x62, 0x69, 0x52, 0x07, 0x00, 0xD0, 0x00,
+	0x20, 0x18, 0x4A, 0x81, 0x43, 0x11, 0x60, 0x28, 0x7E, 0xA9, 0x7D, 0x00, 0x02, 0x08, 0x43, 0x90,
+	0x60, 0x31, 0x6A, 0x29, 0x48, 
+	0x00, 0x00, 0x51, 0x00, 0x80, 0x01, 0x40, 0x28, 0x7D, 0x01, 0x43, 0x00, 0x04, 0x01, 0x43, 0x91,
+	0x62, 0xF0, 0x68, 0xF0, 0x21, 0x88, 0x43, 0x29, 0x7F, 0x08, 0x43, 0x50, 0x61, 0x0D, 0x4B, 0x00,
+	0x20, 0x22, 0x49, 0x40, 0x33, 0x85, 0x00, 0xED, 0x18, 0xE9, 0x62, 0x40, 0x1C, 0x09, 0x28, 0xF9,
+	0xD3, 0x60, 0x69, 0x00, 0x28, 0x05, 0xD1, 0x07, 0x48, 0x80, 0x30, 0xC1, 0x68, 0x49, 0x00, 0x49,
+	0x08, 0xC1, 0x60, 0x20, 0x6A, 0x02, 0x28, 0x04, 0xD1, 0x50, 0x69, 0x01, 0x21, 0xC9, 0x02, 0x08,
+	0x43, 0x50, 0x61, 0x70, 0xBD, 0x00, 0x00, 0x11, 0x40, 0x00, 0x00, 0x01, 0x40, 0x00, 0xFF, 0x01,
+	0x40, 0x50, 0xEA, 0x00, 0x00, 0xB8, 0xDC, 0x00, 0x00, 0x40, 0x40, 0x00, 0x80, 0x9C, 0x00, 0x00,
+	0x20, 0x71, 0x02, 0x00, 0x00, 0x60, 0xF1, 0xFF, 0x0F, 0x76, 0x03, 0x00, 0x20, 0xB0, 0xE8, 0x00,
+	0x00, 0xFF, 0x00, 0xAF, 0x40, 
+	0x00, 0x00, 0x52, 0x00, 0x80, 0x0A, 0xA0, 0x00, 0x00, 0xF8, 0x01, 0x00, 0x20, 0xB4, 0x01, 0x00,
+	0x20, 0xBD, 0x65, 0x00, 0x00, 0x17, 0x63, 0x00, 0x00, 0x80, 0xEA, 0x00, 0x00, 0xC8, 0x01, 0x00,
+	0x20, 0x00, 0x04, 0x11, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF, 0x00, 0xFF, 0x01, 0x00, 0x00,
+	0xC0, 0x10, 0xB5, 0x00, 0x22, 0xFF, 0x4B, 0x04, 0xE0, 0x94, 0x00, 0xE4, 0x18, 0xE1, 0x62, 0x52,
+	0x1C, 0xD2, 0xB2, 0x82, 0x42, 0xF8, 0xD3, 0x10, 0xBD, 0x70, 0xB5, 0xFF, 0xF7, 0x2F, 0xFF, 0x02,
+	0x26, 0xF9, 0x4D, 0x00, 0x21, 0xEE, 0x72, 0x30, 0x46, 0xFF, 0xF7, 0x1A, 0xFF, 0xE8, 0x70, 0x04,
+	0xF0, 0x87, 0xFB, 0x00, 0x28, 0x02, 0xD0, 0xF5, 0x48, 0x01, 0x21, 0x01, 0x70, 0xF4, 0x4C, 0x20,
+	0x6A, 0x02, 0x28, 0x68, 0x78, 0x03, 0xD1, 0xC0, 0x1C, 0x80, 0x08, 0x80, 0x00, 0xFF, 0xE7, 0xF0,
+	0x49, 0x40, 0x39, 0x09, 0x6B, 
+	0x00, 0x00, 0x53, 0x00, 0x80, 0x41, 0x43, 0x29, 0x71, 0xEE, 0x49, 0x05, 0x20, 0x03, 0xF0, 0xDD,
+	0xFB, 0xED, 0x49, 0x88, 0x69, 0x01, 0x22, 0x00, 0x02, 0x12, 0x03, 0x10, 0x43, 0xE5, 0x4A, 0x80,
+	0x32, 0x10, 0x60, 0xEA, 0x4A, 0x00, 0x20, 0x83, 0x00, 0x9B, 0x18, 0x1E, 0x60, 0x40, 0x1C, 0x41,
+	0x28, 0xF9, 0xD3, 0x8B, 0x6B, 0x0D, 0x22, 0x12, 0x07, 0x32, 0x21, 0xE5, 0x48, 0xFF, 0xF7, 0xAE,
+	0xFE, 0xE3, 0x4A, 0x58, 0x3A, 0x91, 0x6D, 0x68, 0x7F, 0x00, 0x28, 0x05, 0xD0, 0x05, 0x20, 0x81,
+	0x43, 0xC8, 0x06, 0x01, 0xD4, 0xC0, 0x20, 0x81, 0x43, 0xFF, 0xF7, 0x9C, 0xFE, 0x03, 0x09, 0xDD,
+	0x48, 0x04, 0xD0, 0xD7, 0x4B, 0x20, 0x33, 0x9B, 0x7A, 0x01, 0x2B, 0x03, 0xD0, 0x63, 0x69, 0x5B,
+	0x07, 0x00, 0xD0, 0x00, 0x20, 0xCF, 0x4B, 0x81, 0x43, 0x40, 0x3B, 0x19, 0x60, 0x68, 0x7E, 0xE9,
+	0x7D, 0x00, 0x02, 0x08, 0x43, 
+	0x00, 0x00, 0x54, 0x00, 0x80, 0x98, 0x60, 0x51, 0x6F, 0xD3, 0x48, 0x01, 0x40, 0x68, 0x7D, 0x01,
+	0x43, 0x00, 0x04, 0x01, 0x43, 0x99, 0x62, 0xD1, 0x49, 0x09, 0x20, 0xFF, 0xF7, 0x89, 0xFF, 0xCF,
+	0x49, 0xC4, 0x48, 0x89, 0x1E, 0x40, 0x30, 0xC1, 0x60, 0x61, 0x69, 0x00, 0x29, 0x03, 0xD1, 0xC1,
+	0x68, 0x49, 0x00, 0x49, 0x08, 0xC1, 0x60, 0x4C, 0xE7, 0xC4, 0x4A, 0x00, 0x21, 0x8B, 0x00, 0x9B,
+	0x18, 0x18, 0x60, 0x49, 0x1C, 0xC9, 0xB2, 0x41, 0x29, 0xF8, 0xD3, 0x70, 0x47, 0xF8, 0xB5, 0xFF,
+	0xF7, 0xBD, 0xFE, 0xB9, 0x4F, 0xB7, 0x4D, 0x38, 0x7E, 0x01, 0x24, 0x24, 0x03, 0x40, 0x3D, 0x10,
+	0x28, 0x05, 0xD9, 0xBB, 0x48, 0x58, 0x38, 0x80, 0x68, 0xC0, 0xB2, 0x00, 0x19, 0xA8, 0x60, 0x0F,
+	0x20, 0xFF, 0xF7, 0xE2, 0xFF, 0x00, 0x26, 0xB0, 0x48, 0xFE, 0x74, 0x7E, 0x85, 0x20, 0x30, 0x46,
+	0x70, 0x86, 0x70, 0xAF, 0x48, 
+	0x00, 0x00, 0x55, 0x00, 0x80, 0x3E, 0x64, 0x40, 0x38, 0xC0, 0x6B, 0xF8, 0x70, 0x10, 0x20, 0xF8,
+	0x72, 0xB3, 0x49, 0x05, 0x20, 0x03, 0xF0, 0x59, 0xFB, 0xA9, 0x48, 0x40, 0x69, 0xA5, 0x49, 0x40,
+	0x31, 0x02, 0x28, 0x03, 0xD0, 0xC8, 0x68, 0x40, 0x00, 0x40, 0x08, 0xC8, 0x60, 0x00, 0x20, 0x82,
+	0x00, 0x52, 0x18, 0x56, 0x61, 0x40, 0x1C, 0x09, 0x28, 0xF9, 0xD3, 0x9E, 0x48, 0x80, 0x30, 0x04,
+	0x60, 0xA9, 0x6A, 0xA5, 0x4A, 0xD2, 0x43, 0x11, 0x40, 0xA9, 0x62, 0x0D, 0x21, 0x99, 0x4A, 0x09,
+	0x07, 0x91, 0x61, 0x9B, 0x49, 0x20, 0x31, 0x09, 0x7D, 0x00, 0x29, 0x07, 0xD0, 0x01, 0x69, 0xA1,
+	0x4A, 0x11, 0x40, 0x01, 0x61, 0x01, 0x69, 0xA0, 0x4A, 0x11, 0x43, 0x01, 0x61, 0xF8, 0xBD, 0xF0,
+	0xB5, 0x04, 0x46, 0x0F, 0x20, 0xFF, 0xF7, 0xA0, 0xFF, 0x21, 0x46, 0x02, 0x20, 0xFF, 0xF7, 0x48,
+	0xFE, 0x16, 0x21, 0x9A, 0x4D, 
+	0x00, 0x00, 0x56, 0x00, 0x80, 0x48, 0x43, 0x2A, 0x5A, 0x8B, 0x49, 0x44, 0x19, 0x4A, 0x85, 0xA2,
+	0x78, 0xCA, 0x74, 0x97, 0x4E, 0x8D, 0x4F, 0x00, 0x21, 0x2A, 0x5A, 0x01, 0x23, 0x8B, 0x40, 0x1A,
+	0x42, 0x06, 0xD0, 0x62, 0x18, 0x53, 0x7B, 0x12, 0x79, 0xB2, 0x5C, 0x92, 0x00, 0xD2, 0x19, 0x13,
+	0x60, 0x49, 0x1C, 0x08, 0x29, 0xF0, 0xD3, 0xF0, 0xBD, 0x70, 0xB5, 0x7F, 0x49, 0x7D, 0x4D, 0x09,
+	0x79, 0x00, 0x24, 0x0E, 0x18, 0x40, 0x35, 0x21, 0x46, 0x30, 0x46, 0x05, 0xF0, 0xA1, 0xF8, 0x01,
+	0x02, 0x01, 0x43, 0xA0, 0x00, 0x40, 0x19, 0x41, 0x61, 0x64, 0x1C, 0x09, 0x2C, 0xF3, 0xD3, 0xB8,
+	0xE6, 0xF0, 0xB5, 0x77, 0x4A, 0x83, 0x49, 0x40, 0x3A, 0x53, 0x6A, 0x81, 0x4A, 0x52, 0x1E, 0x9A,
+	0x5C, 0x93, 0x00, 0x76, 0x4A, 0x9A, 0x18, 0x13, 0x68, 0x96, 0x46, 0x9C, 0x46, 0x0C, 0x23, 0x13,
+	0x60, 0x6C, 0x4A, 0x40, 0x3A, 
+	0x00, 0x00, 0x57, 0x00, 0x80, 0x13, 0x68, 0x97, 0x68, 0x94, 0x6A, 0x15, 0x68, 0x01, 0x26, 0xB6,
+	0x02, 0xB5, 0x43, 0x15, 0x60, 0xFF, 0x25, 0x02, 0x35, 0x95, 0x60, 0x00, 0x28, 0x06, 0xD0, 0x95,
+	0x6A, 0x6D, 0x4E, 0x35, 0x40, 0x05, 0x43, 0x00, 0x04, 0x05, 0x43, 0x95, 0x62, 0x07, 0x20, 0xD0,
+	0x60, 0x15, 0x68, 0x01, 0x26, 0xB6, 0x07, 0x35, 0x43, 0x15, 0x60, 0xD5, 0x68, 0xED, 0x07, 0x01,
+	0xD1, 0x49, 0x1E, 0xFA, 0xD2, 0xD0, 0x60, 0x60, 0x46, 0x71, 0x46, 0x08, 0x60, 0x13, 0x60, 0x97,
+	0x60, 0x94, 0x62, 0xF0, 0xBD, 0xF0, 0xB5, 0x58, 0x4B, 0x01, 0x46, 0xD8, 0x7A, 0xFF, 0xF7, 0xD8,
+	0xFD, 0x04, 0x46, 0xD8, 0x7A, 0x02, 0x28, 0x00, 0xD0, 0x0F, 0x20, 0xFF, 0xF7, 0x25, 0xFF, 0x16,
+	0x21, 0x4C, 0x43, 0x5E, 0x49, 0x00, 0x20, 0x01, 0x26, 0x5D, 0x4F, 0x54, 0x4D, 0x62, 0x18, 0x5B,
+	0x49, 0x0B, 0x5B, 0x31, 0x46, 
+	0x00, 0x00, 0x58, 0x00, 0x80, 0x81, 0x40, 0x0B, 0x42, 0x06, 0xD0, 0x11, 0x18, 0x4B, 0x7B, 0x09,
+	0x79, 0x79, 0x5C, 0x89, 0x00, 0x49, 0x19, 0x0B, 0x60, 0x40, 0x1C, 0x08, 0x28, 0xEF, 0xD3, 0x46,
+	0x48, 0xC1, 0x7A, 0x02, 0x29, 0x06, 0xD1, 0xD0, 0x78, 0xFF, 0x28, 0x03, 0xD0, 0x0C, 0x22, 0x80,
+	0x00, 0x40, 0x19, 0x02, 0x60, 0x08, 0x29, 0x0E, 0xD1, 0x41, 0x48, 0x40, 0x38, 0x01, 0x6A, 0xC2,
+	0x69, 0xC0, 0x6A, 0x89, 0x18, 0x08, 0x18, 0x3E, 0x49, 0x49, 0x6A, 0x01, 0x29, 0x03, 0xD0, 0x38,
+	0x5C, 0x80, 0x00, 0x40, 0x19, 0x06, 0x60, 0xF0, 0xBD, 0xFE, 0xB5, 0x39, 0x4A, 0x14, 0x25, 0x40,
+	0x3A, 0x10, 0x6B, 0x01, 0x90, 0x34, 0x48, 0x00, 0x21, 0x44, 0x78, 0x86, 0x78, 0x01, 0x73, 0xC1,
+	0x71, 0x41, 0x71, 0x81, 0x71, 0x81, 0x73, 0x01, 0x74, 0x63, 0x1E, 0x43, 0x74, 0x81, 0x74, 0x81,
+	0x72, 0x51, 0x6A, 0x49, 0x1E, 
+	0x00, 0x00, 0x59, 0x00, 0x80, 0x41, 0x72, 0x00, 0x20, 0xFF, 0xF7, 0xA4, 0xFF, 0x00, 0x20, 0xFF,
+	0xF7, 0x53, 0xFF, 0x04, 0xF0, 0xF3, 0xF9, 0x00, 0x20, 0x04, 0xF0, 0x1A, 0xFA, 0x04, 0xF0, 0x0A,
+	0xFA, 0x27, 0x4F, 0x78, 0x69, 0x00, 0x28, 0x08, 0xD0, 0x23, 0x4A, 0x31, 0x49, 0x52, 0x7A, 0x0C,
+	0x20, 0x89, 0x5C, 0x26, 0x4A, 0x89, 0x00, 0x89, 0x18, 0x08, 0x60, 0x38, 0x6A, 0x02, 0x28, 0x07,
+	0xD1, 0x00, 0x21, 0x30, 0x46, 0x03, 0xF0, 0x60, 0xFC, 0xE4, 0x1C, 0xA4, 0x08, 0xA4, 0x00, 0x06,
+	0xE0, 0x27, 0x49, 0x1E, 0x4A, 0x89, 0x5D, 0x01, 0x20, 0x89, 0x00, 0x89, 0x18, 0x08, 0x60, 0x01,
+	0x98, 0x60, 0x43, 0x15, 0x4C, 0x60, 0x73, 0x16, 0x48, 0x20, 0x30, 0xC0, 0x7C, 0xFF, 0xF7, 0x38,
+	0xFF, 0x10, 0x48, 0x21, 0x49, 0x40, 0x38, 0xC1, 0x60, 0x03, 0xF0, 0x18, 0xFA, 0x00, 0x90, 0x0D,
+	0x48, 0x40, 0x38, 0x00, 0x68, 
+	0x00, 0x00, 0x5A, 0x00, 0x80, 0x03, 0x21, 0x49, 0x07, 0x08, 0x43, 0x0A, 0x49, 0x40, 0x39, 0x08,
+	0x60, 0x08, 0x48, 0x40, 0x38, 0x00, 0x68, 0x80, 0x00, 0x01, 0xD5, 0x6D, 0x1E, 0xF8, 0xD2, 0x38,
+	0x6A, 0x02, 0x28, 0x2B, 0xD1, 0x01, 0x21, 0x30, 0x46, 0x03, 0xF0, 0x2E, 0xFC, 0x00, 0x20, 0x20,
+	0x72, 0x32, 0xE0, 0x00, 0x00, 0x40, 0x00, 0x11, 0x40, 0x9C, 0x00, 0x00, 0x20, 0xB4, 0x01, 0x00,
+	0x20, 0x30, 0xEA, 0x00, 0x00, 0xC1, 0x68, 0x00, 0x00, 0x80, 0xEA, 0x00, 0x00, 0x00, 0x04, 0x11,
+	0x40, 0x08, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF, 0x00, 0xFF, 0x03, 0x00, 0x00,
+	0xC0, 0xC7, 0x69, 0x00, 0x00, 0xFF, 0xE0, 0xE3, 0xF1, 0x00, 0x0F, 0x08, 0x08, 0x00, 0xEC, 0x00,
+	0x00, 0x00, 0xEB, 0x00, 0x00, 0x88, 0x90, 0x00, 0x00, 0xFF, 0x03, 0x00, 0x00, 0xFB, 0x48, 0x0F,
+	0x21, 0x82, 0x5D, 0x93, 0x00, 
+	0x00, 0x00, 0x5B, 0x00, 0x80, 0xFA, 0x4A, 0x9B, 0x18, 0x19, 0x60, 0x80, 0x19, 0x40, 0x78, 0x01,
+	0x21, 0x80, 0x00, 0x80, 0x18, 0x01, 0x60, 0x21, 0x72, 0x01, 0x20, 0xFF, 0xF7, 0xCD, 0xFE, 0xF5,
+	0x48, 0x01, 0x68, 0x03, 0x22, 0x52, 0x07, 0x11, 0x43, 0x01, 0x60, 0x01, 0x69, 0x02, 0x22, 0x11,
+	0x43, 0x01, 0x61, 0x00, 0x98, 0x03, 0xF0, 0xBE, 0xF9, 0xFE, 0xBD, 0x10, 0xB5, 0xEE, 0x4C, 0x00,
+	0x21, 0xA1, 0x72, 0xA1, 0x74, 0xED, 0x49, 0x89, 0x69, 0x01, 0x22, 0x12, 0x03, 0x09, 0x02, 0x80,
+	0x18, 0x01, 0x43, 0xE8, 0x48, 0xC0, 0x30, 0x01, 0x60, 0x04, 0xF0, 0x50, 0xF9, 0x60, 0x79, 0xFF,
+	0xF7, 0xF9, 0xFE, 0x60, 0x79, 0xFF, 0xF7, 0xA8, 0xFE, 0x60, 0x79, 0x04, 0xF0, 0x71, 0xF9, 0x04,
+	0xF0, 0x61, 0xF9, 0xE0, 0x4C, 0x20, 0x68, 0x00, 0x06, 0x80, 0x0F, 0x02, 0xD0, 0x00, 0x20, 0xFF,
+	0xF7, 0xAF, 0xFE, 0xDF, 0x48, 
+	0x00, 0x00, 0x5C, 0x00, 0x80, 0xE0, 0x60, 0x03, 0xF0, 0x91, 0xF9, 0x21, 0x69, 0x02, 0x22, 0x11,
+	0x43, 0x21, 0x61, 0x21, 0x68, 0x03, 0x22, 0x52, 0x07, 0x11, 0x43, 0x21, 0x60, 0x03, 0xF0, 0x8A,
+	0xF9, 0x10, 0xBD, 0xD8, 0x49, 0x02, 0x20, 0x08, 0x70, 0xD7, 0x48, 0x81, 0x6B, 0x42, 0x6B, 0x8A,
+	0x18, 0xD1, 0x49, 0x4A, 0x73, 0x40, 0x6B, 0x48, 0x71, 0xC0, 0xB2, 0x40, 0x1C, 0x88, 0x71, 0xD3,
+	0x48, 0x00, 0x78, 0xBA, 0xE7, 0xCF, 0x48, 0x01, 0x21, 0x01, 0x70, 0xCF, 0x48, 0x42, 0x6B, 0xCA,
+	0x48, 0x42, 0x73, 0x00, 0x22, 0x42, 0x71, 0x81, 0x71, 0xCD, 0x48, 0x00, 0x78, 0xAD, 0xE7, 0xCD,
+	0x49, 0x08, 0x70, 0xC1, 0x07, 0x00, 0xD0, 0xED, 0xE7, 0x80, 0x07, 0x00, 0xD5, 0xD9, 0xE7, 0x70,
+	0x47, 0x70, 0xB5, 0x05, 0x46, 0xC4, 0x48, 0x42, 0x6B, 0xBF, 0x49, 0x20, 0x31, 0x48, 0x78, 0x82,
+	0x42, 0x00, 0xD8, 0x88, 0x78, 
+	0x00, 0x00, 0x5D, 0x00, 0x80, 0xFF, 0xF7, 0x33, 0xFE, 0x04, 0xF0, 0xF8, 0xF8, 0xBA, 0x4E, 0x70,
+	0x8D, 0x04, 0xF0, 0x10, 0xF9, 0xB7, 0x4C, 0x20, 0x68, 0x00, 0x06, 0x80, 0x0F, 0x02, 0xD0, 0x00,
+	0x20, 0xFF, 0xF7, 0x5E, 0xFE, 0x04, 0xF0, 0xE4, 0xF8, 0x00, 0x21, 0x00, 0x28, 0x03, 0xD0, 0xBA,
+	0x48, 0x00, 0x78, 0x01, 0x28, 0x05, 0xD1, 0xB1, 0x76, 0xF1, 0x85, 0xF1, 0x76, 0xB7, 0x48, 0x71,
+	0x63, 0x01, 0x60, 0x00, 0x2D, 0x15, 0xD0, 0xB1, 0x74, 0xB1, 0x72, 0x75, 0x73, 0x00, 0x20, 0xFF,
+	0xF7, 0x47, 0xFE, 0xE0, 0x69, 0xF0, 0x21, 0x88, 0x43, 0xE0, 0x61, 0xA9, 0x48, 0xE0, 0x60, 0x20,
+	0x68, 0x03, 0x21, 0x49, 0x07, 0x08, 0x43, 0x20, 0x60, 0x20, 0x69, 0x02, 0x21, 0x08, 0x43, 0x20,
+	0x61, 0xEF, 0xE4, 0x01, 0x20, 0xB0, 0x74, 0xEC, 0xE4, 0x10, 0xB5, 0x9E, 0x48, 0x41, 0x68, 0x9E,
+	0x4C, 0x09, 0x07, 0x09, 0x0F, 
+	0x00, 0x00, 0x5E, 0x00, 0x80, 0x01, 0x29, 0x04, 0xD0, 0x9A, 0x49, 0xC0, 0x31, 0x49, 0x68, 0xC9,
+	0x00, 0x0C, 0xD4, 0x01, 0x69, 0x02, 0x22, 0x91, 0x43, 0x01, 0x61, 0xD1, 0x1E, 0xC1, 0x60, 0x05,
+	0x20, 0x03, 0xF0, 0x33, 0xF9, 0x9E, 0x48, 0x20, 0x63, 0x01, 0x20, 0x10, 0xBD, 0xA0, 0x7C, 0x10,
+	0xBD, 0xF3, 0xB5, 0x8E, 0x46, 0x90, 0x48, 0x00, 0x21, 0xC1, 0x73, 0xFF, 0x21, 0x81, 0x73, 0x92,
+	0x48, 0x00, 0x22, 0x84, 0x46, 0x1E, 0xE0, 0x16, 0x21, 0x16, 0x46, 0x4E, 0x43, 0x95, 0x49, 0x00,
+	0x20, 0x77, 0x18, 0xD3, 0xB2, 0x3C, 0x18, 0x25, 0x79, 0x00, 0x99, 0x8D, 0x42, 0x0E, 0xD3, 0x91,
+	0x4D, 0x24, 0x79, 0x74, 0x45, 0x0A, 0xD8, 0xAC, 0x5B, 0x01, 0x25, 0x85, 0x40, 0x2C, 0x42, 0x05,
+	0xD0, 0x81, 0x4C, 0xA5, 0x7B, 0xFF, 0x2D, 0x00, 0xD1, 0xA3, 0x73, 0xE3, 0x73, 0x40, 0x1C, 0x08,
+	0x28, 0xE8, 0xD3, 0x52, 0x1C, 
+	0x00, 0x00, 0x5F, 0x00, 0x80, 0x60, 0x46, 0x00, 0x6B, 0x90, 0x42, 0xDC, 0xD8, 0xFC, 0xBD, 0xFF,
+	0xB5, 0x05, 0x46, 0x79, 0x4C, 0x10, 0x46, 0xA2, 0x78, 0x87, 0xB0, 0x19, 0x46, 0x14, 0x26, 0x57,
+	0x19, 0x02, 0x92, 0xFF, 0xF7, 0xC5, 0xFF, 0x00, 0x21, 0x21, 0x73, 0xE8, 0xB2, 0x06, 0x90, 0xE0,
+	0x71, 0xA0, 0x7B, 0x60, 0x71, 0xA0, 0x71, 0x06, 0x98, 0x20, 0x74, 0x08, 0x98, 0x60, 0x74, 0xA1,
+	0x74, 0xA1, 0x72, 0x60, 0x79, 0xFF, 0xF7, 0x06, 0xFE, 0x60, 0x78, 0xA1, 0x7B, 0x48, 0x43, 0x40,
+	0x19, 0x03, 0x90, 0xFF, 0xF7, 0xB1, 0xFD, 0x04, 0xF0, 0x51, 0xF8, 0x6B, 0x48, 0x40, 0x30, 0x05,
+	0x90, 0x40, 0x69, 0x00, 0x28, 0x11, 0xD0, 0x60, 0x78, 0x40, 0x08, 0xA8, 0x42, 0x03, 0xD9, 0x66,
+	0x48, 0x40, 0x6A, 0x40, 0x1E, 0x00, 0xE0, 0x02, 0x98, 0x60, 0x72, 0x5C, 0x49, 0x62, 0x7A, 0x0C,
+	0x20, 0x89, 0x5C, 0x5B, 0x4A, 
+	0x00, 0x00, 0x60, 0x00, 0x80, 0x89, 0x00, 0x89, 0x18, 0x08, 0x60, 0x05, 0x98, 0x01, 0x6A, 0x08,
+	0x98, 0x40, 0x1B, 0x04, 0x90, 0x02, 0x29, 0x0E, 0xD1, 0x00, 0x21, 0x38, 0x46, 0x03, 0xF0, 0xB4,
+	0xFA, 0x04, 0x98, 0xE1, 0x7B, 0x00, 0x1D, 0xA2, 0x7B, 0x80, 0x08, 0x89, 0x1A, 0x80, 0x00, 0x49,
+	0x1C, 0x41, 0x43, 0x61, 0x73, 0x0E, 0xE0, 0x4D, 0x49, 0x4D, 0x4A, 0xC9, 0x5D, 0x01, 0x20, 0x89,
+	0x00, 0x89, 0x18, 0x08, 0x60, 0xE0, 0x7B, 0xA1, 0x7B, 0x40, 0x1A, 0x04, 0x99, 0x40, 0x1C, 0x49,
+	0x1C, 0x48, 0x43, 0x60, 0x73, 0x4C, 0x48, 0x60, 0x30, 0xC0, 0x7C, 0xFF, 0xF7, 0x81, 0xFD, 0x45,
+	0x49, 0x47, 0x48, 0xC8, 0x60, 0x03, 0xF0, 0x62, 0xF8, 0x01, 0x90, 0x42, 0x48, 0x00, 0x68, 0x03,
+	0x21, 0x49, 0x07, 0x08, 0x43, 0x3F, 0x49, 0x08, 0x60, 0x3E, 0x48, 0x00, 0x68, 0x80, 0x00, 0x01,
+	0xD5, 0x76, 0x1E, 0xF9, 0xD2, 
+	0x00, 0x00, 0x61, 0x00, 0x80, 0x03, 0x98, 0x40, 0x1C, 0xFF, 0xF7, 0x56, 0xFD, 0x05, 0x98, 0x00,
+	0x6A, 0x0F, 0x26, 0x02, 0x28, 0x06, 0xD1, 0x01, 0x21, 0x38, 0x46, 0x03, 0xF0, 0x75, 0xFA, 0x06,
+	0x98, 0x20, 0x72, 0x0D, 0xE0, 0x31, 0x4A, 0xD0, 0x5D, 0x81, 0x00, 0x31, 0x48, 0x09, 0x18, 0x0E,
+	0x60, 0xD2, 0x19, 0x52, 0x78, 0x01, 0x21, 0x92, 0x00, 0x10, 0x18, 0x01, 0x60, 0x6D, 0x1C, 0x25,
+	0x72, 0x05, 0x98, 0x40, 0x69, 0x00, 0x28, 0x13, 0xD0, 0x60, 0x78, 0x21, 0x7A, 0x40, 0x08, 0x88,
+	0x42, 0x0E, 0xD1, 0x26, 0x49, 0x60, 0x7A, 0x26, 0x4A, 0x08, 0x5C, 0x80, 0x00, 0x80, 0x18, 0x06,
+	0x60, 0x02, 0x98, 0x0C, 0x23, 0xC0, 0xB2, 0x60, 0x72, 0x08, 0x5C, 0x80, 0x00, 0x80, 0x18, 0x03,
+	0x60, 0x20, 0x48, 0x01, 0x68, 0x03, 0x22, 0x52, 0x07, 0x11, 0x43, 0x01, 0x60, 0x01, 0x69, 0x02,
+	0x22, 0x11, 0x43, 0x01, 0x61, 
+	0x00, 0x00, 0x62, 0x00, 0x80, 0x01, 0x98, 0x03, 0xF0, 0x15, 0xF8, 0x0B, 0xB0, 0xF0, 0xBD, 0x1A,
+	0x49, 0x00, 0x28, 0x00, 0xD1, 0x22, 0x48, 0x08, 0x63, 0x70, 0x47, 0x00, 0x28, 0x01, 0xD0, 0x16,
+	0x49, 0x88, 0x63, 0x70, 0x47, 0x00, 0x28, 0x01, 0xD0, 0x13, 0x49, 0xC8, 0x63, 0x70, 0x47, 0x12,
+	0x49, 0x08, 0x75, 0x48, 0x75, 0x1C, 0x48, 0x02, 0x6A, 0x1C, 0x48, 0x02, 0x40, 0x08, 0x7D, 0x02,
+	0x43, 0x00, 0x04, 0x02, 0x43, 0x0B, 0x48, 0x82, 0x62, 0x70, 0x47, 0x0B, 0x49, 0x16, 0x4A, 0x88,
+	0x75, 0xD3, 0x6D, 0xDB, 0xB2, 0x83, 0x42, 0x00, 0xD3, 0xD0, 0x6D, 0xC8, 0x75, 0x05, 0x48, 0x82,
+	0x68, 0x89, 0x7D, 0x12, 0x0A, 0x12, 0x02, 0x0A, 0x43, 0x82, 0x60, 0x70, 0x47, 0x00, 0xEB, 0x00,
+	0x00, 0x00, 0x04, 0x11, 0x40, 0x00, 0x00, 0x11, 0x40, 0x9C, 0x00, 0x00, 0x20, 0x80, 0xEA, 0x00,
+	0x00, 0xFF, 0x03, 0x00, 0x00, 
+	0x00, 0x00, 0x63, 0x00, 0x80, 0xB8, 0x01, 0x00, 0x20, 0xF0, 0xE9, 0x00, 0x00, 0xCA, 0x01, 0x00,
+	0x20, 0xC9, 0x01, 0x00, 0x20, 0xB7, 0x01, 0x00, 0x20, 0xB4, 0x01, 0x00, 0x20, 0xBC, 0x01, 0x00,
+	0x20, 0xD1, 0x24, 0x00, 0x00, 0x00, 0xEC, 0x00, 0x00, 0xB0, 0xE8, 0x00, 0x00, 0x00, 0xFF, 0x00,
+	0xFF, 0x10, 0xB5, 0x68, 0x49, 0x68, 0x4A, 0x08, 0x76, 0x90, 0x68, 0xFF, 0x23, 0x09, 0x7E, 0x1B,
+	0x02, 0x98, 0x43, 0x09, 0x02, 0x08, 0x43, 0x90, 0x60, 0xFF, 0xF7, 0x02, 0xFA, 0x10, 0xBD, 0x10,
+	0xB5, 0x60, 0x4C, 0x61, 0x4A, 0x60, 0x76, 0x91, 0x68, 0xFF, 0x23, 0x1B, 0x02, 0x99, 0x43, 0xC3,
+	0xB2, 0x1B, 0x02, 0x19, 0x43, 0x91, 0x60, 0x64, 0x21, 0x41, 0x43, 0x5C, 0x48, 0x80, 0x68, 0x00,
+	0x03, 0x0A, 0xF0, 0x65, 0xFC, 0xA0, 0x84, 0x10, 0xBD, 0x56, 0x48, 0x80, 0x7E, 0xB5, 0xE7, 0x55,
+	0x48, 0x80, 0x7F, 0xB2, 0xE7, 
+	0x00, 0x00, 0x64, 0x00, 0x80, 0x53, 0x48, 0xC0, 0x7F, 0xAF, 0xE7, 0x52, 0x48, 0x20, 0x30, 0x00,
+	0x78, 0xAB, 0xE7, 0x50, 0x48, 0xC0, 0x7E, 0xC0, 0x07, 0xC0, 0x0F, 0xA6, 0xE7, 0x4D, 0x48, 0xC0,
+	0x8D, 0xC0, 0xB2, 0xA2, 0xE7, 0x4B, 0x48, 0x02, 0x21, 0xC0, 0x7E, 0x08, 0x40, 0x9D, 0xE7, 0x10,
+	0xB5, 0x04, 0x00, 0x04, 0xD0, 0x20, 0x78, 0xFF, 0xF7, 0xBB, 0xFF, 0x64, 0x78, 0x0F, 0xE0, 0x48,
+	0x48, 0x80, 0x68, 0x00, 0x04, 0x00, 0x0E, 0xFF, 0xF7, 0xB3, 0xFF, 0x44, 0x48, 0x20, 0x30, 0xC0,
+	0x7A, 0xC0, 0x07, 0x01, 0xD0, 0x04, 0x24, 0x00, 0xE0, 0x00, 0x24, 0x02, 0x20, 0x04, 0x43, 0x60,
+	0x07, 0x02, 0xD5, 0x03, 0xF0, 0xFD, 0xFE, 0x01, 0xE0, 0x03, 0xF0, 0xFE, 0xFE, 0x39, 0x48, 0xA1,
+	0x07, 0x01, 0xD4, 0x01, 0x21, 0x00, 0xE0, 0x00, 0x21, 0x41, 0x77, 0x10, 0xBD, 0x70, 0xB5, 0x35,
+	0x4D, 0x04, 0x00, 0x0B, 0xD0, 
+	0x00, 0x00, 0x65, 0x00, 0x80, 0x20, 0x78, 0xFF, 0xF7, 0x52, 0xFF, 0x20, 0x79, 0x00, 0x07, 0x00,
+	0x0E, 0x28, 0x77, 0x60, 0x79, 0xFF, 0xF7, 0x59, 0xFF, 0x60, 0x88, 0x0E, 0xE0, 0x30, 0x4B, 0x18,
+	0x6A, 0xC0, 0xB2, 0xFF, 0xF7, 0x44, 0xFF, 0xD8, 0x68, 0xF0, 0x21, 0x08, 0x40, 0x28, 0x77, 0x98,
+	0x68, 0xC0, 0xB2, 0xFF, 0xF7, 0x4A, 0xFF, 0x29, 0x48, 0x40, 0x68, 0x00, 0xF0, 0x44, 0xF8, 0x4E,
+	0xE4, 0x30, 0xB5, 0x26, 0x49, 0x00, 0x22, 0x40, 0x39, 0x0B, 0x6B, 0x83, 0x42, 0x01, 0xD9, 0x02,
+	0x46, 0x28, 0xE0, 0x0B, 0x6B, 0xCC, 0x6B, 0x1B, 0x19, 0x83, 0x42, 0x01, 0xD9, 0x09, 0x6B, 0x20,
+	0xE0, 0x0B, 0x6B, 0xCC, 0x6B, 0x1C, 0x19, 0x1D, 0x4B, 0x1D, 0x68, 0x64, 0x19, 0x84, 0x42, 0x05,
+	0xD9, 0x0A, 0x6B, 0xC9, 0x6B, 0x80, 0x1A, 0x40, 0x1A, 0x42, 0x08, 0x13, 0xE0, 0x0C, 0x6B, 0xCD,
+	0x6B, 0x65, 0x19, 0x1C, 0x68, 
+	0x00, 0x00, 0x66, 0x00, 0x80, 0x64, 0x1C, 0x2C, 0x19, 0x84, 0x42, 0x07, 0xD8, 0x0C, 0x6B, 0xCD,
+	0x6B, 0x65, 0x19, 0x1C, 0x68, 0xA4, 0x1C, 0x2C, 0x19, 0x84, 0x42, 0x03, 0xD9, 0x09, 0x6B, 0x40,
+	0x1A, 0x19, 0x68, 0x42, 0x1A, 0x10, 0x46, 0x30, 0xBD, 0x00, 0x20, 0x1E, 0xE7, 0x0A, 0x4B, 0x10,
+	0xB5, 0x00, 0x22, 0x80, 0x33, 0x04, 0xE0, 0x94, 0x00, 0xE4, 0x18, 0x61, 0x61, 0x52, 0x1C, 0xD2,
+	0xB2, 0x82, 0x42, 0xF8, 0xD3, 0x10, 0xBD, 0x10, 0xB5, 0x02, 0x49, 0x88, 0x85, 0xFF, 0xF7, 0x40,
+	0xF9, 0x10, 0xBD, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x20, 0x00, 0x00, 0x11, 0x40, 0x30, 0xEA, 0x00,
+	0x00, 0xB0, 0xE8, 0x00, 0x00, 0xF8, 0xB5, 0xFF, 0x4A, 0xFF, 0x4E, 0x00, 0x27, 0xFF, 0x49, 0x14,
+	0x46, 0x40, 0x34, 0x0D, 0x68, 0x00, 0x28, 0x48, 0xD1, 0xFD, 0x48, 0x77, 0x71, 0x01, 0x88, 0xB1,
+	0x82, 0x10, 0x89, 0x70, 0x82, 
+	0x00, 0x00, 0x67, 0x00, 0x80, 0x10, 0x46, 0x60, 0x30, 0x40, 0x7A, 0xFA, 0x4B, 0x1B, 0x68, 0x98,
+	0x42, 0xF0, 0x89, 0x08, 0xDA, 0x32, 0x30, 0xF0, 0x81, 0x0E, 0x20, 0x30, 0x5E, 0xC8, 0x28, 0x09,
+	0xDD, 0xC8, 0x20, 0xF0, 0x81, 0x06, 0xE0, 0x40, 0x1E, 0xF0, 0x81, 0x0E, 0x20, 0x30, 0x5E, 0x00,
+	0x28, 0x00, 0xDA, 0xF7, 0x81, 0xEB, 0x4B, 0x9A, 0x78, 0xEF, 0x48, 0x02, 0x80, 0xE2, 0x79, 0x42,
+	0x71, 0x22, 0x89, 0xC2, 0x80, 0x62, 0x89, 0x02, 0x81, 0xDA, 0x78, 0x42, 0x80, 0xA2, 0x79, 0x02,
+	0x71, 0x0E, 0x20, 0x30, 0x5E, 0x03, 0x28, 0x17, 0xDD, 0xB0, 0x8A, 0x00, 0x01, 0x0A, 0xF0, 0x6F,
+	0xFB, 0xE0, 0x49, 0x0A, 0x89, 0x50, 0x43, 0x00, 0x03, 0x00, 0x0C, 0x70, 0x82, 0xE8, 0x03, 0x00,
+	0x0C, 0xB0, 0x82, 0xE1, 0x48, 0xFF, 0x22, 0x02, 0x80, 0x40, 0x22, 0x42, 0x71, 0xC7, 0x80, 0x07,
+	0x81, 0xC9, 0x78, 0x41, 0x80, 
+	0x00, 0x00, 0x68, 0x00, 0x80, 0xA1, 0x79, 0x01, 0x71, 0xF8, 0xBD, 0x02, 0x28, 0x04, 0xD1, 0x77,
+	0x71, 0xD0, 0x8B, 0xB0, 0x82, 0x10, 0x89, 0x0C, 0xE0, 0x04, 0x28, 0x0C, 0xD1, 0x01, 0x20, 0x70,
+	0x71, 0xE0, 0x8A, 0xB0, 0x82, 0x80, 0xB2, 0xA9, 0x10, 0x81, 0x42, 0x00, 0xDD, 0x08, 0x46, 0xB0,
+	0x82, 0xA0, 0x8A, 0x70, 0x82, 0xF8, 0xBD, 0x0F, 0x28, 0xFC, 0xD1, 0x77, 0x71, 0xCF, 0x48, 0xB0,
+	0x82, 0xF7, 0xE7, 0xF8, 0xB5, 0xC7, 0x4A, 0xD0, 0x68, 0x11, 0x46, 0x20, 0x31, 0x03, 0x23, 0xCB,
+	0x56, 0xC0, 0x18, 0x04, 0x23, 0xCB, 0x56, 0xC4, 0x4D, 0xC0, 0x18, 0x00, 0x02, 0x28, 0x62, 0x13,
+	0x69, 0x05, 0x24, 0x0C, 0x57, 0x1B, 0x19, 0x06, 0x24, 0x0C, 0x57, 0x19, 0x19, 0x0F, 0x02, 0x6F,
+	0x62, 0x51, 0x69, 0xC3, 0x4C, 0x01, 0x29, 0x14, 0xD1, 0xE1, 0x69, 0x0A, 0xF0, 0x20, 0xFB, 0x28,
+	0x62, 0x21, 0x6A, 0x06, 0x46, 
+	0x00, 0x00, 0x69, 0x00, 0x80, 0x38, 0x46, 0x0A, 0xF0, 0x1A, 0xFB, 0x05, 0x27, 0x04, 0x46, 0xFF,
+	0x01, 0x68, 0x62, 0x39, 0x46, 0x30, 0x46, 0x0A, 0xF0, 0x1C, 0xFB, 0x28, 0x63, 0x39, 0x46, 0x20,
+	0x46, 0x11, 0xE0, 0x21, 0x6A, 0x0A, 0xF0, 0x0B, 0xFB, 0x28, 0x62, 0xE1, 0x69, 0x06, 0x46, 0x38,
+	0x46, 0x0A, 0xF0, 0x05, 0xFB, 0x05, 0x24, 0xE4, 0x01, 0x21, 0x46, 0x68, 0x62, 0x0A, 0xF0, 0x09,
+	0xFB, 0x28, 0x63, 0x21, 0x46, 0x30, 0x46, 0x0A, 0xF0, 0x04, 0xFB, 0x68, 0x63, 0x28, 0x6B, 0x00,
+	0x24, 0x40, 0x10, 0xA8, 0x62, 0x68, 0x6B, 0x40, 0x10, 0xE8, 0x62, 0xAC, 0x72, 0x20, 0x46, 0xFF,
+	0xF7, 0x41, 0xFF, 0xA9, 0x4A, 0x6C, 0x73, 0x00, 0x20, 0xA6, 0x49, 0x12, 0x78, 0x03, 0xE0, 0x83,
+	0x00, 0x40, 0x1C, 0xCC, 0x50, 0xC0, 0xB2, 0x90, 0x42, 0xF9, 0xD3, 0xAC, 0x63, 0xF8, 0xBD, 0x10,
+	0xB5, 0x99, 0x4C, 0x20, 0x78, 
+	0x00, 0x00, 0x6A, 0x00, 0x80, 0x00, 0x28, 0x05, 0xD1, 0xFF, 0xF7, 0x9B, 0xFF, 0x01, 0x20, 0x20,
+	0x70, 0xFE, 0xF7, 0xCA, 0xF8, 0x10, 0xBD, 0x94, 0x49, 0x00, 0x28, 0x01, 0xD1, 0x03, 0x20, 0x02,
+	0xE0, 0x03, 0x28, 0x01, 0xD1, 0x01, 0x20, 0x48, 0x72, 0x70, 0x47, 0xF0, 0xB5, 0x8C, 0x46, 0x97,
+	0x49, 0x95, 0x4D, 0x09, 0x78, 0x8C, 0x4C, 0x07, 0x46, 0x02, 0x20, 0x8E, 0x46, 0x64, 0x8A, 0x2D,
+	0x78, 0x89, 0x07, 0x1D, 0xD5, 0x00, 0x26, 0xB9, 0x1A, 0x00, 0x29, 0x00, 0xDD, 0x0E, 0x46, 0xF1,
+	0xB2, 0x8F, 0x4E, 0xBA, 0x18, 0x36, 0x78, 0x76, 0x1E, 0xB2, 0x42, 0x00, 0xDC, 0x16, 0x46, 0x0A,
+	0x46, 0xF6, 0xB2, 0x8C, 0x49, 0x09, 0xE0, 0xAF, 0x18, 0x7F, 0x00, 0xCF, 0x5F, 0xA7, 0x42, 0x02,
+	0xDB, 0x40, 0x1E, 0xC0, 0xB2, 0x05, 0xE0, 0x52, 0x1C, 0xD2, 0xB2, 0xB2, 0x42, 0xF3, 0xD9, 0x00,
+	0xE0, 0x01, 0x20, 0x71, 0x46, 
+	0x00, 0x00, 0x6B, 0x00, 0x80, 0xC9, 0x07, 0x18, 0xD0, 0x62, 0x46, 0x00, 0x21, 0xD2, 0x1A, 0x00,
+	0x2A, 0x00, 0xDD, 0x11, 0x46, 0x62, 0x46, 0x6D, 0x1E, 0xD2, 0x18, 0xC9, 0xB2, 0xAA, 0x42, 0x00,
+	0xDC, 0x15, 0x46, 0xEA, 0xB2, 0x7B, 0x4B, 0x05, 0xE0, 0x4D, 0x00, 0x5D, 0x5F, 0xA5, 0x42, 0x04,
+	0xDA, 0x49, 0x1C, 0xC9, 0xB2, 0x91, 0x42, 0xF7, 0xD9, 0xF0, 0xBD, 0x40, 0x1E, 0xC0, 0xB2, 0xF0,
+	0xBD, 0xF0, 0xB5, 0x04, 0x46, 0x21, 0x78, 0x00, 0x20, 0x03, 0x46, 0x8C, 0x46, 0x1E, 0xE0, 0x00,
+	0x22, 0x59, 0x00, 0x09, 0x19, 0x4F, 0x78, 0x89, 0x78, 0x8E, 0x46, 0x11, 0x46, 0x10, 0xE0, 0x8B,
+	0x42, 0x0D, 0xD0, 0x4D, 0x00, 0x2D, 0x19, 0x6E, 0x78, 0xF6, 0x1B, 0xF6, 0x1C, 0x07, 0x2E, 0x06,
+	0xD2, 0xAD, 0x78, 0x76, 0x46, 0xAD, 0x1B, 0xED, 0x1C, 0x07, 0x2D, 0x00, 0xD2, 0x52, 0x1C, 0x49,
+	0x1C, 0x8C, 0x45, 0xEC, 0xD8, 
+	0x00, 0x00, 0x6C, 0x00, 0x80, 0x82, 0x42, 0x00, 0xD9, 0x10, 0x46, 0x5B, 0x1C, 0x9C, 0x45, 0xDE,
+	0xD8, 0xF0, 0xBD, 0xF0, 0xB5, 0x04, 0x46, 0x00, 0x20, 0x89, 0xB0, 0x05, 0x90, 0x06, 0x46, 0x04,
+	0x90, 0x51, 0x48, 0x0F, 0x46, 0x05, 0x8A, 0x81, 0x8A, 0x02, 0x91, 0x80, 0x78, 0xB9, 0xB2, 0x08,
+	0x91, 0x00, 0x28, 0x03, 0xD0, 0x4C, 0x49, 0x40, 0x1E, 0x88, 0x70, 0x07, 0xE0, 0x20, 0x46, 0xFF,
+	0xF7, 0xBF, 0xFF, 0x49, 0x49, 0x4A, 0x78, 0x90, 0x42, 0x02, 0xD3, 0x48, 0x70, 0x08, 0x98, 0x06,
+	0xE0, 0x45, 0x48, 0x00, 0x7B, 0x03, 0x90, 0x04, 0x28, 0x04, 0xD9, 0x43, 0x49, 0x08, 0x98, 0x08,
+	0x82, 0x09, 0xB0, 0xF0, 0xBD, 0x21, 0x78, 0x81, 0x42, 0x0C, 0xD2, 0x02, 0x28, 0x01, 0xD1, 0xAE,
+	0x08, 0x08, 0xE0, 0x03, 0x28, 0x03, 0xD1, 0x28, 0x09, 0x81, 0x10, 0x0E, 0x18, 0x02, 0xE0, 0x04,
+	0x28, 0x00, 0xD1, 0x2E, 0x09, 
+	0x00, 0x00, 0x6D, 0x00, 0x80, 0xB8, 0x19, 0xA8, 0x42, 0xE7, 0xD9, 0x67, 0xE0, 0x02, 0x98, 0x00,
+	0x26, 0x84, 0x46, 0x51, 0xE0, 0x70, 0x00, 0x00, 0x19, 0x41, 0x78, 0x01, 0x91, 0x80, 0x78, 0x00,
+	0x25, 0x00, 0x90, 0x00, 0x21, 0x00, 0x2D, 0x05, 0xD0, 0x04, 0x2D, 0x03, 0xD0, 0x00, 0x29, 0x01,
+	0xD0, 0x04, 0x29, 0x3A, 0xD1, 0x01, 0x98, 0x2A, 0x18, 0x00, 0x98, 0x92, 0x1E, 0x0B, 0x18, 0x34,
+	0x48, 0x9B, 0x1E, 0x00, 0x78, 0x40, 0x1E, 0x82, 0x42, 0x2F, 0xD2, 0x00, 0x2A, 0x2D, 0xD0, 0x2E,
+	0x48, 0x00, 0x78, 0x07, 0x46, 0x40, 0x1E, 0x83, 0x42, 0x27, 0xD2, 0x00, 0x2B, 0x25, 0xD0, 0x38,
+	0x46, 0x50, 0x43, 0xC0, 0x18, 0x40, 0x00, 0x2C, 0x4F, 0x07, 0x90, 0x38, 0x5E, 0x60, 0x45, 0x1C,
+	0xDD, 0x00, 0x20, 0x10, 0xE0, 0xB0, 0x42, 0x0D, 0xD0, 0x47, 0x00, 0x3F, 0x19, 0x06, 0x97, 0x7F,
+	0x78, 0xBF, 0x1A, 0x7F, 0x1C, 
+	0x00, 0x00, 0x6E, 0x00, 0x80, 0x03, 0x2F, 0x05, 0xD2, 0x06, 0x9F, 0xBF, 0x78, 0xFF, 0x1A, 0x7F,
+	0x1C, 0x03, 0x2F, 0x0A, 0xD3, 0x40, 0x1C, 0x86, 0x45, 0xEC, 0xD8, 0x64, 0x28, 0x05, 0xD0, 0x1E,
+	0x4F, 0x07, 0x98, 0x38, 0x5E, 0x04, 0x93, 0x84, 0x46, 0x05, 0x92, 0x49, 0x1C, 0x05, 0x29, 0xB9,
+	0xD3, 0x6D, 0x1C, 0x05, 0x2D, 0xB5, 0xD3, 0x76, 0x1C, 0xB6, 0x45, 0xAB, 0xD8, 0x02, 0x99, 0x8C,
+	0x45, 0x2F, 0xDD, 0x71, 0x46, 0x49, 0x00, 0x09, 0x19, 0x05, 0x98, 0x48, 0x70, 0x21, 0x78, 0x04,
+	0x98, 0x49, 0x00, 0x09, 0x19, 0x88, 0x70, 0x20, 0x78, 0x40, 0x1C, 0x20, 0x70, 0x20, 0x78, 0x03,
+	0x99, 0x86, 0x46, 0x1B, 0xE0, 0xD0, 0xE7, 0x00, 0x00, 0xE4, 0x00, 0x00, 0x20, 0x7C, 0x01, 0x00,
+	0x20, 0x76, 0x02, 0x00, 0x20, 0x84, 0x01, 0x00, 0x20, 0x2C, 0x03, 0x00, 0x20, 0xFF, 0xFF, 0x00,
+	0x00, 0xF0, 0xE9, 0x00, 0x00, 
+	0x00, 0x00, 0x6F, 0x00, 0x80, 0x50, 0x04, 0x00, 0x20, 0x9E, 0x00, 0x00, 0x20, 0x2A, 0x01, 0x00,
+	0x20, 0x9D, 0x00, 0x00, 0x20, 0x32, 0x0B, 0x00, 0x20, 0x92, 0x08, 0x00, 0x20, 0x88, 0x42, 0x00,
+	0xD2, 0x74, 0xE7, 0x20, 0x46, 0xFF, 0xF7, 0x0C, 0xFF, 0xF9, 0x49, 0x4E, 0xE7, 0xF7, 0xB5, 0xF8,
+	0x49, 0x8A, 0xB0, 0x00, 0x22, 0xCA, 0x72, 0x0C, 0x98, 0x02, 0x70, 0xF6, 0x48, 0x02, 0x92, 0x00,
+	0x78, 0x40, 0x1E, 0x04, 0x90, 0xF4, 0x48, 0x01, 0x26, 0x00, 0x78, 0x03, 0x90, 0x88, 0x8A, 0x06,
+	0x90, 0x0B, 0x99, 0x10, 0x46, 0x09, 0x78, 0x01, 0xE0, 0x76, 0x00, 0x40, 0x1C, 0x81, 0x42, 0xFB,
+	0xD8, 0x0B, 0x98, 0xEE, 0x49, 0x80, 0x78, 0x09, 0x91, 0x05, 0xE0, 0x0C, 0x99, 0x00, 0x22, 0x09,
+	0x18, 0x40, 0x31, 0x8A, 0x70, 0x40, 0x1C, 0x0B, 0x99, 0xC9, 0x78, 0x81, 0x42, 0xF5, 0xD2, 0x53,
+	0xE1, 0x03, 0x99, 0x48, 0x43, 
+	0x00, 0x00, 0x70, 0x00, 0x80, 0x0B, 0x99, 0x8D, 0x78, 0x40, 0x19, 0x40, 0x1E, 0x05, 0x90, 0x3C,
+	0xE1, 0x05, 0x98, 0x40, 0x1C, 0x05, 0x90, 0x09, 0x98, 0xC0, 0x8B, 0x00, 0x28, 0x58, 0xD0, 0x09,
+	0x98, 0x1E, 0x21, 0x41, 0x5E, 0xDD, 0x48, 0x20, 0x30, 0x00, 0x22, 0x82, 0x5E, 0x88, 0x18, 0x05,
+	0x99, 0xDB, 0x4A, 0x49, 0x00, 0x54, 0x5E, 0x40, 0x42, 0xA0, 0x42, 0x33, 0xDD, 0xD9, 0x49, 0xAB,
+	0x00, 0xC8, 0x58, 0x72, 0x00, 0x07, 0x46, 0x17, 0x42, 0x01, 0xD0, 0x30, 0x43, 0x28, 0xE0, 0x01,
+	0x46, 0x31, 0x42, 0x20, 0xD1, 0x00, 0x21, 0x01, 0x91, 0x0B, 0x9A, 0x03, 0x9F, 0x12, 0x78, 0x7A,
+	0x43, 0x64, 0x42, 0xA4, 0x46, 0x07, 0xE0, 0xCE, 0x4F, 0x54, 0x00, 0x3C, 0x5F, 0x64, 0x45, 0x2F,
+	0xDC, 0x49, 0x1C, 0xC9, 0xB2, 0x52, 0x1C, 0x03, 0x9C, 0xA1, 0x42, 0xF4, 0xD3, 0x01, 0x99, 0x00,
+	0x29, 0x26, 0xD1, 0xC8, 0x49, 
+	0x00, 0x00, 0x71, 0x00, 0x80, 0x30, 0x43, 0xC8, 0x50, 0x0C, 0x98, 0x40, 0x19, 0x40, 0x30, 0x81,
+	0x78, 0x49, 0x1C, 0x81, 0x70, 0x1C, 0xE0, 0xC3, 0x49, 0xB4, 0x00, 0x20, 0x42, 0x18, 0xD1, 0x10,
+	0x43, 0xC8, 0x50, 0x15, 0xE0, 0x09, 0x98, 0x1E, 0x21, 0x41, 0x5E, 0x48, 0x42, 0x84, 0x42, 0x0F,
+	0xDD, 0xBC, 0x4B, 0xA9, 0x00, 0x58, 0x58, 0x72, 0x00, 0x04, 0x46, 0x14, 0x42, 0x01, 0xD0, 0x34,
+	0x42, 0x01, 0xD0, 0xB0, 0x43, 0x03, 0xE0, 0xB4, 0x00, 0x20, 0x42, 0x01, 0xD0, 0x90, 0x43, 0x58,
+	0x50, 0x05, 0x98, 0xB3, 0x4A, 0x40, 0x00, 0x08, 0x90, 0x11, 0x5E, 0x06, 0x98, 0x81, 0x42, 0x7A,
+	0xDB, 0x02, 0x9A, 0x00, 0x20, 0x52, 0x18, 0x02, 0x92, 0x03, 0x9A, 0x01, 0x27, 0x52, 0x1E, 0x0C,
+	0x46, 0x95, 0x42, 0x00, 0xD3, 0x00, 0x27, 0x0B, 0x9A, 0x04, 0x9B, 0x12, 0x78, 0x07, 0x92, 0x9A,
+	0x42, 0x2B, 0xD2, 0x03, 0x9B, 
+	0x00, 0x00, 0x72, 0x00, 0x80, 0x05, 0x9A, 0xD2, 0x18, 0x52, 0x1C, 0x94, 0x46, 0x00, 0x2F, 0x0A,
+	0xD0, 0xA3, 0x4B, 0x62, 0x46, 0x52, 0x00, 0x9A, 0x5E, 0x91, 0x42, 0xE0, 0xDB, 0x00, 0x2A, 0x01,
+	0xDD, 0x14, 0x19, 0x00, 0xE0, 0x10, 0x46, 0x62, 0x46, 0x52, 0x1E, 0x94, 0x46, 0x9C, 0x4B, 0x52,
+	0x00, 0x9A, 0x5E, 0x91, 0x42, 0xD3, 0xDB, 0x00, 0x2A, 0x01, 0xDD, 0x14, 0x19, 0x00, 0xE0, 0x10,
+	0x18, 0x00, 0x2D, 0x0A, 0xD0, 0x62, 0x46, 0x52, 0x1E, 0x52, 0x00, 0x9A, 0x5E, 0x91, 0x42, 0xC6,
+	0xDB, 0x00, 0x2A, 0x01, 0xDD, 0x14, 0x19, 0x00, 0xE0, 0x10, 0x18, 0x00, 0x2F, 0x0B, 0xD0, 0x90,
+	0x4B, 0x08, 0x9A, 0xD3, 0x18, 0x02, 0x22, 0x9A, 0x5E, 0x91, 0x42, 0xB8, 0xDB, 0x00, 0x2A, 0x01,
+	0xDD, 0x14, 0x19, 0x00, 0xE0, 0x10, 0x18, 0x00, 0x2D, 0x0C, 0xD0, 0x89, 0x4B, 0x08, 0x9A, 0xD3,
+	0x18, 0x20, 0x3B, 0x1E, 0x22, 
+	0x00, 0x00, 0x73, 0x00, 0x80, 0x9A, 0x5E, 0x91, 0x42, 0x7E, 0xDD, 0x00, 0x2A, 0x01, 0xDD, 0x14,
+	0x19, 0x00, 0xE0, 0x10, 0x18, 0x07, 0x9A, 0x00, 0x2A, 0x2C, 0xD0, 0x03, 0x9B, 0x05, 0x9A, 0xD2,
+	0x1A, 0x52, 0x1C, 0x94, 0x46, 0x00, 0x2F, 0x0A, 0xD0, 0x7D, 0x4B, 0x62, 0x46, 0x52, 0x00, 0x9A,
+	0x5E, 0x91, 0x42, 0x69, 0xDD, 0x00, 0x2A, 0x01, 0xDD, 0x14, 0x19, 0x00, 0xE0, 0x10, 0x18, 0x62,
+	0x46, 0x52, 0x1E, 0x94, 0x46, 0x76, 0x4B, 0x52, 0x00, 0x9A, 0x5E, 0x91, 0x42, 0x5C, 0xDD, 0x00,
+	0x2A, 0x02, 0xDD, 0x14, 0x19, 0x01, 0xE0, 0x57, 0xE0, 0x10, 0x18, 0x00, 0x2D, 0x0A, 0xD0, 0x62,
+	0x46, 0x52, 0x1E, 0x52, 0x00, 0x9A, 0x5E, 0x91, 0x42, 0x4E, 0xDD, 0x00, 0x2A, 0x01, 0xDD, 0x14,
+	0x19, 0x00, 0xE0, 0x10, 0x18, 0x01, 0x22, 0x00, 0x2D, 0x02, 0xD0, 0x00, 0x2F, 0x00, 0xD0, 0x00,
+	0x22, 0x07, 0x9B, 0x00, 0x2B, 
+	0x00, 0x00, 0x74, 0x00, 0x80, 0x02, 0xD0, 0x04, 0x9F, 0xBB, 0x42, 0x00, 0xD1, 0x52, 0x1C, 0x02,
+	0x23, 0x9B, 0x1A, 0x06, 0x9A, 0x9A, 0x40, 0xA2, 0x42, 0x36, 0xDC, 0x61, 0x1A, 0x60, 0x4F, 0x49,
+	0x10, 0x40, 0x42, 0x81, 0x42, 0x30, 0xDB, 0xFD, 0xF7, 0xB6, 0xFD, 0x01, 0x28, 0x09, 0xD1, 0x58,
+	0x4A, 0x0B, 0x98, 0x53, 0x7A, 0xE9, 0xB2, 0x00, 0x78, 0x1A, 0x46, 0xFF, 0xF7, 0x76, 0xFD, 0x00,
+	0x28, 0x22, 0xD1, 0x08, 0x98, 0x00, 0x21, 0x38, 0x5E, 0x20, 0x1A, 0x00, 0x28, 0x00, 0xDD, 0x01,
+	0x46, 0x0C, 0x98, 0x00, 0x78, 0x42, 0x00, 0x0C, 0x98, 0x10, 0x18, 0x41, 0x84, 0x0C, 0x99, 0x0B,
+	0x98, 0x09, 0x78, 0x0C, 0x9A, 0x49, 0x00, 0x00, 0x78, 0x89, 0x18, 0x48, 0x70, 0x0C, 0x98, 0x0C,
+	0x99, 0x00, 0x78, 0x40, 0x00, 0x40, 0x18, 0x85, 0x70, 0x0C, 0x98, 0x0C, 0x99, 0x00, 0x78, 0x40,
+	0x1C, 0xC0, 0xB2, 0x08, 0x70, 
+	0x00, 0x00, 0x75, 0x00, 0x80, 0x10, 0x28, 0x16, 0xD0, 0x6D, 0x1C, 0x0B, 0x98, 0xC0, 0x78, 0xA8,
+	0x42, 0x00, 0xD3, 0xBD, 0xE6, 0x0C, 0x98, 0x00, 0x78, 0x10, 0x28, 0x0C, 0xD0, 0x0B, 0x98, 0x76,
+	0x00, 0x00, 0x78, 0x0B, 0x99, 0x40, 0x1C, 0x08, 0x70, 0x0B, 0x98, 0x0B, 0x99, 0x00, 0x78, 0x49,
+	0x78, 0x88, 0x42, 0x00, 0xD8, 0xA4, 0xE6, 0x36, 0x48, 0x80, 0x6B, 0x00, 0x28, 0x03, 0xD1, 0x02,
+	0x99, 0x0C, 0x98, 0xFF, 0xF7, 0xA6, 0xFD, 0x0D, 0xB0, 0xF0, 0xBD, 0x38, 0xB5, 0x00, 0x25, 0x6B,
+	0x46, 0x30, 0x4A, 0x1D, 0x70, 0x14, 0x78, 0x30, 0x4A, 0x64, 0x1E, 0x5C, 0x70, 0x9D, 0x70, 0x14,
+	0x78, 0x0A, 0x46, 0x64, 0x1E, 0xDC, 0x70, 0x69, 0x46, 0xFF, 0xF7, 0x60, 0xFE, 0x38, 0xBD, 0xF3,
+	0xB5, 0x00, 0x20, 0x84, 0x46, 0x03, 0x46, 0x81, 0xB0, 0x2B, 0x48, 0x00, 0x90, 0x32, 0xE0, 0x2B,
+	0x4A, 0x16, 0x20, 0x54, 0x0C, 
+	0x00, 0x00, 0x76, 0x00, 0x80, 0x1D, 0x46, 0x45, 0x43, 0x29, 0x48, 0x40, 0x5B, 0x86, 0x46, 0x00,
+	0x20, 0x71, 0x46, 0xC1, 0x40, 0xC9, 0x07, 0x1D, 0xD0, 0x1F, 0x4E, 0x01, 0x99, 0x36, 0x78, 0x71,
+	0x43, 0x23, 0x4E, 0xAE, 0x19, 0x36, 0x18, 0x37, 0x79, 0xC9, 0x19, 0x1D, 0x4F, 0x49, 0x00, 0x79,
+	0x5E, 0x91, 0x42, 0x00, 0xDD, 0x0A, 0x46, 0xA1, 0x42, 0x00, 0xDA, 0x0C, 0x46, 0x1C, 0x4F, 0x31,
+	0x79, 0x02, 0x9E, 0xB1, 0x42, 0x06, 0xD1, 0x79, 0x5B, 0x01, 0x26, 0x86, 0x40, 0x31, 0x42, 0x01,
+	0xD0, 0x01, 0x21, 0x8C, 0x46, 0x40, 0x1C, 0x08, 0x28, 0xDA, 0xD3, 0x60, 0x46, 0x00, 0x28, 0x05,
+	0xD1, 0x00, 0x98, 0x5B, 0x1C, 0x00, 0x6B, 0x98, 0x42, 0xC9, 0xD8, 0x07, 0xE0, 0x10, 0x1B, 0x00,
+	0xD5, 0x40, 0x42, 0xD1, 0x10, 0x88, 0x42, 0x01, 0xDA, 0x01, 0x20, 0xFE, 0xBD, 0x00, 0x20, 0xFE,
+	0xBD, 0x10, 0xB5, 0x02, 0x78, 
+	0x00, 0x00, 0x77, 0x00, 0x80, 0x10, 0x23, 0x10, 0x2A, 0x00, 0xD8, 0x13, 0x46, 0xCA, 0xB2, 0x1B,
+	0xE0, 0xE4, 0x00, 0x00, 0x20, 0x9D, 0x00, 0x00, 0x20, 0x9E, 0x00, 0x00, 0x20, 0x10, 0xE8, 0x00,
+	0x00, 0x92, 0x08, 0x00, 0x20, 0x50, 0x04, 0x00, 0x20, 0xF0, 0xE9, 0x00, 0x00, 0x00, 0x80, 0xFF,
+	0xFF, 0x00, 0xEC, 0x00, 0x00, 0x51, 0x00, 0x09, 0x18, 0xCC, 0x78, 0x4C, 0x70, 0x0C, 0x79, 0x8C,
+	0x70, 0x8C, 0x8C, 0x52, 0x1C, 0x4C, 0x84, 0xD2, 0xB2, 0x9A, 0x42, 0xF3, 0xD3, 0x01, 0x78, 0x49,
+	0x1E, 0x01, 0x70, 0x10, 0xBD, 0xF3, 0xB5, 0x87, 0xB0, 0x00, 0x20, 0x05, 0x90, 0xFA, 0x48, 0x0C,
+	0x46, 0x41, 0x7B, 0xFA, 0x48, 0x06, 0x90, 0x00, 0x29, 0x55, 0xD0, 0xF7, 0x49, 0x20, 0x78, 0x89,
+	0x7A, 0x88, 0x42, 0x50, 0xD0, 0x00, 0x28, 0x4E, 0xD0, 0x06, 0x98, 0x80, 0x7C, 0x03, 0x90, 0x64,
+	0x28, 0x01, 0xDD, 0x64, 0x20, 
+	0x00, 0x00, 0x78, 0x00, 0x80, 0x03, 0x90, 0x00, 0x26, 0x42, 0xE0, 0x70, 0x00, 0x00, 0x19, 0x41,
+	0x8C, 0x04, 0x91, 0x80, 0x78, 0x37, 0x46, 0x84, 0x46, 0x00, 0x20, 0x12, 0xE0, 0xB0, 0x42, 0x0F,
+	0xD0, 0x41, 0x00, 0x0B, 0x19, 0x99, 0x78, 0x62, 0x46, 0x52, 0x1A, 0x00, 0xD5, 0x52, 0x42, 0x04,
+	0x2A, 0x06, 0xDA, 0x5A, 0x8C, 0x04, 0x9B, 0x9A, 0x42, 0x02, 0xD9, 0x07, 0x46, 0x8C, 0x46, 0x04,
+	0x92, 0x40, 0x1C, 0x85, 0x42, 0xEA, 0xD8, 0x00, 0x25, 0x1E, 0xE0, 0xBD, 0x42, 0x1B, 0xD0, 0x68,
+	0x00, 0x01, 0x19, 0x88, 0x78, 0x62, 0x46, 0x10, 0x1A, 0x00, 0xD5, 0x40, 0x42, 0x04, 0x28, 0x12,
+	0xDA, 0x48, 0x8C, 0x64, 0x21, 0x48, 0x43, 0x04, 0x9A, 0x03, 0x99, 0x51, 0x43, 0x88, 0x42, 0x0A,
+	0xD2, 0x29, 0x46, 0x20, 0x46, 0xFF, 0xF7, 0x84, 0xFF, 0xBD, 0x42, 0x00, 0xD2, 0x7F, 0x1E, 0xB5,
+	0x42, 0x00, 0xD2, 0x76, 0x1E, 
+	0x00, 0x00, 0x79, 0x00, 0x80, 0x6D, 0x1E, 0x6D, 0x1C, 0x20, 0x78, 0xA8, 0x42, 0xDD, 0xD8, 0x76,
+	0x1C, 0x25, 0x78, 0xB5, 0x42, 0xB9, 0xD8, 0x20, 0x78, 0xCC, 0x4D, 0x00, 0x26, 0x20, 0x35, 0x84,
+	0x46, 0x00, 0x28, 0x79, 0xD0, 0x00, 0x20, 0x03, 0x90, 0xFF, 0x20, 0x02, 0x90, 0x00, 0x20, 0x01,
+	0x90, 0x06, 0x98, 0xC0, 0x8B, 0x00, 0x28, 0x62, 0xD0, 0xC5, 0x4A, 0x00, 0x20, 0x23, 0x46, 0x16,
+	0x78, 0x42, 0x33, 0x12, 0xE0, 0x41, 0x00, 0x09, 0x19, 0x4A, 0x78, 0x89, 0x78, 0x72, 0x43, 0x52,
+	0x18, 0xC0, 0x4F, 0x52, 0x00, 0xBA, 0x5E, 0xAF, 0x88, 0xBA, 0x42, 0x05, 0xDA, 0xC9, 0x5C, 0x00,
+	0x29, 0x02, 0xD0, 0x01, 0x20, 0x05, 0x90, 0x02, 0xE0, 0x40, 0x1C, 0x84, 0x45, 0xEA, 0xD8, 0xB6,
+	0x48, 0x80, 0x6B, 0x3C, 0x28, 0x2B, 0xD9, 0x00, 0x26, 0x26, 0xE0, 0x70, 0x00, 0xB4, 0x4A, 0x01,
+	0x19, 0x48, 0x78, 0x12, 0x78, 
+	0x00, 0x00, 0x7A, 0x00, 0x80, 0x89, 0x78, 0x42, 0x43, 0x52, 0x18, 0xB2, 0x4B, 0x52, 0x00, 0x9A,
+	0x5E, 0xAB, 0x88, 0x9A, 0x42, 0x03, 0xDB, 0xFF, 0xF7, 0xEA, 0xFE, 0x00, 0x28, 0x13, 0xD0, 0xF1,
+	0xB2, 0x09, 0xE0, 0x48, 0x00, 0x00, 0x19, 0xC2, 0x78, 0x42, 0x70, 0x02, 0x79, 0x82, 0x70, 0x82,
+	0x8C, 0x49, 0x1C, 0x42, 0x84, 0xC9, 0xB2, 0x20, 0x78, 0x40, 0x1E, 0x88, 0x42, 0xF1, 0xDC, 0x20,
+	0x78, 0x40, 0x1E, 0x20, 0x70, 0x00, 0xE0, 0x76, 0x1C, 0x20, 0x78, 0xB0, 0x42, 0xD5, 0xD8, 0x22,
+	0x78, 0x00, 0x20, 0x0B, 0xE0, 0x41, 0x00, 0x09, 0x19, 0x89, 0x78, 0x01, 0x9B, 0x99, 0x42, 0x00,
+	0xD9, 0x01, 0x91, 0x02, 0x9B, 0x99, 0x42, 0x00, 0xD2, 0x02, 0x91, 0x40, 0x1C, 0x90, 0x42, 0xF1,
+	0xD3, 0x02, 0x99, 0x01, 0x98, 0x40, 0x1A, 0x02, 0x28, 0x01, 0xDD, 0x01, 0x20, 0x03, 0x90, 0x93,
+	0x48, 0x40, 0x38, 0x40, 0x78, 
+	0x00, 0x00, 0x7B, 0x00, 0x80, 0x94, 0x4F, 0x00, 0x28, 0x07, 0xD0, 0x21, 0x78, 0x62, 0x1C, 0x07,
+	0x98, 0xFE, 0xF7, 0x0F, 0xFA, 0x06, 0x46, 0x19, 0xE0, 0x6E, 0xE0, 0x20, 0x78, 0x0B, 0x26, 0x0B,
+	0x28, 0x00, 0xD8, 0x06, 0x46, 0x00, 0x20, 0x0F, 0xE0, 0x41, 0x00, 0x0B, 0x19, 0xC1, 0x00, 0x41,
+	0x18, 0x5A, 0x78, 0xC9, 0x19, 0x0A, 0x71, 0x12, 0x0A, 0x4A, 0x71, 0x9A, 0x78, 0x8A, 0x70, 0x12,
+	0x0A, 0xCA, 0x70, 0x20, 0x22, 0xCA, 0x71, 0x40, 0x1C, 0xB0, 0x42, 0xED, 0xD3, 0x06, 0x99, 0x00,
+	0x20, 0xC9, 0x8B, 0x00, 0x29, 0x1E, 0xD0, 0x7C, 0x4A, 0x91, 0x7A, 0x01, 0x29, 0x02, 0xD8, 0x03,
+	0x99, 0x01, 0x29, 0x02, 0xD1, 0x00, 0x21, 0x91, 0x63, 0x14, 0xE0, 0x91, 0x6B, 0x00, 0x29, 0x06,
+	0xD0, 0x05, 0x98, 0x00, 0x28, 0x09, 0xD0, 0xFF, 0x20, 0x2D, 0x30, 0x90, 0x63, 0x09, 0xE0, 0x05,
+	0x99, 0x00, 0x29, 0x07, 0xD0, 
+	0x00, 0x00, 0x7C, 0x00, 0x80, 0x3C, 0x20, 0x90, 0x63, 0x01, 0xE0, 0x3C, 0x29, 0x01, 0xD8, 0xA8,
+	0x78, 0x00, 0xE0, 0xE8, 0x78, 0x71, 0x49, 0x09, 0x78, 0x00, 0x29, 0x0A, 0xD1, 0x6A, 0x49, 0x89,
+	0x7A, 0x00, 0x29, 0x0C, 0xD0, 0x69, 0x49, 0x40, 0x39, 0x4A, 0x7F, 0x82, 0x42, 0x07, 0xD9, 0x48,
+	0x7F, 0x05, 0xE0, 0x06, 0x99, 0x09, 0x7E, 0x81, 0x42, 0x01, 0xD9, 0x06, 0x98, 0x00, 0x7E, 0x62,
+	0x49, 0x4A, 0x7B, 0x00, 0x2A, 0x08, 0xD0, 0x89, 0x7A, 0x00, 0x29, 0x05, 0xD0, 0x5F, 0x49, 0x20,
+	0x39, 0x8A, 0x78, 0x82, 0x42, 0x00, 0xD9, 0x88, 0x78, 0x00, 0x21, 0x00, 0x07, 0x02, 0x0E, 0x08,
+	0xE0, 0xC8, 0x00, 0x08, 0x18, 0xC0, 0x19, 0x83, 0x79, 0x1B, 0x07, 0x1B, 0x0F, 0x13, 0x43, 0x83,
+	0x71, 0x49, 0x1C, 0xB1, 0x42, 0xF4, 0xD3, 0x1A, 0xE0, 0x59, 0x48, 0x00, 0x68, 0x41, 0x42, 0x00,
+	0x28, 0x00, 0xDB, 0x01, 0x46, 
+	0x00, 0x00, 0x7D, 0x00, 0x80, 0x06, 0x98, 0xC2, 0x8A, 0x56, 0x48, 0x00, 0x68, 0x82, 0x42, 0x09,
+	0xDD, 0x05, 0x98, 0x00, 0x28, 0x06, 0xD1, 0x06, 0x98, 0xC0, 0x8B, 0x88, 0x42, 0x02, 0xDD, 0x4A,
+	0x49, 0x00, 0x20, 0x88, 0x63, 0x21, 0x78, 0x62, 0x1C, 0x07, 0x98, 0xFE, 0xF7, 0x82, 0xF9, 0x46,
+	0x49, 0x88, 0x6B, 0x00, 0x28, 0x01, 0xD0, 0x40, 0x1E, 0x88, 0x63, 0xC8, 0x7A, 0x00, 0x28, 0x07,
+	0xD1, 0xC8, 0x78, 0x00, 0x28, 0x07, 0xD0, 0x40, 0x1E, 0xC8, 0x70, 0x08, 0x79, 0xC8, 0x72, 0x02,
+	0xE0, 0xAA, 0x7A, 0xCA, 0x70, 0x08, 0x71, 0xE8, 0x7A, 0x00, 0x28, 0x03, 0xD1, 0xC8, 0x7A, 0x00,
+	0x28, 0x00, 0xD0, 0x00, 0x26, 0x30, 0x46, 0x09, 0xB0, 0xF0, 0xBD, 0xF0, 0xB5, 0x37, 0x4C, 0x06,
+	0x46, 0x02, 0x68, 0x00, 0x20, 0x20, 0x3C, 0x03, 0x23, 0xE3, 0x56, 0x0F, 0x68, 0xD2, 0x1A, 0x03,
+	0xD5, 0x00, 0x22, 0x00, 0x2B, 
+	0x00, 0x00, 0x7E, 0x00, 0x80, 0x00, 0xD0, 0x01, 0x20, 0x05, 0x25, 0x65, 0x57, 0x7B, 0x1B, 0x03,
+	0xD5, 0x00, 0x23, 0x00, 0x2D, 0x00, 0xD0, 0x01, 0x20, 0x2C, 0x4F, 0x40, 0x3F, 0xFD, 0x68, 0x6D,
+	0x1E, 0xAA, 0x42, 0x05, 0xD9, 0x2A, 0x46, 0x04, 0x25, 0x65, 0x57, 0x00, 0x2D, 0x00, 0xDD, 0x01,
+	0x20, 0x3D, 0x69, 0x6D, 0x1E, 0xAB, 0x42, 0x05, 0xD9, 0x2B, 0x46, 0x06, 0x25, 0x65, 0x57, 0x00,
+	0x2D, 0x00, 0xDD, 0x01, 0x20, 0x32, 0x60, 0x0B, 0x60, 0xF0, 0xBD, 0xFF, 0xB5, 0xC3, 0x00, 0xC3,
+	0x18, 0x21, 0x48, 0x83, 0xB0, 0x18, 0x18, 0x00, 0x7A, 0x83, 0x07, 0x9B, 0x0F, 0x00, 0x93, 0x00,
+	0x07, 0x85, 0x0F, 0x1B, 0x48, 0x00, 0x23, 0x07, 0x78, 0x08, 0x46, 0x78, 0x43, 0x80, 0x18, 0x9E,
+	0x46, 0x9C, 0x46, 0x1E, 0x46, 0x1C, 0x46, 0x00, 0x2D, 0x12, 0xD0, 0x13, 0x49, 0x00, 0x2A, 0xCB,
+	0x6A, 0x49, 0x6B, 0x9C, 0x46, 
+	0x00, 0x00, 0x7F, 0x00, 0x80, 0x8E, 0x46, 0x01, 0xD0, 0x43, 0x1E, 0x02, 0xE0, 0x43, 0x1C, 0x00,
+	0x24, 0xE4, 0x43, 0x7F, 0x1E, 0xBA, 0x42, 0x01, 0xD2, 0x46, 0x1C, 0x30, 0xE0, 0x46, 0x1E, 0x2D,
+	0xE0, 0x00, 0x9F, 0x00, 0x2F, 0x2B, 0xD0, 0x08, 0x4B, 0x9E, 0x6A, 0x1B, 0x6B, 0xB4, 0x46, 0x9E,
+	0x46, 0x07, 0x4B, 0x0E, 0x46, 0x1B, 0x78, 0x5E, 0x43, 0xB2, 0x18, 0xD6, 0x1A, 0xD7, 0x18, 0x00,
+	0x29, 0x12, 0xD0, 0x33, 0x46, 0x13, 0xE0, 0x00, 0x00, 0xE4, 0x00, 0x00, 0x20, 0x10, 0xE8, 0x00,
+	0x00, 0x9E, 0x00, 0x00, 0x20, 0x92, 0x08, 0x00, 0x20, 0x88, 0x03, 0x00, 0x20, 0x28, 0x01, 0x00,
+	0x20, 0x80, 0x01, 0x00, 0x20, 0x7C, 0x01, 0x00, 0x20, 0x00, 0x24, 0x3B, 0x46, 0xE4, 0x43, 0xFA,
+	0x4A, 0x12, 0x78, 0x52, 0x1E, 0x91, 0x42, 0x01, 0xD2, 0x3E, 0x46, 0x00, 0xE0, 0x01, 0x24, 0x00,
+	0x99, 0x29, 0x43, 0x02, 0x91, 
+	0x00, 0x00, 0x80, 0x00, 0x80, 0x36, 0xD0, 0xF5, 0x4F, 0x40, 0x00, 0x38, 0x5E, 0x5A, 0x00, 0x81,
+	0x10, 0x40, 0x1A, 0x01, 0x90, 0x73, 0x00, 0xBA, 0x5E, 0xFB, 0x5E, 0x00, 0x20, 0x9A, 0x42, 0x01,
+	0xDD, 0x44, 0x1E, 0x03, 0xE0, 0x1A, 0x46, 0x00, 0x2C, 0x00, 0xD1, 0x01, 0x24, 0x8A, 0x42, 0x0B,
+	0xDD, 0x52, 0x1A, 0x60, 0x46, 0x02, 0x99, 0x50, 0x43, 0x01, 0x29, 0x02, 0xD0, 0x10, 0x46, 0x71,
+	0x46, 0x48, 0x43, 0x01, 0x99, 0x09, 0xF0, 0x45, 0xFD, 0x44, 0x43, 0xE5, 0x48, 0x00, 0x21, 0x40,
+	0x69, 0x00, 0x2D, 0x11, 0xD0, 0x01, 0x28, 0x06, 0xD1, 0x0C, 0x98, 0x00, 0x68, 0x00, 0x19, 0x00,
+	0xD4, 0x01, 0x46, 0x0C, 0x98, 0x05, 0xE0, 0x06, 0x98, 0x00, 0x68, 0x00, 0x19, 0x00, 0xD4, 0x01,
+	0x46, 0x06, 0x98, 0x01, 0x60, 0x07, 0xB0, 0xF0, 0xBD, 0x01, 0x28, 0xF4, 0xD0, 0xEC, 0xE7, 0xFF,
+	0xB5, 0x10, 0x26, 0x01, 0x27, 
+	0x00, 0x00, 0x81, 0x00, 0x80, 0x87, 0xB0, 0x04, 0x46, 0x00, 0x29, 0x05, 0xD0, 0xD2, 0x48, 0x00,
+	0x78, 0x40, 0x1E, 0x81, 0x42, 0x00, 0xD0, 0x00, 0x27, 0x98, 0x00, 0x05, 0x19, 0x03, 0x90, 0x68,
+	0x69, 0x06, 0x90, 0xE8, 0x6B, 0x05, 0x90, 0xA8, 0x6A, 0x04, 0x90, 0x00, 0x2F, 0x0C, 0xD1, 0x00,
+	0x28, 0x0A, 0xD0, 0x05, 0x99, 0x06, 0x98, 0x40, 0x18, 0x00, 0x01, 0x04, 0x99, 0x09, 0xF0, 0x09,
+	0xFD, 0x10, 0x26, 0x10, 0x28, 0x00, 0xDB, 0x06, 0x46, 0xC5, 0x48, 0x41, 0x69, 0x40, 0x30, 0x01,
+	0x29, 0x01, 0xD0, 0xC0, 0x7B, 0x00, 0xE0, 0x40, 0x7B, 0x00, 0x90, 0x03, 0x98, 0x06, 0x99, 0x20,
+	0x58, 0x02, 0x90, 0x41, 0x18, 0x04, 0x9A, 0x05, 0x98, 0x10, 0x18, 0x08, 0x18, 0x29, 0x6D, 0x41,
+	0x18, 0xA0, 0x68, 0x01, 0x90, 0xE2, 0x69, 0x63, 0x6C, 0x80, 0x18, 0x22, 0x6B, 0xD2, 0x18, 0x80,
+	0x18, 0xA2, 0x6D, 0x80, 0x18, 
+	0x00, 0x00, 0x82, 0x00, 0x80, 0x08, 0x18, 0x01, 0x21, 0x00, 0x28, 0x00, 0xDD, 0x01, 0x46, 0xB5,
+	0x48, 0x40, 0x68, 0x80, 0x02, 0x09, 0xF0, 0xDD, 0xFC, 0x00, 0x99, 0x48, 0x43, 0x81, 0x11, 0x20,
+	0x20, 0x20, 0x29, 0x00, 0xDC, 0x08, 0x46, 0x01, 0x99, 0x8A, 0x10, 0x02, 0x99, 0x51, 0x1A, 0x41,
+	0x43, 0x0A, 0x11, 0x09, 0x99, 0x89, 0x00, 0x62, 0x50, 0xE2, 0x69, 0x6B, 0x69, 0x72, 0x43, 0x12,
+	0x11, 0xD2, 0x1A, 0x42, 0x43, 0x12, 0x11, 0x09, 0x19, 0x4A, 0x61, 0x00, 0x2F, 0x05, 0xD1, 0x63,
+	0x6C, 0xE2, 0x69, 0xD2, 0x18, 0x23, 0x6B, 0x9A, 0x42, 0x00, 0xDA, 0x22, 0x6B, 0xAB, 0x6A, 0xD2,
+	0x1A, 0x42, 0x43, 0x12, 0x11, 0x8A, 0x62, 0x62, 0x6C, 0xEB, 0x6B, 0x72, 0x43, 0x12, 0x11, 0xD2,
+	0x1A, 0x42, 0x43, 0x12, 0x11, 0xCA, 0x63, 0xA2, 0x6D, 0x2B, 0x6D, 0x92, 0x10, 0xD2, 0x1A, 0x42,
+	0x43, 0x10, 0x11, 0x08, 0x65, 
+	0x00, 0x00, 0x83, 0x00, 0x80, 0x0B, 0xB0, 0xF0, 0xBD, 0xFF, 0xB5, 0x10, 0x26, 0x01, 0x27, 0x87,
+	0xB0, 0x04, 0x46, 0x00, 0x29, 0x05, 0xD0, 0x94, 0x48, 0x00, 0x78, 0x40, 0x1E, 0x81, 0x42, 0x00,
+	0xD0, 0x00, 0x27, 0x14, 0x20, 0x43, 0x43, 0x1D, 0x19, 0x03, 0x93, 0x68, 0x68, 0x06, 0x90, 0xE8,
+	0x68, 0x05, 0x90, 0xA8, 0x68, 0x04, 0x90, 0x00, 0x2F, 0x0C, 0xD1, 0x00, 0x28, 0x0A, 0xD0, 0x06,
+	0x99, 0x05, 0x98, 0x08, 0x18, 0x00, 0x01, 0x04, 0x99, 0x09, 0xF0, 0x83, 0xFC, 0x10, 0x26, 0x10,
+	0x28, 0x00, 0xDB, 0x06, 0x46, 0x82, 0x48, 0x41, 0x69, 0x40, 0x30, 0x01, 0x29, 0x01, 0xD0, 0x40,
+	0x7B, 0x00, 0xE0, 0xC0, 0x7B, 0x00, 0x90, 0x03, 0x98, 0x06, 0x99, 0x20, 0x58, 0x02, 0x90, 0x41,
+	0x18, 0x04, 0x9A, 0x05, 0x98, 0x10, 0x18, 0x08, 0x18, 0x29, 0x69, 0x41, 0x18, 0xA0, 0x6A, 0x01,
+	0x90, 0xE2, 0x6A, 0x63, 0x6B, 
+	0x00, 0x00, 0x84, 0x00, 0x80, 0x80, 0x18, 0x22, 0x6B, 0xD2, 0x18, 0x80, 0x18, 0xA2, 0x6B, 0x80,
+	0x18, 0x08, 0x18, 0x01, 0x21, 0x00, 0x28, 0x00, 0xDD, 0x01, 0x46, 0x72, 0x48, 0x40, 0x68, 0x80,
+	0x02, 0x09, 0xF0, 0x57, 0xFC, 0x00, 0x99, 0x48, 0x43, 0x81, 0x11, 0x20, 0x20, 0x20, 0x29, 0x00,
+	0xDC, 0x08, 0x46, 0x01, 0x99, 0x02, 0x9A, 0x89, 0x10, 0x89, 0x1A, 0x41, 0x43, 0x0A, 0x11, 0x09,
+	0x99, 0x14, 0x23, 0x59, 0x43, 0x62, 0x50, 0xE2, 0x6A, 0x6B, 0x68, 0x72, 0x43, 0x12, 0x11, 0xD2,
+	0x1A, 0x42, 0x43, 0x12, 0x11, 0x09, 0x19, 0x4A, 0x60, 0x00, 0x2F, 0x05, 0xD1, 0x63, 0x6B, 0xE2,
+	0x6A, 0xD2, 0x18, 0x23, 0x6B, 0x9A, 0x42, 0x00, 0xDA, 0x22, 0x6B, 0xAB, 0x68, 0xD2, 0x1A, 0x42,
+	0x43, 0x12, 0x11, 0x8A, 0x60, 0x62, 0x6B, 0xEB, 0x68, 0x72, 0x43, 0x12, 0x11, 0xD2, 0x1A, 0x42,
+	0x43, 0x12, 0x11, 0xCA, 0x60, 
+	0x00, 0x00, 0x85, 0x00, 0x80, 0xA2, 0x6B, 0x2B, 0x69, 0x92, 0x10, 0xD2, 0x1A, 0x42, 0x43, 0x10,
+	0x11, 0x08, 0x61, 0x77, 0xE7, 0xFF, 0xB5, 0x87, 0xB0, 0x84, 0x21, 0x07, 0x98, 0xFD, 0xF7, 0xA8,
+	0xF8, 0x04, 0x46, 0x08, 0x98, 0x02, 0x90, 0xC1, 0x00, 0x45, 0x18, 0x29, 0x46, 0x07, 0x98, 0xFD,
+	0xF7, 0x9F, 0xF8, 0x2A, 0x46, 0x4D, 0x49, 0x01, 0x90, 0x09, 0xF0, 0x90, 0xFB, 0x00, 0x20, 0x09,
+	0xE0, 0xC1, 0x00, 0x4A, 0x4A, 0x41, 0x18, 0x89, 0x18, 0xCA, 0x79, 0x20, 0x2A, 0x01, 0xD1, 0x00,
+	0x22, 0x0A, 0x72, 0x40, 0x1C, 0x08, 0x99, 0x88, 0x42, 0xF2, 0xD3, 0x41, 0x48, 0x40, 0x30, 0x06,
+	0x90, 0xEF, 0xE1, 0x40, 0x1E, 0xC1, 0x00, 0x41, 0x18, 0x08, 0x90, 0x40, 0x48, 0x0D, 0x18, 0xE8,
+	0x79, 0x10, 0x28, 0xF5, 0xD0, 0xE8, 0x78, 0xA9, 0x78, 0x00, 0x02, 0x08, 0x43, 0x60, 0x66, 0x68,
+	0x79, 0x29, 0x79, 0x00, 0x02, 
+	0x00, 0x00, 0x86, 0x00, 0x80, 0x08, 0x43, 0xA0, 0x66, 0x00, 0x20, 0x33, 0xE0, 0xC1, 0x00, 0x01,
+	0x9A, 0x41, 0x18, 0x8A, 0x18, 0xD1, 0x79, 0x10, 0x29, 0x2B, 0xD0, 0x51, 0x79, 0x16, 0x79, 0x09,
+	0x02, 0xA3, 0x6E, 0x31, 0x43, 0x59, 0x1A, 0x00, 0xD5, 0x49, 0x42, 0xE1, 0x67, 0xD6, 0x78, 0x97,
+	0x78, 0x32, 0x02, 0x63, 0x6E, 0x3A, 0x43, 0x9A, 0x1A, 0x00, 0xD5, 0x52, 0x42, 0x23, 0x46, 0x80,
+	0x33, 0x1A, 0x60, 0x00, 0x29, 0x02, 0xD1, 0x00, 0x2A, 0x13, 0xD0, 0x01, 0xE0, 0x03, 0x29, 0x10,
+	0xDC, 0x03, 0x2A, 0x0E, 0xDC, 0x02, 0x29, 0x02, 0xDA, 0x29, 0x7A, 0x09, 0x1D, 0x29, 0x72, 0x19,
+	0x68, 0x02, 0x29, 0x02, 0xDA, 0x29, 0x7A, 0x49, 0x1C, 0x29, 0x72, 0x29, 0x7A, 0xF0, 0x22, 0x11,
+	0x43, 0x29, 0x72, 0x40, 0x1C, 0x02, 0x99, 0x88, 0x42, 0xC8, 0xDB, 0xA2, 0x6E, 0xD2, 0x1E, 0x00,
+	0x20, 0x84, 0x46, 0x52, 0x1C, 
+	0x00, 0x00, 0x87, 0x00, 0x80, 0x03, 0xD4, 0x14, 0x48, 0x00, 0x78, 0x82, 0x42, 0x0B, 0xDB, 0x00,
+	0x20, 0x63, 0x46, 0x14, 0x26, 0x73, 0x43, 0x01, 0x46, 0x1B, 0x19, 0x86, 0x00, 0x40, 0x1C, 0x99,
+	0x51, 0x05, 0x28, 0xFA, 0xDB, 0x38, 0xE0, 0x10, 0x48, 0x61, 0x6E, 0x00, 0x78, 0x89, 0x1E, 0x50,
+	0x43, 0x40, 0x18, 0x03, 0x90, 0x63, 0x46, 0x14, 0x26, 0x00, 0x20, 0x73, 0x43, 0x1B, 0x19, 0x05,
+	0x93, 0x00, 0x29, 0x03, 0xDB, 0x08, 0x4B, 0x1B, 0x78, 0x99, 0x42, 0x11, 0xDB, 0x00, 0x23, 0x05,
+	0x9E, 0x87, 0x00, 0xF3, 0x51, 0x19, 0xE0, 0x00, 0x00, 0x9D, 0x00, 0x00, 0x20, 0x92, 0x08, 0x00,
+	0x20, 0xD0, 0xE7, 0x00, 0x00, 0x30, 0xEA, 0x00, 0x00, 0x9E, 0x00, 0x00, 0x20, 0x88, 0x03, 0x00,
+	0x20, 0x03, 0x9B, 0xFA, 0x4E, 0x5B, 0x00, 0xF3, 0x5E, 0x05, 0x9E, 0x87, 0x00, 0xF3, 0x51, 0x00,
+	0x26, 0x05, 0x2B, 0x00, 0xDD, 
+	0x00, 0x00, 0x88, 0x00, 0x80, 0x5E, 0x1F, 0x05, 0x9B, 0xDE, 0x51, 0x03, 0x9B, 0x49, 0x1C, 0x5B,
+	0x1C, 0x40, 0x1C, 0x03, 0x93, 0x05, 0x28, 0xD3, 0xDB, 0x60, 0x46, 0x40, 0x1C, 0x84, 0x46, 0x05,
+	0x28, 0xAF, 0xDB, 0xA0, 0x6E, 0x01, 0x28, 0x1A, 0xDC, 0x00, 0x28, 0x05, 0xD1, 0x01, 0x22, 0x20,
+	0x46, 0x03, 0x23, 0x61, 0x6E, 0xFF, 0xF7, 0xA8, 0xFE, 0xE9, 0x48, 0x40, 0x69, 0x01, 0x28, 0x06,
+	0x98, 0x01, 0xD0, 0x02, 0x7B, 0x00, 0xE0, 0x82, 0x7B, 0x00, 0x20, 0x81, 0x00, 0x0B, 0x19, 0x5B,
+	0x69, 0x40, 0x1C, 0x53, 0x43, 0x9B, 0x11, 0x63, 0x50, 0x05, 0x28, 0xF6, 0xDB, 0x1F, 0xE0, 0xE1,
+	0x49, 0x09, 0x78, 0x8A, 0x1E, 0x90, 0x42, 0x1A, 0xDB, 0x49, 0x1E, 0x88, 0x42, 0x05, 0xD1, 0x03,
+	0x22, 0x20, 0x46, 0x01, 0x23, 0x61, 0x6E, 0xFF, 0xF7, 0x87, 0xFE, 0xD9, 0x48, 0x40, 0x69, 0x01,
+	0x28, 0x06, 0x98, 0x01, 0xD0, 
+	0x00, 0x00, 0x89, 0x00, 0x80, 0x02, 0x7B, 0x00, 0xE0, 0x82, 0x7B, 0x00, 0x20, 0x81, 0x00, 0x09,
+	0x19, 0xCB, 0x6B, 0x40, 0x1C, 0x53, 0x43, 0x9B, 0x11, 0x0B, 0x65, 0x05, 0x28, 0xF6, 0xDB, 0x60,
+	0x6E, 0x01, 0x28, 0x1B, 0xDC, 0x00, 0x28, 0x05, 0xD1, 0x01, 0x22, 0x20, 0x46, 0x03, 0x23, 0xA1,
+	0x6E, 0xFF, 0xF7, 0xE5, 0xFD, 0xCA, 0x48, 0x40, 0x69, 0x01, 0x28, 0x06, 0x98, 0x01, 0xD0, 0x82,
+	0x7B, 0x00, 0xE0, 0x02, 0x7B, 0x00, 0x20, 0x14, 0x21, 0x41, 0x43, 0x0B, 0x19, 0x5B, 0x68, 0x40,
+	0x1C, 0x53, 0x43, 0x9B, 0x11, 0x63, 0x50, 0x05, 0x28, 0xF5, 0xDB, 0x20, 0xE0, 0xC2, 0x49, 0x09,
+	0x78, 0x8A, 0x1E, 0x90, 0x42, 0x1B, 0xDB, 0x49, 0x1E, 0x88, 0x42, 0x05, 0xD1, 0x03, 0x22, 0x20,
+	0x46, 0x01, 0x23, 0xA1, 0x6E, 0xFF, 0xF7, 0xC3, 0xFD, 0xB9, 0x48, 0x40, 0x69, 0x01, 0x28, 0x06,
+	0x98, 0x01, 0xD0, 0x82, 0x7B, 
+	0x00, 0x00, 0x8A, 0x00, 0x80, 0x00, 0xE0, 0x02, 0x7B, 0x00, 0x20, 0x14, 0x21, 0x41, 0x43, 0x09,
+	0x19, 0xCB, 0x68, 0x40, 0x1C, 0x53, 0x43, 0x9B, 0x11, 0x0B, 0x61, 0x05, 0x28, 0xF5, 0xDB, 0xE1,
+	0x69, 0xA0, 0x69, 0xE2, 0x6A, 0x40, 0x18, 0x21, 0x6A, 0x89, 0x18, 0x40, 0x18, 0x21, 0x6B, 0x40,
+	0x18, 0x61, 0x6B, 0x40, 0x18, 0x21, 0x6C, 0x40, 0x18, 0x61, 0x6C, 0x40, 0x18, 0xA1, 0x6C, 0x40,
+	0x18, 0x00, 0x21, 0x21, 0x67, 0xA1, 0x67, 0x61, 0x67, 0xE0, 0x66, 0x29, 0x7A, 0x00, 0x29, 0x3A,
+	0xD1, 0x00, 0x20, 0x82, 0x00, 0x11, 0x19, 0xA3, 0x58, 0x4E, 0x69, 0xCF, 0x6B, 0x9B, 0x19, 0x8E,
+	0x6A, 0xF6, 0x19, 0x9B, 0x19, 0x0E, 0x6D, 0x9B, 0x19, 0x26, 0x6F, 0x9B, 0x19, 0x23, 0x67, 0x14,
+	0x23, 0x43, 0x43, 0x1E, 0x19, 0x36, 0x69, 0xE3, 0x58, 0x40, 0x1C, 0xF3, 0x1A, 0xA6, 0x6F, 0x9B,
+	0x19, 0xA3, 0x67, 0x09, 0x6D, 
+	0x00, 0x00, 0x8B, 0x00, 0x80, 0xA2, 0x58, 0x89, 0x1A, 0x62, 0x6F, 0x89, 0x18, 0x61, 0x67, 0x05,
+	0x28, 0xDF, 0xDB, 0x58, 0x00, 0xA0, 0x67, 0x48, 0x00, 0x60, 0x67, 0x00, 0x20, 0x14, 0x21, 0x41,
+	0x43, 0x09, 0x19, 0xCA, 0x68, 0x49, 0x68, 0x51, 0x1A, 0xA2, 0x6F, 0x89, 0x18, 0xA1, 0x67, 0x81,
+	0x00, 0x09, 0x19, 0xCA, 0x6B, 0x49, 0x69, 0x40, 0x1C, 0x51, 0x1A, 0x62, 0x6F, 0x89, 0x18, 0x61,
+	0x67, 0x05, 0x28, 0xEB, 0xDB, 0x15, 0xE0, 0x20, 0x67, 0x01, 0x20, 0x14, 0x21, 0x41, 0x43, 0x09,
+	0x19, 0xCA, 0x68, 0x49, 0x68, 0x51, 0x1A, 0xA2, 0x6F, 0x89, 0x18, 0xA1, 0x67, 0x81, 0x00, 0x09,
+	0x19, 0xCA, 0x6B, 0x49, 0x69, 0x40, 0x1C, 0x51, 0x1A, 0x62, 0x6F, 0x89, 0x18, 0x61, 0x67, 0x04,
+	0x28, 0xEB, 0xDB, 0xA0, 0x6F, 0x26, 0x6F, 0x00, 0x02, 0x31, 0x46, 0x09, 0xF0, 0x6A, 0xFA, 0x01,
+	0x46, 0x60, 0x6E, 0x04, 0x90, 
+	0x00, 0x00, 0x8C, 0x00, 0x80, 0x00, 0x02, 0x0F, 0x18, 0x80, 0x37, 0xA7, 0x67, 0x60, 0x6F, 0x31,
+	0x46, 0x00, 0x02, 0x09, 0xF0, 0x5E, 0xFA, 0xA1, 0x6E, 0x00, 0x23, 0x0A, 0x02, 0x82, 0x18, 0x80,
+	0x32, 0x18, 0x46, 0x62, 0x67, 0x00, 0x2F, 0x00, 0xDB, 0x38, 0x46, 0xA0, 0x67, 0x00, 0x2A, 0x00,
+	0xDB, 0x13, 0x46, 0x6B, 0x4F, 0x63, 0x67, 0x7A, 0x69, 0x01, 0x2A, 0x01, 0xD0, 0xA3, 0x67, 0x60,
+	0x67, 0x6A, 0x4E, 0xA0, 0x6F, 0x72, 0x6A, 0x50, 0x43, 0x00, 0x14, 0xA0, 0x67, 0x60, 0x6F, 0x32,
+	0x6A, 0x50, 0x43, 0x00, 0x14, 0x60, 0x67, 0x28, 0x7A, 0x00, 0x07, 0x07, 0xD0, 0x22, 0x46, 0x78,
+	0x32, 0x13, 0x1F, 0x00, 0x92, 0x04, 0x9A, 0x08, 0x98, 0xFF, 0xF7, 0x6F, 0xFC, 0x21, 0x46, 0x78,
+	0x31, 0x08, 0x1F, 0xFF, 0xF7, 0x3A, 0xFC, 0xA0, 0x6F, 0xA8, 0x70, 0x00, 0x0A, 0xE8, 0x70, 0x60,
+	0x6F, 0x28, 0x71, 0x00, 0x0A, 
+	0x00, 0x00, 0x8D, 0x00, 0x80, 0x68, 0x71, 0xE0, 0x6E, 0xB9, 0x69, 0x48, 0x43, 0x50, 0x21, 0x48,
+	0x43, 0xC1, 0x0B, 0xE1, 0x66, 0x70, 0x79, 0x00, 0x28, 0x01, 0xD1, 0xC9, 0x10, 0xE1, 0x66, 0xFF,
+	0x22, 0xFF, 0x29, 0x00, 0xD8, 0xCA, 0xB2, 0x2A, 0x72, 0x01, 0x28, 0x04, 0xD1, 0xA8, 0x79, 0x00,
+	0x09, 0x00, 0x01, 0x00, 0x1D, 0x04, 0xE0, 0x00, 0x28, 0x03, 0xD1, 0xA8, 0x79, 0x00, 0x09, 0x00,
+	0x01, 0xA8, 0x71, 0x08, 0x98, 0x00, 0x28, 0x00, 0xD0, 0x0B, 0xE6, 0x07, 0x98, 0xFC, 0xF7, 0x9D,
+	0xFE, 0x07, 0x98, 0xFC, 0xF7, 0x9A, 0xFE, 0x55, 0xE5, 0x70, 0xB5, 0x44, 0x4C, 0x15, 0x46, 0xA2,
+	0x69, 0x00, 0x2A, 0x04, 0xD1, 0x0A, 0x78, 0x4B, 0x1C, 0x29, 0x46, 0xFF, 0xF7, 0xD3, 0xFD, 0xA5,
+	0x72, 0x70, 0xBD, 0xF0, 0xB5, 0x3E, 0x48, 0xC1, 0xB0, 0xC1, 0x69, 0x38, 0x91, 0x05, 0x6A, 0x3D,
+	0x48, 0x16, 0x21, 0x40, 0x90, 
+	0x00, 0x00, 0x8E, 0x00, 0x80, 0x41, 0x5E, 0x37, 0x91, 0x14, 0x21, 0x41, 0x5E, 0x34, 0x48, 0x36,
+	0x91, 0x40, 0x69, 0x84, 0x21, 0xC7, 0xB2, 0x15, 0xA8, 0x09, 0xF0, 0xBF, 0xF9, 0x00, 0x21, 0x13,
+	0xA8, 0x0A, 0x46, 0x06, 0xC0, 0x11, 0xA8, 0x06, 0xC0, 0x0E, 0xA8, 0x0B, 0x46, 0x0E, 0xC0, 0x0C,
+	0xA8, 0x06, 0xC0, 0x00, 0x20, 0x37, 0x99, 0x0B, 0x91, 0x08, 0x90, 0x06, 0x90, 0x2B, 0x4A, 0x05,
+	0x90, 0x03, 0x90, 0x02, 0x90, 0x01, 0x90, 0xD0, 0x71, 0x2B, 0x4A, 0x2A, 0x4B, 0x12, 0x78, 0x20,
+	0x33, 0x84, 0x46, 0x01, 0x46, 0x06, 0x46, 0x3E, 0x93, 0x3F, 0x92, 0x00, 0x2A, 0x01, 0xD0, 0xEC,
+	0xB2, 0x20, 0xE0, 0xDC, 0x78, 0x25, 0x4A, 0x26, 0x4B, 0x12, 0x78, 0x1B, 0x78, 0x00, 0x2C, 0x3C,
+	0x46, 0x09, 0xD1, 0x01, 0x2C, 0x03, 0xD1, 0x38, 0x9E, 0xEC, 0xB2, 0xF6, 0xB2, 0x0F, 0xE0, 0x38,
+	0x9C, 0xEE, 0xB2, 0xE4, 0xB2, 
+	0x00, 0x00, 0x8F, 0x00, 0x80, 0x04, 0xE0, 0x00, 0x2C, 0x06, 0xD1, 0x38, 0x9E, 0xEC, 0xB2, 0xF6,
+	0xB2, 0x03, 0x96, 0x1E, 0x46, 0x02, 0x92, 0x05, 0xE0, 0x38, 0x9C, 0xEE, 0xB2, 0xE4, 0xB2, 0x03,
+	0x96, 0x16, 0x46, 0x02, 0x93, 0x38, 0x9B, 0x9C, 0x42, 0x40, 0xD1, 0x38, 0x9A, 0xEB, 0xB2, 0xAA,
+	0x18, 0x9C, 0x46, 0x15, 0xAF, 0x3D, 0x92, 0x0C, 0xE0, 0x62, 0x46, 0x12, 0x4B, 0x52, 0x00, 0x9A,
+	0x5A, 0x43, 0x00, 0xFA, 0x52, 0x40, 0x1C, 0x62, 0x46, 0x52, 0x1C, 0xD2, 0xB2, 0x94, 0x46, 0x3D,
+	0x9A, 0xC0, 0xB2, 0x62, 0x45, 0xF0, 0xD8, 0x00, 0x22, 0x21, 0xE0, 0x00, 0x00, 0x92, 0x08, 0x00,
+	0x20, 0xD0, 0xE7, 0x00, 0x00, 0x9D, 0x00, 0x00, 0x20, 0x9E, 0x00, 0x00, 0x20, 0xE4, 0x00, 0x00,
+	0x20, 0xF0, 0xE9, 0x00, 0x00, 0xE0, 0xE6, 0x00, 0x00, 0x6C, 0x02, 0x00, 0x20, 0x62, 0x02, 0x00,
+	0x20, 0x61, 0x02, 0x00, 0x20, 
+	0x00, 0x00, 0x90, 0x00, 0x80, 0x32, 0x0B, 0x00, 0x20, 0x62, 0x46, 0xFA, 0x4B, 0x52, 0x00, 0x9A,
+	0x5A, 0x43, 0x00, 0xFA, 0x52, 0x40, 0x1C, 0x62, 0x46, 0x52, 0x1C, 0xC0, 0xB2, 0xD2, 0xB2, 0x94,
+	0x46, 0xAA, 0x42, 0xF1, 0xD3, 0x00, 0x20, 0x01, 0x22, 0x01, 0x92, 0x0F, 0xE0, 0xEA, 0x18, 0x15,
+	0xAF, 0x3C, 0x92, 0x08, 0xE0, 0x62, 0x46, 0x53, 0x00, 0xEE, 0x4A, 0xD2, 0x5A, 0xFA, 0x52, 0x62,
+	0x46, 0x52, 0x1C, 0xD2, 0xB2, 0x94, 0x46, 0x3C, 0x9B, 0x63, 0x45, 0xF3, 0xD8, 0x00, 0x22, 0x94,
+	0x46, 0x09, 0x92, 0x2E, 0xE0, 0x53, 0x00, 0x15, 0xAF, 0xFB, 0x5E, 0x37, 0x9F, 0xBB, 0x42, 0x1E,
+	0xDB, 0x0B, 0x9F, 0x0B, 0x93, 0xBB, 0x42, 0x0C, 0xDB, 0x13, 0xAB, 0x1A, 0x54, 0x01, 0x23, 0x9C,
+	0x46, 0x00, 0x23, 0x09, 0x93, 0x43, 0x1C, 0xDB, 0xB2, 0xDF, 0x4F, 0x02, 0x2B, 0xFB, 0x71, 0x74,
+	0xD8, 0x08, 0xE0, 0x09, 0x9B, 
+	0x00, 0x00, 0x91, 0x00, 0x80, 0x00, 0x2B, 0x05, 0xD1, 0x40, 0x1C, 0x01, 0x23, 0x09, 0x93, 0x00,
+	0x23, 0xC0, 0xB2, 0x9C, 0x46, 0x05, 0x9B, 0x5B, 0x1C, 0xDB, 0xB2, 0x05, 0x93, 0x07, 0xE0, 0x63,
+	0x46, 0x0B, 0x97, 0x00, 0x2B, 0x03, 0xD0, 0x00, 0x23, 0x40, 0x1C, 0x9C, 0x46, 0xC0, 0xB2, 0x52,
+	0x1C, 0xD2, 0xB2, 0xA2, 0x42, 0xCE, 0xD3, 0x3F, 0x98, 0x00, 0x23, 0x00, 0x28, 0xCE, 0x48, 0x9C,
+	0x46, 0xC0, 0x79, 0x04, 0xD0, 0x00, 0x28, 0x76, 0xD0, 0x01, 0x20, 0x41, 0xB0, 0xF0, 0xBD, 0x3B,
+	0x90, 0x00, 0x28, 0xF8, 0xD0, 0x38, 0x9F, 0x20, 0x46, 0xED, 0x19, 0x36, 0x9A, 0x3A, 0x95, 0x29,
+	0xE0, 0x47, 0x00, 0x15, 0xAD, 0xED, 0x5F, 0x36, 0x9F, 0xBD, 0x42, 0x1A, 0xDB, 0x95, 0x42, 0x2A,
+	0x46, 0x0E, 0xDB, 0x4B, 0x00, 0x0E, 0xAD, 0xEA, 0x52, 0x03, 0x1B, 0x11, 0xAD, 0x6B, 0x54, 0x00,
+	0x25, 0xAC, 0x46, 0x4D, 0x1C, 
+	0x00, 0x00, 0x92, 0x00, 0x80, 0xED, 0xB2, 0x01, 0x23, 0x06, 0x95, 0x05, 0x2D, 0x2D, 0xD2, 0x0E,
+	0xE0, 0x65, 0x46, 0x00, 0x2D, 0x0B, 0xD1, 0x49, 0x1C, 0x01, 0x23, 0x9C, 0x46, 0xC9, 0xB2, 0x00,
+	0x23, 0x05, 0xE0, 0x3A, 0x46, 0x00, 0x2B, 0x02, 0xD0, 0x00, 0x23, 0x49, 0x1C, 0xC9, 0xB2, 0x40,
+	0x1C, 0x3A, 0x9D, 0xC0, 0xB2, 0x85, 0x42, 0xD3, 0xD8, 0x00, 0x20, 0x3B, 0x9D, 0x04, 0x90, 0x0A,
+	0x90, 0x6B, 0x46, 0x38, 0x20, 0x18, 0x5E, 0x09, 0x90, 0x00, 0x27, 0x06, 0x98, 0x07, 0x97, 0x00,
+	0x28, 0xBB, 0xD0, 0x00, 0x90, 0x3E, 0x98, 0x00, 0x7C, 0x09, 0x99, 0x48, 0x43, 0x64, 0x21, 0x09,
+	0xF0, 0xB8, 0xF8, 0x00, 0xB2, 0x84, 0x46, 0x20, 0x46, 0x50, 0xE0, 0xA9, 0xE0, 0x41, 0x00, 0x15,
+	0xAA, 0x51, 0x5E, 0x61, 0x45, 0x13, 0xDB, 0x09, 0x9A, 0x91, 0x42, 0x03, 0xDB, 0x09, 0x91, 0x01,
+	0x1B, 0x13, 0xAA, 0x51, 0x55, 
+	0x00, 0x00, 0x93, 0x00, 0x80, 0x3A, 0x99, 0x49, 0x1E, 0x81, 0x42, 0x01, 0xD1, 0x6D, 0x1C, 0xED,
+	0xB2, 0x04, 0x99, 0x49, 0x1C, 0xC9, 0xB2, 0x04, 0x91, 0x01, 0x21, 0x0A, 0x91, 0x34, 0xE0, 0x0A,
+	0x99, 0x00, 0x29, 0x31, 0xD0, 0x00, 0x21, 0x0A, 0x91, 0x07, 0x9B, 0x0C, 0xAA, 0x04, 0x99, 0xD1,
+	0x54, 0x00, 0x21, 0x04, 0x91, 0x09, 0xE0, 0x85, 0xE0, 0x11, 0xAA, 0x52, 0x5C, 0x12, 0x19, 0x82,
+	0x42, 0x01, 0xD9, 0x0F, 0x46, 0x04, 0xE0, 0x49, 0x1C, 0x09, 0xB2, 0x00, 0x9A, 0x91, 0x42, 0xF3,
+	0xDB, 0x00, 0x2F, 0x13, 0xD0, 0x79, 0x00, 0x0E, 0xA8, 0x40, 0x5E, 0x39, 0x90, 0x3E, 0x99, 0x09,
+	0x7C, 0x48, 0x43, 0x64, 0x21, 0x09, 0xF0, 0x75, 0xF8, 0x00, 0xB2, 0x84, 0x46, 0x39, 0x98, 0x09,
+	0x90, 0x11, 0xA8, 0xC1, 0x5D, 0xA0, 0x1E, 0x08, 0x18, 0xC0, 0xB2, 0x00, 0x27, 0x6D, 0x1C, 0x07,
+	0x99, 0xED, 0xB2, 0x49, 0x1C, 
+	0x00, 0x00, 0x94, 0x00, 0x80, 0xC9, 0xB2, 0x07, 0x91, 0x40, 0x1C, 0xC0, 0xB2, 0x3A, 0x99, 0x81,
+	0x42, 0xAC, 0xD8, 0x3B, 0x98, 0x28, 0x1A, 0xC0, 0xB2, 0x02, 0x28, 0x51, 0xD8, 0x3B, 0x99, 0x01,
+	0x29, 0x2A, 0xD1, 0x01, 0x28, 0x0E, 0xD1, 0x74, 0x48, 0x10, 0xAB, 0x19, 0x7B, 0x3C, 0x30, 0x01,
+	0x70, 0x59, 0x7B, 0x41, 0x70, 0x05, 0x99, 0x81, 0x70, 0x08, 0xAB, 0x19, 0x7C, 0xC1, 0x70, 0x01,
+	0x20, 0x08, 0x90, 0x42, 0xE0, 0x02, 0x28, 0x3D, 0xD1, 0x01, 0x98, 0x10, 0xAB, 0x00, 0x28, 0x6B,
+	0x49, 0x18, 0x7B, 0x08, 0x70, 0x05, 0xD0, 0x5A, 0x7B, 0x4A, 0x70, 0x09, 0x1D, 0x08, 0x70, 0x98,
+	0x7B, 0x06, 0xE0, 0x9A, 0x7B, 0x4A, 0x70, 0x65, 0x49, 0x10, 0xAB, 0x09, 0x1D, 0x08, 0x70, 0x58,
+	0x7B, 0x48, 0x70, 0x02, 0x20, 0x08, 0x90, 0x3C, 0xE0, 0x02, 0x29, 0x23, 0xD1, 0x01, 0x28, 0x0C,
+	0xD1, 0x40, 0x99, 0x08, 0xAB, 
+	0x00, 0x00, 0x95, 0x00, 0x80, 0x18, 0x7C, 0xC9, 0x7F, 0x88, 0x42, 0x19, 0xD8, 0x10, 0xAB, 0x5B,
+	0x49, 0x18, 0x7B, 0x08, 0x70, 0x98, 0x7B, 0x48, 0x70, 0x0C, 0xE0, 0x02, 0x28, 0x12, 0xD1, 0x10,
+	0xAB, 0xD8, 0x7B, 0x99, 0x7B, 0x42, 0x1A, 0x52, 0x1D, 0x0A, 0x2A, 0x09, 0xD8, 0x53, 0x4A, 0x1B,
+	0x7B, 0x13, 0x70, 0x51, 0x70, 0x51, 0x49, 0x10, 0xAB, 0x5A, 0x7B, 0x09, 0x1D, 0x0A, 0x70, 0xD7,
+	0xE7, 0x03, 0x20, 0x02, 0xE7, 0x08, 0x98, 0x01, 0x28, 0x11, 0xD1, 0x4C, 0x49, 0x08, 0x78, 0xB0,
+	0x42, 0x2E, 0xD3, 0xA2, 0x1B, 0x52, 0x1E, 0x90, 0x42, 0x2A, 0xDC, 0x48, 0x78, 0x02, 0x99, 0x88,
+	0x42, 0x26, 0xD3, 0x03, 0x9A, 0x51, 0x1A, 0x49, 0x1E, 0x88, 0x42, 0x24, 0xDD, 0x20, 0xE0, 0x02,
+	0x28, 0x21, 0xD1, 0x42, 0x4A, 0x10, 0x78, 0xB0, 0x42, 0x1A, 0xD3, 0xA1, 0x1B, 0x49, 0x1E, 0x88,
+	0x42, 0x16, 0xDC, 0x52, 0x78, 
+	0x00, 0x00, 0x96, 0x00, 0x80, 0x02, 0x98, 0x82, 0x42, 0x12, 0xD3, 0x02, 0x9B, 0x03, 0x98, 0xC0,
+	0x1A, 0x40, 0x1E, 0x82, 0x42, 0x0C, 0xDC, 0x39, 0x4B, 0x1B, 0x1D, 0x1A, 0x78, 0xB2, 0x42, 0x07,
+	0xD3, 0x8A, 0x42, 0x05, 0xDC, 0x59, 0x78, 0x02, 0x9A, 0x91, 0x42, 0x01, 0xD3, 0x81, 0x42, 0x02,
+	0xDD, 0x31, 0x49, 0x01, 0x20, 0x08, 0x72, 0x30, 0x49, 0x08, 0x98, 0x88, 0x71, 0x08, 0x98, 0xC4,
+	0xE6, 0xFF, 0xB5, 0x2D, 0x48, 0x00, 0x25, 0x40, 0x8A, 0x00, 0x90, 0x2D, 0x48, 0x2A, 0x46, 0x03,
+	0x78, 0x28, 0x46, 0xAC, 0x46, 0x29, 0x46, 0x27, 0x4F, 0x03, 0x95, 0x14, 0xE0, 0x4C, 0x00, 0x3C,
+	0x5F, 0x00, 0x9E, 0xB4, 0x42, 0x0D, 0xDB, 0x00, 0x2A, 0x03, 0xD1, 0x40, 0x1C, 0x02, 0x28, 0x0E,
+	0xD0, 0x01, 0x22, 0xAC, 0x42, 0x01, 0xDD, 0x25, 0x46, 0x03, 0x91, 0x64, 0x46, 0x64, 0x1C, 0xA4,
+	0x46, 0x00, 0xE0, 0x00, 0x22, 
+	0x00, 0x00, 0x97, 0x00, 0x80, 0x49, 0x1C, 0x99, 0x42, 0xE8, 0xD3, 0x00, 0x28, 0x2F, 0xD0, 0x1D,
+	0x49, 0x09, 0x78, 0xC9, 0x18, 0x01, 0x91, 0x00, 0x21, 0x8E, 0x46, 0x0C, 0x46, 0x0A, 0x46, 0x0D,
+	0x46, 0x02, 0x91, 0x19, 0x46, 0x14, 0xE0, 0x13, 0x4F, 0x4E, 0x00, 0xBE, 0x5F, 0x00, 0x9F, 0xBE,
+	0x42, 0x0C, 0xDB, 0x00, 0x2C, 0x03, 0xD1, 0x52, 0x1C, 0x02, 0x2A, 0x0C, 0xD0, 0x01, 0x24, 0x76,
+	0x45, 0x02, 0xDD, 0xB6, 0x46, 0xCE, 0x1A, 0x02, 0x96, 0x6D, 0x1C, 0x00, 0xE0, 0x00, 0x24, 0x49,
+	0x1C, 0x01, 0x9E, 0xB1, 0x42, 0xE7, 0xD3, 0x50, 0x43, 0x01, 0x28, 0x08, 0xD1, 0x06, 0x49, 0x03,
+	0x9A, 0x1C, 0x31, 0x0A, 0x70, 0x02, 0x9A, 0x4A, 0x70, 0x62, 0x46, 0x8A, 0x70, 0xCD, 0x70, 0x04,
+	0xB0, 0xF0, 0xBD, 0x00, 0x00, 0x32, 0x0B, 0x00, 0x20, 0xE4, 0x00, 0x00, 0x20, 0x20, 0x01, 0x00,
+	0x20, 0x9E, 0x00, 0x00, 0x20, 
+	0x00, 0x00, 0x98, 0x00, 0x80, 0x9D, 0x00, 0x00, 0x20, 0x10, 0xB5, 0x0C, 0x46, 0xC9, 0x00, 0x62,
+	0x18, 0x00, 0x28, 0x07, 0xD1, 0x46, 0x49, 0x08, 0x46, 0x63, 0x30, 0x08, 0xF0, 0xDF, 0xFE, 0x45,
+	0x48, 0x04, 0x73, 0x10, 0xBD, 0x42, 0x49, 0x42, 0x48, 0x63, 0x31, 0x08, 0xF0, 0xD7, 0xFE, 0x10,
+	0xBD, 0x40, 0x49, 0x00, 0x28, 0x03, 0xD0, 0x03, 0x28, 0x02, 0xD1, 0x3F, 0x48, 0x00, 0x7F, 0x48,
+	0x73, 0x70, 0x47, 0x4A, 0x78, 0x0B, 0x78, 0x12, 0x02, 0x1A, 0x43, 0x02, 0x70, 0x12, 0x0A, 0x42,
+	0x70, 0xCA, 0x79, 0xC2, 0x71, 0x0A, 0x7A, 0x02, 0x72, 0xCA, 0x78, 0x8B, 0x78, 0x12, 0x02, 0x1A,
+	0x43, 0x82, 0x70, 0x12, 0x0A, 0xC2, 0x70, 0x4A, 0x79, 0x0B, 0x79, 0x12, 0x02, 0x1A, 0x43, 0x02,
+	0x71, 0x12, 0x0A, 0x42, 0x71, 0x82, 0x79, 0x89, 0x79, 0x12, 0x07, 0x12, 0x0F, 0x09, 0x09, 0x09,
+	0x01, 0x0A, 0x43, 0x82, 0x71, 
+	0x00, 0x00, 0x99, 0x00, 0x80, 0x70, 0x47, 0xF1, 0xB5, 0x2A, 0x48, 0x40, 0x79, 0x01, 0x28, 0x4D,
+	0xD1, 0x00, 0x98, 0x0B, 0x24, 0x00, 0x78, 0x0B, 0x28, 0x00, 0xD8, 0x04, 0x46, 0x00, 0x25, 0x27,
+	0x4E, 0x42, 0xE0, 0x00, 0x98, 0x69, 0x00, 0x0A, 0x18, 0x50, 0x78, 0x91, 0x78, 0x57, 0x8C, 0x24,
+	0x4A, 0x03, 0x46, 0x12, 0x78, 0xBC, 0x46, 0x53, 0x43, 0x5B, 0x18, 0x22, 0x4F, 0x5B, 0x00, 0xFB,
+	0x5E, 0x63, 0x45, 0x05, 0xD9, 0x29, 0x46, 0x00, 0x98, 0xFE, 0xF7, 0x5A, 0xFF, 0x64, 0x1E, 0x2B,
+	0xE0, 0x1D, 0x4B, 0x1B, 0x78, 0x5B, 0x1E, 0x98, 0x42, 0x06, 0xD1, 0x80, 0x18, 0x40, 0x00, 0x83,
+	0x19, 0x20, 0x3B, 0x1E, 0x27, 0xDF, 0x5F, 0x05, 0xE0, 0x00, 0x28, 0x07, 0xD1, 0x50, 0x00, 0x83,
+	0x19, 0x02, 0x27, 0xDF, 0x5F, 0x30, 0x5E, 0x80, 0x10, 0x87, 0x42, 0xE3, 0xDB, 0x52, 0x1E, 0x91,
+	0x42, 0x09, 0xD1, 0x48, 0x00, 
+	0x00, 0x00, 0x9A, 0x00, 0x80, 0x81, 0x19, 0x20, 0x39, 0x1E, 0x22, 0x30, 0x5E, 0x8A, 0x5E, 0x80,
+	0x10, 0x82, 0x42, 0xD7, 0xDB, 0x07, 0xE0, 0x00, 0x29, 0x05, 0xD1, 0x02, 0x20, 0x71, 0x5E, 0x30,
+	0x5E, 0x89, 0x10, 0x88, 0x42, 0xCE, 0xDB, 0x6D, 0x1C, 0xA5, 0x42, 0xBA, 0xD3, 0xF8, 0xBD, 0x00,
+	0x00, 0x88, 0x03, 0x00, 0x20, 0xE4, 0x00, 0x00, 0x20, 0xD0, 0xE7, 0x00, 0x00, 0x32, 0x0B, 0x00,
+	0x20, 0x9E, 0x00, 0x00, 0x20, 0x92, 0x08, 0x00, 0x20, 0x9D, 0x00, 0x00, 0x20, 0xFC, 0x48, 0x82,
+	0x8D, 0xFC, 0x49, 0x0A, 0x81, 0xC0, 0x8D, 0x48, 0x81, 0xF9, 0x48, 0x20, 0x30, 0x02, 0x7A, 0x8A,
+	0x64, 0x40, 0x7A, 0xC8, 0x64, 0x70, 0x47, 0x00, 0xB5, 0xF6, 0x4B, 0x58, 0x78, 0x00, 0x28, 0x03,
+	0xD1, 0xFF, 0xF7, 0xEC, 0xFF, 0x01, 0x20, 0x58, 0x70, 0x00, 0xBD, 0xF2, 0x49, 0x00, 0x28, 0x01,
+	0xD0, 0x03, 0x28, 0x02, 0xD1, 
+	0x00, 0x00, 0x9B, 0x00, 0x80, 0xEE, 0x48, 0x00, 0x1D, 0x03, 0xE0, 0x02, 0x28, 0x03, 0xD1, 0xEC,
+	0x48, 0x10, 0x30, 0x08, 0x64, 0x70, 0x47, 0x01, 0x28, 0xFC, 0xD1, 0xE9, 0x48, 0x1C, 0x30, 0xF8,
+	0xE7, 0x10, 0xB5, 0x1F, 0x21, 0xE8, 0x48, 0x08, 0xF0, 0x76, 0xFE, 0xE7, 0x48, 0x1F, 0x21, 0x1F,
+	0x30, 0x08, 0xF0, 0x71, 0xFE, 0xE4, 0x48, 0x1F, 0x21, 0x3E, 0x30, 0x08, 0xF0, 0x6C, 0xFE, 0xE2,
+	0x48, 0x1F, 0x21, 0x5D, 0x30, 0x08, 0xF0, 0x67, 0xFE, 0x10, 0xBD, 0xF8, 0xB5, 0xDC, 0x49, 0xDF,
+	0x4A, 0x0C, 0x46, 0xDC, 0x4E, 0x20, 0x34, 0x00, 0x28, 0x01, 0xD1, 0x88, 0x8D, 0x02, 0xE0, 0x02,
+	0x28, 0x0A, 0xD1, 0xE0, 0x7E, 0x30, 0x81, 0xC8, 0x8D, 0x70, 0x81, 0x20, 0x7A, 0xB0, 0x64, 0x60,
+	0x7A, 0xF0, 0x64, 0x10, 0x89, 0x30, 0x65, 0xF8, 0xBD, 0x03, 0x28, 0xFC, 0xD1, 0xD3, 0x48, 0x40,
+	0x30, 0x80, 0x8A, 0x30, 0x65, 
+	0x00, 0x00, 0x9C, 0x00, 0x80, 0x88, 0x8E, 0x00, 0x28, 0x3E, 0xD0, 0xF0, 0x78, 0x00, 0x28, 0x02,
+	0xD0, 0xF0, 0x6B, 0x40, 0x1C, 0xF0, 0x63, 0x0D, 0x46, 0x89, 0x8E, 0xF0, 0x6B, 0x81, 0x42, 0x26,
+	0xD8, 0xAA, 0x8E, 0xCB, 0x49, 0x00, 0x27, 0x09, 0x78, 0xCA, 0x4B, 0x82, 0x42, 0x12, 0xD1, 0x00,
+	0x29, 0x0E, 0xD1, 0xA8, 0x8D, 0x30, 0x81, 0xE8, 0x8D, 0x70, 0x81, 0xA0, 0x7D, 0xB0, 0x64, 0xA0,
+	0x7D, 0xF0, 0x64, 0xA0, 0x7D, 0x40, 0x00, 0x18, 0x1A, 0xF0, 0x63, 0xFF, 0xF7, 0xA9, 0xFF, 0x0E,
+	0xE0, 0xF7, 0x63, 0x0C, 0xE0, 0x98, 0x42, 0x05, 0xD2, 0xAA, 0x8E, 0x82, 0x42, 0x02, 0xD2, 0x00,
+	0x29, 0x05, 0xD0, 0x01, 0xE0, 0x98, 0x42, 0x02, 0xD1, 0xFF, 0xF7, 0x9A, 0xFF, 0xF0, 0xE7, 0xA8,
+	0x8E, 0xF1, 0x6B, 0x88, 0x42, 0xBF, 0xD9, 0x28, 0x8E, 0x30, 0x81, 0x68, 0x8E, 0x70, 0x81, 0x20,
+	0x7A, 0xB0, 0x64, 0x60, 0x7A, 
+	0x00, 0x00, 0x9D, 0x00, 0x80, 0xF0, 0x64, 0xF8, 0xBD, 0x08, 0x8E, 0x30, 0x81, 0x48, 0x8E, 0xF5,
+	0xE7, 0xFF, 0xB5, 0x91, 0xB0, 0x00, 0x20, 0x07, 0x90, 0x06, 0x90, 0x01, 0x20, 0xA9, 0x4C, 0x04,
+	0x90, 0x20, 0x6C, 0x16, 0x46, 0x01, 0x88, 0x08, 0x91, 0x1E, 0x99, 0x01, 0x29, 0x10, 0xD1, 0x02,
+	0xF0, 0xDF, 0xF8, 0x00, 0x28, 0x01, 0xD0, 0x02, 0x20, 0x04, 0x90, 0x20, 0x6C, 0x01, 0x79, 0x07,
+	0x91, 0x05, 0x21, 0x41, 0x56, 0x06, 0x91, 0x08, 0x98, 0x70, 0x21, 0x08, 0x40, 0x00, 0x09, 0x0B,
+	0xE0, 0x03, 0x29, 0x0A, 0xD1, 0x01, 0x7A, 0x07, 0x91, 0x09, 0x21, 0x41, 0x56, 0x06, 0x91, 0x07,
+	0x21, 0x08, 0x98, 0x09, 0x03, 0x08, 0x40, 0x00, 0x0B, 0x08, 0x90, 0x00, 0x20, 0x05, 0x90, 0x94,
+	0x48, 0x40, 0x30, 0x10, 0x90, 0x05, 0x98, 0x5E, 0xE1, 0x00, 0x20, 0x03, 0x90, 0x14, 0x98, 0x51,
+	0xE1, 0xFE, 0xF7, 0x12, 0xFA, 
+	0x00, 0x00, 0x9E, 0x00, 0x80, 0x02, 0x90, 0x0B, 0x98, 0xFE, 0xF7, 0xDA, 0xF9, 0x16, 0x21, 0x01,
+	0x90, 0x48, 0x43, 0x91, 0x49, 0x40, 0x18, 0x0C, 0x90, 0x00, 0x20, 0x0A, 0x90, 0x04, 0x46, 0x05,
+	0x46, 0x09, 0x90, 0x0C, 0x98, 0x07, 0x88, 0x02, 0xF0, 0xA3, 0xF8, 0x00, 0x28, 0x0A, 0xD0, 0x1E,
+	0x98, 0x01, 0x28, 0x07, 0xD1, 0x05, 0x98, 0x00, 0x28, 0x02, 0xD1, 0x3F, 0x07, 0x3F, 0x0F, 0x01,
+	0xE0, 0xF0, 0x20, 0x07, 0x40, 0xF8, 0xB2, 0x86, 0x46, 0x1B, 0x98, 0x00, 0x28, 0x67, 0xD0, 0x08,
+	0x98, 0xC0, 0x07, 0x64, 0xD0, 0x00, 0x21, 0xF8, 0x07, 0x21, 0xD0, 0x0C, 0x98, 0x40, 0x18, 0x00,
+	0x79, 0x02, 0x9A, 0x11, 0x9B, 0x80, 0x18, 0x12, 0x9A, 0x40, 0x00, 0x12, 0x5E, 0x30, 0x5E, 0x12,
+	0x1A, 0x03, 0x98, 0x08, 0x18, 0x40, 0x00, 0x18, 0x5E, 0x80, 0x1A, 0x02, 0x1E, 0x00, 0xDA, 0x42,
+	0x42, 0x1B, 0x9B, 0x9A, 0x42, 
+	0x00, 0x00, 0x9F, 0x00, 0x80, 0x01, 0xDB, 0xFF, 0x2B, 0x09, 0xD1, 0x0A, 0x9A, 0x24, 0x18, 0x52,
+	0x1C, 0x0A, 0x92, 0x00, 0x28, 0x03, 0xDA, 0x09, 0x9A, 0x52, 0x1C, 0x2D, 0x18, 0x09, 0x92, 0x7F,
+	0x08, 0x49, 0x1C, 0x00, 0x2F, 0xD7, 0xD1, 0x0A, 0x98, 0x01, 0x28, 0x0F, 0xDD, 0x6B, 0x49, 0x80,
+	0x00, 0x08, 0x58, 0x60, 0x43, 0x04, 0x12, 0x09, 0x98, 0x80, 0x00, 0x08, 0x58, 0x68, 0x43, 0x05,
+	0x12, 0x00, 0x2C, 0x00, 0xDA, 0x64, 0x1C, 0x00, 0x2D, 0x00, 0xDA, 0x6D, 0x1C, 0x1E, 0x98, 0x01,
+	0x28, 0x25, 0xD1, 0x5C, 0x4A, 0x01, 0x98, 0x60, 0x32, 0x10, 0x56, 0x01, 0x1E, 0x00, 0xDA, 0x41,
+	0x42, 0x10, 0x9B, 0x5B, 0x7A, 0x99, 0x42, 0x00, 0xD1, 0x00, 0x20, 0x00, 0x2C, 0x08, 0xDD, 0x00,
+	0x28, 0x12, 0xDB, 0x10, 0x99, 0x09, 0x23, 0xCB, 0x56, 0x83, 0x42, 0x0E, 0xDD, 0x40, 0x1C, 0x0C,
+	0xE0, 0x00, 0x2C, 0x09, 0xDA, 
+	0x00, 0x00, 0xA0, 0x00, 0x80, 0x00, 0x28, 0x07, 0xDC, 0x10, 0x99, 0x09, 0x23, 0xCB, 0x56, 0x59,
+	0x42, 0x81, 0x42, 0x02, 0xDA, 0x40, 0x1E, 0x00, 0xE0, 0x00, 0x20, 0x01, 0x99, 0x50, 0x54, 0x00,
+	0x20, 0x84, 0x46, 0x70, 0x46, 0xC0, 0x07, 0x79, 0xD0, 0x0C, 0x99, 0x60, 0x46, 0x08, 0x18, 0x00,
+	0x79, 0x02, 0x99, 0x41, 0x18, 0x1E, 0x98, 0x03, 0x28, 0x04, 0xD1, 0x49, 0x48, 0x02, 0x6A, 0xC0,
+	0x69, 0x10, 0x18, 0x09, 0x1A, 0x03, 0x9A, 0x60, 0x46, 0x80, 0x18, 0x11, 0x9A, 0x40, 0x00, 0x10,
+	0x5E, 0x4A, 0x00, 0x0F, 0x90, 0x12, 0x99, 0x08, 0x9F, 0x89, 0x5E, 0xB3, 0x5E, 0x0E, 0x93, 0xFF,
+	0x07, 0x15, 0xD0, 0xCB, 0x1A, 0x98, 0x42, 0x02, 0xDB, 0x07, 0x1B, 0x9F, 0x42, 0x04, 0xDB, 0x98,
+	0x42, 0x04, 0xDC, 0x07, 0x1B, 0x9F, 0x42, 0x01, 0xDD, 0x18, 0x46, 0x08, 0xE0, 0x67, 0x1B, 0xFF,
+	0x1C, 0x06, 0x2F, 0x03, 0xD9, 
+	0x00, 0x00, 0xA1, 0x00, 0x80, 0x98, 0x42, 0x01, 0xDC, 0x40, 0x1B, 0x00, 0xE0, 0x00, 0x1B, 0x08,
+	0x9B, 0x5B, 0x07, 0x10, 0xD5, 0x43, 0x1A, 0x88, 0x42, 0x00, 0xDC, 0x0B, 0x1A, 0x06, 0x9F, 0xBB,
+	0x42, 0x09, 0xDA, 0x07, 0x9B, 0x00, 0x2B, 0x02, 0xD1, 0x40, 0x18, 0x40, 0x10, 0x03, 0xE0, 0x4B,
+	0x00, 0xCB, 0x18, 0x18, 0x18, 0x80, 0x10, 0x08, 0x9B, 0x9B, 0x07, 0x06, 0xD5, 0x88, 0x42, 0x01,
+	0xDD, 0x40, 0x1E, 0x02, 0xE0, 0x88, 0x42, 0x00, 0xDA, 0x40, 0x1C, 0x1E, 0x9B, 0x01, 0x2B, 0x20,
+	0xD1, 0x08, 0x9B, 0xDB, 0x07, 0x1D, 0xD0, 0x10, 0x9B, 0x5B, 0x7A, 0x00, 0x2B, 0x19, 0xD0, 0x19,
+	0x4B, 0x01, 0x9F, 0x60, 0x33, 0xDB, 0x57, 0x10, 0x9F, 0x7F, 0x7A, 0xBB, 0x42, 0x06, 0xD1, 0x0F,
+	0x9B, 0x83, 0x42, 0x0E, 0xDD, 0x0E, 0x9B, 0x40, 0x1C, 0x5B, 0x1E, 0x09, 0xE0, 0x10, 0x9F, 0x7F,
+	0x7A, 0xFB, 0x42, 0x06, 0xD1, 
+	0x00, 0x00, 0xA2, 0x00, 0x80, 0x0F, 0x9B, 0x83, 0x42, 0x03, 0xDA, 0x0E, 0x9B, 0x40, 0x1E, 0x5B,
+	0x1C, 0xB3, 0x52, 0x14, 0x4F, 0xB8, 0x42, 0x02, 0xDD, 0x38, 0x46, 0x05, 0xE0, 0x32, 0xE0, 0x11,
+	0x4B, 0xDB, 0x43, 0x98, 0x42, 0x00, 0xDA, 0x18, 0x46, 0xB3, 0x5E, 0x0D, 0x93, 0x1B, 0x18, 0x5B,
+	0x1A, 0xBB, 0x42, 0x19, 0xDD, 0x0D, 0x98, 0x3B, 0x46, 0x08, 0x1A, 0xC0, 0x19, 0x1F, 0xE0, 0x00,
+	0x00, 0x60, 0xE8, 0x00, 0x00, 0x28, 0x01, 0x00, 0x20, 0x16, 0x08, 0x00, 0x20, 0xD0, 0xE7, 0x00,
+	0x00, 0xC4, 0x01, 0x00, 0x20, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xEC, 0x00, 0x00, 0xD8, 0xDC, 0x00,
+	0x00, 0xF0, 0xE9, 0x00, 0x00, 0xFF, 0x1F, 0x00, 0x00, 0xFF, 0x4F, 0xBB, 0x42, 0x07, 0xDA, 0x0D,
+	0x98, 0x08, 0x1A, 0x79, 0x42, 0x40, 0x1A, 0x12, 0x99, 0x88, 0x52, 0xB7, 0x52, 0x02, 0xE0, 0x12,
+	0x99, 0x88, 0x52, 0xB3, 0x52, 
+	0x00, 0x00, 0xA3, 0x00, 0x80, 0x70, 0x46, 0x40, 0x08, 0x86, 0x46, 0x60, 0x46, 0x40, 0x1C, 0x84,
+	0x46, 0x70, 0x46, 0x00, 0x28, 0x00, 0xD0, 0x44, 0xE7, 0x03, 0x98, 0x08, 0x30, 0xC0, 0xB2, 0x03,
+	0x90, 0x0B, 0x98, 0x40, 0x1C, 0x0B, 0x90, 0x1A, 0x99, 0x88, 0x42, 0x00, 0xD2, 0xA8, 0xE6, 0x05,
+	0x98, 0x40, 0x1C, 0xC0, 0xB2, 0x05, 0x90, 0x04, 0x99, 0x88, 0x42, 0x00, 0xD2, 0x9C, 0xE6, 0x15,
+	0xB0, 0xF0, 0xBD, 0x70, 0xB5, 0x0E, 0x46, 0xE9, 0x49, 0x86, 0xB0, 0x0C, 0x6B, 0x03, 0x28, 0x02,
+	0xD1, 0x23, 0x46, 0xC8, 0x6B, 0x07, 0xE0, 0x01, 0x28, 0x02, 0xD1, 0x23, 0x46, 0x48, 0x6B, 0x02,
+	0xE0, 0x48, 0x6B, 0x03, 0x19, 0x88, 0x6B, 0xE2, 0x49, 0xC5, 0x18, 0x01, 0x22, 0x08, 0x46, 0x4A,
+	0x30, 0x02, 0x90, 0xE0, 0x48, 0x04, 0x92, 0x03, 0x91, 0x82, 0x78, 0x18, 0x1B, 0x00, 0x01, 0x01,
+	0x92, 0x80, 0x19, 0x00, 0x95, 
+	0x00, 0x00, 0xA4, 0x00, 0x80, 0xDC, 0x4A, 0xDD, 0x49, 0xFF, 0xF7, 0x42, 0xFE, 0x06, 0xB0, 0x70,
+	0xBD, 0xFF, 0xB5, 0x99, 0xB0, 0x00, 0x20, 0x04, 0x90, 0x01, 0x20, 0x03, 0x90, 0xD8, 0x4C, 0x00,
+	0x20, 0x60, 0x65, 0xA0, 0x65, 0xE0, 0x65, 0xD7, 0x48, 0x01, 0x8C, 0xD7, 0x48, 0x02, 0x91, 0x00,
+	0x88, 0x81, 0x42, 0x00, 0xD9, 0x02, 0x90, 0x01, 0xF0, 0x1B, 0xFF, 0x00, 0x28, 0x01, 0xD0, 0x02,
+	0x20, 0x00, 0xE0, 0x01, 0x20, 0x06, 0x90, 0xCE, 0x48, 0x00, 0x6C, 0x01, 0x88, 0x49, 0x07, 0x49,
+	0x0F, 0x0A, 0x91, 0x81, 0x78, 0x09, 0x91, 0x03, 0x21, 0x41, 0x56, 0xC6, 0x48, 0x08, 0x91, 0x18,
+	0x90, 0x40, 0x78, 0x0C, 0x90, 0x00, 0x20, 0x07, 0x90, 0xC0, 0x48, 0x40, 0x30, 0x17, 0x90, 0x07,
+	0x98, 0xE0, 0xE1, 0x1B, 0x98, 0xD5, 0xE1, 0xFE, 0xF7, 0x23, 0xF8, 0x01, 0x90, 0xC3, 0x49, 0x19,
+	0x98, 0x09, 0x78, 0x48, 0x43, 
+	0x00, 0x00, 0xA5, 0x00, 0x80, 0x0D, 0x90, 0x0E, 0x90, 0x01, 0x98, 0x16, 0x21, 0x48, 0x43, 0xC0,
+	0x49, 0x40, 0x18, 0x13, 0x90, 0x19, 0x98, 0xBD, 0xE1, 0x00, 0x26, 0x13, 0x98, 0x0B, 0x96, 0x34,
+	0x46, 0x37, 0x46, 0x05, 0x88, 0x01, 0xF0, 0xE4, 0xFE, 0x00, 0x28, 0x07, 0xD0, 0x07, 0x98, 0x00,
+	0x28, 0x02, 0xD1, 0x2D, 0x07, 0x2D, 0x0F, 0x01, 0xE0, 0xF0, 0x20, 0x05, 0x40, 0xE8, 0xB2, 0x05,
+	0x90, 0x0C, 0x98, 0x00, 0x28, 0x66, 0xD0, 0x0A, 0x98, 0xC0, 0x07, 0x63, 0xD0, 0x00, 0x20, 0xE9,
+	0x07, 0x20, 0xD0, 0x13, 0x99, 0x09, 0x18, 0x0B, 0x79, 0x0D, 0x99, 0x9C, 0x46, 0xC9, 0x18, 0x4A,
+	0x00, 0xAC, 0x49, 0xA6, 0x4B, 0x89, 0x5E, 0xC6, 0x33, 0x9A, 0x5E, 0x22, 0x9B, 0x89, 0x1A, 0x0E,
+	0x9A, 0x62, 0x44, 0x52, 0x00, 0x9A, 0x5E, 0x51, 0x1A, 0x0A, 0x1E, 0x00, 0xDA, 0x4A, 0x42, 0x0C,
+	0x9B, 0x9A, 0x42, 0x07, 0xDA, 
+	0x00, 0x00, 0xA6, 0x00, 0x80, 0x76, 0x1C, 0x64, 0x18, 0x00, 0x29, 0x03, 0xDA, 0x0B, 0x9A, 0x52,
+	0x1C, 0x7F, 0x18, 0x0B, 0x92, 0x6D, 0x08, 0x40, 0x1C, 0x00, 0x2D, 0xD8, 0xD1, 0x01, 0x2E, 0x0F,
+	0xDD, 0x9D, 0x49, 0xB0, 0x00, 0x08, 0x58, 0x60, 0x43, 0x04, 0x12, 0x0B, 0x98, 0x80, 0x00, 0x08,
+	0x58, 0x78, 0x43, 0x07, 0x12, 0x00, 0x2C, 0x00, 0xDA, 0x64, 0x1C, 0x00, 0x2F, 0x00, 0xDA, 0x7F,
+	0x1C, 0x96, 0x48, 0x01, 0x9A, 0x00, 0x78, 0x10, 0x99, 0x42, 0x43, 0x92, 0x48, 0x3C, 0x38, 0x43,
+	0x18, 0xD0, 0x56, 0x01, 0x1E, 0x00, 0xDA, 0x41, 0x42, 0x18, 0x9D, 0x6D, 0x7A, 0xA9, 0x42, 0x00,
+	0xD1, 0x00, 0x20, 0x00, 0x2C, 0x08, 0xDD, 0x00, 0x28, 0x12, 0xDB, 0x18, 0x9D, 0x09, 0x21, 0x69,
+	0x56, 0x81, 0x42, 0x0E, 0xDD, 0x40, 0x1C, 0x0C, 0xE0, 0x00, 0x2C, 0x09, 0xDA, 0x00, 0x28, 0x07,
+	0xDC, 0x18, 0x99, 0x09, 0x25, 
+	0x00, 0x00, 0xA7, 0x00, 0x80, 0x4D, 0x57, 0x69, 0x42, 0x81, 0x42, 0x02, 0xDA, 0x40, 0x1E, 0x00,
+	0xE0, 0x00, 0x20, 0xD0, 0x54, 0x00, 0x20, 0x11, 0x90, 0x05, 0x98, 0x0F, 0x90, 0xC0, 0x07, 0x79,
+	0xD0, 0x11, 0x99, 0x13, 0x98, 0x40, 0x18, 0x05, 0x79, 0x0D, 0x98, 0x78, 0x49, 0x40, 0x19, 0x16,
+	0x90, 0x0E, 0x78, 0x17, 0x21, 0x71, 0x43, 0x88, 0x42, 0x16, 0xD1, 0x17, 0x98, 0x40, 0x68, 0x64,
+	0x21, 0x08, 0xF0, 0x87, 0xFB, 0x76, 0x49, 0x49, 0x6A, 0x48, 0x43, 0x2E, 0x21, 0x4E, 0x43, 0x71,
+	0x49, 0x88, 0x53, 0x0E, 0x99, 0x22, 0x9A, 0x49, 0x19, 0x49, 0x00, 0x50, 0x52, 0x16, 0x99, 0x67,
+	0x4A, 0x00, 0x20, 0x49, 0x00, 0xC6, 0x32, 0x50, 0x52, 0x68, 0x48, 0x16, 0x99, 0x06, 0x78, 0x17,
+	0x20, 0x70, 0x43, 0x08, 0x1A, 0x0C, 0x28, 0x17, 0xD1, 0x17, 0x98, 0x40, 0x68, 0x64, 0x21, 0x08,
+	0xF0, 0x68, 0xFB, 0x67, 0x49, 
+	0x00, 0x00, 0xA8, 0x00, 0x80, 0x49, 0x6A, 0x48, 0x43, 0x2E, 0x21, 0x4E, 0x43, 0x61, 0x49, 0x71,
+	0x18, 0x08, 0x83, 0x0E, 0x99, 0x22, 0x9A, 0x49, 0x19, 0x49, 0x00, 0x50, 0x52, 0x16, 0x99, 0x57,
+	0x4A, 0x00, 0x20, 0x49, 0x00, 0xC6, 0x32, 0x50, 0x52, 0x0E, 0x98, 0x22, 0x99, 0x40, 0x19, 0x40,
+	0x00, 0x08, 0x5E, 0x16, 0x99, 0x0A, 0x9A, 0x4D, 0x00, 0x56, 0x49, 0x84, 0x46, 0x49, 0x5F, 0xD2,
+	0x07, 0x18, 0xD0, 0x4E, 0x4A, 0xC6, 0x32, 0x52, 0x5F, 0x8A, 0x1A, 0x90, 0x42, 0x02, 0xDB, 0x03,
+	0x1B, 0x93, 0x42, 0x04, 0xDB, 0x90, 0x42, 0x04, 0xDC, 0x03, 0x1B, 0x93, 0x42, 0x01, 0xDD, 0x10,
+	0x46, 0x08, 0xE0, 0xE3, 0x1B, 0xDB, 0x1C, 0x06, 0x2B, 0x03, 0xD9, 0x90, 0x42, 0x01, 0xDC, 0xC0,
+	0x1B, 0x00, 0xE0, 0x00, 0x1B, 0x0A, 0x9A, 0x52, 0x07, 0x11, 0xD5, 0x42, 0x1A, 0x88, 0x42, 0x00,
+	0xDC, 0x0A, 0x1A, 0x08, 0x9B, 
+	0x00, 0x00, 0xA9, 0x00, 0x80, 0x9A, 0x42, 0x0A, 0xD2, 0x09, 0x9A, 0x00, 0x2A, 0x03, 0xD1, 0x40,
+	0x18, 0x40, 0x10, 0x04, 0xE0, 0xAC, 0xE0, 0x4A, 0x00, 0x8A, 0x18, 0x10, 0x18, 0x80, 0x10, 0x0A,
+	0x9A, 0x92, 0x07, 0x06, 0xD5, 0x88, 0x42, 0x01, 0xDD, 0x40, 0x1E, 0x02, 0xE0, 0x88, 0x42, 0x00,
+	0xDA, 0x40, 0x1C, 0x0A, 0x9A, 0xD2, 0x07, 0x24, 0xD0, 0x18, 0x9A, 0x52, 0x7A, 0x00, 0x2A, 0x20,
+	0xD0, 0x36, 0x4B, 0x01, 0x9A, 0x1B, 0x78, 0x10, 0x9E, 0x5A, 0x43, 0x32, 0x4B, 0x3C, 0x3B, 0x9B,
+	0x19, 0xD2, 0x56, 0x18, 0x9B, 0x5B, 0x7A, 0x9A, 0x42, 0x07, 0xD1, 0x84, 0x45, 0x11, 0xDD, 0x27,
+	0x4B, 0x40, 0x1C, 0xC6, 0x33, 0x5A, 0x5B, 0x52, 0x1E, 0x0A, 0xE0, 0x18, 0x9B, 0x5B, 0x7A, 0xDA,
+	0x42, 0x07, 0xD1, 0x84, 0x45, 0x05, 0xDA, 0x21, 0x4B, 0x40, 0x1E, 0xC6, 0x33, 0x5A, 0x5B, 0x52,
+	0x1C, 0x5A, 0x53, 0x1E, 0x4B, 
+	0x00, 0x00, 0xAA, 0x00, 0x80, 0xC6, 0x33, 0x5A, 0x5F, 0x12, 0x18, 0x56, 0x1A, 0x21, 0x49, 0x17,
+	0x22, 0x48, 0x53, 0x5E, 0x53, 0x1D, 0x48, 0x16, 0x99, 0x00, 0x78, 0x15, 0x90, 0x50, 0x43, 0x14,
+	0x90, 0x81, 0x42, 0x10, 0xD1, 0x17, 0x98, 0x40, 0x68, 0x64, 0x21, 0x08, 0xF0, 0xD2, 0xFA, 0x1C,
+	0x49, 0x49, 0x6A, 0x2E, 0x22, 0x48, 0x43, 0x15, 0x99, 0x51, 0x43, 0x16, 0x4A, 0x50, 0x52, 0x0F,
+	0x49, 0x00, 0x20, 0xC6, 0x31, 0x48, 0x53, 0x14, 0x99, 0x16, 0x98, 0x40, 0x1A, 0x0C, 0x28, 0x2F,
+	0xD1, 0x17, 0x98, 0x40, 0x68, 0x64, 0x21, 0x08, 0xF0, 0xBC, 0xFA, 0x11, 0x49, 0x49, 0x6A, 0x2E,
+	0x22, 0x48, 0x43, 0x15, 0x99, 0x51, 0x43, 0x1D, 0xE0, 0x00, 0xE0, 0xFF, 0xFF, 0xF0, 0xE9, 0x00,
+	0x00, 0x1C, 0x0E, 0x00, 0x20, 0xA0, 0xE8, 0x00, 0x00, 0x32, 0x0B, 0x00, 0x20, 0xCC, 0x07, 0x00,
+	0x20, 0x28, 0x01, 0x00, 0x20, 
+	0x00, 0x00, 0xAB, 0x00, 0x80, 0xD0, 0xE7, 0x00, 0x00, 0x76, 0x02, 0x00, 0x20, 0x9E, 0x00, 0x00,
+	0x20, 0x00, 0xEC, 0x00, 0x00, 0x2C, 0x05, 0x00, 0x20, 0xD8, 0xDC, 0x00, 0x00, 0x9D, 0x00, 0x00,
+	0x20, 0x80, 0xEA, 0x00, 0x00, 0xFD, 0x4A, 0x89, 0x18, 0x08, 0x83, 0xFD, 0x49, 0x00, 0x20, 0x48,
+	0x53, 0xFC, 0x48, 0x02, 0x99, 0x00, 0x88, 0x41, 0x18, 0xB1, 0x42, 0x01, 0xDC, 0x01, 0x21, 0x04,
+	0x91, 0x02, 0x99, 0x40, 0x1A, 0xB0, 0x42, 0x01, 0xDC, 0x00, 0x20, 0x03, 0x90, 0xF6, 0x48, 0x41,
+	0x6D, 0x8E, 0x42, 0x00, 0xDD, 0x46, 0x65, 0x81, 0x6D, 0x8E, 0x42, 0x00, 0xDA, 0x86, 0x65, 0xF3,
+	0x49, 0x06, 0x22, 0x8A, 0x5E, 0x51, 0x42, 0xB1, 0x42, 0x02, 0xDD, 0xC1, 0x6D, 0x49, 0x1C, 0xC1,
+	0x65, 0x0F, 0x98, 0x40, 0x08, 0x0F, 0x90, 0x11, 0x98, 0x40, 0x1C, 0x11, 0x90, 0x0F, 0x98, 0x00,
+	0x28, 0x00, 0xD0, 0xCB, 0xE6, 
+	0x00, 0x00, 0xAC, 0x00, 0x80, 0xEA, 0x49, 0x0D, 0x98, 0x09, 0x78, 0x40, 0x18, 0x0D, 0x90, 0x0E,
+	0x90, 0x10, 0x98, 0x40, 0x1C, 0x10, 0x90, 0x1A, 0x99, 0x88, 0x42, 0x00, 0xD8, 0x3C, 0xE6, 0x12,
+	0x98, 0x40, 0x1C, 0x12, 0x90, 0x1C, 0x99, 0x88, 0x42, 0x00, 0xD8, 0x24, 0xE6, 0x07, 0x98, 0x40,
+	0x1C, 0xC0, 0xB2, 0x07, 0x90, 0x06, 0x99, 0x88, 0x42, 0x00, 0xD2, 0x1A, 0xE6, 0x04, 0x98, 0x00,
+	0x28, 0x06, 0xD0, 0xD9, 0x48, 0x01, 0x78, 0x49, 0x08, 0x49, 0x00, 0x01, 0x70, 0x1D, 0xB0, 0xF0,
+	0xBD, 0x03, 0x98, 0x00, 0x28, 0xFA, 0xD0, 0xD4, 0x49, 0x01, 0x22, 0x08, 0x78, 0x10, 0x43, 0x08,
+	0x70, 0xF4, 0xE7, 0x08, 0xB5, 0x00, 0x90, 0xD3, 0x48, 0x03, 0x6B, 0xD3, 0x48, 0x00, 0x22, 0x01,
+	0x78, 0x5B, 0x1E, 0x49, 0x1E, 0x10, 0x46, 0xFF, 0xF7, 0xCB, 0xFD, 0x08, 0xBD, 0xF8, 0xB5, 0x04,
+	0x46, 0x0D, 0x46, 0x10, 0x46, 
+	0x00, 0x00, 0xAD, 0x00, 0x80, 0x19, 0x46, 0x06, 0x9E, 0xFD, 0xF7, 0x52, 0xFC, 0xCB, 0x48, 0x00,
+	0x96, 0x03, 0x78, 0xCB, 0x48, 0x29, 0x46, 0x02, 0x78, 0x20, 0x46, 0xFF, 0xF7, 0xB9, 0xFD, 0xF8,
+	0xBD, 0xC4, 0x48, 0x40, 0x6A, 0xC7, 0x4A, 0x00, 0x21, 0x40, 0x1E, 0x43, 0x00, 0xD1, 0x52, 0x00,
+	0x28, 0xFA, 0xD1, 0xBF, 0x48, 0xBA, 0x4A, 0x00, 0x78, 0x3E, 0x3A, 0x11, 0x54, 0x40, 0x1E, 0xFC,
+	0xD1, 0xBD, 0x48, 0xB7, 0x4A, 0x00, 0x78, 0x1F, 0x3A, 0x11, 0x54, 0x40, 0x1E, 0xFC, 0xD1, 0xB6,
+	0x48, 0x01, 0x71, 0x41, 0x71, 0x70, 0x47, 0x70, 0xB5, 0xB3, 0x4D, 0xBB, 0x48, 0x2C, 0x6C, 0x28,
+	0x64, 0xFD, 0xF7, 0x32, 0xF9, 0x03, 0x20, 0xFD, 0xF7, 0xBA, 0xFB, 0xFD, 0xF7, 0x05, 0xFC, 0x00,
+	0x28, 0xFB, 0xD0, 0xB6, 0x48, 0x01, 0x68, 0x03, 0x20, 0xFF, 0xF7, 0x63, 0xFD, 0x2C, 0x64, 0xFF,
+	0xF7, 0xCF, 0xFF, 0x70, 0xBD, 
+	0x00, 0x00, 0xAE, 0x00, 0x80, 0xAB, 0x48, 0x80, 0x6A, 0xA5, 0x4A, 0x00, 0x21, 0x40, 0x1E, 0x43,
+	0x00, 0xD1, 0x52, 0x00, 0x28, 0xFA, 0xD1, 0xA6, 0x48, 0xA1, 0x4A, 0x00, 0x78, 0x7C, 0x3A, 0x11,
+	0x54, 0x40, 0x1E, 0xFC, 0xD1, 0xA4, 0x48, 0x9E, 0x4A, 0x00, 0x78, 0x5D, 0x3A, 0x11, 0x54, 0x40,
+	0x1E, 0xFC, 0xD1, 0x70, 0x47, 0x70, 0xB5, 0x9C, 0x4D, 0xA3, 0x48, 0x2C, 0x6C, 0x28, 0x64, 0xFD,
+	0xF7, 0x45, 0xF8, 0xFD, 0xF7, 0x89, 0xFA, 0xFD, 0xF7, 0xD7, 0xFB, 0x00, 0x28, 0xFB, 0xD0, 0xA0,
+	0x48, 0x00, 0x68, 0xFF, 0xF7, 0x86, 0xFF, 0x2C, 0x64, 0xFF, 0xF7, 0xD4, 0xFF, 0x70, 0xBD, 0xF0,
+	0xB5, 0x93, 0x48, 0x87, 0xB0, 0x00, 0x78, 0x06, 0x90, 0x93, 0x48, 0x00, 0x78, 0x05, 0x90, 0x96,
+	0x48, 0x00, 0x1D, 0x41, 0x7F, 0x40, 0x7F, 0x4F, 0x07, 0x7F, 0x0F, 0xC0, 0x08, 0x8A, 0x4B, 0x03,
+	0x90, 0xD8, 0x6C, 0x00, 0x2F, 
+	0x00, 0x00, 0xAF, 0x00, 0x80, 0x04, 0xD1, 0x40, 0x00, 0x04, 0x90, 0x00, 0x20, 0x02, 0x90, 0x0B,
+	0xE0, 0xC0, 0x19, 0x40, 0x1C, 0x04, 0x90, 0x8F, 0x48, 0x8E, 0x49, 0xC0, 0x5D, 0x02, 0x90, 0xB8,
+	0x00, 0x08, 0x31, 0x40, 0x18, 0x40, 0x68, 0xC0, 0xB2, 0x01, 0x90, 0x00, 0x20, 0x58, 0x64, 0x58,
+	0x71, 0x18, 0x71, 0x9A, 0x78, 0xD0, 0x07, 0x07, 0xD0, 0x79, 0x4C, 0x06, 0x98, 0x3E, 0x3C, 0x21,
+	0x5C, 0x49, 0x1C, 0x21, 0x54, 0x40, 0x1E, 0xFA, 0xD1, 0x90, 0x07, 0x07, 0xD5, 0x74, 0x4C, 0x05,
+	0x98, 0x1F, 0x3C, 0x21, 0x5C, 0x49, 0x1C, 0x21, 0x54, 0x40, 0x1E, 0xFA, 0xD1, 0xD0, 0x07, 0x5E,
+	0xD0, 0x06, 0x9C, 0x78, 0x48, 0x64, 0x1E, 0x66, 0x00, 0x6F, 0x49, 0x85, 0x5F, 0x08, 0x6D, 0x42,
+	0x42, 0x95, 0x42, 0x01, 0xDA, 0x01, 0x22, 0x0A, 0x71, 0x85, 0x42, 0x01, 0xDD, 0x01, 0x20, 0x48,
+	0x71, 0x69, 0x48, 0x40, 0x89, 
+	0x00, 0x00, 0xB0, 0x00, 0x80, 0x85, 0x42, 0x17, 0xDD, 0x67, 0x49, 0x28, 0x1A, 0x4A, 0x6C, 0x80,
+	0x18, 0x48, 0x64, 0xFB, 0xF7, 0xC0, 0xFE, 0x00, 0x28, 0x06, 0xD1, 0x63, 0x49, 0x4A, 0x6A, 0x10,
+	0x55, 0x8A, 0x6A, 0x10, 0x55, 0xC9, 0x6A, 0x06, 0xE0, 0x5F, 0x49, 0x00, 0x20, 0xCA, 0x68, 0x10,
+	0x55, 0x0A, 0x69, 0x10, 0x55, 0x49, 0x69, 0x08, 0x55, 0x5B, 0x4A, 0x51, 0x6A, 0xD2, 0x6C, 0x08,
+	0x5D, 0x94, 0x46, 0x90, 0x42, 0x29, 0xD3, 0x60, 0x45, 0x02, 0xD1, 0x63, 0x48, 0x85, 0x53, 0x24,
+	0xE0, 0x04, 0x9A, 0x90, 0x42, 0x19, 0xD2, 0x00, 0x2F, 0x1F, 0xD0, 0x5F, 0x48, 0x80, 0x5F, 0x86,
+	0x46, 0x28, 0x1A, 0x02, 0x1E, 0x00, 0xDA, 0x52, 0x42, 0x03, 0x9B, 0x9A, 0x42, 0x01, 0xDD, 0x1F,
+	0x2B, 0x08, 0xD1, 0x02, 0x9B, 0x58, 0x4A, 0xC0, 0x18, 0x01, 0x9B, 0x58, 0x43, 0x00, 0x12, 0x70,
+	0x44, 0x90, 0x53, 0x0A, 0xE0, 
+	0x00, 0x00, 0xB1, 0x00, 0x80, 0x60, 0x46, 0x08, 0x55, 0xDF, 0xE7, 0x53, 0x4A, 0x4D, 0x4B, 0x90,
+	0x5B, 0x28, 0x1A, 0x98, 0x53, 0x00, 0x20, 0x08, 0x55, 0xF2, 0xE7, 0x00, 0x2C, 0xA1, 0xD1, 0x42,
+	0x48, 0x81, 0x78, 0x89, 0x07, 0x60, 0xD5, 0x05, 0x9C, 0x06, 0x98, 0x64, 0x1E, 0x20, 0x18, 0x46,
+	0x00, 0x44, 0x48, 0x3D, 0x49, 0x85, 0x5F, 0x08, 0x6D, 0x42, 0x42, 0x95, 0x42, 0x01, 0xDA, 0x01,
+	0x22, 0x0A, 0x71, 0x85, 0x42, 0x01, 0xDD, 0x01, 0x20, 0x48, 0x71, 0x37, 0x48, 0x40, 0x89, 0x85,
+	0x42, 0x17, 0xDD, 0x35, 0x49, 0x28, 0x1A, 0x4A, 0x6C, 0x80, 0x18, 0x48, 0x64, 0xFB, 0xF7, 0x5B,
+	0xFE, 0x00, 0x28, 0x06, 0xD1, 0x30, 0x49, 0x0A, 0x6B, 0x10, 0x55, 0x4A, 0x6B, 0x10, 0x55, 0x89,
+	0x6B, 0x06, 0xE0, 0x2D, 0x49, 0x00, 0x20, 0x8A, 0x69, 0x10, 0x55, 0xCA, 0x69, 0x10, 0x55, 0x09,
+	0x6A, 0x08, 0x55, 0x29, 0x4A, 
+	0x00, 0x00, 0xB2, 0x00, 0x80, 0x11, 0x6B, 0xD2, 0x6C, 0x08, 0x5D, 0x94, 0x46, 0x90, 0x42, 0x29,
+	0xD3, 0x60, 0x45, 0x02, 0xD1, 0x30, 0x48, 0x85, 0x53, 0x24, 0xE0, 0x04, 0x9A, 0x90, 0x42, 0x19,
+	0xD2, 0x00, 0x2F, 0x1F, 0xD0, 0x2C, 0x48, 0x80, 0x5F, 0x86, 0x46, 0x28, 0x1A, 0x02, 0x1E, 0x00,
+	0xDA, 0x52, 0x42, 0x03, 0x9B, 0x9A, 0x42, 0x01, 0xDD, 0x1F, 0x2B, 0x08, 0xD1, 0x02, 0x9B, 0x26,
+	0x4A, 0xC0, 0x18, 0x01, 0x9B, 0x58, 0x43, 0x00, 0x12, 0x70, 0x44, 0x90, 0x53, 0x0A, 0xE0, 0x60,
+	0x46, 0x08, 0x55, 0xDF, 0xE7, 0x20, 0x4A, 0x1B, 0x4B, 0x90, 0x5B, 0x28, 0x1A, 0x98, 0x53, 0x00,
+	0x20, 0x08, 0x55, 0xF2, 0xE7, 0x00, 0x2C, 0x9F, 0xD1, 0x07, 0xB0, 0xF0, 0xBD, 0xF0, 0xB5, 0x10,
+	0x48, 0x89, 0xB0, 0x05, 0x78, 0x10, 0x48, 0x07, 0x78, 0x13, 0x48, 0x00, 0x1D, 0x01, 0x7F, 0x49,
+	0x07, 0x49, 0x0F, 0x03, 0x91, 
+	0x00, 0x00, 0xB3, 0x00, 0x80, 0x00, 0x7F, 0x08, 0x4A, 0xC0, 0x08, 0x02, 0x90, 0x90, 0x6C, 0x00,
+	0x29, 0x24, 0xD1, 0x40, 0x00, 0x04, 0x90, 0x00, 0x20, 0x01, 0x90, 0x2C, 0xE0, 0x2C, 0x05, 0x00,
+	0x20, 0x92, 0x08, 0x00, 0x20, 0x76, 0x02, 0x00, 0x20, 0x28, 0x01, 0x00, 0x20, 0x30, 0xE8, 0x00,
+	0x00, 0x9E, 0x00, 0x00, 0x20, 0xF0, 0xE9, 0x00, 0x00, 0x9D, 0x00, 0x00, 0x20, 0xAB, 0x00, 0x00,
+	0x20, 0xAA, 0x00, 0x00, 0x20, 0x32, 0x0B, 0x00, 0x20, 0x7C, 0xE8, 0x00, 0x00, 0xD8, 0x00, 0x00,
+	0x20, 0xD4, 0x00, 0x00, 0x20, 0xD0, 0xDC, 0x00, 0x00, 0x1C, 0x0E, 0x00, 0x20, 0x40, 0x18, 0x40,
+	0x1C, 0x04, 0x90, 0x9B, 0x49, 0x03, 0x98, 0x08, 0x5C, 0x01, 0x90, 0x03, 0x98, 0x08, 0x31, 0x80,
+	0x00, 0x40, 0x18, 0x40, 0x68, 0xC0, 0xB2, 0x00, 0x90, 0x96, 0x48, 0x00, 0x21, 0xC1, 0x80, 0x80,
+	0x78, 0x80, 0x07, 0x07, 0xD4, 
+	0x00, 0x00, 0xB4, 0x00, 0x80, 0x94, 0x48, 0x2C, 0x46, 0x01, 0x5D, 0x49, 0x1C, 0x01, 0x55, 0x64,
+	0x1E, 0xFA, 0xD1, 0x07, 0xE0, 0x90, 0x48, 0x3C, 0x46, 0x1F, 0x30, 0x01, 0x5D, 0x49, 0x1C, 0x01,
+	0x55, 0x64, 0x1E, 0xFA, 0xD1, 0x00, 0x26, 0xFB, 0xF7, 0xB6, 0xFD, 0x00, 0x28, 0x41, 0xD1, 0x1E,
+	0xE0, 0x00, 0x20, 0x19, 0xE0, 0x88, 0x4A, 0x61, 0x00, 0x7C, 0x32, 0x52, 0x5E, 0x85, 0x49, 0x64,
+	0x1C, 0x0B, 0x89, 0x9A, 0x42, 0x0F, 0xDD, 0xCA, 0x88, 0x52, 0x1C, 0xCA, 0x80, 0xCB, 0x68, 0x00,
+	0x22, 0x1A, 0x54, 0x0B, 0x69, 0x1A, 0x54, 0x4B, 0x69, 0x1A, 0x54, 0x8B, 0x69, 0x9A, 0x55, 0xCB,
+	0x69, 0x9A, 0x55, 0x09, 0x6A, 0x8A, 0x55, 0x40, 0x1C, 0xA8, 0x42, 0xE3, 0xD3, 0x76, 0x1C, 0xBE,
+	0x42, 0xDE, 0xD3, 0x20, 0xE0, 0x00, 0x20, 0x19, 0xE0, 0x77, 0x4A, 0x61, 0x00, 0x7C, 0x32, 0x52,
+	0x5E, 0x74, 0x49, 0x64, 0x1C, 
+	0x00, 0x00, 0xB5, 0x00, 0x80, 0x0B, 0x89, 0x9A, 0x42, 0x0F, 0xDD, 0xCA, 0x88, 0x52, 0x1C, 0xCA,
+	0x80, 0x4B, 0x6A, 0x00, 0x22, 0x1A, 0x54, 0x8B, 0x6A, 0x1A, 0x54, 0xCB, 0x6A, 0x1A, 0x54, 0x0B,
+	0x6B, 0x9A, 0x55, 0x4B, 0x6B, 0x9A, 0x55, 0x89, 0x6B, 0x8A, 0x55, 0x40, 0x1C, 0xA8, 0x42, 0xE3,
+	0xD3, 0x76, 0x1C, 0xBE, 0x42, 0xDE, 0xD3, 0x67, 0x48, 0x80, 0x78, 0x80, 0x07, 0x65, 0xD5, 0x00,
+	0x20, 0x5F, 0xE0, 0x64, 0x4A, 0x91, 0x69, 0x08, 0x91, 0x92, 0x6C, 0x09, 0x5C, 0x94, 0x46, 0x91,
+	0x42, 0x56, 0xD3, 0x61, 0x45, 0x0E, 0xD1, 0x01, 0x46, 0x69, 0x43, 0x00, 0x22, 0x5F, 0x4E, 0x06,
+	0xE0, 0x5D, 0x4C, 0x4B, 0x00, 0x7C, 0x34, 0xE4, 0x5A, 0x49, 0x1C, 0xF4, 0x52, 0x52, 0x1C, 0xAA,
+	0x42, 0xF6, 0xD3, 0x45, 0xE0, 0x04, 0x9A, 0x91, 0x42, 0x2A, 0xD2, 0x03, 0x99, 0x00, 0x29, 0x3F,
+	0xD0, 0x01, 0x46, 0x69, 0x43, 
+	0x00, 0x00, 0xB6, 0x00, 0x80, 0x00, 0x22, 0x1B, 0xE0, 0x53, 0x4B, 0x4C, 0x00, 0x7C, 0x33, 0x07,
+	0x94, 0x52, 0x4E, 0x1B, 0x5F, 0x34, 0x5F, 0xA6, 0x46, 0x1B, 0x1B, 0x1C, 0x1E, 0x00, 0xDA, 0x64,
+	0x42, 0x02, 0x9E, 0xB4, 0x42, 0x01, 0xDD, 0x1F, 0x2E, 0x0D, 0xD1, 0x01, 0x9C, 0x4B, 0x4E, 0x1B,
+	0x19, 0x00, 0x9C, 0x49, 0x1C, 0x63, 0x43, 0x1B, 0x12, 0x07, 0x9C, 0x73, 0x44, 0x33, 0x53, 0x52,
+	0x1C, 0xAA, 0x42, 0xE1, 0xD3, 0x1C, 0xE0, 0x08, 0x9A, 0x61, 0x46, 0x11, 0x54, 0x40, 0x1E, 0x17,
+	0xE0, 0x02, 0x46, 0x6A, 0x43, 0x00, 0x23, 0x0E, 0xE0, 0x3F, 0x4C, 0x51, 0x00, 0x7C, 0x34, 0x66,
+	0x5A, 0x3E, 0x4C, 0x52, 0x1C, 0x64, 0x5A, 0x34, 0x1B, 0x3B, 0x4E, 0x7C, 0x36, 0x74, 0x52, 0x00,
+	0x24, 0x3A, 0x4E, 0x5B, 0x1C, 0x74, 0x52, 0xAB, 0x42, 0xEE, 0xD3, 0x08, 0x9A, 0x00, 0x21, 0x11,
+	0x54, 0x40, 0x1C, 0xB8, 0x42, 
+	0x00, 0x00, 0xB7, 0x00, 0x80, 0x9D, 0xD3, 0x09, 0xB0, 0xF0, 0xBD, 0x00, 0x20, 0x5C, 0xE0, 0x31,
+	0x4A, 0xD1, 0x68, 0x06, 0x91, 0x09, 0x5C, 0x92, 0x6C, 0x05, 0x92, 0x91, 0x42, 0x53, 0xD3, 0x91,
+	0x42, 0x0D, 0xD1, 0x01, 0x46, 0x00, 0x22, 0x2D, 0x4E, 0x06, 0xE0, 0x2B, 0x4C, 0x4B, 0x00, 0x7C,
+	0x34, 0xE4, 0x5A, 0x49, 0x19, 0xF4, 0x52, 0x52, 0x1C, 0xBA, 0x42, 0xF6, 0xD3, 0x43, 0xE0, 0x04,
+	0x9A, 0x91, 0x42, 0x29, 0xD2, 0x03, 0x99, 0x00, 0x29, 0x3D, 0xD0, 0x01, 0x46, 0x00, 0x22, 0x1B,
+	0xE0, 0x21, 0x4B, 0x4C, 0x00, 0x7C, 0x33, 0x21, 0x4E, 0xA6, 0x46, 0x1B, 0x5F, 0x34, 0x5F, 0xA4,
+	0x46, 0x1B, 0x1B, 0x1C, 0x1E, 0x00, 0xDA, 0x64, 0x42, 0x02, 0x9E, 0xB4, 0x42, 0x01, 0xDD, 0x1F,
+	0x2E, 0x0D, 0xD1, 0x01, 0x9E, 0x74, 0x46, 0x9B, 0x19, 0x00, 0x9E, 0x49, 0x19, 0x73, 0x43, 0x1B,
+	0x12, 0x16, 0x4E, 0x63, 0x44, 
+	0x00, 0x00, 0xB8, 0x00, 0x80, 0x33, 0x53, 0x52, 0x1C, 0xBA, 0x42, 0xE1, 0xD3, 0x1B, 0xE0, 0x06,
+	0x9A, 0x05, 0x99, 0x11, 0x54, 0x40, 0x1E, 0x16, 0xE0, 0x02, 0x46, 0x00, 0x23, 0x0E, 0xE0, 0x0E,
+	0x4C, 0x51, 0x00, 0x0E, 0x4E, 0x7C, 0x34, 0x64, 0x5A, 0x76, 0x5A, 0x52, 0x19, 0xA6, 0x1B, 0x0A,
+	0x4C, 0x7C, 0x34, 0x66, 0x52, 0x00, 0x24, 0x09, 0x4E, 0x5B, 0x1C, 0x74, 0x52, 0xBB, 0x42, 0xEE,
+	0xD3, 0x06, 0x9A, 0x00, 0x21, 0x11, 0x54, 0x40, 0x1C, 0xA8, 0x42, 0xA0, 0xD3, 0x9B, 0xE7, 0x00,
+	0x00, 0xD0, 0xDC, 0x00, 0x00, 0x28, 0x01, 0x00, 0x20, 0x16, 0x08, 0x00, 0x20, 0x7C, 0x0B, 0x00,
+	0x20, 0x10, 0xB5, 0x06, 0xF0, 0xB5, 0xFE, 0x06, 0xF0, 0xE1, 0xFE, 0xAA, 0x48, 0x06, 0xF0, 0x0E,
+	0xFE, 0x01, 0x20, 0x06, 0xF0, 0xFE, 0xFD, 0x06, 0xF0, 0x65, 0xFE, 0xC0, 0x24, 0xA6, 0x48, 0x21,
+	0x79, 0x01, 0x70, 0x61, 0x79, 
+	0x00, 0x00, 0xB9, 0x00, 0x80, 0x41, 0x70, 0xA5, 0x48, 0x80, 0x7A, 0x00, 0x28, 0x04, 0xD0, 0x07,
+	0xF0, 0xFC, 0xF8, 0xA1, 0x49, 0x89, 0x1E, 0x08, 0x70, 0x9F, 0x48, 0x04, 0xF0, 0xF1, 0xFA, 0x04,
+	0xF0, 0xD3, 0xFA, 0xA0, 0x79, 0xC1, 0x07, 0x05, 0xD1, 0x80, 0x07, 0x01, 0xD4, 0x04, 0x20, 0x07,
+	0xE0, 0x02, 0x20, 0x05, 0xE0, 0x01, 0x21, 0x80, 0x07, 0x01, 0xD4, 0x05, 0x20, 0x00, 0xE0, 0x03,
+	0x20, 0x04, 0xF0, 0xF6, 0xFA, 0x04, 0xF0, 0x5E, 0xFA, 0x95, 0x49, 0x08, 0x68, 0xA0, 0x43, 0x08,
+	0x60, 0x92, 0x48, 0x20, 0x30, 0x00, 0x7D, 0x07, 0x22, 0x52, 0x02, 0x01, 0x28, 0x0D, 0xD0, 0x02,
+	0x28, 0x0A, 0xD1, 0x08, 0x68, 0x80, 0x23, 0x18, 0x43, 0x08, 0x60, 0x8E, 0x48, 0x81, 0x68, 0x91,
+	0x43, 0xFF, 0x31, 0xFF, 0x31, 0x02, 0x31, 0x81, 0x60, 0x10, 0xBD, 0x08, 0x68, 0x20, 0x43, 0x08,
+	0x60, 0x89, 0x49, 0x88, 0x68, 
+	0x00, 0x00, 0xBA, 0x00, 0x80, 0x90, 0x43, 0xFF, 0x30, 0xFF, 0x30, 0x02, 0x30, 0x88, 0x60, 0x10,
+	0xBD, 0x10, 0xB5, 0x06, 0xF0, 0x3D, 0xFF, 0x85, 0x4C, 0x20, 0x70, 0xC0, 0xB2, 0x06, 0xF0, 0x45,
+	0xFF, 0x20, 0x78, 0x06, 0xF0, 0x6A, 0xFF, 0x10, 0xBD, 0xF8, 0xB5, 0x06, 0xF0, 0x0B, 0xFE, 0x80,
+	0x48, 0x00, 0x25, 0x05, 0x80, 0x06, 0xF0, 0x72, 0xFC, 0x7E, 0x49, 0x01, 0x26, 0x08, 0x80, 0xB6,
+	0x07, 0xB5, 0x60, 0x01, 0x27, 0xB7, 0x61, 0xFF, 0xF7, 0xE3, 0xFF, 0x74, 0x4C, 0xA0, 0x7E, 0xC1,
+	0x07, 0x79, 0x48, 0x31, 0x68, 0x02, 0xD1, 0x01, 0x43, 0x31, 0x60, 0x06, 0xE0, 0x81, 0x43, 0x31,
+	0x60, 0xA0, 0x7E, 0x00, 0x09, 0x40, 0x00, 0x38, 0x43, 0xB0, 0x61, 0x74, 0x48, 0x00, 0x68, 0x00,
+	0x28, 0x14, 0xD0, 0x01, 0x20, 0x06, 0xF0, 0x9C, 0xFE, 0x02, 0x20, 0x70, 0x60, 0x04, 0x20, 0x00,
+	0xF0, 0x04, 0xFA, 0x02, 0x20, 
+	0x00, 0x00, 0xBB, 0x00, 0x80, 0xB0, 0x60, 0x6E, 0x49, 0x04, 0x20, 0x00, 0xF0, 0xDE, 0xF9, 0x00,
+	0x21, 0x04, 0x20, 0x00, 0xF0, 0xE1, 0xF9, 0x04, 0x20, 0x00, 0xF0, 0xE8, 0xF9, 0x69, 0x4E, 0x65,
+	0x49, 0x37, 0x70, 0x08, 0x88, 0x08, 0x22, 0x10, 0x43, 0x08, 0x80, 0x5B, 0x48, 0x80, 0x1E, 0x45,
+	0x70, 0x65, 0x48, 0x05, 0x70, 0xA0, 0x7C, 0x65, 0x4F, 0xC0, 0x08, 0xC0, 0x00, 0x38, 0x70, 0xE0,
+	0x7C, 0x63, 0x49, 0x08, 0x70, 0x20, 0x7D, 0x63, 0x49, 0x08, 0x70, 0x60, 0x7E, 0x21, 0x7E, 0x00,
+	0x02, 0x08, 0x43, 0x61, 0x49, 0x08, 0x80, 0xE0, 0x7D, 0xA1, 0x7D, 0x00, 0x02, 0x08, 0x43, 0x5F,
+	0x49, 0x08, 0x80, 0x60, 0x7C, 0x5E, 0x49, 0x08, 0x70, 0x4C, 0x48, 0x20, 0x30, 0xC0, 0x7C, 0x5D,
+	0x49, 0x08, 0x70, 0x5D, 0x48, 0x41, 0x78, 0x5D, 0x4A, 0x11, 0x70, 0x80, 0x78, 0x5C, 0x49, 0x08,
+	0x70, 0x5C, 0x48, 0xC0, 0x88, 
+	0x00, 0x00, 0xBC, 0x00, 0x80, 0x5C, 0x49, 0x08, 0x80, 0x05, 0xF0, 0xE0, 0xFE, 0x30, 0x78, 0x00,
+	0x28, 0x04, 0xD0, 0x02, 0xF0, 0x81, 0xFF, 0x01, 0x20, 0x04, 0xF0, 0xD3, 0xF8, 0x57, 0x49, 0x38,
+	0x78, 0x08, 0x70, 0x01, 0x20, 0x06, 0xF0, 0x3A, 0xFD, 0x20, 0x7C, 0x04, 0x21, 0x08, 0x40, 0x54,
+	0x4E, 0xC0, 0xB2, 0x10, 0x24, 0x20, 0x43, 0x38, 0x4F, 0x30, 0x70, 0xBF, 0x1E, 0x79, 0x78, 0x01,
+	0x20, 0x04, 0xF0, 0x64, 0xFA, 0x31, 0x78, 0x00, 0x20, 0x04, 0xF0, 0x60, 0xFA, 0x04, 0xF0, 0x1C,
+	0xFA, 0x4C, 0x48, 0x04, 0x70, 0x05, 0xF0, 0x10, 0xFA, 0x4B, 0x48, 0x05, 0x70, 0x06, 0xF0, 0x60,
+	0xF9, 0x06, 0xF0, 0x96, 0xF9, 0x47, 0x4D, 0x06, 0xF0, 0x6D, 0xFD, 0x28, 0x78, 0x00, 0x28, 0x3E,
+	0xD0, 0x10, 0x28, 0x3F, 0xD0, 0x20, 0x28, 0x01, 0xD1, 0x05, 0xF0, 0x27, 0xF8, 0x00, 0x20, 0x04,
+	0xF0, 0x49, 0xFA, 0x30, 0x70, 
+	0x00, 0x00, 0xBD, 0x00, 0x80, 0xC0, 0xB2, 0xC0, 0x07, 0x01, 0xD0, 0x00, 0xF0, 0x87, 0xF9, 0x30,
+	0x78, 0x01, 0x07, 0xE8, 0xD5, 0x30, 0x21, 0x08, 0x40, 0x28, 0x70, 0x00, 0x2C, 0x2D, 0xD0, 0x10,
+	0x2C, 0x2E, 0xD0, 0x20, 0x2C, 0x01, 0xD1, 0x05, 0xF0, 0x07, 0xF9, 0x01, 0x20, 0x06, 0xF0, 0xF6,
+	0xFC, 0x28, 0x78, 0x00, 0x28, 0x27, 0xD0, 0x10, 0x28, 0x28, 0xD0, 0x20, 0x28, 0x01, 0xD1, 0x04,
+	0xF0, 0x27, 0xFB, 0x79, 0x78, 0xEF, 0x20, 0x01, 0x40, 0x01, 0x20, 0x04, 0xF0, 0x1F, 0xFA, 0x30,
+	0x78, 0xC7, 0x21, 0x2C, 0x78, 0x08, 0x40, 0xC0, 0xB2, 0x20, 0x43, 0x30, 0x70, 0xC1, 0xB2, 0x00,
+	0x20, 0x04, 0xF0, 0x14, 0xFA, 0x06, 0xF0, 0x1C, 0xF9, 0x06, 0xF0, 0x52, 0xF9, 0xBB, 0xE7, 0x05,
+	0xF0, 0xCC, 0xFF, 0xC3, 0xE7, 0x05, 0xF0, 0x8E, 0xFA, 0xC0, 0xE7, 0x06, 0xF0, 0x61, 0xF8, 0xD4,
+	0xE7, 0x05, 0xF0, 0x8C, 0xFA, 
+	0x00, 0x00, 0xBE, 0x00, 0x80, 0xD1, 0xE7, 0x05, 0xF0, 0x17, 0xFB, 0xDA, 0xE7, 0x05, 0xF0, 0xB4,
+	0xF9, 0xD7, 0xE7, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x90, 0x01, 0x00, 0x20, 0x00, 0xE6, 0x00,
+	0x00, 0x00, 0x20, 0x14, 0x40, 0x00, 0x10, 0x14, 0x40, 0x00, 0x00, 0x14, 0x40, 0xEC, 0x02, 0x00,
+	0x20, 0xB8, 0x02, 0x00, 0x20, 0xC8, 0x02, 0x00, 0x20, 0x00, 0x00, 0x80, 0x00, 0x94, 0x01, 0x00,
+	0x20, 0xB1, 0xA4, 0x00, 0x00, 0xB6, 0x02, 0x00, 0x20, 0x65, 0x02, 0x00, 0x20, 0x66, 0x02, 0x00,
+	0x20, 0x5D, 0x02, 0x00, 0x20, 0x5E, 0x02, 0x00, 0x20, 0x6E, 0x02, 0x00, 0x20, 0x70, 0x02, 0x00,
+	0x20, 0x5F, 0x02, 0x00, 0x20, 0x60, 0x02, 0x00, 0x20, 0x00, 0xE7, 0x00, 0x00, 0x61, 0x02, 0x00,
+	0x20, 0x62, 0x02, 0x00, 0x20, 0xD0, 0xE7, 0x00, 0x00, 0x76, 0x02, 0x00, 0x20, 0xDF, 0x01, 0x00,
+	0x20, 0xCC, 0x02, 0x00, 0x20, 
+	0x00, 0x00, 0xBF, 0x00, 0x80, 0xB7, 0x02, 0x00, 0x20, 0xCB, 0x02, 0x00, 0x20, 0x02, 0x48, 0x40,
+	0x68, 0x02, 0x49, 0x08, 0x61, 0x70, 0x47, 0x00, 0x00, 0xE0, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x01,
+	0x40, 0xF8, 0xB5, 0x4F, 0x49, 0x0A, 0x78, 0x4F, 0x48, 0x20, 0x25, 0x24, 0x2A, 0x03, 0xD3, 0x4A,
+	0x78, 0xC2, 0x61, 0x89, 0x78, 0x1C, 0xE0, 0xCA, 0x78, 0x24, 0x2A, 0x03, 0xD3, 0x0A, 0x79, 0xC2,
+	0x61, 0x49, 0x79, 0x15, 0xE0, 0x8A, 0x79, 0x24, 0x2A, 0x03, 0xD3, 0xCA, 0x79, 0xC2, 0x61, 0x09,
+	0x7A, 0x0E, 0xE0, 0x4A, 0x7A, 0x24, 0x2A, 0x03, 0xD3, 0x8A, 0x7A, 0xC2, 0x61, 0xC9, 0x7A, 0x07,
+	0xE0, 0x0A, 0x7B, 0x00, 0x2A, 0x02, 0xD0, 0x0A, 0x7B, 0xC2, 0x61, 0x00, 0xE0, 0xC5, 0x61, 0x49,
+	0x7B, 0x01, 0x62, 0x01, 0x26, 0x3C, 0x4C, 0xB6, 0x04, 0x26, 0x60, 0x39, 0x48, 0x20, 0x30, 0x40,
+	0x7C, 0x3A, 0x4F, 0x78, 0x60, 
+	0x00, 0x00, 0xC0, 0x00, 0x80, 0x05, 0x20, 0x00, 0xF0, 0x99, 0xF8, 0x27, 0x20, 0xB8, 0x60, 0x38,
+	0x48, 0x05, 0x60, 0x37, 0x48, 0x30, 0x21, 0x80, 0x30, 0x01, 0x60, 0x10, 0x21, 0x81, 0x60, 0xC1,
+	0x60, 0x00, 0x06, 0xE0, 0x60, 0x60, 0x60, 0x26, 0x60, 0x32, 0x49, 0x40, 0x1C, 0x08, 0x60, 0x31,
+	0x49, 0x31, 0x48, 0x40, 0x31, 0x08, 0x60, 0x30, 0x48, 0x2D, 0x49, 0x0C, 0x30, 0x80, 0x39, 0x08,
+	0x60, 0xF8, 0xBD, 0xF8, 0xB5, 0x72, 0xB6, 0x00, 0x24, 0x2C, 0x4E, 0x06, 0x20, 0x60, 0x43, 0x85,
+	0x19, 0x28, 0x46, 0x07, 0xF0, 0x24, 0xFD, 0x69, 0x79, 0x2A, 0x79, 0x09, 0x02, 0x11, 0x43, 0x07,
+	0xF0, 0x1A, 0xFD, 0x64, 0x1C, 0xE4, 0xB2, 0x02, 0x2C, 0xEF, 0xD3, 0x24, 0x4F, 0x00, 0x21, 0x0C,
+	0x37, 0x3D, 0x46, 0x0A, 0x46, 0x10, 0x35, 0x90, 0x00, 0x3B, 0x58, 0x1E, 0x0A, 0xD8, 0xB2, 0x36,
+	0x02, 0x05, 0xE0, 0x4B, 0x00, 
+	0x00, 0x00, 0xC1, 0x00, 0x80, 0x5C, 0x19, 0xEB, 0x5C, 0x64, 0x78, 0xF4, 0x54, 0x49, 0x1C, 0x03,
+	0x46, 0x40, 0x1E, 0xC0, 0xB2, 0x00, 0x2B, 0xF4, 0xD1, 0x52, 0x1C, 0x04, 0x2A, 0xEB, 0xD3, 0xFF,
+	0x21, 0x17, 0x48, 0x01, 0x31, 0x01, 0x80, 0x01, 0x22, 0x82, 0x70, 0x16, 0x48, 0x02, 0x60, 0x16,
+	0x48, 0x1F, 0x22, 0x02, 0x60, 0x15, 0x4A, 0x82, 0x60, 0xC1, 0x60, 0x16, 0x48, 0x14, 0x49, 0x01,
+	0x60, 0x45, 0x21, 0x49, 0x04, 0x41, 0x60, 0x14, 0x48, 0x01, 0x78, 0x02, 0x22, 0x11, 0x43, 0x01,
+	0x70, 0x01, 0x78, 0x06, 0x22, 0x11, 0x43, 0x01, 0x70, 0xFF, 0xF7, 0x62, 0xFF, 0xF8, 0xBD, 0x00,
+	0x00, 0xC0, 0xF1, 0xFF, 0x0F, 0x00, 0xFF, 0x00, 0x40, 0x00, 0x00, 0x01, 0x40, 0x00, 0xFF, 0x01,
+	0x40, 0x00, 0x02, 0x01, 0x40, 0x00, 0x01, 0x01, 0x40, 0x26, 0x00, 0x00, 0x80, 0xFC, 0xDC, 0x00,
+	0x00, 0x00, 0x60, 0x13, 0x40, 
+	0x00, 0x00, 0xC2, 0x00, 0x80, 0x00, 0x20, 0x14, 0x40, 0x00, 0x00, 0x14, 0x40, 0x24, 0x42, 0x00,
+	0x00, 0x04, 0x00, 0x09, 0x00, 0x00, 0x50, 0x13, 0x40, 0x00, 0x70, 0x13, 0x40, 0x80, 0x1C, 0x80,
+	0x08, 0x03, 0xD0, 0x00, 0xBF, 0x40, 0x1E, 0x00, 0x46, 0xFC, 0xD1, 0x70, 0x47, 0xEF, 0xF3, 0x10,
+	0x80, 0x72, 0xB6, 0x70, 0x47, 0x80, 0xF3, 0x10, 0x88, 0x70, 0x47, 0x00, 0x00, 0x10, 0xB5, 0x25,
+	0x49, 0x09, 0x78, 0x48, 0x43, 0xFF, 0xF7, 0xEA, 0xFF, 0x10, 0xBD, 0x01, 0x22, 0x52, 0x07, 0x80,
+	0x00, 0x82, 0x18, 0x10, 0x6C, 0x11, 0x64, 0x70, 0x47, 0x82, 0x07, 0xD2, 0x0E, 0x92, 0x1D, 0x91,
+	0x40, 0x80, 0x08, 0x1D, 0x4A, 0x80, 0x00, 0x80, 0x18, 0x01, 0x60, 0x70, 0x47, 0x02, 0x07, 0x1B,
+	0x49, 0x12, 0x0F, 0x01, 0x20, 0x90, 0x40, 0x08, 0x60, 0x70, 0x47, 0x18, 0x49, 0x02, 0x07, 0x80,
+	0x31, 0x12, 0x0F, 0x01, 0x20, 
+	0x00, 0x00, 0xC3, 0x00, 0x80, 0x90, 0x40, 0x08, 0x60, 0x70, 0x47, 0x02, 0x07, 0x14, 0x49, 0x12,
+	0x0F, 0x01, 0x20, 0x90, 0x40, 0x08, 0x60, 0x70, 0x47, 0x00, 0xBE, 0x70, 0x47, 0x12, 0x49, 0x11,
+	0x48, 0xC8, 0x60, 0x70, 0x47, 0x70, 0xB5, 0x0B, 0x4D, 0x00, 0x28, 0x00, 0xD1, 0x0F, 0x48, 0x10,
+	0x49, 0x04, 0x46, 0x68, 0x60, 0x48, 0x1E, 0x20, 0x18, 0x07, 0xF0, 0x81, 0xFC, 0x7D, 0x21, 0x28,
+	0x70, 0xC9, 0x00, 0x48, 0x1E, 0x20, 0x18, 0x07, 0xF0, 0x7A, 0xFC, 0xA8, 0x60, 0xC0, 0x03, 0xE8,
+	0x60, 0x70, 0xBD, 0x00, 0x00, 0x98, 0x01, 0x00, 0x20, 0x00, 0xE4, 0x00, 0xE0, 0x00, 0xE1, 0x00,
+	0xE0, 0x80, 0xE2, 0x00, 0xE0, 0x04, 0x00, 0xFA, 0x05, 0x00, 0xED, 0x00, 0xE0, 0x00, 0x51, 0x25,
+	0x02, 0x40, 0x42, 0x0F, 0x00, 0xFE, 0xB5, 0xFF, 0x48, 0x16, 0x21, 0x00, 0x78, 0x48, 0x43, 0xFE,
+	0x49, 0x08, 0x5A, 0x00, 0x90, 
+	0x00, 0x00, 0xC4, 0x00, 0x80, 0xFD, 0x48, 0x01, 0x21, 0x00, 0x78, 0xFE, 0x4A, 0x81, 0x40, 0x8E,
+	0x46, 0xFB, 0x49, 0x12, 0x78, 0x09, 0x78, 0x51, 0x43, 0xFB, 0x4A, 0x49, 0x00, 0x12, 0x68, 0x8C,
+	0x18, 0x66, 0xE0, 0x00, 0x99, 0x72, 0x46, 0x11, 0x42, 0x5E, 0xD0, 0xF8, 0x4A, 0x41, 0x00, 0x57,
+	0x5E, 0x8A, 0x18, 0x10, 0x25, 0x55, 0x5F, 0x20, 0x21, 0x30, 0x23, 0x51, 0x5E, 0xD3, 0x5E, 0xED,
+	0x4A, 0xAC, 0x46, 0x12, 0x78, 0x16, 0x25, 0x6A, 0x43, 0xEB, 0x4D, 0x52, 0x19, 0x12, 0x18, 0x12,
+	0x79, 0x65, 0x46, 0x7D, 0x19, 0x01, 0x95, 0x6D, 0x18, 0xED, 0x1A, 0xED, 0x4E, 0xAD, 0x10, 0xB5,
+	0x42, 0x01, 0xDA, 0x35, 0x46, 0x04, 0xE0, 0xEA, 0x4E, 0xF6, 0x43, 0xB5, 0x42, 0x00, 0xDD, 0x35,
+	0x46, 0x56, 0x00, 0xA5, 0x53, 0x01, 0x9D, 0xE6, 0x4E, 0xED, 0x18, 0x6D, 0x1A, 0xAD, 0x10, 0xB5,
+	0x42, 0x01, 0xDA, 0x35, 0x46, 
+	0x00, 0x00, 0xC5, 0x00, 0x80, 0x04, 0xE0, 0xE2, 0x4E, 0xF6, 0x43, 0xB5, 0x42, 0x00, 0xDD, 0x35,
+	0x46, 0xDC, 0x4E, 0x36, 0x78, 0x96, 0x19, 0x76, 0x00, 0xA5, 0x53, 0x7D, 0x18, 0xED, 0x18, 0x66,
+	0x46, 0xAD, 0x1B, 0xDB, 0x4E, 0xAD, 0x10, 0xB5, 0x42, 0x01, 0xDA, 0x35, 0x46, 0x04, 0xE0, 0xD8,
+	0x4E, 0xF6, 0x43, 0xB5, 0x42, 0x00, 0xDD, 0x35, 0x46, 0xD2, 0x4E, 0x61, 0x44, 0x36, 0x78, 0xC9,
+	0x18, 0x76, 0x00, 0xB6, 0x18, 0x76, 0x00, 0xC9, 0x1B, 0xD1, 0x4B, 0x89, 0x10, 0xA5, 0x53, 0x99,
+	0x42, 0x02, 0xDB, 0x5B, 0x0C, 0x99, 0x42, 0x00, 0xDD, 0x19, 0x46, 0xCA, 0x4B, 0x1B, 0x78, 0x5D,
+	0x00, 0x5B, 0x19, 0x9A, 0x18, 0x52, 0x00, 0xA1, 0x52, 0x71, 0x46, 0x49, 0x00, 0x8E, 0x46, 0x40,
+	0x1C, 0xC8, 0x49, 0x09, 0x78, 0x88, 0x42, 0x94, 0xD3, 0xC7, 0x48, 0xC8, 0x49, 0x00, 0x78, 0x09,
+	0x78, 0x88, 0x42, 0x09, 0xD1, 
+	0x00, 0x00, 0xC6, 0x00, 0x80, 0xC6, 0x49, 0x08, 0x78, 0x00, 0x28, 0x05, 0xD0, 0x02, 0x28, 0x03,
+	0xD2, 0x40, 0x1C, 0x08, 0x70, 0xFC, 0xF7, 0xA0, 0xFC, 0xFE, 0xBD, 0xFE, 0xB5, 0x14, 0x25, 0xC1,
+	0x48, 0x02, 0x21, 0xC1, 0x60, 0xBC, 0x49, 0x08, 0x78, 0x40, 0x1C, 0x08, 0x70, 0xB4, 0x48, 0xB5,
+	0x49, 0x00, 0x78, 0x09, 0x78, 0x48, 0x43, 0xB4, 0x49, 0x40, 0x00, 0x09, 0x68, 0x44, 0x18, 0xBA,
+	0x48, 0x01, 0x90, 0x41, 0x69, 0x20, 0x30, 0x00, 0x90, 0x01, 0x29, 0x16, 0xD1, 0xFC, 0xF7, 0xE2,
+	0xF9, 0x00, 0x09, 0x03, 0xD0, 0x00, 0x98, 0x80, 0x7A, 0x00, 0x28, 0x0E, 0xD1, 0xB3, 0x48, 0x00,
+	0x6A, 0xB3, 0x49, 0x00, 0xB2, 0x0A, 0x68, 0x12, 0x18, 0x0A, 0x60, 0x01, 0x99, 0x89, 0x69, 0xA3,
+	0x22, 0x92, 0x00, 0x50, 0x43, 0x41, 0x43, 0x08, 0x14, 0x00, 0xE0, 0x00, 0x20, 0x84, 0x46, 0x9D,
+	0x48, 0x16, 0x21, 0x00, 0x78, 
+	0x00, 0x00, 0xC7, 0x00, 0x80, 0x48, 0x43, 0x9C, 0x49, 0x08, 0x5A, 0x01, 0x21, 0x86, 0x46, 0x9B,
+	0x48, 0x00, 0x78, 0x81, 0x40, 0x24, 0xE0, 0x72, 0x46, 0x0A, 0x42, 0x1F, 0xD0, 0xA3, 0x4B, 0x82,
+	0x00, 0xD2, 0x18, 0x12, 0x68, 0xA3, 0x4E, 0x13, 0xB2, 0x42, 0x00, 0xB2, 0x5E, 0x91, 0x4E, 0x16,
+	0x27, 0x36, 0x78, 0x7E, 0x43, 0x90, 0x4F, 0xF6, 0x19, 0x36, 0x18, 0x36, 0x79, 0x67, 0x46, 0xDB,
+	0x1B, 0x53, 0x43, 0x9A, 0x12, 0x92, 0x4B, 0x12, 0xB2, 0x9A, 0x42, 0x02, 0xDB, 0x5B, 0x0C, 0x9A,
+	0x42, 0x02, 0xDD, 0x72, 0x00, 0xA3, 0x52, 0x01, 0xE0, 0x73, 0x00, 0xE2, 0x52, 0x49, 0x00, 0x40,
+	0x1C, 0x8C, 0x4A, 0x12, 0x78, 0x90, 0x42, 0xD6, 0xD3, 0x93, 0x4C, 0x85, 0x49, 0x20, 0x78, 0x08,
+	0x70, 0x92, 0x48, 0x80, 0x49, 0x00, 0x78, 0x92, 0x4E, 0x08, 0x70, 0x31, 0x78, 0x01, 0x29, 0x19,
+	0xD1, 0x00, 0x21, 0x31, 0x70, 
+	0x00, 0x00, 0xC8, 0x00, 0x80, 0x87, 0x4F, 0x49, 0x1E, 0xF9, 0x60, 0x00, 0xF0, 0x61, 0xFE, 0x00,
+	0xF0, 0x51, 0xFE, 0x00, 0x98, 0xC0, 0x7C, 0xFC, 0xF7, 0xA3, 0xFB, 0x05, 0x20, 0xFF, 0xF7, 0xB5,
+	0xFE, 0x38, 0x68, 0x03, 0x21, 0x49, 0x07, 0x08, 0x43, 0x38, 0x60, 0x38, 0x68, 0x80, 0x00, 0x01,
+	0xD5, 0x6D, 0x1E, 0xFA, 0xD2, 0x78, 0x48, 0x79, 0x49, 0x00, 0x78, 0x09, 0x78, 0x40, 0x1C, 0x0F,
+	0x25, 0x80, 0x4F, 0x88, 0x42, 0x57, 0xD2, 0x6F, 0x48, 0x7F, 0x4A, 0x01, 0x78, 0x20, 0x78, 0x09,
+	0x18, 0x51, 0x5C, 0x89, 0x00, 0xC9, 0x19, 0x0D, 0x60, 0x40, 0x1C, 0xC0, 0xB2, 0x7B, 0x49, 0x20,
+	0x70, 0x09, 0x78, 0x88, 0x42, 0x0B, 0xD9, 0x7A, 0x48, 0x74, 0x49, 0x00, 0x78, 0x20, 0x70, 0x08,
+	0x78, 0x40, 0x1C, 0xC0, 0xB2, 0x08, 0x70, 0xFC, 0xF7, 0xAD, 0xFB, 0x01, 0x20, 0x30, 0x70, 0x01,
+	0x98, 0x40, 0x69, 0x00, 0x28, 
+	0x00, 0x00, 0xC9, 0x00, 0x80, 0x1C, 0xD0, 0x73, 0x48, 0x6F, 0x49, 0x02, 0x78, 0x89, 0x5C, 0x3A,
+	0x46, 0x89, 0x00, 0xC9, 0x19, 0x0D, 0x60, 0x70, 0x49, 0x23, 0x78, 0x09, 0x78, 0x49, 0x08, 0x99,
+	0x42, 0x04, 0xD9, 0x61, 0x49, 0x40, 0x39, 0x49, 0x6A, 0x49, 0x1E, 0x01, 0xE0, 0x55, 0x49, 0x09,
+	0x78, 0x01, 0x70, 0x65, 0x4B, 0x00, 0x78, 0x0C, 0x21, 0x18, 0x5C, 0x80, 0x00, 0x80, 0x18, 0x01,
+	0x60, 0x50, 0x48, 0x61, 0x4B, 0x02, 0x78, 0x20, 0x78, 0x01, 0x21, 0x12, 0x18, 0x9A, 0x5C, 0x92,
+	0x00, 0xD2, 0x19, 0x11, 0x60, 0x60, 0x49, 0x59, 0x4A, 0x09, 0x78, 0x12, 0x78, 0x51, 0x43, 0x08,
+	0x18, 0xFC, 0xF7, 0x2A, 0xFB, 0x30, 0x78, 0x01, 0x28, 0x2D, 0xD0, 0x4E, 0x49, 0x08, 0x68, 0x03,
+	0x22, 0x52, 0x07, 0x10, 0x43, 0x08, 0x60, 0x48, 0x48, 0x48, 0x49, 0x00, 0x78, 0x09, 0x78, 0x88,
+	0x42, 0x26, 0xD1, 0x40, 0x48, 
+	0x00, 0x00, 0xCA, 0x00, 0x80, 0x3E, 0x46, 0x01, 0x78, 0x20, 0x78, 0x4F, 0x4C, 0x08, 0x18, 0x20,
+	0x5C, 0x80, 0x00, 0xC0, 0x19, 0x05, 0x60, 0x43, 0x48, 0x01, 0x69, 0x02, 0x22, 0x91, 0x43, 0x01,
+	0x61, 0x05, 0x20, 0xFF, 0xF7, 0x32, 0xFE, 0x4B, 0x48, 0x00, 0x78, 0x20, 0x5C, 0x80, 0x00, 0x80,
+	0x19, 0x05, 0x60, 0x3B, 0x49, 0x08, 0x78, 0x00, 0x28, 0x06, 0xD0, 0x02, 0x28, 0x04, 0xD2, 0x40,
+	0x1C, 0x08, 0x70, 0xFC, 0xF7, 0x89, 0xFB, 0xFE, 0xBD, 0x44, 0x49, 0x01, 0x20, 0x08, 0x70, 0xFE,
+	0xBD, 0x34, 0x49, 0x08, 0x68, 0x8A, 0x03, 0x10, 0x43, 0x08, 0x60, 0xFE, 0xBD, 0x10, 0xB5, 0x3A,
+	0x4B, 0x0F, 0x21, 0x1A, 0x5C, 0x94, 0x00, 0x37, 0x4A, 0xA4, 0x18, 0x21, 0x60, 0x18, 0x18, 0x43,
+	0x78, 0x9B, 0x00, 0x9B, 0x18, 0x19, 0x60, 0x83, 0x78, 0x9B, 0x00, 0x9B, 0x18, 0x19, 0x60, 0xC0,
+	0x78, 0x80, 0x00, 0x80, 0x18, 
+	0x00, 0x00, 0xCB, 0x00, 0x80, 0x01, 0x60, 0x10, 0xBD, 0x70, 0xB5, 0x2F, 0x4B, 0x89, 0x00, 0x1A,
+	0x5C, 0x33, 0x4C, 0x96, 0x00, 0x2B, 0x4A, 0x65, 0x5C, 0xB6, 0x18, 0x35, 0x60, 0x18, 0x18, 0x43,
+	0x78, 0x09, 0x19, 0x9B, 0x00, 0x4C, 0x78, 0x9B, 0x18, 0x1C, 0x60, 0x84, 0x78, 0x8B, 0x78, 0xA4,
+	0x00, 0xA4, 0x18, 0x23, 0x60, 0xC0, 0x78, 0xC9, 0x78, 0x80, 0x00, 0x80, 0x18, 0x01, 0x60, 0x70,
+	0xBD, 0xFE, 0xB5, 0x14, 0x24, 0x17, 0x48, 0x02, 0x21, 0xC1, 0x60, 0x13, 0x49, 0x08, 0x78, 0x40,
+	0x1C, 0x08, 0x70, 0x24, 0x48, 0x0D, 0x49, 0x00, 0x78, 0x00, 0x01, 0x45, 0x18, 0x12, 0x48, 0x02,
+	0x90, 0x41, 0x69, 0x20, 0x30, 0x11, 0x4E, 0x01, 0x90, 0x01, 0x29, 0x50, 0xD1, 0xFC, 0xF7, 0x92,
+	0xF8, 0x00, 0x09, 0x39, 0xE0, 0xA1, 0x00, 0x00, 0x20, 0x00, 0xEC, 0x00, 0x00, 0xB5, 0x01, 0x00,
+	0x20, 0xA3, 0x00, 0x00, 0x20, 
+	0x00, 0x00, 0xCC, 0x00, 0x80, 0x9E, 0x00, 0x00, 0x20, 0xD4, 0x00, 0x00, 0x20, 0x36, 0x03, 0x00,
+	0x20, 0x00, 0x80, 0xFF, 0xFF, 0xB6, 0x01, 0x00, 0x20, 0xA6, 0x00, 0x00, 0x20, 0xA9, 0x00, 0x00,
+	0x20, 0xB4, 0x01, 0x00, 0x20, 0x00, 0x00, 0x11, 0x40, 0x30, 0xEA, 0x00, 0x00, 0x00, 0x02, 0x11,
+	0x40, 0xD0, 0x00, 0x00, 0x20, 0x76, 0x03, 0x00, 0x20, 0xA4, 0x00, 0x00, 0x20, 0xA2, 0x00, 0x00,
+	0x20, 0xA8, 0x01, 0x00, 0x20, 0x00, 0x04, 0x11, 0x40, 0x00, 0xEB, 0x00, 0x00, 0xAD, 0x00, 0x00,
+	0x20, 0xAC, 0x00, 0x00, 0x20, 0xA5, 0x00, 0x00, 0x20, 0x9D, 0x00, 0x00, 0x20, 0xAE, 0x00, 0x00,
+	0x20, 0xA8, 0xDC, 0x00, 0x00, 0xA8, 0x00, 0x00, 0x20, 0x03, 0xD0, 0x01, 0x98, 0x80, 0x7A, 0x00,
+	0x28, 0x0D, 0xD1, 0x30, 0x6A, 0xFA, 0x49, 0x00, 0xB2, 0x0A, 0x68, 0x12, 0x18, 0x0A, 0x60, 0x02,
+	0x99, 0x89, 0x69, 0xA3, 0x22, 
+	0x00, 0x00, 0xCD, 0x00, 0x80, 0x92, 0x00, 0x50, 0x43, 0x41, 0x43, 0x09, 0x14, 0x00, 0xE0, 0x00,
+	0x21, 0xF4, 0x48, 0xF5, 0x4F, 0x00, 0x78, 0x0B, 0xE0, 0xF4, 0x4B, 0x82, 0x00, 0xD2, 0x18, 0x12,
+	0x68, 0x46, 0x00, 0x13, 0xB2, 0xBA, 0x5F, 0x5B, 0x1A, 0x53, 0x43, 0x9A, 0x12, 0xAA, 0x53, 0x40,
+	0x1C, 0xEF, 0x4A, 0x12, 0x78, 0x90, 0x42, 0xEF, 0xD3, 0xEE, 0x48, 0xEF, 0x4D, 0x00, 0x78, 0x01,
+	0x28, 0x1B, 0xD1, 0xEC, 0x49, 0x00, 0x20, 0x08, 0x70, 0xEC, 0x4E, 0x40, 0x1E, 0xF0, 0x60, 0x28,
+	0x78, 0x00, 0xF0, 0xFE, 0xFC, 0x00, 0xF0, 0xEE, 0xFC, 0x01, 0x98, 0xC0, 0x7C, 0xFC, 0xF7, 0x40,
+	0xFA, 0x05, 0x20, 0xFF, 0xF7, 0x52, 0xFD, 0x30, 0x68, 0x03, 0x21, 0x49, 0x07, 0x08, 0x43, 0x30,
+	0x60, 0x30, 0x68, 0x80, 0x00, 0x01, 0xD5, 0x64, 0x1E, 0xFA, 0xD2, 0xE1, 0x48, 0xE1, 0x4C, 0x00,
+	0x78, 0x21, 0x78, 0xE1, 0x4E, 
+	0x00, 0x00, 0xCE, 0x00, 0x80, 0x40, 0x18, 0x00, 0x90, 0x30, 0x78, 0xE0, 0x4F, 0x00, 0x28, 0x20,
+	0xD0, 0x01, 0x28, 0x2E, 0xD0, 0x02, 0x28, 0xDE, 0x48, 0x00, 0x78, 0x7B, 0xD1, 0xDD, 0x49, 0x40,
+	0x1C, 0x09, 0x78, 0x88, 0x42, 0x37, 0xD2, 0xDC, 0x48, 0xDC, 0x49, 0x00, 0x78, 0x00, 0x1D, 0xC0,
+	0xB2, 0x20, 0x70, 0x09, 0x78, 0x88, 0x42, 0x31, 0xD9, 0xD9, 0x48, 0x00, 0x78, 0x20, 0x70, 0x28,
+	0x78, 0x40, 0x1C, 0xC0, 0xB2, 0x28, 0x70, 0xFC, 0xF7, 0x45, 0xFA, 0xCA, 0x48, 0x01, 0x21, 0x01,
+	0x70, 0x29, 0xE0, 0x02, 0x21, 0x00, 0x98, 0xFF, 0xF7, 0x17, 0xFF, 0x38, 0x78, 0x29, 0x78, 0xC0,
+	0x1C, 0x80, 0x08, 0x80, 0x00, 0x48, 0x43, 0x21, 0x78, 0xC9, 0x1C, 0x89, 0x08, 0x89, 0x00, 0x89,
+	0x1C, 0x0E, 0xE0, 0x03, 0x21, 0x00, 0x98, 0xFF, 0xF7, 0x07, 0xFF, 0x38, 0x78, 0x29, 0x78, 0xC0,
+	0x1C, 0x80, 0x08, 0x80, 0x00, 
+	0x00, 0x00, 0xCF, 0x00, 0x80, 0x48, 0x43, 0x21, 0x78, 0xC9, 0x1C, 0x89, 0x08, 0x89, 0x00, 0xC9,
+	0x1C, 0x40, 0x18, 0xFC, 0xF7, 0xD1, 0xF9, 0x30, 0x78, 0x40, 0x1C, 0x5B, 0xE0, 0xC0, 0x1C, 0x88,
+	0x42, 0x01, 0xD9, 0xC9, 0x1E, 0x21, 0x70, 0x00, 0x98, 0xFF, 0xF7, 0xD8, 0xFE, 0x02, 0x98, 0x40,
+	0x69, 0x00, 0x28, 0x1B, 0xD0, 0xBC, 0x48, 0xBB, 0x4A, 0x03, 0x78, 0x0F, 0x21, 0xD2, 0x5C, 0xBB,
+	0x4B, 0x92, 0x00, 0xD2, 0x18, 0x11, 0x60, 0x39, 0x78, 0x22, 0x78, 0x49, 0x08, 0x91, 0x42, 0x03,
+	0xD9, 0xB7, 0x49, 0x49, 0x6A, 0x49, 0x1E, 0x01, 0xE0, 0xA9, 0x49, 0x09, 0x78, 0x01, 0x70, 0xB1,
+	0x4A, 0x00, 0x78, 0x0C, 0x21, 0x10, 0x5C, 0x82, 0x00, 0xD0, 0x18, 0x01, 0x60, 0xA4, 0x48, 0x21,
+	0x78, 0x00, 0x78, 0x40, 0x18, 0x00, 0x21, 0x00, 0x90, 0xFF, 0xF7, 0xC6, 0xFE, 0x38, 0x78, 0x29,
+	0x78, 0xC0, 0x1C, 0x80, 0x08, 
+	0x00, 0x00, 0xD0, 0x00, 0x80, 0x80, 0x00, 0x48, 0x43, 0x21, 0x78, 0xC9, 0x1C, 0x89, 0x08, 0x89,
+	0x00, 0xBE, 0xE7, 0xFF, 0xE7, 0x9F, 0x49, 0x40, 0x1C, 0x09, 0x78, 0x88, 0x42, 0x11, 0xD2, 0x01,
+	0x21, 0x00, 0x98, 0xFF, 0xF7, 0xB1, 0xFE, 0x38, 0x78, 0xC0, 0x1C, 0x81, 0x08, 0x28, 0x78, 0x89,
+	0x00, 0x41, 0x43, 0x20, 0x78, 0xC0, 0x1C, 0x80, 0x08, 0x80, 0x00, 0x40, 0x1C, 0x08, 0x18, 0xFC,
+	0xF7, 0x7B, 0xF9, 0xFF, 0xF7, 0xD7, 0xFC, 0x9B, 0x49, 0x28, 0x78, 0x08, 0x70, 0x92, 0x48, 0x21,
+	0x78, 0x01, 0x70, 0x00, 0x20, 0x30, 0x70, 0x8E, 0x48, 0x8E, 0x49, 0x00, 0x78, 0x09, 0x78, 0x42,
+	0x1C, 0x8A, 0x42, 0x09, 0xD2, 0x83, 0x4A, 0x12, 0x78, 0x01, 0x2A, 0x24, 0xD0, 0x83, 0x4A, 0x13,
+	0x68, 0x03, 0x24, 0x64, 0x07, 0x23, 0x43, 0x13, 0x60, 0x88, 0x42, 0x1D, 0xD1, 0x00, 0x98, 0xFF,
+	0xF7, 0x6D, 0xFE, 0x89, 0x4A, 
+	0x00, 0x00, 0xD1, 0x00, 0x80, 0x87, 0x49, 0x12, 0x78, 0x0F, 0x20, 0x89, 0x5C, 0x87, 0x4A, 0x89,
+	0x00, 0x89, 0x18, 0x08, 0x60, 0x79, 0x49, 0x08, 0x69, 0x02, 0x22, 0x90, 0x43, 0x08, 0x61, 0x05,
+	0x20, 0xFF, 0xF7, 0x73, 0xFC, 0x84, 0x48, 0x00, 0x78, 0x00, 0x28, 0x01, 0xD0, 0x02, 0x28, 0x02,
+	0xD3, 0x82, 0x49, 0x01, 0x20, 0x08, 0x70, 0xFE, 0xBD, 0x70, 0x49, 0x08, 0x68, 0x8A, 0x03, 0x10,
+	0x43, 0x08, 0x60, 0xFE, 0xBD, 0xF8, 0xB5, 0x72, 0x49, 0x7A, 0x4D, 0x08, 0x78, 0x78, 0x4F, 0x40,
+	0x1C, 0x08, 0x70, 0x7B, 0x49, 0x28, 0x78, 0x09, 0x68, 0x00, 0x01, 0x44, 0x18, 0x40, 0x37, 0x78,
+	0x69, 0x62, 0x4E, 0x01, 0x28, 0x15, 0xD1, 0xFB, 0xF7, 0x15, 0xFF, 0x00, 0x09, 0x04, 0xD0, 0x38,
+	0x46, 0x20, 0x30, 0x80, 0x7A, 0x00, 0x28, 0x0C, 0xD1, 0x30, 0x6A, 0x59, 0x49, 0x00, 0xB2, 0x0A,
+	0x68, 0x12, 0x18, 0x0A, 0x60, 
+	0x00, 0x00, 0xD2, 0x00, 0x80, 0xB9, 0x69, 0xA3, 0x22, 0x92, 0x00, 0x50, 0x43, 0x41, 0x43, 0x09,
+	0x14, 0x00, 0xE0, 0x00, 0x21, 0x53, 0x48, 0x6B, 0x4B, 0x00, 0x78, 0x0B, 0xE0, 0x82, 0x00, 0x92,
+	0x19, 0x12, 0x68, 0x00, 0x27, 0x12, 0xB2, 0xDF, 0x5F, 0x52, 0x1A, 0x7A, 0x43, 0x12, 0x13, 0x47,
+	0x00, 0xE2, 0x53, 0x40, 0x1C, 0x4E, 0x4A, 0x12, 0x78, 0x90, 0x42, 0xEF, 0xD3, 0x28, 0x78, 0x00,
+	0x21, 0x40, 0x1C, 0xC0, 0xB2, 0x4D, 0x4C, 0x28, 0x70, 0xC9, 0x43, 0xE1, 0x60, 0x51, 0x49, 0x09,
+	0x78, 0x88, 0x42, 0x0F, 0xD2, 0x00, 0xF0, 0xBC, 0xFB, 0x00, 0xF0, 0xAC, 0xFB, 0x28, 0x78, 0xFC,
+	0xF7, 0x39, 0xF9, 0x28, 0x78, 0xFC, 0xF7, 0xE8, 0xF8, 0x20, 0x68, 0x03, 0x21, 0x49, 0x07, 0x08,
+	0x43, 0x20, 0x60, 0xF8, 0xBD, 0x20, 0x69, 0x02, 0x21, 0x88, 0x43, 0x20, 0x61, 0x05, 0x20, 0xFF,
+	0xF7, 0x04, 0xFC, 0x4D, 0x49, 
+	0x00, 0x00, 0xD3, 0x00, 0x80, 0x50, 0x4B, 0x08, 0x78, 0x00, 0x28, 0x0C, 0xD0, 0x02, 0x28, 0x0A,
+	0xD2, 0x40, 0x1C, 0x08, 0x70, 0x18, 0x78, 0x01, 0x28, 0x02, 0xD1, 0xFC, 0xF7, 0x53, 0xFA, 0xF8,
+	0xBD, 0xFC, 0xF7, 0x3F, 0xFA, 0xF8, 0xBD, 0x49, 0x4A, 0x14, 0x78, 0x01, 0x22, 0x03, 0x2C, 0x06,
+	0xD1, 0x1B, 0x78, 0x01, 0x2B, 0x03, 0xD1, 0x00, 0x28, 0xF2, 0xD0, 0x0A, 0x70, 0xF0, 0xE7, 0x3F,
+	0x48, 0x02, 0x70, 0x43, 0x48, 0x00, 0x68, 0x80, 0x47, 0xF8, 0xBD, 0xF0, 0xB5, 0x2B, 0x4A, 0x97,
+	0xB0, 0x02, 0x20, 0xD0, 0x60, 0x2E, 0x49, 0x08, 0x78, 0x40, 0x1C, 0xC0, 0xB2, 0x08, 0x70, 0x16,
+	0x90, 0x26, 0x48, 0x40, 0x30, 0x80, 0x69, 0x00, 0x01, 0x01, 0xD5, 0x3A, 0x48, 0x00, 0xE0, 0x3A,
+	0x48, 0x0E, 0x90, 0x22, 0x48, 0x80, 0x68, 0x1B, 0x4A, 0x00, 0x0A, 0x0D, 0x90, 0x37, 0x48, 0x01,
+	0x88, 0x00, 0x20, 0x02, 0x90, 
+	0x00, 0x00, 0xD4, 0x00, 0x80, 0x2C, 0x48, 0x00, 0x78, 0x15, 0x90, 0x15, 0x78, 0x01, 0x22, 0xAA,
+	0x40, 0x94, 0x46, 0x17, 0x4A, 0x00, 0x28, 0x14, 0x78, 0x0C, 0xD0, 0x63, 0x46, 0x00, 0x22, 0x28,
+	0x46, 0x05, 0xE0, 0x0E, 0x46, 0x1E, 0x42, 0x01, 0xD0, 0x52, 0x1C, 0x5B, 0x00, 0x40, 0x1C, 0xA0,
+	0x42, 0xF7, 0xD3, 0x01, 0xE0, 0x2A, 0x48, 0x02, 0x78, 0x16, 0x48, 0x16, 0x9B, 0x00, 0x78, 0x14,
+	0x90, 0x1B, 0x48, 0x60, 0x30, 0x13, 0x90, 0x01, 0x2B, 0x7E, 0xD1, 0x00, 0x20, 0x08, 0x90, 0x0A,
+	0x90, 0x60, 0x46, 0x0B, 0x90, 0x00, 0x20, 0x10, 0x90, 0x03, 0x95, 0x28, 0x46, 0x6D, 0xE0, 0x00,
+	0x00, 0xD0, 0x00, 0x00, 0x20, 0xB5, 0x01, 0x00, 0x20, 0x76, 0x03, 0x00, 0x20, 0x00, 0x02, 0x11,
+	0x40, 0xB6, 0x01, 0x00, 0x20, 0xA8, 0x01, 0x00, 0x20, 0xA2, 0x00, 0x00, 0x20, 0x00, 0x00, 0x11,
+	0x40, 0x9E, 0x00, 0x00, 0x20, 
+	0x00, 0x00, 0xD5, 0x00, 0x80, 0xA4, 0x00, 0x00, 0x20, 0xA8, 0x00, 0x00, 0x20, 0x9D, 0x00, 0x00,
+	0x20, 0xA6, 0x00, 0x00, 0x20, 0xA9, 0x00, 0x00, 0x20, 0xA3, 0x00, 0x00, 0x20, 0xAD, 0x00, 0x00,
+	0x20, 0xAC, 0x00, 0x00, 0x20, 0x00, 0xEB, 0x00, 0x00, 0xA5, 0x00, 0x00, 0x20, 0x00, 0x04, 0x11,
+	0x40, 0xF0, 0xE9, 0x00, 0x00, 0xA1, 0x00, 0x00, 0x20, 0xB4, 0x01, 0x00, 0x20, 0xAE, 0x00, 0x00,
+	0x20, 0xD8, 0x00, 0x00, 0x20, 0xC0, 0x00, 0x00, 0x20, 0xB8, 0x01, 0x00, 0x20, 0xB7, 0x01, 0x00,
+	0x20, 0xCC, 0x00, 0x00, 0x20, 0x00, 0x12, 0x11, 0x40, 0x00, 0x10, 0x11, 0x40, 0xC6, 0x00, 0x00,
+	0x20, 0xAF, 0x00, 0x00, 0x20, 0x0B, 0x98, 0x01, 0x42, 0x21, 0xD0, 0x00, 0x26, 0x33, 0x46, 0x11,
+	0xE0, 0x18, 0x46, 0x10, 0x9F, 0x50, 0x43, 0xC0, 0x19, 0x0E, 0x9F, 0x80, 0x00, 0x38, 0x58, 0x00,
+	0x04, 0x80, 0x14, 0x01, 0xD5, 
+	0x00, 0x00, 0xD6, 0x00, 0x80, 0x40, 0x42, 0x00, 0xB2, 0x0A, 0x9F, 0x36, 0x18, 0x87, 0x42, 0x00,
+	0xDA, 0x0A, 0x90, 0x5B, 0x1C, 0x0D, 0x98, 0x83, 0x42, 0xEA, 0xD3, 0x08, 0x98, 0x86, 0x42, 0x03,
+	0xDD, 0x08, 0x96, 0xFA, 0x4B, 0x03, 0x98, 0x18, 0x70, 0x10, 0x98, 0x40, 0x1C, 0x10, 0x90, 0x0B,
+	0x98, 0x40, 0x00, 0x0B, 0x90, 0x03, 0x98, 0x40, 0x1C, 0x03, 0x90, 0xA0, 0x42, 0xD2, 0xD3, 0xF4,
+	0x48, 0x0A, 0x9B, 0x00, 0x78, 0x98, 0x42, 0x00, 0xE0, 0x07, 0xE1, 0x02, 0xDA, 0x18, 0x46, 0xF0,
+	0x4B, 0x18, 0x70, 0xF0, 0x48, 0x08, 0x9B, 0x06, 0x68, 0xEF, 0x48, 0xB3, 0x42, 0x07, 0x78, 0xEF,
+	0x48, 0x07, 0xDD, 0x43, 0x6B, 0xBB, 0x42, 0x04, 0xD9, 0xEA, 0x4E, 0x08, 0x9B, 0x33, 0x60, 0xEC,
+	0x4B, 0x1F, 0x70, 0xE9, 0x4E, 0x7F, 0x1C, 0xFB, 0xB2, 0x33, 0x70, 0x46, 0x6B, 0x9E, 0x42, 0x05,
+	0xD9, 0xE8, 0x49, 0x08, 0x69, 
+	0x00, 0x00, 0xD7, 0x00, 0x80, 0x02, 0x22, 0x90, 0x43, 0x08, 0x61, 0x0D, 0xE0, 0x46, 0x6B, 0x9E,
+	0x42, 0x10, 0xD1, 0x40, 0x6B, 0xE2, 0x4B, 0x40, 0x1E, 0x1B, 0x78, 0x98, 0x42, 0x0A, 0xD0, 0xE1,
+	0x48, 0x01, 0x69, 0x02, 0x22, 0x91, 0x43, 0x01, 0x61, 0x05, 0x20, 0xFF, 0xF7, 0xEE, 0xFA, 0xDE,
+	0x48, 0x00, 0x78, 0xBA, 0xE0, 0x13, 0x98, 0x06, 0x89, 0xD5, 0x48, 0xDC, 0x4F, 0x03, 0x78, 0x38,
+	0x68, 0x9E, 0x42, 0x7E, 0xD2, 0x83, 0x42, 0x7C, 0xDD, 0x3B, 0x60, 0xD9, 0x4B, 0x01, 0x20, 0x18,
+	0x70, 0x00, 0x20, 0x08, 0x90, 0x01, 0x90, 0x80, 0xE0, 0x60, 0x46, 0x0B, 0x90, 0x00, 0x20, 0x09,
+	0x90, 0x2B, 0x46, 0x10, 0x90, 0x29, 0xE0, 0x0B, 0x98, 0x01, 0x42, 0x22, 0xD0, 0x0F, 0x98, 0x10,
+	0x9E, 0x50, 0x43, 0x80, 0x19, 0x0E, 0x9E, 0x80, 0x00, 0x30, 0x58, 0xC4, 0x4E, 0x00, 0xB2, 0x36,
+	0x78, 0xB3, 0x42, 0x09, 0xD1, 
+	0x00, 0x00, 0xD8, 0x00, 0x80, 0x06, 0x46, 0xFF, 0x36, 0xCA, 0x4F, 0x91, 0x36, 0xBE, 0x42, 0x03,
+	0xD3, 0xC9, 0x4F, 0x3E, 0x88, 0x76, 0x1C, 0x3E, 0x80, 0x5E, 0x00, 0x04, 0xAF, 0xB8, 0x53, 0x46,
+	0x42, 0x00, 0x28, 0x00, 0xDB, 0x06, 0x46, 0x09, 0x98, 0x30, 0x18, 0x09, 0x90, 0x10, 0x98, 0x40,
+	0x1C, 0x10, 0x90, 0x0B, 0x98, 0x40, 0x00, 0x5B, 0x1C, 0x0B, 0x90, 0xA3, 0x42, 0xD3, 0xD3, 0xBF,
+	0x4B, 0x50, 0x00, 0x18, 0x5E, 0x09, 0x9B, 0x58, 0x43, 0x00, 0x12, 0x09, 0x90, 0x00, 0x20, 0x0A,
+	0x90, 0x0C, 0x90, 0x60, 0x46, 0x09, 0x9B, 0x0B, 0x90, 0x28, 0x46, 0x5F, 0x42, 0x15, 0xE0, 0x0B,
+	0x9B, 0x19, 0x42, 0x0E, 0xD0, 0x43, 0x00, 0x04, 0xAE, 0xF3, 0x5E, 0xBB, 0x42, 0x09, 0xDB, 0x09,
+	0x9E, 0xB3, 0x42, 0x06, 0xDC, 0x0C, 0x9E, 0x9B, 0x19, 0x1B, 0xB2, 0x0C, 0x93, 0x0A, 0x9B, 0x5B,
+	0x1C, 0x0A, 0x93, 0x0B, 0x9B, 
+	0x00, 0x00, 0xD9, 0x00, 0x80, 0x5B, 0x00, 0x40, 0x1C, 0x0B, 0x93, 0xA0, 0x42, 0xE7, 0xD3, 0x0A,
+	0x98, 0xAA, 0x4B, 0x40, 0x00, 0x18, 0x5E, 0x0C, 0x9B, 0x04, 0xAE, 0x58, 0x43, 0x9B, 0x4B, 0x00,
+	0x12, 0x1B, 0x78, 0x5B, 0x00, 0xF3, 0x5A, 0x18, 0x1A, 0x03, 0xB2, 0x58, 0x42, 0x00, 0x2B, 0x00,
+	0xDB, 0x18, 0x46, 0xFF, 0x26, 0x00, 0xB2, 0xFD, 0x36, 0xB0, 0x42, 0x00, 0xDD, 0x30, 0x46, 0x02,
+	0x9E, 0x00, 0xE0, 0x1F, 0xE0, 0x86, 0x42, 0x00, 0xDA, 0x02, 0x90, 0x01, 0x9E, 0x30, 0x18, 0x01,
+	0x90, 0x08, 0x98, 0xC0, 0x18, 0x08, 0x90, 0x0F, 0x98, 0x40, 0x1C, 0x0D, 0x9B, 0x0F, 0x90, 0x98,
+	0x42, 0x00, 0xD2, 0x79, 0xE7, 0x96, 0x49, 0x02, 0x98, 0x48, 0x60, 0x01, 0x98, 0x88, 0x60, 0x08,
+	0x98, 0x00, 0x28, 0x00, 0xDA, 0x40, 0x42, 0x93, 0x49, 0x08, 0x60, 0x8A, 0x49, 0x08, 0x68, 0x03,
+	0x22, 0x52, 0x07, 0x76, 0xE1, 
+	0x00, 0x00, 0xDA, 0x00, 0x80, 0x87, 0x4B, 0x19, 0x69, 0x02, 0x24, 0xA1, 0x43, 0x19, 0x61, 0x15,
+	0x99, 0x8D, 0x4B, 0x00, 0x29, 0x0C, 0xD0, 0x02, 0x29, 0x0A, 0xD2, 0x48, 0x1C, 0x18, 0x70, 0x7E,
+	0x48, 0x00, 0x21, 0x01, 0x70, 0x7B, 0x48, 0x01, 0x60, 0x14, 0x98, 0xFC, 0xF7, 0xA1, 0xF8, 0x62,
+	0xE1, 0x00, 0x28, 0x0E, 0xD1, 0x85, 0x49, 0x80, 0x4C, 0x08, 0x70, 0x85, 0x49, 0x08, 0x70, 0x85,
+	0x49, 0x08, 0x70, 0x0D, 0x99, 0x20, 0x88, 0x51, 0x43, 0x64, 0x22, 0x50, 0x43, 0x06, 0xF0, 0xB7,
+	0xFE, 0x20, 0x80, 0x81, 0x49, 0x01, 0x20, 0x08, 0x70, 0x4D, 0xE1, 0x00, 0x20, 0x08, 0x90, 0x01,
+	0x90, 0x0F, 0x90, 0x6A, 0x48, 0x00, 0x78, 0x12, 0x90, 0x0F, 0x98, 0x7D, 0xE0, 0x60, 0x46, 0x0B,
+	0x90, 0x00, 0x20, 0x09, 0x90, 0x2B, 0x46, 0x10, 0x90, 0x28, 0xE0, 0x0B, 0x98, 0x01, 0x42, 0x21,
+	0xD0, 0x0F, 0x98, 0x10, 0x9E, 
+	0x00, 0x00, 0xDB, 0x00, 0x80, 0x50, 0x43, 0x80, 0x19, 0x0E, 0x9E, 0x80, 0x00, 0x30, 0x58, 0x12,
+	0x9E, 0x00, 0xB2, 0xB3, 0x42, 0x09, 0xD1, 0x06, 0x46, 0xFF, 0x36, 0x66, 0x4F, 0x91, 0x36, 0xBE,
+	0x42, 0x03, 0xD3, 0x65, 0x4F, 0x3E, 0x88, 0x76, 0x1C, 0x3E, 0x80, 0x5E, 0x00, 0x04, 0xAF, 0xB8,
+	0x53, 0x46, 0x42, 0x00, 0x28, 0x00, 0xDB, 0x06, 0x46, 0x09, 0x98, 0x30, 0x18, 0x09, 0x90, 0x10,
+	0x98, 0x40, 0x1C, 0x10, 0x90, 0x0B, 0x98, 0x40, 0x00, 0x5B, 0x1C, 0x0B, 0x90, 0xA3, 0x42, 0xD4,
+	0xD3, 0x5A, 0x4B, 0x50, 0x00, 0x18, 0x5E, 0x09, 0x9B, 0x58, 0x43, 0x00, 0x12, 0x09, 0x90, 0x00,
+	0x20, 0x0A, 0x90, 0x0C, 0x90, 0x60, 0x46, 0x09, 0x9B, 0x0B, 0x90, 0x28, 0x46, 0x5F, 0x42, 0x15,
+	0xE0, 0x0B, 0x9B, 0x19, 0x42, 0x0E, 0xD0, 0x43, 0x00, 0x04, 0xAE, 0xF3, 0x5E, 0xBB, 0x42, 0x09,
+	0xDB, 0x09, 0x9E, 0xB3, 0x42, 
+	0x00, 0x00, 0xDC, 0x00, 0x80, 0x06, 0xDC, 0x0C, 0x9E, 0x9B, 0x19, 0x1B, 0xB2, 0x0C, 0x93, 0x0A,
+	0x9B, 0x5B, 0x1C, 0x0A, 0x93, 0x0B, 0x9B, 0x5B, 0x00, 0x40, 0x1C, 0x0B, 0x93, 0xA0, 0x42, 0xE7,
+	0xD3, 0x0A, 0x98, 0x46, 0x4B, 0x40, 0x00, 0x18, 0x5E, 0x0C, 0x9B, 0x04, 0xAE, 0x58, 0x43, 0x12,
+	0x9B, 0x00, 0x12, 0x5B, 0x00, 0xF3, 0x5A, 0x18, 0x1A, 0x03, 0xB2, 0x58, 0x42, 0x00, 0x2B, 0x00,
+	0xDB, 0x18, 0x46, 0xFF, 0x26, 0x00, 0xB2, 0xFD, 0x36, 0xB0, 0x42, 0x00, 0xDD, 0x30, 0x46, 0x02,
+	0x9E, 0x86, 0x42, 0x00, 0xDA, 0x02, 0x90, 0x08, 0x9E, 0xF3, 0x18, 0x08, 0x93, 0x01, 0x9B, 0x18,
+	0x18, 0x01, 0x90, 0x0F, 0x98, 0x40, 0x1C, 0x0F, 0x90, 0x0D, 0x9B, 0x98, 0x42, 0x00, 0xD2, 0x7D,
+	0xE7, 0x33, 0x48, 0x02, 0x99, 0x42, 0x68, 0x56, 0x18, 0x46, 0x60, 0x81, 0x68, 0x01, 0x9A, 0x8D,
+	0x18, 0x85, 0x60, 0x08, 0x98, 
+	0x00, 0x00, 0xDD, 0x00, 0x80, 0x00, 0x28, 0x00, 0xDA, 0x40, 0x42, 0x2E, 0x49, 0x0A, 0x68, 0x87,
+	0x18, 0x0F, 0x60, 0x16, 0x98, 0x14, 0x99, 0x40, 0x1C, 0x88, 0x42, 0x06, 0xD2, 0x21, 0x48, 0x01,
+	0x68, 0x03, 0x22, 0x52, 0x07, 0x11, 0x43, 0x01, 0x60, 0xA5, 0xE0, 0x16, 0x98, 0x88, 0x42, 0x7D,
+	0xD1, 0x81, 0x00, 0x30, 0x46, 0x06, 0xF0, 0x0D, 0xFE, 0xC4, 0xB2, 0x24, 0x48, 0x04, 0x70, 0x64,
+	0x20, 0x78, 0x43, 0x11, 0x94, 0x0D, 0x99, 0x06, 0xF0, 0xFA, 0xFD, 0x31, 0x46, 0x06, 0xF0, 0xF7,
+	0xFD, 0xC0, 0xB2, 0x1F, 0x49, 0x07, 0x46, 0x08, 0x70, 0x28, 0x46, 0x64, 0x21, 0x48, 0x43, 0x0D,
+	0x99, 0x06, 0xF0, 0xED, 0xFD, 0x31, 0x46, 0x06, 0xF0, 0xEA, 0xFD, 0x1A, 0x49, 0x23, 0x02, 0x08,
+	0x70, 0x12, 0x4C, 0x05, 0x22, 0x00, 0x20, 0x12, 0x34, 0x13, 0x99, 0x09, 0x7B, 0x45, 0x00, 0x65,
+	0x5B, 0x69, 0x43, 0x99, 0x42, 
+	0x00, 0x00, 0xDE, 0x00, 0x80, 0x2A, 0xDA, 0x02, 0xB2, 0x2B, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00,
+	0x20, 0xB6, 0x00, 0x00, 0x20, 0xDC, 0x00, 0x00, 0x20, 0xBD, 0x00, 0x00, 0x20, 0xF0, 0xE9, 0x00,
+	0x00, 0xBE, 0x00, 0x00, 0x20, 0x00, 0x00, 0x11, 0x40, 0xA9, 0x00, 0x00, 0x20, 0xBC, 0x01, 0x00,
+	0x20, 0xB7, 0x00, 0x00, 0x20, 0x21, 0x03, 0x00, 0x00, 0xCA, 0x00, 0x00, 0x20, 0x30, 0xDE, 0x00,
+	0x00, 0xA8, 0x01, 0x00, 0x20, 0xD0, 0x00, 0x00, 0x20, 0xB4, 0x01, 0x00, 0x20, 0xBA, 0x00, 0x00,
+	0x20, 0xBB, 0x00, 0x00, 0x20, 0xBC, 0x00, 0x00, 0x20, 0xAE, 0x00, 0x00, 0x20, 0x40, 0x1C, 0x05,
+	0x28, 0xCA, 0xD3, 0x13, 0x98, 0x40, 0x7B, 0x51, 0x00, 0x33, 0x4A, 0x34, 0x4C, 0x51, 0x5A, 0x48,
+	0x43, 0x00, 0x0A, 0x01, 0x25, 0x25, 0x70, 0x13, 0x99, 0xC9, 0x7B, 0xCA, 0x07, 0x03, 0x21, 0x00,
+	0x2A, 0x02, 0xD0, 0x87, 0x42, 
+	0x00, 0x00, 0xDF, 0x00, 0x80, 0x0A, 0xD9, 0x08, 0xE0, 0x13, 0x98, 0x40, 0x7B, 0xB8, 0x42, 0x05,
+	0xD2, 0x13, 0x98, 0x00, 0x7B, 0x11, 0x9A, 0x90, 0x42, 0x00, 0xD2, 0x21, 0x70, 0x16, 0x99, 0x0D,
+	0x98, 0x27, 0x4E, 0x41, 0x43, 0x30, 0x88, 0x64, 0x22, 0x50, 0x43, 0x00, 0xE0, 0x1E, 0xE0, 0x06,
+	0xF0, 0x86, 0xFD, 0x24, 0x4A, 0x30, 0x80, 0x11, 0x69, 0x02, 0x20, 0x81, 0x43, 0x11, 0x61, 0x05,
+	0x20, 0xFF, 0xF7, 0xE3, 0xF8, 0x20, 0x78, 0x80, 0x07, 0x0D, 0xD4, 0x1F, 0x49, 0x08, 0x78, 0x00,
+	0x28, 0x09, 0xD0, 0x02, 0x28, 0x07, 0xD2, 0x40, 0x1C, 0x08, 0x70, 0x1C, 0x49, 0x00, 0x20, 0x08,
+	0x70, 0x1B, 0x49, 0x08, 0x60, 0xE3, 0xE5, 0x1B, 0x48, 0x05, 0x70, 0x04, 0xE0, 0x15, 0x49, 0x08,
+	0x68, 0x8A, 0x03, 0x10, 0x43, 0x08, 0x60, 0x17, 0x48, 0x00, 0x78, 0x01, 0x28, 0x19, 0xD1, 0x13,
+	0x98, 0x00, 0x7D, 0x00, 0x28, 
+	0x00, 0x00, 0xE0, 0x00, 0x80, 0x15, 0xD0, 0x13, 0x98, 0x00, 0x7C, 0x40, 0x07, 0x40, 0x0F, 0x05,
+	0x28, 0x00, 0xD9, 0x00, 0x20, 0x0B, 0x49, 0xC0, 0x31, 0x0A, 0x69, 0x0F, 0x4B, 0x1A, 0x40, 0x0A,
+	0x61, 0x0A, 0x69, 0x0E, 0x4B, 0x80, 0x00, 0x18, 0x58, 0x0B, 0x4B, 0xDB, 0x43, 0x18, 0x40, 0x02,
+	0x43, 0x0A, 0x61, 0x17, 0xB0, 0xF0, 0xBD, 0x00, 0x00, 0x4C, 0xDE, 0x00, 0x00, 0xB7, 0x00, 0x00,
+	0x20, 0xCA, 0x00, 0x00, 0x20, 0x00, 0x00, 0x11, 0x40, 0xB4, 0x01, 0x00, 0x20, 0xBD, 0x00, 0x00,
+	0x20, 0xDC, 0x00, 0x00, 0x20, 0xAE, 0x00, 0x00, 0x20, 0xFF, 0xE0, 0xE3, 0xF1, 0xB8, 0xDC, 0x00,
+	0x00, 0x27, 0x49, 0x01, 0x20, 0x08, 0x70, 0x70, 0x47, 0x25, 0x49, 0x00, 0x20, 0x08, 0x70, 0x70,
+	0x47, 0x23, 0x48, 0x00, 0x78, 0x00, 0x28, 0x00, 0xD0, 0x01, 0x20, 0x70, 0x47, 0x10, 0xB5, 0x20,
+	0x49, 0x00, 0x23, 0x08, 0x78, 
+	0x00, 0x00, 0xE1, 0x00, 0x80, 0x08, 0x22, 0x00, 0x28, 0x07, 0xD0, 0x04, 0x24, 0x01, 0x28, 0x02,
+	0xD1, 0x4B, 0x70, 0x8C, 0x70, 0x03, 0xE0, 0x4C, 0x70, 0x00, 0xE0, 0x4B, 0x70, 0x8A, 0x70, 0x00,
+	0xF0, 0x23, 0xF8, 0x02, 0x04, 0x17, 0x48, 0x01, 0x68, 0xFF, 0x23, 0x1B, 0x04, 0x99, 0x43, 0x0A,
+	0x43, 0x02, 0x60, 0x10, 0xBD, 0x10, 0xB5, 0x04, 0x46, 0x00, 0xF0, 0x16, 0xF8, 0x20, 0x40, 0x02,
+	0x04, 0x10, 0x48, 0x01, 0x68, 0xFF, 0x23, 0x1B, 0x04, 0x99, 0x43, 0x0A, 0x43, 0x02, 0x60, 0x10,
+	0xBD, 0x10, 0xB5, 0x0D, 0x49, 0x09, 0x78, 0x08, 0x18, 0x16, 0x21, 0x48, 0x43, 0x0B, 0x49, 0x0C,
+	0x5A, 0x00, 0xF0, 0x02, 0xF8, 0x20, 0x40, 0x10, 0xBD, 0x05, 0x48, 0x00, 0x78, 0x00, 0x28, 0x05,
+	0xD0, 0x01, 0x28, 0x01, 0xD1, 0x0F, 0x20, 0x70, 0x47, 0xF0, 0x20, 0x70, 0x47, 0xFF, 0x20, 0x70,
+	0x47, 0xB4, 0x01, 0x00, 0x20, 
+	0x00, 0x00, 0xE2, 0x00, 0x80, 0x00, 0x00, 0x11, 0x40, 0x9F, 0x00, 0x00, 0x20, 0x00, 0xEC, 0x00,
+	0x00, 0xFC, 0x49, 0x00, 0x20, 0xC8, 0x70, 0x70, 0x47, 0xF3, 0xB5, 0xFA, 0x48, 0x84, 0xB0, 0xC0,
+	0x78, 0x03, 0x90, 0xFA, 0x48, 0xF8, 0x4C, 0x00, 0x78, 0x00, 0x23, 0x02, 0x90, 0x62, 0xE0, 0xF9,
+	0x48, 0xF7, 0x4A, 0x00, 0x21, 0x00, 0x90, 0x57, 0xE0, 0x05, 0x98, 0x00, 0x28, 0x05, 0xD0, 0x2C,
+	0x20, 0x04, 0x9D, 0x48, 0x43, 0x40, 0x19, 0x9D, 0x00, 0x04, 0xE0, 0x2C, 0x20, 0x04, 0x9D, 0x58,
+	0x43, 0x40, 0x19, 0x8D, 0x00, 0x40, 0x19, 0x55, 0x79, 0x16, 0x79, 0x2D, 0x02, 0x35, 0x43, 0x66,
+	0x79, 0x27, 0x79, 0x36, 0x02, 0x3E, 0x43, 0xAD, 0x1B, 0xAE, 0x46, 0xD5, 0x78, 0x96, 0x78, 0x2D,
+	0x02, 0x35, 0x43, 0xE6, 0x78, 0xA7, 0x78, 0x36, 0x02, 0x3E, 0x43, 0xAD, 0x1B, 0x01, 0x95, 0x75,
+	0x46, 0x76, 0x46, 0x6E, 0x43, 
+	0x00, 0x00, 0xE3, 0x00, 0x80, 0x01, 0x9D, 0x6D, 0x43, 0x77, 0x19, 0x07, 0x60, 0x00, 0x9D, 0xEE,
+	0x78, 0xAD, 0x78, 0x36, 0x06, 0x36, 0x14, 0x2E, 0x43, 0xB4, 0x46, 0x00, 0x9E, 0x75, 0x78, 0x36,
+	0x78, 0x2D, 0x06, 0x2D, 0x14, 0x35, 0x43, 0x64, 0x2F, 0x0D, 0xDA, 0x57, 0x78, 0x16, 0x78, 0x3F,
+	0x02, 0x37, 0x43, 0x08, 0xD0, 0x66, 0x46, 0x2F, 0x46, 0x76, 0x43, 0x6F, 0x43, 0xF6, 0x19, 0x64,
+	0x2E, 0x01, 0xDA, 0xD5, 0x4E, 0x06, 0x60, 0x02, 0x9F, 0x03, 0x9E, 0xB7, 0x42, 0x0A, 0xD2, 0x76,
+	0x46, 0x67, 0x46, 0xF6, 0x1B, 0x01, 0x9F, 0x76, 0x43, 0x7D, 0x1B, 0x6D, 0x43, 0x75, 0x19, 0x06,
+	0x68, 0x75, 0x19, 0x05, 0x60, 0x49, 0x1C, 0x09, 0x32, 0x03, 0x98, 0x81, 0x42, 0xA4, 0xD3, 0x5B,
+	0x1C, 0x02, 0x98, 0x09, 0x34, 0x83, 0x42, 0x9A, 0xD3, 0x06, 0xB0, 0xF0, 0xBD, 0x70, 0xB5, 0x8B,
+	0x79, 0xC2, 0x79, 0x1B, 0x07, 
+	0x00, 0x00, 0xE4, 0x00, 0x80, 0xC5, 0x4D, 0x1B, 0x0F, 0x0E, 0x2A, 0x04, 0xD8, 0x2C, 0x7B, 0x24,
+	0x01, 0x23, 0x43, 0x8B, 0x71, 0x12, 0xE0, 0x84, 0x79, 0x26, 0x09, 0x07, 0xD0, 0xC0, 0x4E, 0x36,
+	0x78, 0x00, 0x2E, 0x06, 0xD1, 0xB7, 0x4E, 0x36, 0x79, 0x01, 0x2E, 0x02, 0xD1, 0x52, 0x06, 0x52,
+	0x0E, 0xEC, 0xE7, 0x24, 0x09, 0x24, 0x01, 0x10, 0x3C, 0x1C, 0x43, 0x8C, 0x71, 0xCA, 0x71, 0x43,
+	0x78, 0x04, 0x78, 0x18, 0x02, 0x20, 0x43, 0x40, 0x1C, 0x08, 0x70, 0x00, 0x0A, 0x48, 0x70, 0x10,
+	0x06, 0xC0, 0x17, 0x40, 0x1C, 0x70, 0xBD, 0x41, 0x79, 0x02, 0x79, 0x09, 0x02, 0x11, 0x43, 0x0F,
+	0x29, 0x0E, 0xD3, 0xC2, 0x78, 0x83, 0x78, 0x10, 0x02, 0x18, 0x43, 0x0F, 0x28, 0x08, 0xD3, 0xAD,
+	0x4A, 0xD3, 0x68, 0x10, 0x3B, 0x99, 0x42, 0x03, 0xD8, 0x11, 0x69, 0x10, 0x39, 0x88, 0x42, 0x01,
+	0xD9, 0x01, 0x20, 0x70, 0x47, 
+	0x00, 0x00, 0xE5, 0x00, 0x80, 0x00, 0x20, 0x70, 0x47, 0x70, 0xB5, 0x04, 0x46, 0x00, 0xF0, 0x9F,
+	0xFC, 0x05, 0x46, 0xA0, 0x79, 0xA1, 0x4E, 0x01, 0x09, 0x17, 0xD0, 0xA1, 0x48, 0x00, 0x78, 0x01,
+	0x28, 0x10, 0xD1, 0x20, 0x46, 0xFF, 0xF7, 0xD7, 0xFF, 0x00, 0x28, 0x0B, 0xD0, 0x9E, 0x48, 0x00,
+	0x68, 0x00, 0x28, 0x07, 0xD1, 0x30, 0x7B, 0xA1, 0x79, 0x00, 0x01, 0x09, 0x07, 0x09, 0x0F, 0x01,
+	0x43, 0xA1, 0x71, 0x08, 0xE0, 0x80, 0x20, 0x05, 0x43, 0x05, 0xE0, 0x31, 0x7B, 0x00, 0x07, 0x09,
+	0x01, 0x00, 0x0F, 0x08, 0x43, 0xA0, 0x71, 0x00, 0x20, 0x20, 0x70, 0x60, 0x70, 0x28, 0x06, 0xC0,
+	0x17, 0xE5, 0x71, 0x40, 0x1C, 0x70, 0xBD, 0xF0, 0xB5, 0xC2, 0x79, 0x87, 0xB0, 0x0E, 0x2A, 0x72,
+	0xD8, 0x43, 0x79, 0x04, 0x79, 0x1B, 0x02, 0x23, 0x43, 0x04, 0x93, 0xC3, 0x78, 0x84, 0x78, 0x18,
+	0x02, 0x20, 0x43, 0x03, 0x90, 
+	0x00, 0x00, 0xE6, 0x00, 0x80, 0x48, 0x79, 0x0B, 0x79, 0x04, 0x02, 0xC8, 0x78, 0x89, 0x78, 0x05,
+	0x02, 0x06, 0x20, 0x42, 0x43, 0x85, 0x48, 0x0D, 0x43, 0x10, 0x18, 0x00, 0x21, 0x1C, 0x43, 0x06,
+	0x92, 0x05, 0x90, 0x01, 0x71, 0x00, 0x2C, 0x56, 0xD0, 0x7E, 0x49, 0xC8, 0x68, 0x40, 0x1E, 0xA0,
+	0x42, 0x51, 0xD0, 0x00, 0x2D, 0x4F, 0xD0, 0x08, 0x46, 0x00, 0x69, 0x40, 0x1E, 0xA8, 0x42, 0x4A,
+	0xD0, 0x04, 0x98, 0x00, 0x27, 0x21, 0x1A, 0xCA, 0x0F, 0x03, 0x98, 0x52, 0x18, 0x52, 0x10, 0x28,
+	0x1A, 0x16, 0x19, 0xC2, 0x0F, 0x12, 0x18, 0x52, 0x10, 0x52, 0x19, 0x02, 0x92, 0x00, 0x29, 0x0D,
+	0xD1, 0x00, 0x2A, 0x02, 0xDA, 0x00, 0x25, 0x34, 0x46, 0x01, 0x27, 0x6E, 0x48, 0x02, 0x69, 0x02,
+	0x99, 0x8A, 0x42, 0x63, 0xDC, 0x05, 0x69, 0x34, 0x46, 0x6D, 0x1E, 0x5E, 0xE0, 0x00, 0x02, 0x06,
+	0xF0, 0xA8, 0xFB, 0x01, 0x90, 
+	0x00, 0x00, 0xE7, 0x00, 0x80, 0x03, 0x98, 0x04, 0x9A, 0x01, 0x02, 0x01, 0x98, 0x50, 0x43, 0x08,
+	0x1A, 0x00, 0x90, 0x00, 0x2E, 0x0B, 0xDA, 0x00, 0x24, 0x25, 0x46, 0x00, 0x28, 0x00, 0xDB, 0x05,
+	0x12, 0x60, 0x48, 0x01, 0x69, 0xA9, 0x42, 0x01, 0xD8, 0x05, 0x69, 0x6D, 0x1E, 0x01, 0x27, 0x02,
+	0x98, 0x00, 0x28, 0x13, 0xDA, 0x00, 0x98, 0x01, 0x99, 0x40, 0x42, 0x06, 0xF0, 0x8A, 0xFB, 0x00,
+	0x26, 0x00, 0x28, 0x00, 0xDB, 0x06, 0x46, 0x57, 0x48, 0x00, 0x25, 0xC1, 0x68, 0xB1, 0x42, 0x03,
+	0xDC, 0xC4, 0x68, 0x64, 0x1E, 0x01, 0xE0, 0x38, 0xE0, 0x34, 0x46, 0x01, 0x27, 0x51, 0x4A, 0xD0,
+	0x68, 0xB0, 0x42, 0x13, 0xDC, 0xD4, 0x68, 0x01, 0x98, 0x64, 0x1E, 0x00, 0x99, 0x60, 0x43, 0x40,
+	0x18, 0x00, 0x12, 0x00, 0x21, 0x00, 0x28, 0x00, 0xDB, 0x01, 0x46, 0x02, 0x91, 0x10, 0x69, 0x88,
+	0x42, 0x02, 0xDC, 0x15, 0x69, 
+	0x00, 0x00, 0xE8, 0x00, 0x80, 0x6D, 0x1E, 0x00, 0xE0, 0x0D, 0x46, 0x01, 0x27, 0x10, 0x69, 0x02,
+	0x99, 0x88, 0x42, 0x13, 0xDC, 0x15, 0x69, 0x14, 0x46, 0x6D, 0x1E, 0x00, 0x98, 0x29, 0x02, 0x08,
+	0x1A, 0x01, 0x99, 0x06, 0xF0, 0x56, 0xFB, 0x00, 0x21, 0x00, 0x28, 0x00, 0xDB, 0x01, 0x46, 0xE0,
+	0x68, 0x88, 0x42, 0x01, 0xDC, 0xE1, 0x68, 0x49, 0x1E, 0x0C, 0x46, 0x01, 0x27, 0x3B, 0x48, 0x06,
+	0x99, 0x44, 0x52, 0x05, 0x98, 0x45, 0x80, 0x05, 0x98, 0x07, 0x71, 0x07, 0xB0, 0xF0, 0xBD, 0xF3,
+	0xB5, 0x87, 0xB0, 0x08, 0x98, 0x00, 0x24, 0x40, 0x1E, 0x05, 0x90, 0x4E, 0xE0, 0xE0, 0x00, 0x2A,
+	0x49, 0x20, 0x18, 0x40, 0x18, 0x06, 0x90, 0x42, 0x78, 0x03, 0x78, 0x12, 0x02, 0x1A, 0x43, 0xC6,
+	0x79, 0x25, 0x46, 0x60, 0x1C, 0x12, 0xE0, 0xC1, 0x00, 0x43, 0x18, 0x23, 0x49, 0x59, 0x18, 0x4B,
+	0x78, 0x0F, 0x78, 0x1B, 0x02, 
+	0x00, 0x00, 0xE9, 0x00, 0x80, 0x3B, 0x43, 0x93, 0x42, 0x04, 0xD8, 0x93, 0x42, 0x05, 0xD1, 0xCF,
+	0x79, 0xB7, 0x42, 0x02, 0xD2, 0xCE, 0x79, 0x05, 0x46, 0x1A, 0x46, 0x40, 0x1C, 0x08, 0x99, 0x88,
+	0x42, 0xE9, 0xD3, 0xAC, 0x42, 0x27, 0xD0, 0x18, 0x4E, 0x09, 0x22, 0x02, 0xA8, 0x06, 0x99, 0x06,
+	0xF0, 0x95, 0xFA, 0xE8, 0x00, 0x28, 0x18, 0x86, 0x19, 0x09, 0x22, 0x31, 0x46, 0x06, 0x98, 0x06,
+	0xF0, 0x8D, 0xFA, 0x09, 0x22, 0x02, 0xA9, 0x30, 0x46, 0x06, 0xF0, 0x88, 0xFA, 0x07, 0x98, 0xA1,
+	0x00, 0x0E, 0x18, 0x04, 0x22, 0x31, 0x46, 0x01, 0xA8, 0x06, 0xF0, 0x80, 0xFA, 0x07, 0x98, 0xA9,
+	0x00, 0x0D, 0x18, 0x04, 0x22, 0x29, 0x46, 0x30, 0x46, 0x06, 0xF0, 0x78, 0xFA, 0x04, 0x22, 0x01,
+	0xA9, 0x28, 0x46, 0x06, 0xF0, 0x73, 0xFA, 0x05, 0x98, 0x64, 0x1C, 0x84, 0x42, 0xAE, 0xD3, 0x09,
+	0xB0, 0xF0, 0xBD, 0x00, 0x00, 
+	0x00, 0x00, 0xEA, 0x00, 0x80, 0xC0, 0x01, 0x00, 0x20, 0x88, 0x03, 0x00, 0x20, 0xEE, 0x00, 0x00,
+	0x20, 0xEB, 0x03, 0x00, 0x20, 0xC4, 0x04, 0x00, 0x20, 0x00, 0x00, 0xC0, 0xFF, 0xA0, 0xE7, 0x00,
+	0x00, 0xE9, 0x00, 0x00, 0x20, 0xD0, 0xE7, 0x00, 0x00, 0x1C, 0x01, 0x00, 0x20, 0x72, 0x0E, 0x00,
+	0x20, 0xFF, 0xB5, 0xA1, 0xB0, 0x05, 0x46, 0x0C, 0x46, 0x0B, 0x21, 0x2A, 0x98, 0xF9, 0xF7, 0x58,
+	0xFF, 0x20, 0x90, 0x0B, 0x21, 0x2A, 0x98, 0xF9, 0xF7, 0x53, 0xFF, 0x00, 0x21, 0x22, 0xE0, 0x00,
+	0x21, 0x62, 0x46, 0xF8, 0x4B, 0x92, 0x00, 0x0A, 0xE0, 0x2C, 0x27, 0x0E, 0x46, 0x7E, 0x43, 0x24,
+	0x9F, 0xF6, 0x19, 0xB6, 0x58, 0x9E, 0x42, 0x00, 0xDA, 0x33, 0x46, 0x49, 0x1C, 0xC9, 0xB2, 0xA9,
+	0x42, 0xF2, 0xD3, 0x00, 0x21, 0x09, 0xE0, 0x2C, 0x27, 0x0E, 0x46, 0x7E, 0x43, 0x24, 0x9F, 0xF7,
+	0x19, 0xBE, 0x58, 0xF6, 0x1A, 
+	0x00, 0x00, 0xEB, 0x00, 0x80, 0x49, 0x1C, 0xBE, 0x50, 0xC9, 0xB2, 0xA9, 0x42, 0xF3, 0xD3, 0x61,
+	0x46, 0x49, 0x1C, 0xC9, 0xB2, 0x8C, 0x46, 0xA1, 0x42, 0xD9, 0xD3, 0x00, 0x21, 0x35, 0xE0, 0x23,
+	0x9B, 0xFF, 0x22, 0x5A, 0x54, 0x00, 0x22, 0x2C, 0xE0, 0x2C, 0x23, 0x24, 0x9E, 0x53, 0x43, 0x9B,
+	0x19, 0x8E, 0x00, 0x9B, 0x59, 0x00, 0x2B, 0x1C, 0xD1, 0x0B, 0x23, 0x53, 0x43, 0x01, 0xAF, 0xDB,
+	0x19, 0x00, 0x26, 0x9C, 0x46, 0x5E, 0x54, 0x33, 0x46, 0x01, 0x26, 0x06, 0xE0, 0x23, 0x9F, 0xFF,
+	0x56, 0x97, 0x42, 0x00, 0xD1, 0x00, 0x26, 0x5B, 0x1C, 0xDB, 0xB2, 0x8B, 0x42, 0x02, 0xD2, 0x01,
+	0x2E, 0xF4, 0xD0, 0x0C, 0xE0, 0x01, 0x2E, 0x0A, 0xD1, 0x23, 0x9B, 0x5A, 0x54, 0x63, 0x46, 0x5E,
+	0x54, 0x05, 0xE0, 0x0B, 0x23, 0xFF, 0x26, 0x53, 0x43, 0x01, 0xAF, 0xDB, 0x19, 0xF7, 0xE7, 0x52,
+	0x1C, 0xD2, 0xB2, 0xAA, 0x42, 
+	0x00, 0x00, 0xEC, 0x00, 0x80, 0xD0, 0xD3, 0x49, 0x1C, 0xC9, 0xB2, 0xA1, 0x42, 0xC7, 0xD3, 0x21,
+	0xE1, 0x00, 0x21, 0x04, 0xE0, 0x20, 0x9B, 0x00, 0x22, 0x5A, 0x54, 0x49, 0x1C, 0xC9, 0xB2, 0xA9,
+	0x42, 0xF8, 0xD3, 0x00, 0x21, 0x07, 0xE0, 0x23, 0x9A, 0x52, 0x56, 0x52, 0x1C, 0x00, 0xD0, 0x01,
+	0x22, 0x42, 0x54, 0x49, 0x1C, 0xC9, 0xB2, 0xA1, 0x42, 0xF5, 0xD3, 0x00, 0x21, 0xBE, 0x4A, 0xC9,
+	0x43, 0x11, 0x70, 0xBC, 0xE0, 0x00, 0x23, 0x1A, 0x46, 0x1D, 0xE0, 0x20, 0x99, 0x89, 0x5C, 0x01,
+	0x29, 0x17, 0xD0, 0x0B, 0x26, 0x00, 0x21, 0x56, 0x43, 0x01, 0xAF, 0xF6, 0x19, 0xB4, 0x46, 0x56,
+	0xB2, 0x0D, 0xE0, 0x47, 0x5C, 0x01, 0x2F, 0x08, 0xD0, 0x67, 0x46, 0x7F, 0x5C, 0x00, 0x2F, 0x04,
+	0xD1, 0xB1, 0x4F, 0x01, 0x23, 0x3E, 0x70, 0x7F, 0x1C, 0x39, 0x70, 0x49, 0x1C, 0xC9, 0xB2, 0xA1,
+	0x42, 0xEF, 0xD3, 0x52, 0x1C, 
+	0x00, 0x00, 0xED, 0x00, 0x80, 0xD2, 0xB2, 0xAA, 0x42, 0xDF, 0xD3, 0x59, 0xB2, 0x8C, 0x46, 0x00,
+	0x29, 0x5A, 0xD1, 0xA8, 0x49, 0x00, 0x22, 0x8C, 0x46, 0x17, 0xE0, 0x20, 0x99, 0x89, 0x5C, 0x01,
+	0x29, 0x11, 0xD0, 0x2C, 0x23, 0x24, 0x9E, 0x00, 0x21, 0x53, 0x43, 0x9F, 0x19, 0x09, 0xE0, 0x43,
+	0x5C, 0x01, 0x2B, 0x04, 0xD0, 0x8B, 0x00, 0xFB, 0x58, 0x63, 0x45, 0x00, 0xDA, 0x9C, 0x46, 0x49,
+	0x1C, 0xC9, 0xB2, 0xA1, 0x42, 0xF3, 0xD3, 0x52, 0x1C, 0xD2, 0xB2, 0xAA, 0x42, 0xE5, 0xD3, 0x00,
+	0x22, 0x37, 0xE0, 0x00, 0x21, 0x31, 0xE0, 0x43, 0x5C, 0x01, 0x2B, 0x12, 0xD1, 0x20, 0x9B, 0x9B,
+	0x5C, 0x01, 0x2B, 0x0E, 0xD1, 0x2C, 0x23, 0x24, 0x9E, 0x53, 0x43, 0x9E, 0x19, 0x8F, 0x00, 0xF3,
+	0x59, 0x63, 0x44, 0xF3, 0x51, 0x0B, 0x27, 0x13, 0x46, 0x7B, 0x43, 0xFF, 0x26, 0x01, 0xAF, 0xDB,
+	0x19, 0x5E, 0x54, 0x43, 0x5C, 
+	0x00, 0x00, 0xEE, 0x00, 0x80, 0x00, 0x2B, 0x16, 0xD1, 0x20, 0x9B, 0x9B, 0x5C, 0x00, 0x2B, 0x12,
+	0xD1, 0x2C, 0x23, 0x24, 0x9E, 0x53, 0x43, 0x8F, 0x00, 0x9E, 0x19, 0xBE, 0x46, 0xF3, 0x59, 0x67,
+	0x46, 0xDB, 0x1B, 0x77, 0x46, 0xF3, 0x51, 0x06, 0xD1, 0x0B, 0x27, 0x13, 0x46, 0x7B, 0x43, 0x00,
+	0x26, 0x01, 0xAF, 0xDB, 0x19, 0x5E, 0x54, 0x49, 0x1C, 0xC9, 0xB2, 0xA1, 0x42, 0xCB, 0xD3, 0x52,
+	0x1C, 0xD2, 0xB2, 0xAA, 0x42, 0xC5, 0xD3, 0x7D, 0xE7, 0x7B, 0x4E, 0x00, 0x21, 0x73, 0x56, 0x0B,
+	0x26, 0x73, 0x43, 0x01, 0xAE, 0x9F, 0x19, 0x78, 0x4E, 0x4A, 0x1E, 0x76, 0x1C, 0x73, 0x56, 0x0A,
+	0xE0, 0x46, 0x5C, 0x00, 0x2E, 0x05, 0xD0, 0x99, 0x42, 0x03, 0xD0, 0x7E, 0x5C, 0x01, 0x2E, 0x00,
+	0xD1, 0x4A, 0xB2, 0x49, 0x1C, 0xC9, 0xB2, 0xA1, 0x42, 0x02, 0xD2, 0x56, 0x1C, 0xF0, 0xD0, 0x11,
+	0xE0, 0x51, 0x1C, 0x0F, 0xD1, 
+	0x00, 0x00, 0xEF, 0x00, 0x80, 0x61, 0x46, 0x01, 0x29, 0xDD, 0xD1, 0x6B, 0x4E, 0x00, 0x21, 0x71,
+	0x56, 0x0B, 0x22, 0x51, 0x43, 0x01, 0xAA, 0x02, 0x23, 0x89, 0x18, 0x01, 0x27, 0xF7, 0x57, 0xCB,
+	0x55, 0x17, 0x46, 0x0E, 0xE0, 0x02, 0x21, 0xF9, 0x54, 0x00, 0x21, 0x81, 0x54, 0x62, 0x4B, 0x00,
+	0x26, 0x9E, 0x57, 0x20, 0x99, 0x01, 0x22, 0x8A, 0x55, 0x91, 0x1E, 0x1A, 0x46, 0x11, 0x70, 0x51,
+	0x70, 0x40, 0xE7, 0x5D, 0x4E, 0x00, 0x21, 0x71, 0x56, 0x0B, 0x22, 0x8C, 0x46, 0x51, 0x43, 0x01,
+	0x22, 0xB2, 0x56, 0xCB, 0x19, 0x99, 0x56, 0x02, 0x29, 0x21, 0xD1, 0x00, 0x21, 0x0E, 0xE0, 0x0B,
+	0x26, 0x4E, 0x43, 0xF6, 0x19, 0xB6, 0x5C, 0x01, 0x2E, 0x06, 0xD1, 0x9E, 0x54, 0x23, 0x9E, 0x63,
+	0x46, 0xB3, 0x54, 0x51, 0x4A, 0x11, 0x70, 0x03, 0xE0, 0x49, 0x1C, 0xC9, 0xB2, 0xA9, 0x42, 0xEE,
+	0xD3, 0xA9, 0x42, 0xDE, 0xD1, 
+	0x00, 0x00, 0xF0, 0x00, 0x80, 0x4C, 0x4A, 0x00, 0x21, 0x51, 0x56, 0x0B, 0x22, 0x01, 0x23, 0x4A,
+	0x43, 0xD6, 0x19, 0x49, 0x4F, 0xFA, 0x56, 0xB3, 0x54, 0x23, 0x9B, 0x99, 0x54, 0x1A, 0xE0, 0x01,
+	0x29, 0xCF, 0xD1, 0x00, 0x21, 0x08, 0xE0, 0x5E, 0x5C, 0x02, 0x2E, 0x03, 0xD1, 0x9E, 0x54, 0x42,
+	0x4A, 0x51, 0x70, 0x03, 0xE0, 0x49, 0x1C, 0xC9, 0xB2, 0xA1, 0x42, 0xF4, 0xD3, 0xA1, 0x42, 0xC0,
+	0xD1, 0x3D, 0x4A, 0x00, 0x21, 0x51, 0x56, 0x0B, 0x26, 0x71, 0x43, 0x02, 0x23, 0xC9, 0x19, 0x01,
+	0x26, 0x96, 0x57, 0x8B, 0x55, 0x00, 0x22, 0x11, 0x46, 0x06, 0xE0, 0x23, 0x9B, 0x5B, 0x56, 0x5B,
+	0x1C, 0x00, 0xD0, 0x52, 0x1C, 0x49, 0x1C, 0xC9, 0xB2, 0xA1, 0x42, 0xF6, 0xD3, 0xA2, 0x42, 0x00,
+	0xD2, 0xCE, 0xE6, 0x2A, 0x98, 0xF9, 0xF7, 0xC9, 0xFD, 0x2A, 0x98, 0xF9, 0xF7, 0xC6, 0xFD, 0x25,
+	0xB0, 0x3E, 0xE6, 0xF1, 0xB5, 
+	0x00, 0x00, 0xF1, 0x00, 0x80, 0x2D, 0x48, 0x88, 0xB0, 0x81, 0x68, 0x05, 0x91, 0x40, 0x68, 0x04,
+	0x90, 0x00, 0x24, 0x0C, 0x21, 0x08, 0x98, 0xF9, 0xF7, 0xAB, 0xFD, 0x05, 0x46, 0xFF, 0x21, 0xE5,
+	0x31, 0x08, 0x98, 0xF9, 0xF7, 0xA5, 0xFD, 0x03, 0x90, 0x2C, 0x21, 0x08, 0x98, 0xF9, 0xF7, 0xA0,
+	0xFD, 0x02, 0x90, 0x0B, 0x21, 0x08, 0x98, 0xF9, 0xF7, 0x9B, 0xFD, 0x01, 0x90, 0x20, 0x48, 0x1E,
+	0x4B, 0x00, 0x78, 0x18, 0x71, 0x00, 0x20, 0x1E, 0x27, 0x41, 0x1E, 0xC2, 0x00, 0x1D, 0x4E, 0x82,
+	0x18, 0x92, 0x19, 0xD7, 0x71, 0x01, 0x9A, 0x11, 0x54, 0x40, 0x1C, 0xC0, 0xB2, 0x0B, 0x28, 0xF4,
+	0xD3, 0x17, 0x4E, 0xD9, 0x78, 0x30, 0x78, 0x01, 0x22, 0x88, 0x42, 0x00, 0xD1, 0x00, 0x22, 0x12,
+	0x4B, 0x88, 0x42, 0x9A, 0x70, 0x0A, 0x46, 0x00, 0xD3, 0x02, 0x46, 0x06, 0x92, 0x01, 0x28, 0x05,
+	0xD1, 0x01, 0x29, 0x03, 0xD1, 
+	0x00, 0x00, 0xF2, 0x00, 0x80, 0x01, 0x99, 0x00, 0x20, 0x08, 0x70, 0x3B, 0xE0, 0x0C, 0x4F, 0x0A,
+	0x4E, 0x88, 0x42, 0x21, 0xD3, 0x00, 0x21, 0x03, 0x98, 0xFF, 0xF7, 0xFE, 0xFB, 0x08, 0x9A, 0x00,
+	0x92, 0x2A, 0x46, 0xF1, 0x78, 0x38, 0x78, 0x03, 0x9B, 0xFF, 0xF7, 0x02, 0xFE, 0x00, 0x20, 0xF1,
+	0x78, 0x0F, 0xE0, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x7F, 0xC0, 0x01, 0x00, 0x20, 0xA0, 0xE7, 0x00,
+	0x00, 0xEE, 0x00, 0x00, 0x20, 0x88, 0x03, 0x00, 0x20, 0x01, 0x9B, 0x2A, 0x5C, 0x1A, 0x54, 0x40,
+	0x1C, 0xC0, 0xB2, 0x88, 0x42, 0xF8, 0xD3, 0x15, 0xE0, 0x01, 0x21, 0x03, 0x98, 0xFF, 0xF7, 0xDC,
+	0xFB, 0x08, 0x9A, 0x00, 0x92, 0x2A, 0x46, 0x39, 0x78, 0xF0, 0x78, 0x03, 0x9B, 0xFF, 0xF7, 0xE0,
+	0xFD, 0x00, 0x20, 0x04, 0xE0, 0x29, 0x56, 0x01, 0x9A, 0x50, 0x54, 0x40, 0x1C, 0xC0, 0xB2, 0x39,
+	0x78, 0x88, 0x42, 0xF7, 0xD3, 
+	0x00, 0x00, 0xF3, 0x00, 0x80, 0x00, 0x25, 0xDB, 0xE0, 0x01, 0x98, 0x40, 0x57, 0x00, 0x90, 0x40,
+	0x1C, 0x71, 0xD0, 0xE8, 0x00, 0x29, 0x18, 0xA5, 0x48, 0x08, 0x18, 0x41, 0x79, 0x03, 0x79, 0x0A,
+	0x02, 0x00, 0x99, 0x1A, 0x43, 0xCB, 0x00, 0xCB, 0x18, 0xA1, 0x49, 0x84, 0x46, 0x59, 0x18, 0x07,
+	0x91, 0x4B, 0x79, 0x0E, 0x79, 0x1B, 0x02, 0x33, 0x43, 0xD6, 0x1A, 0xC2, 0x78, 0x83, 0x78, 0x12,
+	0x02, 0x1A, 0x43, 0xCB, 0x78, 0x8F, 0x78, 0x1B, 0x02, 0x3B, 0x43, 0xD7, 0x1A, 0x42, 0x78, 0x00,
+	0x78, 0x12, 0x02, 0x02, 0x43, 0x06, 0xD1, 0x30, 0x46, 0x3A, 0x46, 0x70, 0x43, 0x7A, 0x43, 0x80,
+	0x18, 0x80, 0x10, 0x11, 0xE0, 0x93, 0x48, 0xAA, 0x00, 0x12, 0x18, 0xD0, 0x78, 0x93, 0x78, 0x00,
+	0x06, 0x00, 0x14, 0x18, 0x43, 0x33, 0x1A, 0x50, 0x78, 0x12, 0x78, 0x00, 0x06, 0x00, 0x14, 0x10,
+	0x43, 0x38, 0x1A, 0x5B, 0x43, 
+	0x00, 0x00, 0xF4, 0x00, 0x80, 0x40, 0x43, 0x18, 0x18, 0x05, 0x9A, 0x90, 0x42, 0x0B, 0xD8, 0xFF,
+	0x22, 0x91, 0x32, 0x90, 0x42, 0x0F, 0xDD, 0x88, 0x48, 0x00, 0x68, 0x00, 0x28, 0x0B, 0xD0, 0x60,
+	0x46, 0xC0, 0x79, 0x0E, 0x28, 0x07, 0xD9, 0x08, 0x46, 0xFF, 0xF7, 0x2E, 0xFC, 0x00, 0x19, 0x00,
+	0x26, 0xC4, 0xB2, 0x37, 0x46, 0x10, 0xE0, 0x60, 0x46, 0xFF, 0xF7, 0xE0, 0xFB, 0x00, 0x19, 0xC4,
+	0xB2, 0x60, 0x46, 0x07, 0x99, 0xFF, 0xF7, 0x4F, 0xFC, 0x30, 0x46, 0x39, 0x46, 0x70, 0x43, 0x79,
+	0x43, 0x40, 0x18, 0x04, 0x99, 0x88, 0x42, 0x02, 0xD9, 0x78, 0x49, 0x01, 0x20, 0x88, 0x70, 0x00,
+	0x98, 0x02, 0x99, 0x80, 0x00, 0x40, 0x18, 0x86, 0x70, 0x31, 0x0A, 0xC1, 0x70, 0x07, 0x70, 0x39,
+	0x0A, 0x41, 0x70, 0x63, 0xE0, 0xFF, 0xE7, 0x72, 0x48, 0x70, 0x4E, 0x00, 0x78, 0xF1, 0x78, 0x88,
+	0x42, 0x5C, 0xD2, 0xE8, 0x00, 
+	0x00, 0x00, 0xF5, 0x00, 0x80, 0x29, 0x18, 0x69, 0x48, 0x09, 0x18, 0xC8, 0x79, 0x0E, 0x28, 0x55,
+	0xDC, 0x06, 0x22, 0x50, 0x43, 0x6B, 0x4A, 0x82, 0x18, 0x13, 0x79, 0x00, 0x2B, 0x22, 0xD0, 0x4B,
+	0x78, 0x0F, 0x78, 0x1B, 0x02, 0x3B, 0x43, 0x5B, 0x1C, 0x0B, 0x70, 0x1B, 0x0A, 0x4B, 0x70, 0x65,
+	0x4B, 0x00, 0x27, 0x18, 0x5A, 0x08, 0x71, 0x00, 0x0A, 0x48, 0x71, 0x50, 0x88, 0x88, 0x70, 0x00,
+	0x0A, 0xC8, 0x70, 0x17, 0x71, 0x30, 0x79, 0xC2, 0x00, 0x80, 0x18, 0x59, 0x4A, 0x80, 0x18, 0xFD,
+	0xF7, 0xB8, 0xF8, 0x31, 0x79, 0x02, 0x9A, 0x89, 0x00, 0x89, 0x18, 0x8F, 0x70, 0x38, 0x0A, 0xC8,
+	0x70, 0x38, 0x46, 0x1F, 0xE0, 0x88, 0x79, 0x02, 0x09, 0x28, 0xD0, 0x4A, 0x78, 0x0B, 0x78, 0x12,
+	0x02, 0x1A, 0x43, 0x52, 0x1C, 0x0A, 0x70, 0x12, 0x0A, 0x4A, 0x70, 0x02, 0x09, 0x12, 0x01, 0x00,
+	0x07, 0x10, 0x3A, 0x00, 0x0F, 
+	0x00, 0x00, 0xF6, 0x00, 0x80, 0x02, 0x43, 0x8A, 0x71, 0x30, 0x79, 0xC2, 0x00, 0x82, 0x18, 0x48,
+	0x48, 0x10, 0x18, 0xFD, 0xF7, 0x96, 0xF8, 0x31, 0x79, 0x00, 0x20, 0x8A, 0x00, 0x02, 0x99, 0x51,
+	0x18, 0x88, 0x70, 0xC8, 0x70, 0x31, 0x79, 0x02, 0x9A, 0x89, 0x00, 0x89, 0x18, 0x08, 0x70, 0x00,
+	0x0A, 0x48, 0x70, 0x64, 0x1C, 0x30, 0x79, 0xE4, 0xB2, 0x40, 0x1C, 0x30, 0x71, 0x6D, 0x1C, 0xED,
+	0xB2, 0x06, 0x98, 0x85, 0x42, 0x00, 0xD2, 0x1F, 0xE7, 0x3D, 0x4E, 0x3C, 0x48, 0x31, 0x78, 0xC0,
+	0x78, 0x81, 0x42, 0x1B, 0xD9, 0x00, 0x25, 0x2F, 0x46, 0x15, 0xE0, 0xE8, 0x00, 0x29, 0x18, 0x34,
+	0x48, 0x08, 0x18, 0xC1, 0x79, 0x1E, 0x29, 0x0C, 0xD1, 0xFF, 0xF7, 0x8E, 0xFB, 0x00, 0x19, 0xC4,
+	0xB2, 0x02, 0x99, 0xA8, 0x00, 0x40, 0x18, 0x87, 0x70, 0x39, 0x0A, 0xC1, 0x70, 0x07, 0x70, 0x39,
+	0x0A, 0x41, 0x70, 0x6D, 0x1C, 
+	0x00, 0x00, 0xF7, 0x00, 0x80, 0xED, 0xB2, 0x30, 0x78, 0x85, 0x42, 0xE6, 0xD3, 0x2B, 0x4D, 0x29,
+	0x79, 0x01, 0x29, 0x02, 0xD9, 0x02, 0x98, 0xFF, 0xF7, 0x5A, 0xFC, 0x29, 0x79, 0x00, 0x20, 0xFD,
+	0xF7, 0x33, 0xF8, 0x28, 0x79, 0x02, 0x99, 0x82, 0x00, 0x22, 0x48, 0x05, 0xF0, 0x17, 0xFF, 0x28,
+	0x79, 0xE8, 0x70, 0x34, 0x70, 0x08, 0x98, 0xF9, 0xF7, 0x28, 0xFC, 0x08, 0x98, 0xF9, 0xF7, 0x25,
+	0xFC, 0x08, 0x98, 0xF9, 0xF7, 0x22, 0xFC, 0x08, 0x98, 0xF9, 0xF7, 0x1F, 0xFC, 0x97, 0xE4, 0xF0,
+	0xB5, 0x1A, 0x48, 0x16, 0x4F, 0xC4, 0x78, 0x1A, 0x48, 0x15, 0x4E, 0x05, 0x78, 0x00, 0x21, 0x00,
+	0x22, 0x10, 0x46, 0x0A, 0xE0, 0xC3, 0x00, 0xC3, 0x18, 0xDB, 0x19, 0xDB, 0x79, 0x5B, 0x06, 0x5B,
+	0x0E, 0x8B, 0x42, 0x01, 0xD1, 0x01, 0x22, 0x02, 0xE0, 0x40, 0x1C, 0xA0, 0x42, 0xF2, 0xDB, 0x00,
+	0x20, 0x08, 0xE0, 0xC3, 0x00, 
+	0x00, 0x00, 0xF8, 0x00, 0x80, 0xC3, 0x18, 0x9B, 0x19, 0xDB, 0x79, 0x5B, 0x06, 0x5B, 0x0E, 0x8B,
+	0x42, 0x06, 0xD0, 0x40, 0x1C, 0xA8, 0x42, 0xF4, 0xDB, 0x00, 0x2A, 0x01, 0xD1, 0xC8, 0xB2, 0x6F,
+	0xE4, 0x49, 0x1C, 0x0E, 0x29, 0xDB, 0xDD, 0x1E, 0x20, 0x6A, 0xE4, 0x00, 0x00, 0xEB, 0x03, 0x00,
+	0x20, 0x88, 0x03, 0x00, 0x20, 0xC4, 0x04, 0x00, 0x20, 0x1C, 0x01, 0x00, 0x20, 0xC0, 0x01, 0x00,
+	0x20, 0xEE, 0x00, 0x00, 0x20, 0x72, 0x0E, 0x00, 0x20, 0xFF, 0x49, 0xC8, 0x60, 0xFF, 0x48, 0x02,
+	0x78, 0x0A, 0x70, 0x42, 0x78, 0x4A, 0x70, 0x82, 0x78, 0x8A, 0x70, 0xC2, 0x78, 0xCA, 0x70, 0x00,
+	0x79, 0x08, 0x71, 0x70, 0x47, 0xF0, 0xE7, 0x70, 0xB5, 0x15, 0x46, 0x06, 0x22, 0x51, 0x43, 0x0C,
+	0x18, 0xA4, 0x1D, 0x03, 0x21, 0x28, 0x46, 0x05, 0xF0, 0x22, 0xFF, 0x41, 0x00, 0x41, 0x18, 0x69,
+	0x1A, 0x8A, 0x00, 0x89, 0x18, 
+	0x00, 0x00, 0xF9, 0x00, 0x80, 0x40, 0x00, 0x20, 0x5A, 0xC8, 0x40, 0xC0, 0x06, 0xC0, 0x0E, 0x70,
+	0xBD, 0x0A, 0x46, 0x01, 0x46, 0xEC, 0x48, 0x80, 0x68, 0xE5, 0xE7, 0xF7, 0xB5, 0x82, 0xB0, 0x07,
+	0x46, 0x0E, 0x00, 0x0A, 0xD0, 0x00, 0x25, 0x0F, 0xE0, 0x00, 0x24, 0x78, 0x19, 0x01, 0x90, 0x21,
+	0x46, 0x01, 0x98, 0xFF, 0xF7, 0xED, 0xFF, 0x00, 0x28, 0x02, 0xD0, 0x04, 0x98, 0x05, 0xB0, 0xF0,
+	0xBD, 0x64, 0x1C, 0x09, 0x2C, 0xF3, 0xD3, 0x6D, 0x1C, 0xB5, 0x42, 0xED, 0xD3, 0x00, 0x20, 0xF5,
+	0xE7, 0xF8, 0xB5, 0xDF, 0x49, 0x00, 0x91, 0x0A, 0x6A, 0x00, 0x20, 0xDE, 0x49, 0x02, 0x2A, 0x09,
+	0x78, 0x02, 0xD1, 0xC9, 0x1C, 0x89, 0x08, 0x89, 0x00, 0xD9, 0x4C, 0x40, 0x3C, 0x26, 0x6B, 0x01,
+	0x22, 0x4E, 0x43, 0x31, 0x46, 0xFF, 0xF7, 0xD1, 0xFF, 0xE7, 0x6B, 0x05, 0x46, 0x02, 0x22, 0x39,
+	0x46, 0x30, 0x46, 0xFF, 0xF7, 
+	0x00, 0x00, 0xFA, 0x00, 0x80, 0xCA, 0xFF, 0x05, 0x43, 0x00, 0x98, 0xF6, 0x19, 0x07, 0x68, 0x04,
+	0x22, 0x39, 0x46, 0x30, 0x46, 0xFF, 0xF7, 0xC1, 0xFF, 0x05, 0x43, 0xE1, 0x6A, 0xF0, 0x19, 0x00,
+	0x29, 0x00, 0xD0, 0x01, 0x21, 0x08, 0x22, 0xFF, 0xF7, 0xB8, 0xFF, 0x28, 0x43, 0xF8, 0xBD, 0x70,
+	0xB5, 0x16, 0x46, 0x06, 0x22, 0x51, 0x43, 0x0C, 0x18, 0x1D, 0x46, 0xA4, 0x1D, 0x03, 0x21, 0x30,
+	0x46, 0x05, 0xF0, 0xBD, 0xFE, 0x41, 0x00, 0x41, 0x18, 0x71, 0x1A, 0x8A, 0x00, 0x89, 0x18, 0x1F,
+	0x22, 0x8A, 0x40, 0x40, 0x00, 0x23, 0x5A, 0x93, 0x43, 0xEA, 0x06, 0xD2, 0x0E, 0x8A, 0x40, 0x1A,
+	0x43, 0x22, 0x52, 0x70, 0xBD, 0x70, 0xB5, 0xBD, 0x4B, 0xBB, 0x48, 0x1A, 0x69, 0x07, 0x24, 0x64,
+	0x06, 0x11, 0x46, 0xA1, 0x43, 0x01, 0x24, 0x64, 0x06, 0x09, 0x19, 0x19, 0x61, 0xB7, 0x4C, 0x07,
+	0x25, 0xC0, 0x3C, 0xE5, 0x60, 
+	0x00, 0x00, 0xFB, 0x00, 0x80, 0x21, 0x68, 0xC6, 0x06, 0x31, 0x43, 0x21, 0x60, 0xE1, 0x68, 0xC9,
+	0x07, 0x01, 0xD1, 0x40, 0x1E, 0xFA, 0xD2, 0xE5, 0x60, 0xB1, 0x4C, 0xB2, 0x4D, 0x00, 0x20, 0x81,
+	0x00, 0x09, 0x19, 0x09, 0x68, 0x46, 0x00, 0x09, 0xB2, 0xC9, 0x10, 0x40, 0x1C, 0xA9, 0x53, 0x09,
+	0x28, 0xF5, 0xD3, 0x1A, 0x61, 0x70, 0xBD, 0x70, 0xB5, 0x01, 0x24, 0xAA, 0x4D, 0x00, 0x23, 0x06,
+	0x46, 0x26, 0x42, 0x0C, 0xD0, 0x00, 0x29, 0x04, 0xD0, 0x5E, 0x00, 0xAE, 0x5F, 0x96, 0x42, 0x06,
+	0xDD, 0x03, 0xE0, 0x5E, 0x00, 0xAE, 0x5F, 0x96, 0x42, 0x01, 0xDA, 0x01, 0x20, 0x70, 0xBD, 0x64,
+	0x00, 0x5B, 0x1C, 0x08, 0x2B, 0xEB, 0xD3, 0x00, 0x20, 0x70, 0xBD, 0xFF, 0xB5, 0x97, 0xB0, 0x22,
+	0x9C, 0x20, 0x98, 0x16, 0x46, 0x1F, 0x46, 0x13, 0x90, 0x01, 0x2C, 0x01, 0xD0, 0x02, 0x2C, 0x05,
+	0xD1, 0xFF, 0xF7, 0x36, 0xF9, 
+	0x00, 0x00, 0xFC, 0x00, 0x80, 0x00, 0x28, 0x01, 0xD0, 0x02, 0x20, 0x00, 0xE0, 0x01, 0x20, 0x01,
+	0x90, 0x00, 0x20, 0x10, 0x90, 0x0B, 0x90, 0x05, 0x46, 0x0D, 0x90, 0x07, 0x90, 0x06, 0x90, 0x04,
+	0x90, 0x89, 0x48, 0x01, 0x22, 0x81, 0x68, 0x52, 0x02, 0x13, 0x98, 0x05, 0xF0, 0xD7, 0xFD, 0x02,
+	0x2C, 0x02, 0xD1, 0xFA, 0xF7, 0x89, 0xFD, 0x03, 0xE0, 0x01, 0x2C, 0x01, 0xD1, 0xFA, 0xF7, 0xC6,
+	0xFC, 0x86, 0x48, 0xC0, 0x38, 0x81, 0x68, 0x01, 0x22, 0xC9, 0xB2, 0xD2, 0x02, 0x89, 0x18, 0x81,
+	0x60, 0x7F, 0x48, 0x40, 0x38, 0x16, 0x90, 0x40, 0x6B, 0x11, 0x90, 0x16, 0x98, 0x81, 0x6B, 0x82,
+	0x48, 0x7B, 0x4A, 0x15, 0x92, 0x02, 0x2C, 0x07, 0xD1, 0x01, 0x22, 0x07, 0x92, 0x04, 0x92, 0x11,
+	0x9A, 0x51, 0x18, 0x10, 0x91, 0x80, 0x6A, 0x1E, 0xE0, 0x01, 0x2C, 0x13, 0xD1, 0x16, 0x99, 0x09,
+	0x6B, 0x10, 0x91, 0x74, 0x49, 
+	0x00, 0x00, 0xFD, 0x00, 0x80, 0x09, 0x78, 0x07, 0x91, 0x78, 0x49, 0x09, 0x78, 0x06, 0x91, 0x40,
+	0x6A, 0x0B, 0x90, 0x77, 0x4D, 0x10, 0x6A, 0x02, 0x28, 0x01, 0xD1, 0x04, 0x20, 0x00, 0xE0, 0x01,
+	0x20, 0x04, 0x90, 0x0A, 0xE0, 0x05, 0x2C, 0x01, 0xD0, 0x04, 0x2C, 0x06, 0xD1, 0x01, 0x21, 0x07,
+	0x91, 0x04, 0x91, 0x10, 0x91, 0x00, 0x6B, 0x6E, 0x4D, 0x0B, 0x90, 0x29, 0x46, 0x08, 0x20, 0xFB,
+	0xF7, 0x35, 0xFA, 0x66, 0x49, 0x00, 0x20, 0x40, 0x39, 0x48, 0x63, 0x00, 0x2E, 0x08, 0xD0, 0x63,
+	0x48, 0x80, 0x38, 0x41, 0x6A, 0x03, 0x22, 0x12, 0x07, 0x91, 0x43, 0x3A, 0x07, 0x11, 0x43, 0x41,
+	0x62, 0x5B, 0x48, 0x17, 0x99, 0x20, 0x30, 0x14, 0x90, 0x00, 0x29, 0x13, 0xD0, 0x5B, 0x49, 0x08,
+	0x68, 0x18, 0x9A, 0x00, 0x0A, 0x00, 0x02, 0x10, 0x43, 0x08, 0x60, 0x01, 0x2C, 0x01, 0xD0, 0x02,
+	0x2C, 0x06, 0xD1, 0xFF, 0xF7, 
+	0x00, 0x00, 0xFE, 0x00, 0x80, 0xB5, 0xF8, 0x00, 0x28, 0x02, 0xD0, 0x5A, 0x49, 0x01, 0x20, 0x08,
+	0x70, 0x00, 0x20, 0x3B, 0xE3, 0xFF, 0x20, 0x0A, 0x90, 0x00, 0x20, 0x09, 0x90, 0x40, 0xE1, 0x01,
+	0x2C, 0x01, 0xD0, 0x02, 0x2C, 0x06, 0xD1, 0xFF, 0xF7, 0xA3, 0xF8, 0x00, 0x28, 0x02, 0xD0, 0x51,
+	0x49, 0x01, 0x20, 0x08, 0x70, 0x00, 0x20, 0x1B, 0xE1, 0x01, 0x2C, 0x01, 0xD0, 0x02, 0x2C, 0x01,
+	0xD1, 0xFF, 0xF7, 0x9C, 0xF8, 0x04, 0xF0, 0xFE, 0xFC, 0x12, 0x98, 0xFA, 0xF7, 0x43, 0xFE, 0x01,
+	0x2C, 0x01, 0xD0, 0x02, 0x2C, 0x03, 0xD1, 0x14, 0x98, 0xC0, 0x7C, 0xFA, 0xF7, 0x01, 0xFE, 0x05,
+	0x2C, 0x01, 0xD0, 0x04, 0x2C, 0x09, 0xD1, 0x44, 0x48, 0x12, 0x99, 0x00, 0x78, 0xFA, 0xF7, 0x10,
+	0xFC, 0x16, 0x21, 0x48, 0x43, 0x41, 0x49, 0x08, 0x5A, 0x06, 0xE0, 0x01, 0x2C, 0x01, 0xD0, 0x02,
+	0x2C, 0x03, 0xD1, 0x12, 0x98, 
+	0x00, 0x00, 0xFF, 0x00, 0x80, 0xFF, 0xF7, 0xA4, 0xF8, 0x0D, 0x90, 0x00, 0x25, 0xDE, 0xE0, 0x01,
+	0x2C, 0x19, 0xD1, 0x30, 0x48, 0x00, 0x78, 0x40, 0x08, 0xA8, 0x42, 0x03, 0xD9, 0x16, 0x98, 0x40,
+	0x6A, 0x40, 0x1E, 0x01, 0xE0, 0x31, 0x48, 0x00, 0x78, 0x35, 0x49, 0x08, 0x70, 0x15, 0x98, 0x40,
+	0x69, 0x00, 0x28, 0x08, 0xD0, 0x32, 0x4A, 0x33, 0x49, 0x12, 0x78, 0x0C, 0x20, 0x89, 0x5C, 0x32,
+	0x4A, 0x89, 0x00, 0x89, 0x18, 0x08, 0x60, 0x00, 0x20, 0x92, 0xE0, 0x01, 0x2C, 0x12, 0xD1, 0x15,
+	0x98, 0x00, 0x6A, 0x02, 0x28, 0x05, 0xD1, 0x06, 0x98, 0x03, 0x99, 0x40, 0x19, 0xFE, 0xF7, 0xD4,
+	0xFA, 0x08, 0xE0, 0x06, 0x99, 0x27, 0x4A, 0x49, 0x19, 0x51, 0x5C, 0x27, 0x4A, 0x01, 0x20, 0x89,
+	0x00, 0x89, 0x18, 0x08, 0x60, 0x80, 0x27, 0x3E, 0x46, 0x08, 0x97, 0x18, 0x49, 0x08, 0x68, 0x08,
+	0x9A, 0x00, 0x0A, 0x00, 0x02, 
+	0x00, 0x01, 0x00, 0x00, 0x80, 0x10, 0x43, 0x08, 0x60, 0x02, 0x2C, 0x01, 0xD0, 0x01, 0x2C, 0x02,
+	0xD1, 0x0D, 0x98, 0xFF, 0xF7, 0x4F, 0xF8, 0xFF, 0xF7, 0xA5, 0xFE, 0x02, 0x2C, 0x01, 0xD0, 0x04,
+	0x2C, 0x02, 0xD1, 0x01, 0x21, 0x0B, 0x9A, 0x05, 0xE0, 0x01, 0x2C, 0x01, 0xD0, 0x05, 0x2C, 0x06,
+	0xD1, 0x0B, 0x9A, 0x00, 0x21, 0x0D, 0x98, 0xFF, 0xF7, 0xBE, 0xFE, 0x00, 0x28, 0x02, 0xD1, 0x08,
+	0x98, 0xB0, 0x43, 0x08, 0x90, 0x05, 0x49, 0x21, 0xE0, 0xC8, 0x01, 0x00, 0x20, 0xC6, 0x0E, 0x00,
+	0x20, 0x30, 0xEA, 0x00, 0x00, 0x9D, 0x00, 0x00, 0x20, 0x88, 0x90, 0x00, 0x00, 0xC0, 0x00, 0x11,
+	0x40, 0x00, 0x02, 0x11, 0x40, 0x36, 0x03, 0x00, 0x20, 0x80, 0xEA, 0x00, 0x00, 0x9E, 0x00, 0x00,
+	0x20, 0x10, 0x10, 0x00, 0x00, 0xB4, 0x01, 0x00, 0x20, 0xA7, 0x00, 0x00, 0x20, 0x00, 0xEC, 0x00,
+	0x00, 0xA5, 0x00, 0x00, 0x20, 
+	0x00, 0x01, 0x01, 0x00, 0x80, 0x00, 0xEB, 0x00, 0x00, 0x00, 0x04, 0x11, 0x40, 0x08, 0x68, 0x00,
+	0x0A, 0x00, 0x02, 0x38, 0x43, 0x08, 0x60, 0x02, 0x2C, 0x01, 0xD0, 0x01, 0x2C, 0x02, 0xD1, 0x0D,
+	0x98, 0xFF, 0xF7, 0x08, 0xF8, 0xFF, 0xF7, 0x5E, 0xFE, 0x02, 0x2C, 0x01, 0xD0, 0x04, 0x2C, 0x02,
+	0xD1, 0x00, 0x21, 0x0B, 0x9A, 0x05, 0xE0, 0x01, 0x2C, 0x01, 0xD0, 0x05, 0x2C, 0x07, 0xD1, 0x0B,
+	0x9A, 0x01, 0x21, 0x0D, 0x98, 0xFF, 0xF7, 0x77, 0xFE, 0x00, 0x28, 0x00, 0xD0, 0xB7, 0x43, 0x76,
+	0x08, 0x08, 0x98, 0x37, 0x43, 0x30, 0x43, 0x08, 0x90, 0x00, 0x2E, 0x8E, 0xD1, 0x09, 0x99, 0x88,
+	0x42, 0x00, 0xD9, 0x09, 0x90, 0x0A, 0x98, 0x87, 0x42, 0x00, 0xD2, 0x0A, 0x97, 0x03, 0x98, 0x40,
+	0x1C, 0x04, 0x99, 0x03, 0x90, 0x88, 0x42, 0x00, 0xD2, 0x67, 0xE7, 0x01, 0x2C, 0x25, 0xD1, 0x15,
+	0x98, 0x00, 0x6A, 0x02, 0x28, 
+	0x00, 0x01, 0x02, 0x00, 0x80, 0x0D, 0xD1, 0x06, 0x98, 0x40, 0x19, 0xFE, 0xF7, 0x27, 0xFA, 0x07,
+	0x98, 0x2D, 0x1D, 0x85, 0x42, 0x0F, 0xD2, 0x07, 0x99, 0x28, 0x1D, 0x88, 0x42, 0x0B, 0xD9, 0x0D,
+	0x1F, 0x09, 0xE0, 0x06, 0x98, 0x0F, 0x21, 0x40, 0x19, 0xFF, 0x4A, 0x10, 0x5C, 0xFF, 0x4A, 0x80,
+	0x00, 0x80, 0x18, 0x01, 0x60, 0x6D, 0x1C, 0xFE, 0x4A, 0xFB, 0x48, 0x12, 0x78, 0x0F, 0x21, 0x80,
+	0x5C, 0xFA, 0x4A, 0x80, 0x00, 0x80, 0x18, 0x01, 0x60, 0x00, 0xE0, 0x6D, 0x1C, 0x07, 0x98, 0x85,
+	0x42, 0x00, 0xD2, 0x1C, 0xE7, 0x01, 0x2C, 0x01, 0xD0, 0x02, 0x2C, 0x07, 0xD1, 0xFE, 0xF7, 0x88,
+	0xFF, 0x00, 0x28, 0x03, 0xD0, 0xF3, 0x49, 0x08, 0x78, 0x40, 0x1C, 0x08, 0x70, 0x02, 0x98, 0x40,
+	0x1C, 0x01, 0x99, 0x02, 0x90, 0x88, 0x42, 0x00, 0xD2, 0xDE, 0xE6, 0x02, 0x2C, 0x0E, 0xD1, 0x11,
+	0x98, 0x12, 0x99, 0x40, 0x1E, 
+	0x00, 0x01, 0x03, 0x00, 0x80, 0x81, 0x42, 0x09, 0xD1, 0x09, 0x99, 0x0A, 0x98, 0x40, 0x18, 0x13,
+	0x99, 0x40, 0x08, 0x48, 0x70, 0xFF, 0x20, 0x0A, 0x90, 0x00, 0x20, 0x09, 0x90, 0x12, 0x98, 0x40,
+	0x1C, 0x10, 0x99, 0x12, 0x90, 0x88, 0x42, 0x00, 0xD2, 0xB9, 0xE6, 0x02, 0x2C, 0x06, 0xD1, 0x09,
+	0x99, 0x0A, 0x98, 0x40, 0x18, 0x13, 0x99, 0x40, 0x08, 0x88, 0x70, 0xA2, 0xE6, 0x01, 0x2C, 0x06,
+	0xD1, 0x09, 0x99, 0x0A, 0x98, 0x40, 0x18, 0x13, 0x99, 0x40, 0x08, 0x08, 0x70, 0x99, 0xE6, 0x04,
+	0x2C, 0x06, 0xD1, 0x09, 0x99, 0x0A, 0x98, 0x40, 0x18, 0x13, 0x99, 0x40, 0x08, 0x08, 0x71, 0x97,
+	0xE6, 0x05, 0x2C, 0xFC, 0xD1, 0x09, 0x99, 0x0A, 0x98, 0x40, 0x18, 0x13, 0x99, 0x40, 0x08, 0xC8,
+	0x70, 0x8E, 0xE6, 0x01, 0x2C, 0x01, 0xD0, 0x02, 0x2C, 0x01, 0xD1, 0xFE, 0xF7, 0x3F, 0xFF, 0x00,
+	0x20, 0x05, 0x90, 0xB0, 0xE1, 
+	0x00, 0x01, 0x04, 0x00, 0x80, 0x04, 0xF0, 0x9E, 0xFB, 0x17, 0x98, 0x00, 0x28, 0x2D, 0xD1, 0x02,
+	0x2C, 0x0F, 0xD1, 0x12, 0x99, 0x11, 0x98, 0x81, 0x42, 0xC7, 0x49, 0x08, 0x68, 0x04, 0xD2, 0x13,
+	0x9A, 0x00, 0x0A, 0x00, 0x02, 0x52, 0x78, 0x1E, 0xE0, 0x13, 0x9A, 0x00, 0x0A, 0x00, 0x02, 0x92,
+	0x78, 0x19, 0xE0, 0x01, 0x2C, 0x06, 0xD1, 0xC0, 0x49, 0x08, 0x68, 0x13, 0x9A, 0x00, 0x0A, 0x00,
+	0x02, 0x12, 0x78, 0x10, 0xE0, 0x04, 0x2C, 0x06, 0xD1, 0xBB, 0x49, 0x08, 0x68, 0x13, 0x9A, 0x00,
+	0x0A, 0x00, 0x02, 0x12, 0x79, 0x07, 0xE0, 0x05, 0x2C, 0x07, 0xD1, 0xB7, 0x49, 0x08, 0x68, 0x13,
+	0x9A, 0x00, 0x0A, 0xD2, 0x78, 0x00, 0x02, 0x10, 0x43, 0x08, 0x60, 0x12, 0x98, 0xFA, 0xF7, 0xB2,
+	0xFC, 0x01, 0x2C, 0x01, 0xD0, 0x02, 0x2C, 0x03, 0xD1, 0x14, 0x98, 0xC0, 0x7C, 0xFA, 0xF7, 0x70,
+	0xFC, 0x05, 0x2C, 0x01, 0xD0, 
+	0x00, 0x01, 0x05, 0x00, 0x80, 0x04, 0x2C, 0x09, 0xD1, 0xAC, 0x48, 0x12, 0x99, 0x00, 0x78, 0xFA,
+	0xF7, 0x7F, 0xFA, 0x16, 0x21, 0x48, 0x43, 0xAA, 0x49, 0x08, 0x5A, 0x10, 0xE0, 0x01, 0x2C, 0x01,
+	0xD0, 0x02, 0x2C, 0x0D, 0xD1, 0x12, 0x98, 0xFE, 0xF7, 0x13, 0xFF, 0x0D, 0x90, 0x01, 0x2C, 0x07,
+	0xD1, 0x15, 0x98, 0x40, 0x69, 0x01, 0x28, 0x03, 0xD1, 0x0D, 0x98, 0x21, 0x02, 0x08, 0x43, 0x0D,
+	0x90, 0x00, 0x25, 0x4A, 0xE1, 0x01, 0x2C, 0x19, 0xD1, 0x9E, 0x48, 0x00, 0x78, 0x40, 0x08, 0xA8,
+	0x42, 0x03, 0xD9, 0x16, 0x98, 0x40, 0x6A, 0x40, 0x1E, 0x01, 0xE0, 0x9B, 0x48, 0x00, 0x78, 0x94,
+	0x49, 0x08, 0x70, 0x15, 0x98, 0x40, 0x69, 0x00, 0x28, 0x08, 0xD0, 0x91, 0x4A, 0x8E, 0x48, 0x12,
+	0x78, 0x0C, 0x21, 0x80, 0x5C, 0x8D, 0x4A, 0x80, 0x00, 0x80, 0x18, 0x01, 0x60, 0x00, 0x20, 0xDF,
+	0xE0, 0x01, 0x2C, 0x12, 0xD1, 
+	0x00, 0x01, 0x06, 0x00, 0x80, 0x15, 0x98, 0x00, 0x6A, 0x02, 0x28, 0x05, 0xD1, 0x06, 0x98, 0x03,
+	0x99, 0x40, 0x19, 0xFE, 0xF7, 0x39, 0xF9, 0x08, 0xE0, 0x06, 0x99, 0x83, 0x4A, 0x49, 0x19, 0x51,
+	0x5C, 0x82, 0x4A, 0x01, 0x20, 0x89, 0x00, 0x89, 0x18, 0x08, 0x60, 0x88, 0x4E, 0x08, 0x20, 0x31,
+	0x46, 0xFA, 0xF7, 0xFC, 0xFF, 0x02, 0x2C, 0x01, 0xD0, 0x01, 0x2C, 0x08, 0xD1, 0x7E, 0x48, 0x40,
+	0x38, 0x46, 0x63, 0x15, 0x99, 0x49, 0x69, 0x01, 0x29, 0x01, 0xD0, 0x00, 0x21, 0x41, 0x63, 0x10,
+	0x26, 0x00, 0x20, 0x0E, 0x90, 0x02, 0x2C, 0x01, 0xD0, 0x01, 0x2C, 0x02, 0xD1, 0x0D, 0x98, 0xFE,
+	0xF7, 0xA9, 0xFE, 0xFF, 0xF7, 0xFF, 0xFC, 0x01, 0x22, 0x00, 0x20, 0x0D, 0x99, 0x11, 0x42, 0x23,
+	0xD0, 0x71, 0x4B, 0x81, 0x00, 0x40, 0x3B, 0xC9, 0x18, 0x8C, 0x46, 0x49, 0x69, 0x09, 0x04, 0x09,
+	0x0E, 0x02, 0x2C, 0x01, 0xD0, 
+	0x00, 0x01, 0x07, 0x00, 0x80, 0x04, 0x2C, 0x06, 0xD1, 0x71, 0x4F, 0x43, 0x00, 0xFB, 0x5E, 0x0B,
+	0x9F, 0xBB, 0x42, 0x0B, 0xDA, 0x09, 0xE0, 0x01, 0x2C, 0x01, 0xD0, 0x05, 0x2C, 0x06, 0xD1, 0x6C,
+	0x4F, 0x43, 0x00, 0xFB, 0x5E, 0x0B, 0x9F, 0xBB, 0x42, 0x00, 0xDD, 0xB1, 0x43, 0x73, 0x08, 0x0B,
+	0x43, 0x19, 0x02, 0x19, 0x43, 0x63, 0x46, 0x59, 0x61, 0x52, 0x00, 0x40, 0x1C, 0x08, 0x28, 0xD4,
+	0xD3, 0x02, 0x2C, 0x01, 0xD0, 0x01, 0x2C, 0x14, 0xD1, 0x15, 0x98, 0x40, 0x69, 0x01, 0x28, 0x10,
+	0xD1, 0x59, 0x4A, 0x40, 0x3A, 0x50, 0x6B, 0x5E, 0x49, 0x10, 0x23, 0xCB, 0x5E, 0x00, 0x04, 0x0B,
+	0x99, 0x00, 0x0E, 0x8B, 0x42, 0x00, 0xDD, 0xB0, 0x43, 0x71, 0x08, 0x01, 0x43, 0x08, 0x02, 0x08,
+	0x43, 0x50, 0x63, 0x0E, 0x98, 0x76, 0x08, 0x40, 0x1C, 0x0E, 0x90, 0x05, 0x28, 0xAA, 0xD3, 0x02,
+	0x2C, 0x1F, 0xD1, 0x01, 0x20, 
+	0x00, 0x01, 0x08, 0x00, 0x80, 0x0C, 0x90, 0x00, 0x20, 0x4B, 0x4E, 0x52, 0x4F, 0x40, 0x3E, 0x0F,
+	0x90, 0x0C, 0x99, 0x0D, 0x98, 0x08, 0x42, 0x0B, 0xD0, 0x0F, 0x98, 0x80, 0x00, 0x80, 0x19, 0x40,
+	0x69, 0x39, 0x78, 0xC3, 0xB2, 0x12, 0x98, 0x0F, 0x9A, 0x41, 0x18, 0x13, 0x98, 0xFF, 0xF7, 0x7F,
+	0xFC, 0x0C, 0x98, 0x40, 0x00, 0x0C, 0x90, 0x0F, 0x98, 0x40, 0x1C, 0x0F, 0x90, 0x09, 0x28, 0xE7,
+	0xD3, 0x3C, 0xE0, 0x01, 0x2C, 0x21, 0xD1, 0x01, 0x20, 0x0C, 0x90, 0x00, 0x20, 0x3A, 0x4E, 0x41,
+	0x4F, 0x40, 0x3E, 0x0F, 0x90, 0x0C, 0x99, 0x0D, 0x98, 0x08, 0x42, 0x0D, 0xD0, 0x0F, 0x98, 0x80,
+	0x00, 0x80, 0x19, 0x40, 0x69, 0x39, 0x78, 0xC3, 0xB2, 0x05, 0x98, 0x0F, 0x9A, 0x40, 0x18, 0x03,
+	0x99, 0x41, 0x18, 0x13, 0x98, 0xFF, 0xF7, 0x5B, 0xFC, 0x0C, 0x98, 0x40, 0x00, 0x0C, 0x90, 0x0F,
+	0x98, 0x40, 0x1C, 0x0F, 0x90, 
+	0x00, 0x01, 0x09, 0x00, 0x80, 0x09, 0x28, 0xE5, 0xD3, 0x18, 0xE0, 0x05, 0x2C, 0x01, 0xD0, 0x04,
+	0x2C, 0x14, 0xD1, 0x00, 0x20, 0x28, 0x4E, 0x2F, 0x4F, 0x40, 0x3E, 0x0F, 0x90, 0x80, 0x00, 0x80,
+	0x19, 0x40, 0x69, 0x39, 0x78, 0xC3, 0xB2, 0x12, 0x98, 0x0F, 0x9A, 0x41, 0x18, 0x13, 0x98, 0xFF,
+	0xF7, 0x3E, 0xFC, 0x0F, 0x98, 0x40, 0x1C, 0x0F, 0x90, 0x08, 0x28, 0xEF, 0xD3, 0x03, 0x98, 0x40,
+	0x1C, 0x04, 0x99, 0x03, 0x90, 0x88, 0x42, 0x00, 0xD2, 0x1A, 0xE7, 0x01, 0x2C, 0x44, 0xD1, 0x15,
+	0x98, 0x00, 0x6A, 0x02, 0x28, 0x10, 0xD1, 0x06, 0x98, 0x40, 0x19, 0xFE, 0xF7, 0x3F, 0xF8, 0x05,
+	0x98, 0x2D, 0x1D, 0x00, 0x1D, 0x05, 0x90, 0x07, 0x98, 0x85, 0x42, 0x12, 0xD2, 0x07, 0x99, 0x28,
+	0x1D, 0x88, 0x42, 0x0E, 0xD9, 0x0D, 0x1F, 0x0C, 0xE0, 0x06, 0x99, 0x0B, 0x4A, 0x49, 0x19, 0x51,
+	0x5C, 0x0A, 0x4A, 0x0F, 0x20, 
+	0x00, 0x01, 0x0A, 0x00, 0x80, 0x89, 0x00, 0x89, 0x18, 0x08, 0x60, 0x05, 0x98, 0x6D, 0x1C, 0x40,
+	0x1C, 0x05, 0x90, 0x07, 0x4A, 0x04, 0x48, 0x12, 0x78, 0x0F, 0x21, 0x80, 0x5C, 0x03, 0x4A, 0x80,
+	0x00, 0x80, 0x18, 0x01, 0x60, 0x19, 0xE0, 0x00, 0x00, 0x00, 0xEB, 0x00, 0x00, 0x00, 0x04, 0x11,
+	0x40, 0xA5, 0x00, 0x00, 0x20, 0xB4, 0x01, 0x00, 0x20, 0xC0, 0x00, 0x11, 0x40, 0xA7, 0x00, 0x00,
+	0x20, 0x00, 0xEC, 0x00, 0x00, 0x9D, 0x00, 0x00, 0x20, 0x9E, 0x00, 0x00, 0x20, 0x10, 0x10, 0x00,
+	0x00, 0x36, 0x03, 0x00, 0x20, 0xA0, 0x00, 0x00, 0x20, 0x6D, 0x1C, 0x07, 0x98, 0x85, 0x42, 0x00,
+	0xD2, 0xB0, 0xE6, 0x12, 0x98, 0x40, 0x1C, 0x10, 0x99, 0x12, 0x90, 0x88, 0x42, 0x00, 0xD2, 0x49,
+	0xE6, 0x01, 0x2C, 0x01, 0xD0, 0x02, 0x2C, 0x07, 0xD1, 0xFE, 0xF7, 0x7A, 0xFD, 0x00, 0x28, 0x03,
+	0xD0, 0xC3, 0x49, 0x08, 0x78, 
+	0x00, 0x01, 0x0B, 0x00, 0x80, 0x40, 0x1C, 0x08, 0x70, 0x02, 0x98, 0x40, 0x1C, 0x01, 0x99, 0x02,
+	0x90, 0x88, 0x42, 0x00, 0xD2, 0x2D, 0xE6, 0x02, 0x2C, 0x07, 0xD1, 0x13, 0x98, 0x41, 0x78, 0xBD,
+	0x48, 0x41, 0x70, 0x13, 0x99, 0x89, 0x78, 0x81, 0x70, 0x13, 0xE0, 0x01, 0x2C, 0x04, 0xD1, 0x13,
+	0x98, 0x01, 0x78, 0xB8, 0x48, 0x01, 0x70, 0x0C, 0xE0, 0x04, 0x2C, 0x04, 0xD1, 0x13, 0x98, 0x01,
+	0x79, 0xB4, 0x48, 0x01, 0x71, 0x05, 0xE0, 0x05, 0x2C, 0x03, 0xD1, 0x13, 0x98, 0xC1, 0x78, 0xB1,
+	0x48, 0xC1, 0x70, 0x21, 0x99, 0x13, 0x98, 0x00, 0xF0, 0x23, 0xF9, 0x1B, 0xB0, 0xF0, 0xBD, 0x0E,
+	0xB5, 0x01, 0x22, 0x6B, 0x46, 0x07, 0xC3, 0x00, 0x22, 0x11, 0x46, 0x10, 0x46, 0x13, 0x46, 0xFF,
+	0xF7, 0xFC, 0xFB, 0x0E, 0xBD, 0x3E, 0xB5, 0x05, 0x46, 0x10, 0x46, 0x01, 0x22, 0x01, 0x93, 0x00,
+	0x90, 0x0B, 0x46, 0x02, 0x92, 
+	0x00, 0x01, 0x0C, 0x00, 0x80, 0x29, 0x46, 0x10, 0x46, 0xFF, 0xF7, 0xEF, 0xFB, 0x3E, 0xBD, 0x0E,
+	0xB5, 0x02, 0x22, 0x6B, 0x46, 0x07, 0xC3, 0x00, 0x22, 0x11, 0x46, 0x10, 0x46, 0x13, 0x46, 0xFF,
+	0xF7, 0xE4, 0xFB, 0x0E, 0xBD, 0xF7, 0xB5, 0x84, 0xB0, 0x07, 0x46, 0x0E, 0x46, 0xFE, 0xF7, 0x20,
+	0xFD, 0x00, 0x28, 0x01, 0xD0, 0x02, 0x20, 0x00, 0xE0, 0x01, 0x20, 0x01, 0x90, 0x96, 0x48, 0x81,
+	0x68, 0x01, 0x22, 0xC9, 0xB2, 0xD2, 0x02, 0x89, 0x18, 0x81, 0x60, 0x94, 0x4C, 0x39, 0x46, 0x20,
+	0x78, 0xFA, 0xF7, 0x9E, 0xF8, 0x16, 0x21, 0x92, 0x4D, 0x48, 0x43, 0x28, 0x5A, 0x03, 0x90, 0x39,
+	0x46, 0x20, 0x78, 0xFA, 0xF7, 0x95, 0xF8, 0x16, 0x21, 0x48, 0x43, 0x40, 0x19, 0x80, 0x78, 0x80,
+	0x24, 0x25, 0x46, 0x02, 0x90, 0x88, 0x49, 0xC0, 0x31, 0x08, 0x68, 0x00, 0x0A, 0x00, 0x02, 0x20,
+	0x43, 0x08, 0x60, 0xFE, 0xF7, 
+	0x00, 0x01, 0x0D, 0x00, 0x80, 0xF5, 0xFC, 0x00, 0x28, 0x02, 0xD0, 0x81, 0x49, 0x01, 0x20, 0x08,
+	0x70, 0x00, 0x27, 0x13, 0xE0, 0xFE, 0xF7, 0xF2, 0xFC, 0x02, 0x2E, 0x01, 0xD0, 0x01, 0x2E, 0x02,
+	0xD1, 0x03, 0x98, 0xFE, 0xF7, 0x07, 0xFD, 0xFF, 0xF7, 0x5D, 0xFB, 0xFE, 0xF7, 0xE1, 0xFC, 0x00,
+	0x28, 0x03, 0xD0, 0x77, 0x49, 0x08, 0x78, 0x40, 0x1C, 0x08, 0x70, 0x7F, 0x1C, 0x01, 0x98, 0x87,
+	0x42, 0xE8, 0xD3, 0x00, 0x22, 0x77, 0x4B, 0x01, 0x21, 0x10, 0x46, 0x03, 0x9F, 0x0F, 0x42, 0x02,
+	0xD0, 0x47, 0x00, 0xDF, 0x5F, 0xBA, 0x18, 0x49, 0x00, 0x40, 0x1C, 0x08, 0x28, 0xF5, 0xD3, 0x02,
+	0x98, 0x71, 0x49, 0x40, 0x00, 0x08, 0x5E, 0x06, 0x99, 0x50, 0x43, 0xC0, 0x12, 0x88, 0x42, 0x01,
+	0xDA, 0x02, 0x2E, 0x03, 0xD0, 0x88, 0x42, 0x02, 0xDD, 0x01, 0x2E, 0x00, 0xD1, 0xAC, 0x43, 0x6D,
+	0x08, 0x2C, 0x43, 0x00, 0x2D, 
+	0x00, 0x01, 0x0E, 0x00, 0x80, 0xB6, 0xD1, 0xE0, 0xB2, 0x07, 0xB0, 0xF0, 0xBD, 0x70, 0xB5, 0xFA,
+	0xF7, 0x5D, 0xF8, 0x66, 0x48, 0x00, 0x25, 0x00, 0x78, 0x40, 0x08, 0x84, 0x08, 0xA4, 0x00, 0x28,
+	0x46, 0xFA, 0xF7, 0x58, 0xFA, 0x20, 0x46, 0xFA, 0xF7, 0x07, 0xFA, 0x61, 0x48, 0xC0, 0x7C, 0xFA,
+	0xF7, 0x17, 0xFA, 0x5F, 0x48, 0x20, 0x38, 0x01, 0x6A, 0x5E, 0x48, 0x02, 0x29, 0x05, 0xD1, 0x00,
+	0x78, 0x00, 0x21, 0x00, 0x19, 0xFD, 0xF7, 0x20, 0xFF, 0x08, 0xE0, 0x00, 0x78, 0x5A, 0x4A, 0x00,
+	0x19, 0x10, 0x5C, 0x5A, 0x4A, 0x01, 0x21, 0x80, 0x00, 0x80, 0x18, 0x01, 0x60, 0x58, 0x48, 0x42,
+	0x6A, 0x01, 0x21, 0x28, 0x46, 0xFF, 0xF7, 0x5E, 0xFF, 0x70, 0xBD, 0x10, 0xB5, 0xFA, 0xF7, 0xEC,
+	0xF8, 0x4F, 0x48, 0x60, 0x38, 0x40, 0x6B, 0x44, 0x08, 0x20, 0x46, 0xFA, 0xF7, 0xDD, 0xF9, 0x20,
+	0x46, 0xFA, 0xF7, 0x28, 0xFA, 
+	0x00, 0x01, 0x0F, 0x00, 0x80, 0x44, 0x48, 0x00, 0x68, 0x00, 0x06, 0x80, 0x0F, 0x03, 0xD0, 0x48,
+	0x48, 0xC0, 0x7C, 0xFA, 0xF7, 0xE5, 0xF9, 0x4A, 0x48, 0x82, 0x6A, 0x02, 0x21, 0x20, 0x46, 0xFF,
+	0xF7, 0x41, 0xFF, 0x10, 0xBD, 0x10, 0xB5, 0xFA, 0xF7, 0xCF, 0xF8, 0x41, 0x48, 0x60, 0x38, 0x41,
+	0x6B, 0x80, 0x6B, 0x40, 0x08, 0x0C, 0x18, 0x20, 0x46, 0xFA, 0xF7, 0xBE, 0xF9, 0x20, 0x46, 0xFA,
+	0xF7, 0x09, 0xFA, 0x35, 0x48, 0x00, 0x68, 0x00, 0x06, 0x80, 0x0F, 0x03, 0xD0, 0x38, 0x48, 0xC0,
+	0x7C, 0xFA, 0xF7, 0xC6, 0xF9, 0x3A, 0x48, 0x82, 0x6A, 0x02, 0x21, 0x20, 0x46, 0xFF, 0xF7, 0x22,
+	0xFF, 0x10, 0xBD, 0x00, 0x28, 0x07, 0xD0, 0x01, 0x28, 0x03, 0xD0, 0x02, 0x28, 0x03, 0xD1, 0x35,
+	0x48, 0x70, 0x47, 0x35, 0x48, 0x70, 0x47, 0x35, 0x48, 0x70, 0x47, 0x10, 0xB5, 0x01, 0x24, 0x64,
+	0x02, 0x22, 0x46, 0x33, 0x49, 
+	0x00, 0x01, 0x10, 0x00, 0x80, 0x31, 0x48, 0x05, 0xF0, 0xE9, 0xF8, 0x22, 0x46, 0x31, 0x49, 0x2E,
+	0x48, 0x05, 0xF0, 0xE4, 0xF8, 0x22, 0x46, 0x30, 0x49, 0x2A, 0x48, 0x05, 0xF0, 0xDF, 0xF8, 0x10,
+	0xBD, 0xF3, 0xB5, 0x1C, 0x4F, 0x81, 0xB0, 0x29, 0x4A, 0xB8, 0x68, 0x01, 0x9D, 0x90, 0x42, 0x01,
+	0xD1, 0x27, 0x48, 0x08, 0xE0, 0x24, 0x4A, 0x90, 0x42, 0x01, 0xD1, 0x26, 0x48, 0x03, 0xE0, 0x21,
+	0x4A, 0x90, 0x42, 0x01, 0xD1, 0x24, 0x48, 0xC4, 0x09, 0x26, 0x1D, 0x00, 0x29, 0x09, 0xD0, 0x06,
+	0xE0, 0xA0, 0xB2, 0x29, 0x46, 0xFA, 0x68, 0xF8, 0xF7, 0xE3, 0xFD, 0x80, 0x35, 0x64, 0x1C, 0xB4,
+	0x42, 0xF6, 0xD3, 0x1A, 0x49, 0x01, 0x22, 0xB8, 0x68, 0x52, 0x02, 0x88, 0x42, 0x02, 0xD1, 0x17,
+	0x48, 0x01, 0x99, 0x04, 0xE0, 0x14, 0x49, 0x88, 0x42, 0x04, 0xD1, 0x13, 0x48, 0x01, 0x99, 0x05,
+	0xF0, 0xAD, 0xF8, 0xFE, 0xBD, 
+	0x00, 0x01, 0x11, 0x00, 0x80, 0x0F, 0x49, 0x88, 0x42, 0xFB, 0xD1, 0x0E, 0x48, 0x01, 0x99, 0xF6,
+	0xE7, 0xB4, 0x01, 0x00, 0x20, 0xC8, 0x01, 0x00, 0x20, 0x00, 0x00, 0x11, 0x40, 0xA7, 0x00, 0x00,
+	0x20, 0x00, 0xEC, 0x00, 0x00, 0x36, 0x03, 0x00, 0x20, 0x30, 0xDE, 0x00, 0x00, 0x9D, 0x00, 0x00,
+	0x20, 0x50, 0xEA, 0x00, 0x00, 0x9E, 0x00, 0x00, 0x20, 0x00, 0xEB, 0x00, 0x00, 0x00, 0x04, 0x11,
+	0x40, 0x80, 0xEA, 0x00, 0x00, 0x02, 0x12, 0x00, 0x20, 0x64, 0x10, 0x00, 0x20, 0xC6, 0x0E, 0x00,
+	0x20, 0x80, 0xEE, 0x00, 0x00, 0x00, 0xF1, 0x00, 0x00, 0x80, 0xF3, 0x00, 0x00, 0xF7, 0x48, 0x40,
+	0x69, 0xF7, 0x49, 0x08, 0x70, 0xF7, 0x49, 0x80, 0x20, 0xC8, 0x71, 0xF4, 0x48, 0x40, 0x30, 0x40,
+	0x8B, 0x80, 0x07, 0xC0, 0x0F, 0x08, 0x72, 0x70, 0x47, 0xFE, 0xB5, 0x00, 0x20, 0xF1, 0x49, 0x05,
+	0x46, 0x48, 0x70, 0x01, 0x90, 
+	0x00, 0x01, 0x12, 0x00, 0x80, 0xF0, 0x48, 0xF1, 0x4E, 0x00, 0x90, 0x38, 0xE0, 0x00, 0x24, 0x2E,
+	0xE0, 0x00, 0x20, 0x21, 0x46, 0x16, 0x22, 0x51, 0x43, 0xED, 0x4A, 0x53, 0x5A, 0x8F, 0x18, 0xB9,
+	0x78, 0x9C, 0x46, 0x8E, 0x46, 0x02, 0x46, 0x63, 0x46, 0xD3, 0x40, 0xDB, 0x07, 0x08, 0xD0, 0x33,
+	0x6A, 0x6B, 0x43, 0xB9, 0x18, 0x09, 0x79, 0x5B, 0x18, 0xE6, 0x49, 0x5B, 0x00, 0xCB, 0x5E, 0x18,
+	0x18, 0x52, 0x1C, 0xD2, 0xB2, 0x08, 0x2A, 0xEE, 0xD3, 0x71, 0x46, 0x05, 0xF0, 0xC2, 0xF8, 0x00,
+	0x99, 0x08, 0x22, 0x8A, 0x5E, 0x00, 0xB2, 0x82, 0x42, 0x03, 0xDB, 0x0A, 0x22, 0x8A, 0x5E, 0x82,
+	0x42, 0x03, 0xDD, 0xD8, 0x48, 0x01, 0x21, 0x41, 0x70, 0xFE, 0xBD, 0x64, 0x1C, 0xE4, 0xB2, 0x30,
+	0x6B, 0xA0, 0x42, 0xCD, 0xD8, 0x01, 0x98, 0x01, 0x28, 0xF6, 0xD0, 0x6D, 0x1C, 0xED, 0xB2, 0xF0,
+	0x69, 0xA8, 0x42, 0xC3, 0xD8, 
+	0x00, 0x01, 0x13, 0x00, 0x80, 0xFE, 0xBD, 0xF8, 0xB5, 0x00, 0x20, 0xCE, 0x49, 0x05, 0x46, 0x88,
+	0x70, 0xCE, 0x4E, 0x00, 0x90, 0x37, 0xE0, 0x00, 0x23, 0x2D, 0xE0, 0x19, 0x46, 0x16, 0x20, 0xCC,
+	0x4F, 0x41, 0x43, 0x78, 0x5A, 0xCC, 0x4C, 0x86, 0x46, 0x62, 0x0C, 0x00, 0x20, 0xC9, 0x19, 0x8C,
+	0x46, 0x71, 0x46, 0xC1, 0x40, 0xC9, 0x07, 0x0E, 0xD0, 0x31, 0x6A, 0x67, 0x46, 0x69, 0x43, 0x3F,
+	0x18, 0x3F, 0x79, 0xC9, 0x19, 0xC3, 0x4F, 0x49, 0x00, 0x79, 0x5E, 0xA1, 0x42, 0x00, 0xDD, 0x0C,
+	0x46, 0x91, 0x42, 0x00, 0xDA, 0x0A, 0x46, 0x40, 0x1C, 0xC0, 0xB2, 0x08, 0x28, 0xE8, 0xD3, 0xBA,
+	0x49, 0xA0, 0x1A, 0x89, 0x89, 0x80, 0xB2, 0x81, 0x42, 0x03, 0xD2, 0xB6, 0x48, 0x01, 0x21, 0x81,
+	0x70, 0xF8, 0xBD, 0x5B, 0x1C, 0xDB, 0xB2, 0x30, 0x6B, 0x98, 0x42, 0xCE, 0xD8, 0x00, 0x98, 0x01,
+	0x28, 0xF6, 0xD0, 0x6D, 0x1C, 
+	0x00, 0x01, 0x14, 0x00, 0x80, 0xED, 0xB2, 0xF0, 0x69, 0xA8, 0x42, 0xC4, 0xD8, 0xF8, 0xBD, 0xF0,
+	0xB5, 0x00, 0x21, 0xAC, 0x48, 0x85, 0xB0, 0xC1, 0x70, 0xAC, 0x48, 0x0E, 0x46, 0x40, 0x30, 0x02,
+	0x91, 0x01, 0x6A, 0xAE, 0x48, 0x02, 0x29, 0x00, 0x78, 0x02, 0xD1, 0xC0, 0x1C, 0x80, 0x08, 0x80,
+	0x00, 0x00, 0x90, 0xA6, 0x48, 0x04, 0x90, 0x00, 0x6B, 0x00, 0x99, 0x48, 0x43, 0x01, 0x90, 0xA9,
+	0x49, 0xA7, 0x48, 0x00, 0x25, 0x08, 0x60, 0x1A, 0xE0, 0x28, 0x46, 0x00, 0x99, 0x05, 0xF0, 0x37,
+	0xF8, 0x16, 0x21, 0x48, 0x43, 0x9E, 0x49, 0x0F, 0x5A, 0x02, 0x98, 0x00, 0x24, 0x40, 0x19, 0x03,
+	0x90, 0x38, 0x46, 0xE0, 0x40, 0xC0, 0x07, 0x06, 0xD0, 0x21, 0x46, 0x03, 0x98, 0xFF, 0xF7, 0x10,
+	0xF9, 0x00, 0x28, 0x00, 0xD1, 0x76, 0x1C, 0x64, 0x1C, 0x09, 0x2C, 0xF1, 0xD3, 0x6D, 0x1C, 0x01,
+	0x98, 0x85, 0x42, 0xE1, 0xD3, 
+	0x00, 0x01, 0x15, 0x00, 0x80, 0x04, 0x98, 0x80, 0x6A, 0x40, 0x08, 0xB0, 0x42, 0x02, 0xD2, 0x8D,
+	0x48, 0x01, 0x21, 0xC1, 0x70, 0x05, 0xB0, 0xF0, 0xBD, 0x8A, 0x49, 0x01, 0x20, 0x88, 0x75, 0x70,
+	0x47, 0x88, 0x49, 0x10, 0xB5, 0x24, 0x31, 0x90, 0x4A, 0x09, 0x5C, 0x11, 0x70, 0x85, 0x49, 0x8F,
+	0x4A, 0x27, 0x31, 0x09, 0x5C, 0x11, 0x70, 0x83, 0x49, 0x8D, 0x4A, 0x2A, 0x31, 0x09, 0x5C, 0x11,
+	0x70, 0xFF, 0xF7, 0x8F, 0xFE, 0x87, 0x49, 0x08, 0x60, 0x10, 0xBD, 0xF7, 0xB5, 0x0F, 0x46, 0x15,
+	0x46, 0x88, 0x4C, 0x03, 0x20, 0xF8, 0xF7, 0x3F, 0xFD, 0xFA, 0xF7, 0xA9, 0xFB, 0x00, 0x20, 0xFA,
+	0xF7, 0xCD, 0xFB, 0x80, 0x4E, 0x7E, 0x48, 0x30, 0x60, 0x01, 0x78, 0x7F, 0x4A, 0x11, 0x70, 0x41,
+	0x78, 0x7E, 0x4A, 0x11, 0x70, 0x80, 0x78, 0x7E, 0x49, 0x08, 0x70, 0xFC, 0xF7, 0x1B, 0xFE, 0xFC,
+	0xF7, 0xEA, 0xFD, 0x03, 0x20, 
+	0x00, 0x01, 0x16, 0x00, 0x80, 0x00, 0x99, 0xF8, 0xF7, 0x16, 0xFD, 0xFA, 0xF7, 0xB7, 0xFB, 0x37,
+	0x60, 0x6C, 0x4E, 0x30, 0x78, 0x00, 0x28, 0x01, 0xD1, 0x01, 0x21, 0x00, 0xE0, 0x00, 0x21, 0x20,
+	0x46, 0xFF, 0xF7, 0x5D, 0xFD, 0xF9, 0xF7, 0x52, 0xFE, 0xFA, 0xF7, 0x96, 0xF8, 0xFA, 0xF7, 0xE4,
+	0xF9, 0x00, 0x28, 0xFB, 0xD0, 0x70, 0x48, 0x00, 0x68, 0xFC, 0xF7, 0x93, 0xFD, 0x30, 0x78, 0x00,
+	0x28, 0x01, 0xD1, 0x01, 0x21, 0x00, 0xE0, 0x00, 0x21, 0x20, 0x46, 0xFF, 0xF7, 0x60, 0xFD, 0xF9,
+	0xF7, 0xFB, 0xFE, 0x03, 0x20, 0xFA, 0xF7, 0x83, 0xF9, 0xFA, 0xF7, 0xCE, 0xF9, 0x00, 0x28, 0xFB,
+	0xD0, 0x66, 0x48, 0x01, 0x68, 0x03, 0x20, 0xFC, 0xF7, 0x2C, 0xFB, 0xE9, 0x09, 0x06, 0x22, 0x23,
+	0x46, 0x63, 0x48, 0x01, 0xF0, 0xBE, 0xFA, 0x05, 0x23, 0xDB, 0x01, 0x15, 0x27, 0x7F, 0x01, 0x20,
+	0x22, 0x5F, 0x4E, 0x00, 0x20, 
+	0x00, 0x01, 0x17, 0x00, 0x80, 0x19, 0x18, 0x71, 0x5C, 0x21, 0x54, 0x40, 0x1C, 0x90, 0x42, 0xF9,
+	0xD3, 0x5C, 0x49, 0x00, 0x20, 0x0B, 0x5C, 0x16, 0x18, 0x40, 0x1C, 0xA3, 0x55, 0x4A, 0x28, 0xF9,
+	0xD3, 0xE8, 0x19, 0xC1, 0x09, 0xC9, 0x32, 0xE3, 0x1D, 0xD2, 0x09, 0xF9, 0x33, 0x20, 0x46, 0x01,
+	0xF0, 0xA0, 0xFA, 0xFE, 0xBD, 0xF8, 0xB5, 0x05, 0x46, 0x00, 0x06, 0x01, 0xD5, 0x00, 0x20, 0x04,
+	0xE0, 0xFF, 0xF7, 0x86, 0xF8, 0x0B, 0x21, 0x08, 0x40, 0x48, 0x40, 0x28, 0x43, 0x04, 0x46, 0x45,
+	0x48, 0x43, 0x4E, 0x06, 0x60, 0x39, 0x48, 0xC1, 0x6B, 0x01, 0x29, 0x04, 0xD1, 0x00, 0x6C, 0x00,
+	0x28, 0x01, 0xD0, 0x01, 0x25, 0x00, 0xE0, 0x00, 0x25, 0x00, 0x2D, 0x07, 0xD0, 0x03, 0x20, 0xF8,
+	0xF7, 0xB2, 0xFC, 0xFA, 0xF7, 0x1C, 0xFB, 0x00, 0x20, 0xFA, 0xF7, 0x40, 0xFB, 0x31, 0x4F, 0xA0,
+	0x07, 0x08, 0xD5, 0x38, 0x78, 
+	0x00, 0x01, 0x18, 0x00, 0x80, 0x00, 0x28, 0x01, 0xD1, 0x01, 0x21, 0x00, 0xE0, 0x00, 0x21, 0x39,
+	0x48, 0xFF, 0xF7, 0xFD, 0xFC, 0xE0, 0x07, 0x08, 0xD0, 0x38, 0x78, 0x00, 0x28, 0x01, 0xD1, 0x01,
+	0x21, 0x00, 0xE0, 0x00, 0x21, 0x33, 0x48, 0xFF, 0xF7, 0xDA, 0xFC, 0x00, 0x2D, 0x1D, 0xD0, 0xA0,
+	0x07, 0x1B, 0xD0, 0x38, 0x8C, 0x40, 0x24, 0x20, 0x43, 0x38, 0x84, 0x01, 0x20, 0xFC, 0xF7, 0x9D,
+	0xF8, 0x00, 0x20, 0xFC, 0xF7, 0xC2, 0xF8, 0x30, 0x4A, 0x30, 0x49, 0x00, 0x20, 0xFF, 0xF7, 0x3D,
+	0xFF, 0x2F, 0x4A, 0x30, 0x49, 0x01, 0x20, 0xFF, 0xF7, 0x38, 0xFF, 0x00, 0x20, 0xFC, 0xF7, 0x8D,
+	0xF8, 0x38, 0x8C, 0xA0, 0x43, 0x38, 0x84, 0xF9, 0xF7, 0x2C, 0xFD, 0x30, 0x78, 0x15, 0x4A, 0x24,
+	0x32, 0x10, 0x70, 0x26, 0x48, 0x01, 0x78, 0x51, 0x70, 0x26, 0x49, 0x0B, 0x78, 0x93, 0x70, 0x73,
+	0x78, 0xD2, 0x1C, 0x13, 0x70, 
+	0x00, 0x01, 0x19, 0x00, 0x80, 0x43, 0x78, 0x53, 0x70, 0x4B, 0x78, 0x93, 0x70, 0xB3, 0x78, 0xD2,
+	0x1C, 0x13, 0x70, 0x80, 0x78, 0x50, 0x70, 0x88, 0x78, 0x90, 0x70, 0x00, 0x20, 0xFF, 0xF7, 0x00,
+	0xFF, 0x00, 0x2D, 0x05, 0xD0, 0x00, 0x20, 0xFA, 0xF7, 0xE9, 0xFA, 0x00, 0x20, 0xFA, 0xF7, 0xBF,
+	0xFA, 0xFC, 0xF7, 0x40, 0xFD, 0xFC, 0xF7, 0x0F, 0xFD, 0xF8, 0xBD, 0x70, 0x47, 0x80, 0xE6, 0x00,
+	0x00, 0x2A, 0x01, 0x00, 0x20, 0xD8, 0x01, 0x00, 0x20, 0xC0, 0xEA, 0x00, 0x00, 0xF0, 0xE9, 0x00,
+	0x00, 0x00, 0xEC, 0x00, 0x00, 0x2C, 0x05, 0x00, 0x20, 0x00, 0x80, 0xFF, 0xFF, 0x9D, 0x00, 0x00,
+	0x20, 0xC6, 0x0E, 0x00, 0x20, 0xD0, 0x01, 0x00, 0x20, 0xC8, 0x01, 0x00, 0x20, 0xC9, 0x01, 0x00,
+	0x20, 0xCA, 0x01, 0x00, 0x20, 0x60, 0x14, 0x00, 0x20, 0xD4, 0x00, 0x00, 0x20, 0xD8, 0x00, 0x00,
+	0x20, 0x92, 0x08, 0x00, 0x20, 
+	0x00, 0x01, 0x1A, 0x00, 0x80, 0x32, 0x0B, 0x00, 0x20, 0x00, 0xF6, 0x00, 0x00, 0x64, 0x10, 0x00,
+	0x20, 0x80, 0xFA, 0x00, 0x00, 0x02, 0x12, 0x00, 0x20, 0x70, 0xB5, 0xFE, 0x4C, 0x01, 0x26, 0x20,
+	0x79, 0x00, 0x28, 0x02, 0xD1, 0x26, 0x71, 0xFF, 0xF7, 0xD9, 0xFD, 0xFB, 0x48, 0xFA, 0xF7, 0xEF,
+	0xF9, 0x00, 0x25, 0xA5, 0x63, 0xF9, 0x48, 0xE5, 0x63, 0xFE, 0xF7, 0x94, 0xFF, 0xF9, 0xF7, 0xB5,
+	0xFC, 0xFC, 0xF7, 0x11, 0xF8, 0xFA, 0xF7, 0xDB, 0xFB, 0xFE, 0xF7, 0xE2, 0xF9, 0x04, 0xF0, 0xB8,
+	0xF8, 0xF8, 0xF7, 0x16, 0xFC, 0xF2, 0x48, 0x01, 0x46, 0xC0, 0x31, 0xA1, 0x64, 0x60, 0x64, 0x60,
+	0x39, 0xE1, 0x64, 0xF0, 0x49, 0x21, 0x65, 0xFA, 0xF7, 0xDD, 0xF9, 0xA0, 0x6C, 0xFA, 0xF7, 0xD5,
+	0xF9, 0xFF, 0xF7, 0x43, 0xFD, 0xFF, 0xF7, 0x4B, 0xFE, 0xE0, 0x78, 0x00, 0x28, 0x03, 0xD0, 0x25,
+	0x70, 0x83, 0x20, 0xFF, 0xF7, 
+	0x00, 0x01, 0x1B, 0x00, 0x80, 0x17, 0xFF, 0x25, 0x70, 0x00, 0x20, 0xFF, 0xF7, 0x13, 0xFF, 0xFF,
+	0xF7, 0xB3, 0xFD, 0xFF, 0xF7, 0xF8, 0xFD, 0xA0, 0x78, 0x61, 0x78, 0x08, 0x43, 0x04, 0xD0, 0x26,
+	0x70, 0x83, 0x20, 0xFF, 0xF7, 0x07, 0xFF, 0x25, 0x70, 0xDF, 0x48, 0xE5, 0x74, 0xC0, 0x6B, 0x01,
+	0x28, 0x11, 0xD1, 0xDD, 0x48, 0x40, 0x30, 0x40, 0x8B, 0x21, 0x7A, 0x88, 0x43, 0xC0, 0x07, 0x0A,
+	0xD1, 0x01, 0xF0, 0x88, 0xF9, 0xFA, 0xF7, 0x25, 0xFA, 0x00, 0x28, 0x03, 0xD1, 0xFA, 0xF7, 0x26,
+	0xFA, 0x00, 0x28, 0x00, 0xD0, 0xE6, 0x74, 0x25, 0x64, 0xE5, 0x72, 0x25, 0x73, 0xE5, 0x75, 0x25,
+	0x76, 0x25, 0x77, 0x25, 0x84, 0x65, 0x84, 0x65, 0x72, 0xA6, 0x75, 0x70, 0xBD, 0x10, 0xB5, 0xF9,
+	0xF7, 0x84, 0xFC, 0xC8, 0x49, 0x00, 0x20, 0x48, 0x72, 0x10, 0xBD, 0xF8, 0xB5, 0xC5, 0x4D, 0x00,
+	0x24, 0x06, 0x46, 0xAC, 0x71, 
+	0x00, 0x01, 0x1C, 0x00, 0x80, 0xFD, 0xF7, 0x92, 0xF9, 0x07, 0x46, 0x62, 0xB6, 0x68, 0x7A, 0x2A,
+	0x28, 0x06, 0xD2, 0xC6, 0x49, 0x80, 0x00, 0x09, 0x58, 0x30, 0x46, 0x88, 0x47, 0x04, 0x46, 0x04,
+	0xE0, 0xF9, 0xF7, 0x6B, 0xFC, 0x00, 0x20, 0x68, 0x72, 0x08, 0x24, 0x72, 0xB6, 0xE0, 0x07, 0x05,
+	0xD0, 0xFA, 0xF7, 0x62, 0xF8, 0x01, 0x28, 0x01, 0xD1, 0xC0, 0x07, 0x04, 0x43, 0x00, 0x2C, 0xE4,
+	0xDB, 0xF8, 0xB2, 0xFD, 0xF7, 0x77, 0xF9, 0xB8, 0x48, 0x40, 0x30, 0x00, 0x8B, 0x00, 0x28, 0x02,
+	0xD1, 0xF8, 0xF7, 0x96, 0xFB, 0x10, 0xE0, 0xFA, 0xF7, 0xDC, 0xF9, 0x00, 0x28, 0x03, 0xD0, 0x6E,
+	0x63, 0xF8, 0xF7, 0x95, 0xFB, 0x08, 0xE0, 0xB0, 0x4A, 0x69, 0x6B, 0x52, 0x6D, 0x28, 0x46, 0x71,
+	0x1A, 0x91, 0x42, 0x01, 0xD9, 0x46, 0x63, 0xEB, 0xE7, 0x69, 0x8C, 0x20, 0x46, 0x08, 0x43, 0xF8,
+	0xBD, 0xF0, 0xB5, 0x00, 0x22, 
+	0x00, 0x01, 0x1D, 0x00, 0x80, 0xAA, 0x4C, 0xAB, 0x4F, 0x0B, 0xE0, 0x53, 0x00, 0xAA, 0x4D, 0xAB,
+	0x4E, 0xED, 0x5A, 0xF6, 0x5A, 0x45, 0x43, 0x4E, 0x43, 0xAD, 0x19, 0xFE, 0x5A, 0xAD, 0x19, 0xFD,
+	0x52, 0x52, 0x1C, 0xA3, 0x6A, 0x93, 0x42, 0xF0, 0xD8, 0x00, 0x22, 0x12, 0xE0, 0x53, 0x00, 0x15,
+	0x27, 0xA1, 0x4D, 0x7F, 0x01, 0xA1, 0x4E, 0x5D, 0x19, 0x9E, 0x19, 0xED, 0x19, 0xF6, 0x19, 0x2D,
+	0x88, 0x36, 0x88, 0x45, 0x43, 0x4E, 0x43, 0xAE, 0x19, 0x9D, 0x4D, 0xEF, 0x5A, 0xF6, 0x19, 0xEE,
+	0x52, 0x52, 0x1C, 0x63, 0x6A, 0x93, 0x42, 0xE9, 0xD8, 0xF0, 0xBD, 0x02, 0x46, 0x00, 0x20, 0x10,
+	0xB5, 0xC0, 0x43, 0x00, 0x29, 0x0C, 0xD0, 0x01, 0x29, 0x03, 0xD0, 0x02, 0x29, 0x11, 0xD1, 0x01,
+	0x21, 0x0C, 0xE0, 0x00, 0x2A, 0x01, 0xD1, 0x00, 0x21, 0x00, 0xE0, 0x01, 0x46, 0x01, 0x20, 0x05,
+	0xE0, 0x01, 0x2A, 0x01, 0xD1, 
+	0x00, 0x01, 0x1E, 0x00, 0x80, 0x00, 0x21, 0x01, 0xE0, 0x01, 0x46, 0x00, 0x20, 0xFF, 0xF7, 0xB8,
+	0xFF, 0x10, 0xBD, 0x80, 0x4C, 0x00, 0x20, 0x20, 0x76, 0xFA, 0xF7, 0xB0, 0xF9, 0x20, 0x7E, 0xFF,
+	0xF7, 0xBF, 0xFD, 0xFC, 0xF7, 0x07, 0xFC, 0xFC, 0xF7, 0xD6, 0xFB, 0x10, 0xBD, 0x70, 0xB5, 0x79,
+	0x4C, 0x7D, 0x4D, 0x21, 0x8C, 0x8A, 0x06, 0x03, 0xD4, 0xCA, 0x06, 0x01, 0xD4, 0xC9, 0x05, 0x3A,
+	0xD5, 0x80, 0x49, 0x09, 0x78, 0x00, 0x29, 0x36, 0xD1, 0x21, 0x6B, 0x88, 0x42, 0x32, 0xD9, 0x69,
+	0x6D, 0x08, 0x18, 0x20, 0x63, 0x00, 0x20, 0xFA, 0xF7, 0x6A, 0xF9, 0x68, 0x6E, 0xC0, 0xB2, 0xFA,
+	0xF7, 0x36, 0xF9, 0x00, 0x25, 0x25, 0x77, 0x20, 0x7E, 0x00, 0x28, 0x0C, 0xD0, 0x00, 0x20, 0xFA,
+	0xF7, 0x85, 0xF9, 0x20, 0x7E, 0x60, 0x76, 0x25, 0x76, 0x00, 0x20, 0xFF, 0xF7, 0x91, 0xFD, 0x21,
+	0x7E, 0x60, 0x7E, 0xFF, 0xF7, 
+	0x00, 0x01, 0x1F, 0x00, 0x80, 0xAA, 0xFF, 0x00, 0x20, 0xFB, 0xF7, 0xF7, 0xFE, 0x00, 0x20, 0xFB,
+	0xF7, 0x1C, 0xFF, 0x00, 0x20, 0x03, 0xF0, 0x98, 0xFF, 0x00, 0x20, 0xFA, 0xF7, 0xE3, 0xF9, 0x00,
+	0x20, 0xFB, 0xF7, 0x46, 0xFE, 0x00, 0x20, 0xFA, 0xF7, 0xB6, 0xFA, 0x20, 0x8C, 0xFF, 0x21, 0xF1,
+	0x31, 0x88, 0x43, 0x20, 0x84, 0x70, 0xBD, 0x69, 0x6D, 0x08, 0x18, 0x20, 0x63, 0x70, 0xBD, 0x70,
+	0xB5, 0xFF, 0xF7, 0xB4, 0xFF, 0x53, 0x4C, 0x58, 0x4D, 0x20, 0x8C, 0x60, 0x84, 0xE8, 0x6E, 0x00,
+	0x28, 0x05, 0xD0, 0x02, 0xF0, 0xB5, 0xFA, 0x03, 0x28, 0x01, 0xD1, 0x24, 0x20, 0x08, 0xE0, 0x02,
+	0xF0, 0xAF, 0xFA, 0x04, 0x28, 0x01, 0xD1, 0x26, 0x20, 0x02, 0xE0, 0xA8, 0x69, 0x01, 0x28, 0x01,
+	0xD1, 0x60, 0x72, 0x13, 0xE0, 0x54, 0x48, 0x40, 0x7E, 0x01, 0x28, 0x07, 0xD1, 0x02, 0xF0, 0xA0,
+	0xFA, 0x03, 0x28, 0x01, 0xD1, 
+	0x00, 0x01, 0x20, 0x00, 0x80, 0x21, 0x20, 0x06, 0xE0, 0x0E, 0x20, 0x04, 0xE0, 0x02, 0xF0, 0x98,
+	0xFA, 0x03, 0x28, 0x00, 0xD0, 0x09, 0x20, 0x60, 0x72, 0x00, 0x20, 0x60, 0x74, 0x01, 0x20, 0xC0,
+	0x07, 0x70, 0xBD, 0xF8, 0xB5, 0x05, 0x46, 0x0E, 0x46, 0xF9, 0xF7, 0x8E, 0xFC, 0x39, 0x4C, 0x3C,
+	0x48, 0x60, 0x64, 0xE0, 0x64, 0xFA, 0xF7, 0x76, 0xF8, 0x44, 0x48, 0x01, 0x27, 0x00, 0x78, 0x00,
+	0x28, 0x10, 0xD1, 0x03, 0x2E, 0x05, 0xD0, 0x38, 0x49, 0xA0, 0x6B, 0x49, 0x68, 0x28, 0x1A, 0x88,
+	0x42, 0x06, 0xD9, 0x03, 0x20, 0xF9, 0xF7, 0x03, 0xFF, 0x04, 0x20, 0x20, 0x75, 0xA5, 0x63, 0x0B,
+	0xE0, 0x01, 0x2E, 0x04, 0xD1, 0x01, 0x20, 0xF9, 0xF7, 0xFA, 0xFE, 0x27, 0x75, 0x04, 0xE0, 0x02,
+	0x20, 0xF9, 0xF7, 0xF5, 0xFE, 0x02, 0x20, 0x20, 0x75, 0x01, 0x20, 0xF8, 0xBD, 0x10, 0xB5, 0x2A,
+	0x49, 0x49, 0x69, 0xFF, 0xF7, 
+	0x00, 0x01, 0x21, 0x00, 0x80, 0xCE, 0xFF, 0x23, 0x4A, 0x05, 0x21, 0x51, 0x72, 0x10, 0xBD, 0xF0,
+	0xB5, 0x2F, 0x48, 0x01, 0x27, 0x00, 0x78, 0x85, 0xB0, 0x01, 0x28, 0x5D, 0xD1, 0x29, 0x48, 0x01,
+	0x78, 0x01, 0x29, 0x59, 0xD9, 0x00, 0x25, 0x25, 0xE0, 0x3C, 0x46, 0x1B, 0xE0, 0xE0, 0x00, 0x21,
+	0x18, 0x1A, 0x48, 0xEA, 0x00, 0x0E, 0x18, 0xAA, 0x18, 0x31, 0x7A, 0x10, 0x18, 0x03, 0x90, 0x00,
+	0x7A, 0x81, 0x42, 0x0E, 0xD9, 0x09, 0x22, 0x68, 0x46, 0x03, 0x99, 0x04, 0xF0, 0x87, 0xFC, 0x09,
+	0x22, 0x31, 0x46, 0x03, 0x98, 0x04, 0xF0, 0x82, 0xFC, 0x09, 0x22, 0x69, 0x46, 0x30, 0x46, 0x04,
+	0xF0, 0x7D, 0xFC, 0x64, 0x1C, 0x17, 0x48, 0x00, 0x78, 0x84, 0x42, 0xDF, 0xDB, 0x7F, 0x1C, 0x6D,
+	0x1C, 0xFF, 0xB2, 0xED, 0xB2, 0x13, 0x48, 0x01, 0x78, 0x8D, 0x42, 0xD5, 0xD3, 0x01, 0x78, 0x02,
+	0x29, 0x2A, 0xD9, 0x06, 0x4A, 
+	0x00, 0x01, 0x22, 0x00, 0x80, 0x11, 0x7A, 0x92, 0x7E, 0x89, 0x08, 0x8A, 0x42, 0x22, 0xD3, 0x00,
+	0x21, 0x21, 0xE0, 0x00, 0x00, 0xD8, 0x01, 0x00, 0x20, 0xB7, 0x8C, 0x00, 0x00, 0x88, 0x03, 0x00,
+	0x20, 0xA0, 0x13, 0x00, 0x20, 0x00, 0x17, 0x00, 0x20, 0x80, 0xE6, 0x00, 0x00, 0x58, 0xDE, 0x00,
+	0x00, 0xF0, 0xE9, 0x00, 0x00, 0x2C, 0x05, 0x00, 0x20, 0x00, 0xF6, 0x00, 0x00, 0x80, 0xFA, 0x00,
+	0x00, 0xCC, 0x07, 0x00, 0x20, 0xEE, 0x00, 0x00, 0x20, 0x80, 0xE8, 0x00, 0x00, 0x6C, 0x02, 0x00,
+	0x20, 0x28, 0x01, 0x00, 0x20, 0x02, 0x21, 0x01, 0x70, 0x9C, 0xE4, 0xFC, 0x48, 0xFC, 0x49, 0x00,
+	0x78, 0x00, 0x28, 0x06, 0xD0, 0xFB, 0x48, 0x00, 0x78, 0x00, 0x28, 0x02, 0xD1, 0xFA, 0x48, 0x40,
+	0x7E, 0x03, 0xE0, 0xC8, 0x7D, 0x00, 0x28, 0x01, 0xD0, 0x40, 0x1E, 0xC8, 0x75, 0x70, 0x47, 0x10,
+	0xB5, 0xFF, 0xF7, 0xEB, 0xFF, 
+	0x00, 0x01, 0x23, 0x00, 0x80, 0xFF, 0xF7, 0x83, 0xFF, 0x10, 0xBD, 0xF8, 0xB5, 0x07, 0x46, 0x01,
+	0x24, 0xF9, 0xF7, 0xB2, 0xFE, 0x01, 0x28, 0x48, 0xD1, 0xF9, 0xF7, 0x93, 0xFA, 0xEC, 0x4D, 0x00,
+	0x26, 0xE8, 0x79, 0x00, 0x07, 0x00, 0x28, 0x08, 0xDA, 0xEA, 0x48, 0x00, 0x78, 0x01, 0x28, 0x04,
+	0xD1, 0xEA, 0x48, 0x06, 0x70, 0x03, 0x20, 0xFB, 0xF7, 0x08, 0xFE, 0x28, 0x7D, 0x04, 0x28, 0x02,
+	0xD1, 0x03, 0x20, 0xE9, 0x6C, 0x05, 0xE0, 0xE9, 0x6C, 0xC0, 0x07, 0x01, 0xD0, 0x01, 0x20, 0x00,
+	0xE0, 0x02, 0x20, 0xFB, 0xF7, 0xF6, 0xFF, 0xFC, 0xF7, 0xC2, 0xFA, 0xE1, 0x49, 0x8A, 0x69, 0x03,
+	0x20, 0xC4, 0x07, 0x01, 0x2A, 0x20, 0xD1, 0xDF, 0x4A, 0x12, 0x78, 0x01, 0x2A, 0x1C, 0xD0, 0xEA,
+	0x7A, 0x00, 0x2A, 0x19, 0xD1, 0xAA, 0x7A, 0x01, 0x2A, 0x16, 0xD0, 0xDB, 0x4A, 0x12, 0x78, 0x01,
+	0x2A, 0x12, 0xD0, 0xEA, 0x6B, 
+	0x00, 0x01, 0x24, 0x00, 0x80, 0x89, 0x68, 0xBA, 0x1A, 0x8A, 0x42, 0x0D, 0xD8, 0x6E, 0x72, 0x29,
+	0x7B, 0xA8, 0x79, 0x08, 0x24, 0x81, 0x42, 0x01, 0xD0, 0x28, 0x73, 0x0C, 0x24, 0xFF, 0xF7, 0xAF,
+	0xFF, 0xCA, 0x48, 0x06, 0x70, 0xEE, 0x72, 0x00, 0xE0, 0x68, 0x72, 0x20, 0x46, 0xF8, 0xBD, 0x10,
+	0xB5, 0xCE, 0x48, 0x42, 0x78, 0x01, 0x78, 0x07, 0x20, 0x00, 0xF0, 0x6F, 0xFF, 0xF9, 0xF7, 0xC6,
+	0xFA, 0xC3, 0x4C, 0xCB, 0x48, 0xA0, 0x64, 0x20, 0x65, 0xF9, 0xF7, 0x67, 0xFF, 0x23, 0x7C, 0xE2,
+	0x7B, 0xA1, 0x7B, 0x60, 0x7B, 0xF9, 0xF7, 0x9B, 0xFE, 0x06, 0x20, 0x60, 0x72, 0x01, 0x20, 0x10,
+	0xBD, 0x70, 0xB5, 0x05, 0x46, 0xF9, 0xF7, 0xB2, 0xFA, 0xB9, 0x4C, 0xC1, 0x48, 0xA0, 0x64, 0x20,
+	0x65, 0xF9, 0xF7, 0x53, 0xFF, 0xF9, 0xF7, 0xF0, 0xFC, 0x07, 0x20, 0xE5, 0x63, 0x60, 0x72, 0x01,
+	0x20, 0x70, 0xBD, 0x08, 0x20, 
+	0x00, 0x01, 0x25, 0x00, 0x80, 0x70, 0x47, 0xF8, 0xB5, 0x00, 0x26, 0x00, 0xF0, 0x23, 0xFF, 0xF9,
+	0xF7, 0xC5, 0xFF, 0xAF, 0x4D, 0x04, 0x46, 0xE8, 0x7C, 0x01, 0x28, 0x0A, 0xD1, 0xF9, 0xF7, 0xC2,
+	0xFF, 0x00, 0x28, 0x06, 0xD1, 0x00, 0x2C, 0x04, 0xD1, 0xE8, 0x74, 0xFC, 0xF7, 0x14, 0xFA, 0xFC,
+	0xF7, 0x41, 0xFA, 0x28, 0x8C, 0xAF, 0x49, 0xAA, 0x4F, 0xC2, 0x05, 0x06, 0xD5, 0xFA, 0x6C, 0x3B,
+	0x6D, 0xD2, 0x1A, 0xA2, 0x42, 0x0E, 0xD9, 0x88, 0x43, 0x28, 0x84, 0x28, 0x7F, 0x01, 0x28, 0x16,
+	0xD1, 0x38, 0x6C, 0x00, 0x28, 0x13, 0xD1, 0xF8, 0x6C, 0xA0, 0x42, 0x05, 0xD2, 0x28, 0x8C, 0x08,
+	0x43, 0x28, 0x84, 0x1F, 0xE0, 0x01, 0x20, 0xF8, 0xBD, 0xF9, 0xF7, 0x9C, 0xFF, 0x80, 0x21, 0x00,
+	0x28, 0x28, 0x8C, 0x01, 0xD0, 0x08, 0x43, 0x00, 0xE0, 0x88, 0x43, 0x28, 0x84, 0x13, 0xE0, 0xF9,
+	0xF7, 0x91, 0xFF, 0x00, 0x28, 
+	0x00, 0x01, 0x26, 0x00, 0x80, 0x09, 0xD1, 0xF8, 0x6C, 0xA0, 0x42, 0x06, 0xD3, 0xF9, 0xF7, 0x81,
+	0xFF, 0x00, 0x28, 0x08, 0xD0, 0x28, 0x8C, 0xC0, 0x06, 0x05, 0xD4, 0x00, 0x20, 0xA8, 0x76, 0xE8,
+	0x76, 0x01, 0x20, 0x68, 0x77, 0x01, 0x26, 0x30, 0x46, 0xF8, 0xBD, 0xF0, 0xB5, 0x85, 0xB0, 0x01,
+	0x26, 0xF9, 0xF7, 0xE2, 0xFD, 0x01, 0x28, 0x78, 0xD1, 0xF9, 0xF7, 0xC3, 0xF9, 0x88, 0x48, 0xC0,
+	0x6B, 0xF6, 0x07, 0x83, 0x4C, 0x01, 0x28, 0x0C, 0xD1, 0x85, 0x48, 0x40, 0x30, 0x40, 0x8B, 0x21,
+	0x7A, 0x88, 0x43, 0xC0, 0x07, 0x05, 0xD1, 0xFF, 0xF7, 0x96, 0xFF, 0x01, 0x28, 0x01, 0xD1, 0x15,
+	0x20, 0x62, 0xE0, 0x20, 0x8C, 0x60, 0x84, 0x22, 0x6D, 0x00, 0x92, 0x23, 0x7C, 0xE2, 0x7B, 0xA1,
+	0x7B, 0x60, 0x7B, 0xFC, 0xF7, 0x83, 0xF9, 0xE0, 0x79, 0xC1, 0x08, 0x04, 0xD1, 0x00, 0x20, 0xFB,
+	0xF7, 0x24, 0xFD, 0x00, 0x20, 
+	0x00, 0x01, 0x27, 0x00, 0x80, 0x15, 0xE0, 0x01, 0x07, 0x0E, 0xD5, 0x72, 0x49, 0x09, 0x78, 0x01,
+	0x29, 0x0A, 0xD1, 0xE1, 0x7D, 0x00, 0x29, 0x07, 0xD1, 0x70, 0x49, 0x01, 0x20, 0x08, 0x70, 0x03,
+	0x20, 0xFB, 0xF7, 0x13, 0xFD, 0x04, 0x20, 0x04, 0xE0, 0xC0, 0x09, 0xE7, 0xD1, 0xFB, 0xF7, 0x0D,
+	0xFD, 0x0F, 0x20, 0xF9, 0xF7, 0xD7, 0xFF, 0xFC, 0xF7, 0xD9, 0xFA, 0x15, 0x22, 0x6C, 0x48, 0x52,
+	0x01, 0x81, 0x18, 0x02, 0xA8, 0xF8, 0xF7, 0x0C, 0xF8, 0x60, 0x7B, 0x6B, 0x46, 0x18, 0x71, 0xA0,
+	0x7B, 0x58, 0x71, 0xE0, 0x7B, 0x98, 0x71, 0x20, 0x7C, 0xD8, 0x71, 0x60, 0x21, 0x02, 0xA8, 0xF8,
+	0xF7, 0x07, 0xF8, 0x05, 0x46, 0x02, 0x46, 0x01, 0xA9, 0x02, 0xA8, 0xFA, 0xF7, 0xDF, 0xF9, 0x28,
+	0x46, 0xFB, 0xF7, 0x49, 0xFC, 0x29, 0x46, 0x02, 0xA8, 0xFA, 0xF7, 0xEC, 0xFB, 0x02, 0x46, 0x29,
+	0x46, 0x02, 0xA8, 0xFB, 0xF7, 
+	0x00, 0x01, 0x28, 0x00, 0x80, 0x69, 0xF9, 0x02, 0xA8, 0xF7, 0xF7, 0xFF, 0xFF, 0xFF, 0xF7, 0xB7,
+	0xFE, 0x4E, 0x4F, 0x38, 0x78, 0x01, 0x28, 0x06, 0xD8, 0x00, 0x25, 0x01, 0x28, 0x06, 0xD1, 0x56,
+	0x48, 0xC0, 0x79, 0xC0, 0x06, 0x04, 0xD5, 0x03, 0x20, 0x60, 0x72, 0x1A, 0xE0, 0x00, 0x28, 0x00,
+	0xD0, 0xA5, 0x71, 0x02, 0xA8, 0xFE, 0xF7, 0x25, 0xFA, 0x03, 0xF0, 0x51, 0xFD, 0x60, 0x79, 0x00,
+	0x28, 0x07, 0xD1, 0x4E, 0x48, 0x00, 0x78, 0x01, 0x28, 0x03, 0xD0, 0x20, 0x7B, 0xA1, 0x79, 0x88,
+	0x42, 0x03, 0xD0, 0xA0, 0x79, 0x20, 0x73, 0x0C, 0x26, 0x00, 0xE0, 0x08, 0x26, 0x38, 0x78, 0xE0,
+	0x72, 0x65, 0x72, 0x30, 0x46, 0x78, 0xE6, 0xF8, 0xB5, 0x39, 0x4D, 0x00, 0x21, 0xAA, 0x7D, 0x3C,
+	0x4E, 0x0C, 0x46, 0x01, 0x2A, 0x08, 0xD0, 0x2A, 0x6C, 0x33, 0x6A, 0x82, 0x1A, 0x9A, 0x42, 0x63,
+	0xD9, 0x3F, 0x4A, 0x12, 0x78, 
+	0x00, 0x01, 0x29, 0x00, 0x80, 0x00, 0x2A, 0x5F, 0xD1, 0x28, 0x64, 0x00, 0x20, 0xA8, 0x75, 0x3D,
+	0x4B, 0x0A, 0xE0, 0x3D, 0x4A, 0x47, 0x00, 0xD2, 0x5F, 0xB7, 0x6A, 0xBA, 0x42, 0x02, 0xDC, 0xF7,
+	0x6A, 0xBA, 0x42, 0x00, 0xDA, 0x49, 0x1C, 0x40, 0x1C, 0x9A, 0x6A, 0x82, 0x42, 0xF1, 0xD8, 0x00,
+	0x20, 0x0A, 0xE0, 0x36, 0x4A, 0x47, 0x00, 0xD2, 0x5F, 0x77, 0x6B, 0xBA, 0x42, 0x02, 0xDC, 0xB7,
+	0x6B, 0xBA, 0x42, 0x00, 0xDA, 0x64, 0x1C, 0x40, 0x1C, 0x5A, 0x6A, 0x82, 0x42, 0xF1, 0xD8, 0x24,
+	0x48, 0x40, 0x6A, 0x1F, 0x4E, 0x27, 0x36, 0x88, 0x42, 0x7D, 0xD2, 0xF9, 0xF7, 0x77, 0xF9, 0x20,
+	0x49, 0xC8, 0x6B, 0x01, 0x28, 0x62, 0xD1, 0x08, 0x46, 0x40, 0x30, 0x40, 0x8B, 0x2A, 0x7A, 0x90,
+	0x43, 0xC0, 0x07, 0x5B, 0xD1, 0x08, 0x6C, 0x00, 0x28, 0x58, 0xD0, 0x03, 0x20, 0xF8, 0xF7, 0x2B,
+	0xF8, 0xF9, 0xF7, 0x95, 0xFE, 
+	0x00, 0x01, 0x2A, 0x00, 0x80, 0x00, 0x27, 0x79, 0x1E, 0x03, 0x20, 0xF8, 0xF7, 0x14, 0xF8, 0xF9,
+	0xF7, 0xB5, 0xFE, 0xFF, 0xF7, 0xFB, 0xF8, 0x0E, 0x49, 0x24, 0x31, 0xC8, 0x55, 0xFF, 0xF7, 0x25,
+	0xF9, 0xF0, 0x55, 0xFF, 0xF7, 0x3F, 0xF9, 0x0A, 0x49, 0x2A, 0x31, 0xC8, 0x55, 0x7F, 0x1C, 0x03,
+	0x2F, 0xE9, 0xD3, 0x28, 0x8C, 0x40, 0x06, 0x2B, 0xD5, 0x29, 0x7E, 0x03, 0x20, 0x49, 0x1E, 0xF7,
+	0xF7, 0xFA, 0xFF, 0xF9, 0xF7, 0x9B, 0xFE, 0x40, 0xE0, 0x97, 0xE0, 0x00, 0x00, 0xEE, 0x00, 0x00,
+	0x20, 0xD8, 0x01, 0x00, 0x20, 0x28, 0x01, 0x00, 0x20, 0x10, 0xE8, 0x00, 0x00, 0x2B, 0x01, 0x00,
+	0x20, 0x80, 0xE6, 0x00, 0x00, 0x2D, 0x01, 0x00, 0x20, 0x2C, 0x01, 0x00, 0x20, 0x00, 0x01, 0x00,
+	0x20, 0x60, 0x14, 0x00, 0x20, 0x00, 0x01, 0x00, 0x00, 0x88, 0x03, 0x00, 0x20, 0xC2, 0x01, 0x00,
+	0x20, 0xEF, 0x00, 0x00, 0x20, 
+	0x00, 0x01, 0x2B, 0x00, 0x80, 0xF0, 0xE9, 0x00, 0x00, 0x2C, 0x05, 0x00, 0x20, 0xCC, 0x07, 0x00,
+	0x20, 0x00, 0x20, 0xF9, 0xF7, 0x73, 0xFE, 0x28, 0x8C, 0x80, 0x06, 0x03, 0xD5, 0x02, 0x20, 0xF7,
+	0xF7, 0xDA, 0xFF, 0x00, 0xE0, 0x00, 0x20, 0xF9, 0xF7, 0x42, 0xFE, 0x0E, 0xE0, 0xFF, 0xF7, 0xAE,
+	0xF8, 0xFF, 0x49, 0x2A, 0x7E, 0x88, 0x54, 0xFF, 0xF7, 0xD8, 0xF8, 0x29, 0x7E, 0x70, 0x54, 0xFF,
+	0xF7, 0xF1, 0xF8, 0xFB, 0x49, 0x2A, 0x7E, 0x89, 0x1D, 0x88, 0x54, 0xF9, 0x48, 0x29, 0x7E, 0x40,
+	0x5C, 0xF8, 0x49, 0x08, 0x70, 0x00, 0xE0, 0x01, 0xE0, 0xFC, 0xF7, 0xAC, 0xF8, 0xF6, 0x48, 0x01,
+	0x6B, 0xA1, 0x42, 0x4A, 0xD2, 0xC1, 0x6B, 0x00, 0x29, 0x32, 0xD0, 0x00, 0x6C, 0x00, 0x28, 0x2F,
+	0xD0, 0x03, 0x20, 0xF7, 0xF7, 0xB0, 0xFF, 0xF9, 0xF7, 0x1A, 0xFE, 0xED, 0x4F, 0x00, 0x24, 0xBF,
+	0x1D, 0x61, 0x1E, 0x03, 0x20, 
+	0x00, 0x01, 0x2C, 0x00, 0x80, 0xF7, 0xF7, 0x97, 0xFF, 0xF9, 0xF7, 0x38, 0xFE, 0xFF, 0xF7, 0xAD,
+	0xF8, 0x30, 0x55, 0xFF, 0xF7, 0xC7, 0xF8, 0x38, 0x55, 0x64, 0x1C, 0x03, 0x2C, 0xF0, 0xD3, 0x28,
+	0x8C, 0x40, 0x06, 0x07, 0xD5, 0x29, 0x7E, 0x03, 0x20, 0x49, 0x1E, 0xF7, 0xF7, 0x84, 0xFF, 0xF9,
+	0xF7, 0x25, 0xFE, 0x17, 0xE0, 0x00, 0x20, 0xF9, 0xF7, 0x21, 0xFE, 0x28, 0x8C, 0x80, 0x06, 0x03,
+	0xD5, 0x02, 0x20, 0xF7, 0xF7, 0x88, 0xFF, 0x00, 0xE0, 0x00, 0x20, 0xF9, 0xF7, 0xF0, 0xFD, 0x09,
+	0xE0, 0xFF, 0xF7, 0x8B, 0xF8, 0x29, 0x7E, 0x70, 0x54, 0xFF, 0xF7, 0xA4, 0xF8, 0xD4, 0x49, 0x2A,
+	0x7E, 0x89, 0x1D, 0x88, 0x54, 0x28, 0x7E, 0xD5, 0x4A, 0x31, 0x5C, 0x11, 0x70, 0xD0, 0x49, 0x89,
+	0x1D, 0x08, 0x5C, 0xD3, 0x49, 0x08, 0x70, 0xFC, 0xF7, 0x2E, 0xF8, 0xF8, 0xBD, 0xF3, 0xB5, 0x83,
+	0xB0, 0x0D, 0x46, 0x01, 0x24, 
+	0x00, 0x01, 0x2D, 0x00, 0x80, 0xF9, 0xF7, 0x38, 0xFC, 0x01, 0x28, 0x7D, 0xD1, 0xF9, 0xF7, 0x19,
+	0xF8, 0xC9, 0x48, 0xC0, 0x6B, 0xC6, 0x4C, 0x24, 0x3C, 0x01, 0x28, 0x13, 0xD1, 0xC6, 0x48, 0x40,
+	0x30, 0x40, 0x8B, 0x21, 0x7A, 0x88, 0x43, 0xC0, 0x07, 0x0C, 0xD1, 0xFF, 0xF7, 0xEC, 0xFD, 0x01,
+	0x28, 0x08, 0xD1, 0x00, 0x2D, 0x02, 0xD0, 0xC3, 0x48, 0xF9, 0xF7, 0x29, 0xFD, 0x15, 0x20, 0x60,
+	0x72, 0xC0, 0x07, 0x49, 0xE5, 0x20, 0x8C, 0x60, 0x84, 0x00, 0x2D, 0x03, 0xD0, 0x03, 0x20, 0xE1,
+	0x6C, 0xFB, 0xF7, 0x77, 0xFD, 0x20, 0x6D, 0xFB, 0xF7, 0xC4, 0xFF, 0xE0, 0x79, 0x01, 0x27, 0xC1,
+	0x08, 0x00, 0x29, 0x04, 0xD1, 0x00, 0x20, 0xFB, 0xF7, 0x70, 0xFB, 0x00, 0x20, 0x14, 0xE0, 0x01,
+	0x07, 0x0D, 0xD5, 0xB5, 0x49, 0x09, 0x78, 0x01, 0x29, 0x09, 0xD1, 0xE1, 0x7D, 0x00, 0x29, 0x06,
+	0xD1, 0xB2, 0x48, 0x07, 0x70, 
+	0x00, 0x01, 0x2E, 0x00, 0x80, 0x03, 0x20, 0xFB, 0xF7, 0x60, 0xFB, 0x04, 0x20, 0x04, 0xE0, 0xC0,
+	0x09, 0xE8, 0xD1, 0xFB, 0xF7, 0x5A, 0xFB, 0x0F, 0x20, 0xF9, 0xF7, 0x24, 0xFE, 0x00, 0x2D, 0x01,
+	0xD0, 0xFC, 0xF7, 0x1D, 0xF8, 0xFC, 0xF7, 0x22, 0xF9, 0x15, 0x22, 0x52, 0x01, 0x01, 0xA8, 0x21,
+	0x6D, 0xF7, 0xF7, 0x56, 0xFE, 0x60, 0x21, 0x01, 0xA8, 0xF7, 0xF7, 0x5A, 0xFE, 0x05, 0x46, 0x01,
+	0x46, 0x01, 0xA8, 0xFA, 0xF7, 0xC2, 0xF9, 0x28, 0x46, 0xFB, 0xF7, 0x9D, 0xFA, 0x29, 0x46, 0x01,
+	0xA8, 0xFA, 0xF7, 0x40, 0xFA, 0x02, 0x46, 0x29, 0x46, 0x01, 0xA8, 0xFA, 0xF7, 0xBD, 0xFF, 0x01,
+	0xA8, 0xF7, 0xF7, 0x53, 0xFE, 0xFF, 0xF7, 0x0B, 0xFD, 0x99, 0x4D, 0x00, 0x26, 0x28, 0x78, 0x00,
+	0x28, 0x00, 0xD0, 0xA6, 0x71, 0x97, 0x48, 0x00, 0x78, 0x00, 0x28, 0x03, 0xD0, 0xA0, 0x79, 0x80,
+	0x21, 0x08, 0x43, 0xA0, 0x71, 
+	0x00, 0x01, 0x2F, 0x00, 0x80, 0x01, 0xA8, 0x00, 0xE0, 0x2F, 0xE0, 0xFE, 0xF7, 0x7A, 0xF8, 0x03,
+	0xF0, 0xA6, 0xFB, 0x61, 0x79, 0x20, 0x46, 0x00, 0x29, 0x07, 0xD1, 0x8F, 0x49, 0x09, 0x78, 0x01,
+	0x29, 0x03, 0xD0, 0x01, 0x7B, 0x82, 0x79, 0x91, 0x42, 0x12, 0xD0, 0x81, 0x79, 0x01, 0x73, 0x29,
+	0x78, 0x00, 0x29, 0x02, 0xD1, 0x46, 0x72, 0x0C, 0x24, 0x0C, 0xE0, 0x88, 0x49, 0x49, 0x7E, 0x01,
+	0x29, 0x01, 0xD1, 0x0E, 0x21, 0x00, 0xE0, 0x09, 0x21, 0x41, 0x72, 0x00, 0x24, 0x47, 0x74, 0x01,
+	0xE0, 0x08, 0x24, 0x46, 0x72, 0x29, 0x78, 0xC1, 0x72, 0x77, 0x49, 0xC9, 0x69, 0x01, 0x29, 0x04,
+	0xD1, 0x7F, 0x49, 0x01, 0x65, 0x03, 0x98, 0xFF, 0xF7, 0x3E, 0xFE, 0x20, 0x46, 0xB4, 0xE4, 0x00,
+	0x21, 0x44, 0xE7, 0x10, 0xB5, 0x6E, 0x4C, 0x01, 0x20, 0x24, 0x3C, 0x60, 0x75, 0xF8, 0xF7, 0xE6,
+	0xFF, 0xA0, 0x6C, 0xF9, 0xF7, 
+	0x00, 0x01, 0x30, 0x00, 0x80, 0x8A, 0xFC, 0xF9, 0xF7, 0x27, 0xFA, 0x10, 0xBD, 0x70, 0xB5, 0x05,
+	0x46, 0x73, 0x48, 0x67, 0x4C, 0xC0, 0x38, 0x24, 0x3C, 0x60, 0x64, 0xE0, 0x64, 0xC0, 0x30, 0xA0,
+	0x64, 0x20, 0x65, 0x70, 0x48, 0xF9, 0xF7, 0x73, 0xFC, 0xF9, 0xF7, 0x8E, 0xF8, 0x60, 0x6C, 0xF9,
+	0xF7, 0x79, 0xFC, 0x03, 0x20, 0xF9, 0xF7, 0x13, 0xFB, 0x22, 0x20, 0xA5, 0x63, 0x60, 0x72, 0x01,
+	0x20, 0x70, 0xBD, 0x01, 0x21, 0x1A, 0xE7, 0x00, 0x20, 0x70, 0x47, 0x70, 0xB5, 0x05, 0x46, 0x5A,
+	0x48, 0x80, 0x69, 0x57, 0x4C, 0x24, 0x3C, 0x01, 0x28, 0x05, 0xD1, 0x61, 0x48, 0xC0, 0x38, 0x60,
+	0x64, 0xE0, 0x64, 0xF9, 0xF7, 0x5F, 0xFC, 0x5E, 0x48, 0xA0, 0x64, 0x5F, 0x48, 0x20, 0x65, 0xF8,
+	0xF7, 0xAD, 0xFF, 0xA0, 0x6C, 0xF9, 0xF7, 0x51, 0xFC, 0xF9, 0xF7, 0xEE, 0xF9, 0x0A, 0x20, 0xE5,
+	0x63, 0x60, 0x72, 0x61, 0x7C, 
+	0x00, 0x01, 0x31, 0x00, 0x80, 0x05, 0x20, 0x00, 0x29, 0x00, 0xD1, 0x01, 0x20, 0x70, 0xBD, 0x10,
+	0xB5, 0xF9, 0xF7, 0x32, 0xFB, 0x01, 0x28, 0x1A, 0xD1, 0xF8, 0xF7, 0x13, 0xFF, 0x46, 0x48, 0xC0,
+	0x6B, 0x43, 0x4C, 0x24, 0x3C, 0x01, 0x28, 0x0E, 0xD1, 0x43, 0x48, 0x40, 0x30, 0x40, 0x8B, 0x21,
+	0x7A, 0x88, 0x43, 0xC0, 0x07, 0x07, 0xD1, 0xFF, 0xF7, 0xE6, 0xFC, 0x01, 0x28, 0x03, 0xD1, 0x15,
+	0x20, 0x60, 0x72, 0xC0, 0x07, 0x10, 0xBD, 0x0B, 0x20, 0x60, 0x72, 0x00, 0x20, 0x10, 0xBD, 0x01,
+	0x20, 0x10, 0xBD, 0x70, 0xB5, 0x36, 0x4D, 0x04, 0x46, 0x24, 0x3D, 0xA9, 0x6C, 0x28, 0x6D, 0x29,
+	0x65, 0xA8, 0x64, 0xF9, 0xF7, 0x1A, 0xFC, 0x34, 0x4E, 0xB0, 0x69, 0x01, 0x28, 0x11, 0xD1, 0xA8,
+	0x6B, 0x71, 0x68, 0x20, 0x1A, 0x88, 0x42, 0x0C, 0xD9, 0x3A, 0x48, 0xF9, 0xF7, 0x08, 0xFC, 0x00,
+	0x20, 0x68, 0x75, 0xF9, 0xF7, 
+	0x00, 0x01, 0x32, 0x00, 0x80, 0x21, 0xF8, 0x70, 0x69, 0xF9, 0xF7, 0xA9, 0xFA, 0x23, 0x20, 0xAC,
+	0x63, 0x05, 0xE0, 0xF8, 0xF7, 0x5B, 0xFF, 0xF9, 0xF7, 0x9F, 0xF9, 0x0C, 0x20, 0xEC, 0x63, 0x68,
+	0x72, 0x01, 0x20, 0xC0, 0x07, 0x70, 0xBD, 0xF1, 0xB5, 0x21, 0x4D, 0x82, 0xB0, 0x24, 0x3D, 0x00,
+	0x24, 0x28, 0x6D, 0xFB, 0xF7, 0x96, 0xFE, 0xE8, 0x79, 0x01, 0x26, 0xC1, 0x08, 0x00, 0x29, 0x04,
+	0xD1, 0x00, 0x20, 0xFB, 0xF7, 0x42, 0xFA, 0x00, 0x20, 0x14, 0xE0, 0x01, 0x07, 0x0D, 0xD5, 0x1E,
+	0x49, 0x09, 0x78, 0x01, 0x29, 0x09, 0xD1, 0xE9, 0x7D, 0x00, 0x29, 0x06, 0xD1, 0x1B, 0x48, 0x06,
+	0x70, 0x03, 0x20, 0xFB, 0xF7, 0x32, 0xFA, 0x04, 0x20, 0x04, 0xE0, 0xC0, 0x09, 0xE8, 0xD1, 0xFB,
+	0xF7, 0x2C, 0xFA, 0x0F, 0x20, 0xF9, 0xF7, 0xF6, 0xFC, 0xFB, 0xF7, 0xF8, 0xFF, 0x15, 0x22, 0x52,
+	0x01, 0x68, 0x46, 0x29, 0x6D, 
+	0x00, 0x01, 0x33, 0x00, 0x80, 0xF7, 0xF7, 0x2C, 0xFD, 0x60, 0x21, 0x68, 0x46, 0xF7, 0xF7, 0x30,
+	0xFD, 0x07, 0x46, 0x01, 0x46, 0x68, 0x46, 0xFA, 0xF7, 0x98, 0xF8, 0x38, 0x46, 0xFB, 0xF7, 0x73,
+	0xF9, 0x39, 0x46, 0x68, 0x46, 0xFA, 0xF7, 0x16, 0xF9, 0x02, 0x46, 0x39, 0x46, 0x68, 0x46, 0x1D,
+	0xE0, 0xFC, 0x01, 0x00, 0x20, 0xC8, 0x01, 0x00, 0x20, 0x80, 0xE6, 0x00, 0x00, 0xC9, 0x01, 0x00,
+	0x20, 0xCA, 0x01, 0x00, 0x20, 0xB7, 0x8C, 0x00, 0x00, 0x28, 0x01, 0x00, 0x20, 0x2B, 0x01, 0x00,
+	0x20, 0xEE, 0x00, 0x00, 0x20, 0xEF, 0x00, 0x00, 0x20, 0xC2, 0x01, 0x00, 0x20, 0x80, 0xE8, 0x00,
+	0x00, 0x60, 0x14, 0x00, 0x20, 0xEF, 0x97, 0x00, 0x00, 0x00, 0x17, 0x00, 0x20, 0xFA, 0xF7, 0x74,
+	0xFE, 0x68, 0x46, 0xF7, 0xF7, 0x0A, 0xFD, 0xFF, 0xF7, 0xC2, 0xFB, 0xFC, 0x4F, 0x38, 0x78, 0x00,
+	0x28, 0x01, 0xD0, 0x00, 0x20, 
+	0x00, 0x01, 0x34, 0x00, 0x80, 0xA8, 0x71, 0xFA, 0x48, 0x00, 0x78, 0x00, 0x28, 0x03, 0xD0, 0xA8,
+	0x79, 0x80, 0x21, 0x08, 0x43, 0xA8, 0x71, 0x68, 0x46, 0xFD, 0xF7, 0x33, 0xFF, 0x03, 0xF0, 0x5F,
+	0xFA, 0x68, 0x79, 0x00, 0x28, 0x07, 0xD1, 0xF3, 0x48, 0x00, 0x78, 0x01, 0x28, 0x03, 0xD0, 0x28,
+	0x7B, 0xA9, 0x79, 0x88, 0x42, 0x02, 0xD0, 0xA8, 0x79, 0x28, 0x73, 0x04, 0x24, 0xEE, 0x48, 0x80,
+	0x69, 0x01, 0x28, 0x26, 0xD1, 0x38, 0x78, 0x00, 0x28, 0x01, 0xD1, 0x00, 0x20, 0x00, 0xE0, 0x0B,
+	0x20, 0x68, 0x72, 0x38, 0x78, 0xE8, 0x72, 0x28, 0x8C, 0x68, 0x84, 0xF9, 0xF7, 0x4D, 0xFA, 0x01,
+	0x28, 0x2A, 0xD1, 0xF8, 0xF7, 0x2E, 0xFE, 0xE4, 0x4F, 0xF8, 0x6B, 0x01, 0x28, 0x1A, 0xD1, 0x38,
+	0x46, 0x40, 0x30, 0x40, 0x8B, 0x29, 0x7A, 0x88, 0x43, 0xC0, 0x07, 0x13, 0xD1, 0xFF, 0xF7, 0x03,
+	0xFC, 0x01, 0x28, 0x0F, 0xD1, 
+	0x00, 0x01, 0x35, 0x00, 0x80, 0x04, 0x2C, 0x00, 0xD1, 0x6E, 0x74, 0x15, 0x20, 0x68, 0x72, 0xC4,
+	0x07, 0x1A, 0xE0, 0x01, 0xF0, 0x55, 0xFD, 0x03, 0x28, 0xD7, 0xD0, 0x01, 0xF0, 0x51, 0xFD, 0x04,
+	0x28, 0xD5, 0xD1, 0xD2, 0xE7, 0x02, 0x98, 0xFF, 0xF7, 0x41, 0xFA, 0xF8, 0x69, 0x01, 0x28, 0x0B,
+	0xD1, 0x02, 0x98, 0xFF, 0xF7, 0xD8, 0xFC, 0x07, 0xE0, 0x68, 0x7A, 0x34, 0x43, 0x00, 0x28, 0x00,
+	0xD0, 0x00, 0x26, 0xAE, 0x74, 0x0D, 0x20, 0x68, 0x72, 0x20, 0x46, 0xFE, 0xBD, 0x70, 0xB5, 0x06,
+	0x46, 0xF9, 0xF7, 0x12, 0xFA, 0x01, 0x28, 0x29, 0xD1, 0xF8, 0xF7, 0xF3, 0xFD, 0xC6, 0x4D, 0xE8,
+	0x6B, 0xC6, 0x4C, 0x01, 0x28, 0x0E, 0xD1, 0x28, 0x46, 0x40, 0x30, 0x40, 0x8B, 0x21, 0x7A, 0x88,
+	0x43, 0xC0, 0x07, 0x07, 0xD1, 0xFF, 0xF7, 0xC7, 0xFB, 0x01, 0x28, 0x03, 0xD1, 0x15, 0x20, 0x60,
+	0x72, 0xC0, 0x07, 0x70, 0xBD, 
+	0x00, 0x01, 0x36, 0x00, 0x80, 0x30, 0x46, 0xFF, 0xF7, 0x11, 0xFA, 0xE8, 0x69, 0x01, 0x28, 0x02,
+	0xD1, 0x30, 0x46, 0xFF, 0xF7, 0xA8, 0xFC, 0xA0, 0x7C, 0x01, 0x28, 0x03, 0xD1, 0x00, 0x20, 0x60,
+	0x72, 0x08, 0x20, 0x70, 0xBD, 0x0B, 0x20, 0x60, 0x72, 0x00, 0x20, 0x70, 0xBD, 0x01, 0x20, 0x70,
+	0xBD, 0x70, 0xB5, 0x05, 0x46, 0xB1, 0x4C, 0xB2, 0x48, 0x60, 0x64, 0x60, 0x30, 0xE0, 0x64, 0x60,
+	0x30, 0xA0, 0x64, 0xB0, 0x48, 0x20, 0x65, 0xB0, 0x48, 0xF9, 0xF7, 0xE1, 0xFA, 0xF8, 0xF7, 0xFC,
+	0xFE, 0x60, 0x6C, 0xF9, 0xF7, 0xE7, 0xFA, 0x03, 0x20, 0xF9, 0xF7, 0x81, 0xF9, 0x04, 0x20, 0x20,
+	0x75, 0x0F, 0x20, 0xA5, 0x63, 0x60, 0x72, 0x61, 0x7C, 0x05, 0x20, 0x00, 0x29, 0x00, 0xD1, 0x01,
+	0x20, 0x70, 0xBD, 0x10, 0xB5, 0xF9, 0xF7, 0xC0, 0xF9, 0x01, 0x28, 0x1C, 0xD1, 0xF8, 0xF7, 0xA1,
+	0xFD, 0x9D, 0x48, 0xC0, 0x6B, 
+	0x00, 0x01, 0x37, 0x00, 0x80, 0x9D, 0x4C, 0x01, 0x28, 0x11, 0xD1, 0x9B, 0x48, 0x40, 0x30, 0x40,
+	0x8B, 0x21, 0x7A, 0x88, 0x43, 0xC0, 0x07, 0x0A, 0xD1, 0xFF, 0xF7, 0x75, 0xFB, 0x01, 0x28, 0x06,
+	0xD1, 0x9A, 0x48, 0xF9, 0xF7, 0xB4, 0xFA, 0x15, 0x20, 0x60, 0x72, 0xC0, 0x07, 0x10, 0xBD, 0x10,
+	0x20, 0x60, 0x72, 0x00, 0x20, 0x10, 0xBD, 0x01, 0x20, 0x10, 0xBD, 0x70, 0xB5, 0x8F, 0x4C, 0x05,
+	0x46, 0x61, 0x6C, 0xE0, 0x6C, 0xE1, 0x64, 0x60, 0x64, 0xA1, 0x6C, 0x20, 0x6D, 0x21, 0x65, 0xA0,
+	0x64, 0xF8, 0xF7, 0xBA, 0xFE, 0x60, 0x6C, 0xF9, 0xF7, 0xA5, 0xFA, 0x03, 0x20, 0xF9, 0xF7, 0x3F,
+	0xF9, 0x04, 0x20, 0x20, 0x75, 0x11, 0x20, 0xA5, 0x63, 0x60, 0x72, 0xC0, 0x07, 0x70, 0xBD, 0xF1,
+	0xB5, 0x82, 0x4D, 0x00, 0x24, 0x28, 0x7D, 0x29, 0x46, 0xC9, 0x6C, 0x82, 0xB0, 0x04, 0x28, 0x01,
+	0xD1, 0x03, 0x20, 0x04, 0xE0, 
+	0x00, 0x01, 0x38, 0x00, 0x80, 0xC0, 0x07, 0x01, 0xD0, 0x01, 0x20, 0x00, 0xE0, 0x02, 0x20, 0xFB,
+	0xF7, 0xD8, 0xFA, 0x28, 0x6D, 0xFB, 0xF7, 0x25, 0xFD, 0xE8, 0x79, 0xC1, 0x08, 0x04, 0xD1, 0x00,
+	0x20, 0xFB, 0xF7, 0xD3, 0xF8, 0x00, 0x20, 0x15, 0xE0, 0x01, 0x07, 0x0E, 0xD5, 0x78, 0x49, 0x09,
+	0x78, 0x01, 0x29, 0x0A, 0xD1, 0xE9, 0x7D, 0x00, 0x29, 0x07, 0xD1, 0x76, 0x48, 0x01, 0x21, 0x01,
+	0x70, 0x03, 0x20, 0xFB, 0xF7, 0xC2, 0xF8, 0x04, 0x20, 0x04, 0xE0, 0xC0, 0x09, 0xE7, 0xD1, 0xFB,
+	0xF7, 0xBC, 0xF8, 0x0F, 0x20, 0xF9, 0xF7, 0x86, 0xFB, 0xFB, 0xF7, 0x81, 0xFD, 0xFB, 0xF7, 0x86,
+	0xFE, 0x15, 0x22, 0x52, 0x01, 0x68, 0x46, 0x29, 0x6D, 0xF7, 0xF7, 0xBA, 0xFB, 0x60, 0x21, 0x68,
+	0x46, 0xF7, 0xF7, 0xBE, 0xFB, 0x06, 0x46, 0x01, 0x46, 0x68, 0x46, 0xF9, 0xF7, 0x26, 0xFF, 0x30,
+	0x46, 0xFB, 0xF7, 0x01, 0xF8, 
+	0x00, 0x01, 0x39, 0x00, 0x80, 0x31, 0x46, 0x68, 0x46, 0xF9, 0xF7, 0xA4, 0xFF, 0x02, 0x46, 0x31,
+	0x46, 0x68, 0x46, 0xFA, 0xF7, 0x21, 0xFD, 0x68, 0x46, 0xF7, 0xF7, 0xB7, 0xFB, 0xFF, 0xF7, 0x6F,
+	0xFA, 0x52, 0x4E, 0x00, 0x27, 0x30, 0x78, 0x00, 0x28, 0x00, 0xD0, 0xAF, 0x71, 0x50, 0x48, 0x00,
+	0x78, 0x00, 0x28, 0x03, 0xD0, 0xA8, 0x79, 0x80, 0x21, 0x08, 0x43, 0xA8, 0x71, 0x68, 0x46, 0xFD,
+	0xF7, 0xE0, 0xFD, 0x03, 0xF0, 0x0C, 0xF9, 0x68, 0x79, 0x00, 0x28, 0x07, 0xD1, 0x49, 0x48, 0x00,
+	0x78, 0x01, 0x28, 0x03, 0xD0, 0x28, 0x7B, 0xA9, 0x79, 0x88, 0x42, 0x02, 0xD0, 0xA8, 0x79, 0x28,
+	0x73, 0x04, 0x24, 0x45, 0x48, 0x80, 0x69, 0x01, 0x28, 0x03, 0xD1, 0x30, 0x78, 0x00, 0x28, 0x0A,
+	0xD1, 0x07, 0xE0, 0x01, 0xF0, 0x25, 0xFC, 0x03, 0x28, 0x03, 0xD0, 0x01, 0xF0, 0x21, 0xFC, 0x04,
+	0x28, 0x01, 0xD1, 0x6F, 0x72, 
+	0x00, 0x01, 0x3A, 0x00, 0x80, 0x01, 0xE0, 0x10, 0x20, 0x68, 0x72, 0x30, 0x78, 0xE8, 0x72, 0x28,
+	0x8C, 0x68, 0x84, 0xF9, 0xF7, 0xF1, 0xF8, 0x01, 0x28, 0x2B, 0xD1, 0xF8, 0xF7, 0xD2, 0xFC, 0x36,
+	0x4E, 0xF0, 0x6B, 0x01, 0x28, 0x15, 0xD1, 0x30, 0x46, 0x40, 0x30, 0x40, 0x8B, 0x29, 0x7A, 0x88,
+	0x43, 0xC0, 0x07, 0x0E, 0xD1, 0xFF, 0xF7, 0xA7, 0xFA, 0x01, 0x28, 0x0A, 0xD1, 0x33, 0x48, 0xF9,
+	0xF7, 0xE6, 0xF9, 0x04, 0x2C, 0x01, 0xD1, 0x01, 0x20, 0x68, 0x74, 0x15, 0x20, 0x68, 0x72, 0xC4,
+	0x07, 0x18, 0xE0, 0x02, 0x98, 0xFF, 0xF7, 0xEA, 0xF8, 0x68, 0x7A, 0x00, 0x28, 0x02, 0xD1, 0x2B,
+	0x48, 0xF9, 0xF7, 0xD5, 0xF9, 0xF0, 0x69, 0x01, 0x28, 0x0C, 0xD1, 0x02, 0x98, 0xFF, 0xF7, 0x7B,
+	0xFB, 0x08, 0xE0, 0x01, 0x20, 0x69, 0x7A, 0x04, 0x43, 0x00, 0x29, 0x00, 0xD0, 0x00, 0x20, 0xA8,
+	0x74, 0x12, 0x20, 0x68, 0x72, 
+	0x00, 0x01, 0x3B, 0x00, 0x80, 0x20, 0x46, 0xFE, 0xBD, 0x70, 0xB5, 0x06, 0x46, 0xF9, 0xF7, 0xB4,
+	0xF8, 0x01, 0x28, 0x45, 0xD1, 0xF8, 0xF7, 0x95, 0xFC, 0x17, 0x4D, 0xE8, 0x6B, 0x17, 0x4C, 0x01,
+	0x28, 0x11, 0xD1, 0x28, 0x46, 0x40, 0x30, 0x40, 0x8B, 0x21, 0x7A, 0x88, 0x43, 0xC0, 0x07, 0x0A,
+	0xD1, 0xFF, 0xF7, 0x69, 0xFA, 0x01, 0x28, 0x06, 0xD1, 0x14, 0x48, 0xF9, 0xF7, 0xA8, 0xF9, 0x15,
+	0x20, 0x60, 0x72, 0xC0, 0x07, 0x70, 0xBD, 0x30, 0x46, 0xFF, 0xF7, 0xB0, 0xF8, 0xE8, 0x69, 0x01,
+	0x28, 0x02, 0xD1, 0x30, 0x46, 0xFF, 0xF7, 0x47, 0xFB, 0xA0, 0x7C, 0x01, 0x28, 0x1C, 0xD1, 0x00,
+	0x20, 0x60, 0x72, 0x08, 0x24, 0x09, 0x48, 0xF9, 0xF7, 0x92, 0xF9, 0x1A, 0xE0, 0xEE, 0x00, 0x00,
+	0x20, 0xEF, 0x00, 0x00, 0x20, 0xC2, 0x01, 0x00, 0x20, 0x80, 0xE6, 0x00, 0x00, 0xD8, 0x01, 0x00,
+	0x20, 0xA0, 0x13, 0x00, 0x20, 
+	0x00, 0x01, 0x3C, 0x00, 0x80, 0x00, 0x17, 0x00, 0x20, 0xEF, 0x97, 0x00, 0x00, 0xB7, 0x8C, 0x00,
+	0x00, 0x28, 0x01, 0x00, 0x20, 0x2B, 0x01, 0x00, 0x20, 0x10, 0x20, 0x60, 0x72, 0x00, 0x24, 0x00,
+	0xE0, 0x01, 0x24, 0x20, 0x46, 0x70, 0xBD, 0x10, 0xB5, 0xF8, 0xF7, 0x10, 0xFE, 0xCE, 0x48, 0x40,
+	0x6C, 0xC0, 0xB2, 0xF9, 0xF7, 0x1D, 0xF8, 0xCD, 0x48, 0x14, 0x21, 0x41, 0x72, 0x41, 0x7C, 0x01,
+	0x29, 0x03, 0xD1, 0x00, 0x21, 0x41, 0x74, 0x05, 0x20, 0x10, 0xBD, 0x01, 0x20, 0x10, 0xBD, 0xF8,
+	0xB5, 0xF9, 0xF7, 0x52, 0xF8, 0x01, 0x28, 0x3E, 0xD1, 0xF8, 0xF7, 0x33, 0xFC, 0xF9, 0xF7, 0xDE,
+	0xF9, 0xC2, 0x4C, 0x00, 0x90, 0x20, 0x8C, 0x15, 0x27, 0x80, 0x06, 0xFE, 0x07, 0x00, 0x28, 0x0F,
+	0xDA, 0xF9, 0xF7, 0xD8, 0xF9, 0xBC, 0x49, 0x00, 0x25, 0x00, 0x28, 0x03, 0xD1, 0xCA, 0x6C, 0x00,
+	0x98, 0x82, 0x42, 0x19, 0xD2, 
+	0x00, 0x01, 0x3D, 0x00, 0x80, 0x08, 0x6C, 0x01, 0x28, 0x13, 0xD1, 0xA0, 0x7E, 0x02, 0x28, 0x02,
+	0xD2, 0x67, 0x72, 0x30, 0x46, 0xF8, 0xBD, 0x89, 0x6C, 0xE0, 0x7E, 0x81, 0x42, 0x03, 0xD9, 0xA5,
+	0x76, 0x40, 0x1C, 0xE0, 0x76, 0xF4, 0xE7, 0x20, 0x8C, 0xFF, 0x21, 0x01, 0x31, 0x08, 0x43, 0x20,
+	0x84, 0x0E, 0xE0, 0x20, 0x8C, 0x80, 0x21, 0xF9, 0xE7, 0xF9, 0xF7, 0xB0, 0xF9, 0xE1, 0x7C, 0x01,
+	0x29, 0x06, 0xD1, 0x00, 0x28, 0x04, 0xD1, 0xE5, 0x74, 0xFB, 0xF7, 0x05, 0xFC, 0xFB, 0xF7, 0x32,
+	0xFC, 0x65, 0x72, 0x08, 0x20, 0xF8, 0xBD, 0x01, 0x20, 0xF8, 0xBD, 0x70, 0xB5, 0xA3, 0x4C, 0x00,
+	0x25, 0x20, 0x8C, 0xC1, 0x05, 0x00, 0x29, 0x02, 0xDA, 0x65, 0x72, 0x08, 0x20, 0x70, 0xBD, 0xC0,
+	0x06, 0x0E, 0xD4, 0x02, 0x20, 0xFA, 0xF7, 0x41, 0xFF, 0x02, 0x20, 0xFA, 0xF7, 0x66, 0xFF, 0x02,
+	0x20, 0xF9, 0xF7, 0x30, 0xFA, 
+	0x00, 0x01, 0x3E, 0x00, 0x80, 0x01, 0x20, 0x02, 0xF0, 0xDF, 0xFF, 0x20, 0x8C, 0x10, 0x21, 0x3E,
+	0xE0, 0x20, 0x7F, 0x00, 0x28, 0x12, 0xD1, 0x02, 0x20, 0xF7, 0xF7, 0x1D, 0xFB, 0xF9, 0xF7, 0x87,
+	0xF9, 0x91, 0x48, 0x80, 0x6E, 0xC0, 0xB2, 0xF9, 0xF7, 0x52, 0xF9, 0x01, 0x20, 0x20, 0x77, 0x03,
+	0x20, 0xFA, 0xF7, 0x7E, 0xFE, 0x03, 0x20, 0xF9, 0xF7, 0xEE, 0xFA, 0x26, 0xE0, 0x03, 0x20, 0xF7,
+	0xF7, 0x0A, 0xFB, 0xF9, 0xF7, 0x74, 0xF9, 0x20, 0x7E, 0x60, 0x76, 0x40, 0x1C, 0xC0, 0xB2, 0x20,
+	0x76, 0x03, 0x28, 0x04, 0xD3, 0x60, 0x7F, 0x00, 0x28, 0x00, 0xD0, 0x01, 0x20, 0x20, 0x76, 0x21,
+	0x7E, 0x03, 0x20, 0x49, 0x1E, 0xF7, 0xF7, 0xE7, 0xFA, 0xF9, 0xF7, 0x88, 0xF9, 0x20, 0x7E, 0xFE,
+	0xF7, 0x97, 0xFD, 0x21, 0x7E, 0x60, 0x7E, 0xFE, 0xF7, 0xB0, 0xFF, 0x65, 0x77, 0xA0, 0x7E, 0x40,
+	0x21, 0x40, 0x1C, 0xA0, 0x76, 
+	0x00, 0x01, 0x3F, 0x00, 0x80, 0x20, 0x8C, 0x08, 0x43, 0x20, 0x84, 0x20, 0x8C, 0x20, 0x21, 0x08,
+	0x43, 0x20, 0x84, 0x13, 0x20, 0x60, 0x72, 0xC0, 0x07, 0x70, 0xBD, 0x10, 0xB5, 0xFF, 0xF7, 0xC3,
+	0xFC, 0x72, 0x49, 0x04, 0x46, 0x4A, 0x7D, 0x00, 0x2A, 0xFC, 0xD0, 0x6F, 0x48, 0x40, 0x69, 0xC9,
+	0x6C, 0xFB, 0xF7, 0x07, 0xF9, 0xFB, 0xF7, 0xD3, 0xFB, 0x6D, 0x48, 0xF9, 0xF7, 0xA8, 0xF8, 0x20,
+	0x46, 0x10, 0xBD, 0x6A, 0x49, 0x88, 0x72, 0x70, 0x47, 0x10, 0xB5, 0xF8, 0xF7, 0x96, 0xFB, 0x10,
+	0xBD, 0x10, 0xB5, 0xF8, 0xF7, 0x6A, 0xFB, 0x10, 0xBD, 0x66, 0x48, 0x70, 0x47, 0x10, 0xB5, 0x66,
+	0x49, 0x00, 0x20, 0xC8, 0x76, 0x03, 0xF0, 0x24, 0xF9, 0x10, 0xBD, 0x10, 0xB5, 0x03, 0x21, 0xFF,
+	0xF7, 0x18, 0xF8, 0x5E, 0x4A, 0x25, 0x21, 0x51, 0x72, 0x10, 0xBD, 0x70, 0xB5, 0x05, 0x46, 0x01,
+	0x24, 0xF8, 0xF7, 0x7A, 0xFF, 
+	0x00, 0x01, 0x40, 0x00, 0x80, 0x01, 0x28, 0x1B, 0xD1, 0xF8, 0xF7, 0x5B, 0xFB, 0x57, 0x4C, 0x03,
+	0x20, 0xE1, 0x6C, 0xFB, 0xF7, 0xD6, 0xF8, 0xFB, 0xF7, 0xA2, 0xFB, 0x28, 0x46, 0x03, 0xF0, 0x10,
+	0xF9, 0x01, 0x28, 0x0A, 0xD1, 0x54, 0x49, 0xC8, 0x76, 0x52, 0x48, 0xA0, 0x64, 0x20, 0x65, 0xF9,
+	0xF7, 0x74, 0xF8, 0xFB, 0xF7, 0x7F, 0xFB, 0x00, 0x20, 0x00, 0xE0, 0x24, 0x20, 0x60, 0x72, 0x08,
+	0x24, 0x20, 0x46, 0x70, 0xBD, 0x10, 0xB5, 0x49, 0x49, 0x00, 0x20, 0x88, 0x77, 0x03, 0xF0, 0x6A,
+	0xF9, 0x10, 0xBD, 0x10, 0xB5, 0xFB, 0xF7, 0x56, 0xFB, 0xFB, 0xF7, 0x22, 0xFB, 0x10, 0xBD, 0x10,
+	0xB5, 0x03, 0x21, 0xFE, 0xF7, 0xDE, 0xFF, 0x41, 0x4A, 0x27, 0x21, 0x51, 0x72, 0x10, 0xBD, 0xF8,
+	0xB5, 0x07, 0x46, 0x00, 0x24, 0x01, 0x25, 0xF8, 0xF7, 0x3F, 0xFF, 0x01, 0x28, 0x28, 0xD1, 0xF8,
+	0xF7, 0x20, 0xFB, 0x3E, 0x4E, 
+	0x00, 0x01, 0x41, 0x00, 0x80, 0x39, 0x4D, 0x30, 0x78, 0xE9, 0x6C, 0x00, 0x28, 0x01, 0xD0, 0x01,
+	0x20, 0x00, 0xE0, 0x03, 0x20, 0xFB, 0xF7, 0x95, 0xF8, 0xF7, 0xF7, 0x7D, 0xFA, 0x00, 0x28, 0x02,
+	0xD0, 0xF7, 0xF7, 0x75, 0xFA, 0x01, 0x24, 0xFB, 0xF7, 0x5A, 0xFB, 0x00, 0x2C, 0x01, 0xD0, 0xF7,
+	0xF7, 0x67, 0xFA, 0x38, 0x46, 0x03, 0xF0, 0x20, 0xFA, 0x00, 0x24, 0x00, 0x28, 0x06, 0xD0, 0x34,
+	0x70, 0xA8, 0x77, 0x29, 0x48, 0x80, 0x30, 0x00, 0x78, 0x02, 0xF0, 0xE8, 0xFB, 0x6C, 0x72, 0x08,
+	0x25, 0x28, 0x46, 0xF8, 0xBD, 0x10, 0xB5, 0xF8, 0xF7, 0xB9, 0xFC, 0x23, 0x48, 0x40, 0x6C, 0xC0,
+	0xB2, 0xF8, 0xF7, 0xC6, 0xFE, 0xF8, 0xF7, 0x08, 0xFF, 0x01, 0x28, 0xFB, 0xD1, 0xF8, 0xF7, 0xE9,
+	0xFA, 0x10, 0xBD, 0xF8, 0xB5, 0x1F, 0x46, 0x05, 0x46, 0x0C, 0x46, 0x56, 0x18, 0x0A, 0xE0, 0xA0,
+	0xB2, 0x3A, 0x46, 0x29, 0x46, 
+	0x00, 0x01, 0x42, 0x00, 0x80, 0xF7, 0xF7, 0x8C, 0xF9, 0x00, 0x28, 0x01, 0xD0, 0x72, 0xB6, 0xFE,
+	0xE7, 0x80, 0x35, 0x64, 0x1C, 0xA6, 0x42, 0xF2, 0xD8, 0xF8, 0xBD, 0x70, 0xB5, 0x40, 0x08, 0x00,
+	0x25, 0x12, 0x4B, 0x90, 0x42, 0x01, 0xD3, 0x5D, 0x73, 0x01, 0xE0, 0x14, 0x1A, 0x5C, 0x73, 0x14,
+	0x4C, 0xE6, 0x69, 0x36, 0x1A, 0x76, 0x1E, 0x96, 0x42, 0x02, 0xD8, 0xE2, 0x69, 0x52, 0x1E, 0x00,
+	0xE0, 0x82, 0x18, 0x9A, 0x73, 0x88, 0x42, 0x01, 0xD3, 0xDD, 0x73, 0x01, 0xE0, 0x0A, 0x1A, 0xDA,
+	0x73, 0x22, 0x6A, 0x12, 0x1A, 0x52, 0x1E, 0x8A, 0x42, 0x02, 0xD8, 0x20, 0x6A, 0x40, 0x1E, 0x00,
+	0xE0, 0x40, 0x18, 0x18, 0x74, 0x70, 0xBD, 0x00, 0x00, 0x80, 0xE6, 0x00, 0x00, 0xD8, 0x01, 0x00,
+	0x20, 0xB7, 0x8C, 0x00, 0x00, 0x60, 0x14, 0x00, 0x20, 0x88, 0x03, 0x00, 0x20, 0x6C, 0x02, 0x00,
+	0x20, 0xF0, 0xE9, 0x00, 0x00, 
+	0x00, 0x01, 0x43, 0x00, 0x80, 0x10, 0xB5, 0xC3, 0x48, 0x40, 0x7A, 0x00, 0x28, 0x01, 0xD1, 0x01,
+	0x20, 0x00, 0xE0, 0x00, 0x20, 0x03, 0xF0, 0x64, 0xFB, 0x10, 0xBD, 0x10, 0xB5, 0x00, 0x20, 0x03,
+	0xF0, 0x0D, 0xFB, 0x03, 0xF0, 0x74, 0xFB, 0x00, 0x20, 0x03, 0xF0, 0x11, 0xFB, 0x00, 0x20, 0x03,
+	0xF0, 0x17, 0xFB, 0xB9, 0x48, 0x00, 0x78, 0x01, 0x07, 0xB6, 0x48, 0x0E, 0xD4, 0x40, 0x7A, 0x00,
+	0x28, 0x04, 0xD1, 0x01, 0x20, 0x03, 0xF0, 0x55, 0xFB, 0x01, 0x20, 0x03, 0xE0, 0x01, 0x20, 0x03,
+	0xF0, 0x50, 0xFB, 0x00, 0x20, 0x03, 0xF0, 0x44, 0xFB, 0x10, 0xBD, 0x00, 0x7A, 0x03, 0xF0, 0x49,
+	0xFB, 0xFF, 0xF7, 0xD0, 0xFF, 0x10, 0xBD, 0xD8, 0xE7, 0x30, 0xB5, 0x02, 0x24, 0xA9, 0x49, 0x24,
+	0x20, 0x8C, 0x71, 0xC8, 0x71, 0xA8, 0x48, 0x02, 0x78, 0x52, 0x08, 0x52, 0x00, 0x02, 0x70, 0x02,
+	0x78, 0xFD, 0x23, 0x1A, 0x40, 
+	0x00, 0x01, 0x44, 0x00, 0x80, 0x02, 0x70, 0x22, 0x02, 0x0A, 0x80, 0x00, 0x22, 0x4A, 0x80, 0x8A,
+	0x80, 0x03, 0x78, 0xF7, 0x25, 0x2B, 0x40, 0x03, 0x70, 0x0C, 0x72, 0x4A, 0x72, 0x01, 0x78, 0xFB,
+	0x22, 0x11, 0x40, 0x01, 0x70, 0x01, 0x21, 0x41, 0x70, 0x30, 0xBD, 0x9A, 0x49, 0x9B, 0x48, 0x4A,
+	0x88, 0x82, 0x62, 0x89, 0x88, 0xC1, 0x62, 0x98, 0x49, 0x09, 0x78, 0xC9, 0x07, 0x03, 0xD0, 0x41,
+	0x69, 0x08, 0x22, 0x11, 0x43, 0x41, 0x61, 0x70, 0x47, 0x10, 0xB5, 0x93, 0x48, 0x40, 0x78, 0x00,
+	0x28, 0x0B, 0xD1, 0x03, 0xF0, 0xDD, 0xFA, 0xFF, 0xF7, 0xC7, 0xFF, 0x03, 0x21, 0x00, 0x20, 0xFB,
+	0xF7, 0x7B, 0xFF, 0x8F, 0x49, 0x00, 0x20, 0xFB, 0xF7, 0x70, 0xFF, 0x8C, 0x48, 0x40, 0x69, 0xC0,
+	0x07, 0x01, 0xD0, 0x00, 0xF0, 0x05, 0xF9, 0xFF, 0xF7, 0xD8, 0xFF, 0xFF, 0xF7, 0x8E, 0xFF, 0x10,
+	0xBD, 0x10, 0xB5, 0x03, 0xF0, 
+	0x00, 0x01, 0x45, 0x00, 0x80, 0xB7, 0xFA, 0x10, 0xBD, 0x84, 0x48, 0x41, 0x69, 0x01, 0x22, 0x11,
+	0x43, 0x41, 0x61, 0x81, 0x48, 0x01, 0x78, 0x04, 0x22, 0x11, 0x43, 0x01, 0x70, 0x70, 0x47, 0x10,
+	0xB5, 0x00, 0xF0, 0xEE, 0xF8, 0x7C, 0x48, 0x01, 0x78, 0xFB, 0x22, 0x11, 0x40, 0x01, 0x70, 0x10,
+	0xBD, 0x30, 0xB4, 0x79, 0x4A, 0x01, 0x28, 0x13, 0x78, 0x02, 0xD1, 0xF7, 0x24, 0x23, 0x40, 0x01,
+	0xE0, 0x08, 0x24, 0x23, 0x43, 0x13, 0x70, 0x73, 0x4A, 0x10, 0x72, 0x51, 0x72, 0x30, 0xBC, 0x64,
+	0xE7, 0x10, 0xB5, 0x70, 0x48, 0x40, 0x7A, 0x00, 0x28, 0x00, 0xD0, 0x01, 0x20, 0x03, 0xF0, 0xC0,
+	0xFA, 0x10, 0xBD, 0x10, 0xB5, 0x03, 0xF0, 0xCE, 0xFA, 0x01, 0x21, 0x48, 0x40, 0x03, 0xF0, 0xB8,
+	0xFA, 0x10, 0xBD, 0x69, 0x49, 0x0A, 0x78, 0x01, 0x23, 0x1A, 0x43, 0x0A, 0x70, 0x69, 0x49, 0x65,
+	0x4A, 0x88, 0x42, 0x01, 0xD9, 
+	0x00, 0x01, 0x46, 0x00, 0x80, 0x91, 0x80, 0x00, 0xE0, 0x90, 0x80, 0x8E, 0xE7, 0x10, 0xB5, 0x03,
+	0xF0, 0x9B, 0xFA, 0x10, 0xBD, 0x64, 0x49, 0x80, 0x00, 0x40, 0x18, 0x00, 0x68, 0xC0, 0xB2, 0x70,
+	0x47, 0x70, 0xB5, 0x0C, 0x46, 0x05, 0x46, 0x09, 0x0A, 0x03, 0xF0, 0x8E, 0xFA, 0xE1, 0xB2, 0x68,
+	0x1C, 0x03, 0xF0, 0x8A, 0xFA, 0x70, 0xBD, 0x81, 0x00, 0x5B, 0x48, 0x08, 0x18, 0x01, 0x68, 0x40,
+	0x68, 0x09, 0x02, 0x01, 0x43, 0x88, 0xB2, 0x70, 0x47, 0x54, 0x48, 0x80, 0x69, 0x08, 0x21, 0x08,
+	0x40, 0x70, 0x47, 0x10, 0xB5, 0x51, 0x4C, 0xFB, 0xF7, 0xE9, 0xFE, 0xA1, 0x69, 0x09, 0x07, 0x07,
+	0xD4, 0xA1, 0x68, 0x01, 0x22, 0x11, 0x43, 0xA1, 0x60, 0xC0, 0xB2, 0xFB, 0xF7, 0xE3, 0xFE, 0x10,
+	0xBD, 0xC0, 0xB2, 0xFB, 0xF7, 0xDF, 0xFE, 0xEE, 0xE7, 0xEB, 0xE7, 0x10, 0xB5, 0x47, 0x4C, 0xFB,
+	0xF7, 0xD5, 0xFE, 0xA1, 0x69, 
+	0x00, 0x01, 0x47, 0x00, 0x80, 0x09, 0x07, 0x07, 0xD4, 0xA1, 0x68, 0x49, 0x08, 0x49, 0x00, 0xA1,
+	0x60, 0xC0, 0xB2, 0xFB, 0xF7, 0xCF, 0xFE, 0x03, 0xE0, 0xC0, 0xB2, 0xFB, 0xF7, 0xCB, 0xFE, 0xEE,
+	0xE7, 0xA0, 0x68, 0x80, 0x07, 0xFC, 0xD4, 0x10, 0xBD, 0xE7, 0xE7, 0x70, 0xB5, 0x04, 0x46, 0x80,
+	0x07, 0x01, 0xD1, 0x01, 0x20, 0x04, 0x43, 0x38, 0x4E, 0x3C, 0x4D, 0xB4, 0x70, 0xE0, 0x07, 0x12,
+	0xD0, 0xFF, 0xF7, 0xC7, 0xFF, 0x35, 0x49, 0x48, 0x69, 0x80, 0x07, 0x01, 0xD5, 0x09, 0x20, 0x00,
+	0xE0, 0x03, 0x20, 0x08, 0x61, 0xFF, 0x20, 0xC8, 0x60, 0x03, 0x20, 0xFB, 0xF7, 0xD6, 0xFE, 0x03,
+	0x20, 0xFB, 0xF7, 0xC4, 0xFE, 0x0E, 0xE0, 0x00, 0xF0, 0x4B, 0xF8, 0xA8, 0x68, 0xFF, 0x21, 0xC8,
+	0x31, 0xB0, 0x60, 0x88, 0x43, 0x40, 0x1C, 0xA8, 0x60, 0x2D, 0x49, 0x08, 0x68, 0x70, 0x60, 0x80,
+	0x08, 0x80, 0x00, 0x08, 0x60, 
+	0x00, 0x01, 0x48, 0x00, 0x80, 0xA0, 0x07, 0x10, 0xD5, 0x03, 0x20, 0x03, 0xF0, 0xD7, 0xF9, 0x00,
+	0x20, 0x03, 0xF0, 0xDD, 0xF9, 0x00, 0x20, 0x03, 0xF0, 0xE3, 0xF9, 0x10, 0x20, 0x28, 0x61, 0x00,
+	0x20, 0xFB, 0xF7, 0xB3, 0xFE, 0x00, 0x20, 0xFB, 0xF7, 0xA1, 0xFE, 0x70, 0xBD, 0x70, 0xB5, 0x1A,
+	0x4C, 0x00, 0x20, 0xA5, 0x78, 0xFB, 0xF7, 0xA1, 0xFE, 0x00, 0x20, 0x03, 0xF0, 0xBF, 0xF9, 0x1B,
+	0x4E, 0x10, 0x20, 0x30, 0x61, 0x00, 0x20, 0xFB, 0xF7, 0xA0, 0xFE, 0xE8, 0x07, 0x0B, 0xD0, 0x13,
+	0x48, 0x00, 0x21, 0x01, 0x61, 0xFF, 0x21, 0xC1, 0x60, 0x03, 0x20, 0xFB, 0xF7, 0x8E, 0xFE, 0x03,
+	0x20, 0xFB, 0xF7, 0x93, 0xFE, 0x09, 0xE0, 0x12, 0x49, 0x60, 0x68, 0x08, 0x60, 0xA0, 0x68, 0xB0,
+	0x60, 0x20, 0x78, 0x40, 0x07, 0x01, 0xD5, 0xFF, 0xF7, 0x07, 0xFF, 0xFF, 0xF7, 0x7E, 0xFF, 0x70,
+	0xBD, 0x06, 0x48, 0x81, 0x69, 
+	0x00, 0x01, 0x49, 0x00, 0x80, 0x09, 0x07, 0xFC, 0xD4, 0x41, 0x69, 0x49, 0x08, 0x49, 0x00, 0x41,
+	0x61, 0x70, 0x47, 0x00, 0x00, 0xA0, 0x19, 0x00, 0x20, 0x2C, 0x02, 0x00, 0x20, 0x00, 0x00, 0x12,
+	0x40, 0xE3, 0xA1, 0x00, 0x00, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x10, 0x12, 0x40, 0x00, 0x00, 0x14,
+	0x40, 0x00, 0x20, 0x14, 0x40, 0x10, 0xB5, 0xFF, 0x20, 0xFB, 0xF7, 0x6E, 0xFE, 0x10, 0xBD, 0x70,
+	0xB5, 0xFB, 0xF7, 0x34, 0xFE, 0x0D, 0x4A, 0x11, 0x68, 0x03, 0x23, 0x9B, 0x03, 0x01, 0x24, 0x99,
+	0x43, 0xA4, 0x03, 0x0C, 0x43, 0x14, 0x60, 0x01, 0x24, 0xE4, 0x03, 0x0C, 0x43, 0x14, 0x60, 0x09,
+	0x4D, 0x07, 0x4C, 0x2C, 0x61, 0x08, 0x4D, 0x04, 0x24, 0x2C, 0x60, 0x19, 0x43, 0x11, 0x60, 0xFB,
+	0xF7, 0x21, 0xFE, 0x06, 0x49, 0x01, 0x20, 0x08, 0x70, 0x70, 0xBD, 0x00, 0x00, 0x00, 0x00, 0x01,
+	0x40, 0x05, 0x01, 0x01, 0x00, 
+	0x00, 0x01, 0x4A, 0x00, 0x80, 0x00, 0x04, 0x01, 0x40, 0x80, 0xE2, 0x00, 0xE0, 0x3A, 0x02, 0x00,
+	0x20, 0x70, 0xB5, 0xFF, 0xF7, 0xC4, 0xFE, 0x01, 0x25, 0x6D, 0x02, 0x28, 0x46, 0xFF, 0xF7, 0xE9,
+	0xFE, 0xFF, 0xF7, 0xB2, 0xFE, 0x03, 0x24, 0xA0, 0xB2, 0x00, 0x21, 0xFF, 0xF7, 0xEF, 0xFE, 0x64,
+	0x1C, 0xAC, 0x42, 0xF8, 0xD3, 0x40, 0x21, 0x02, 0x20, 0xFF, 0xF7, 0xE8, 0xFE, 0xF9, 0x49, 0x00,
+	0x20, 0x08, 0x70, 0x70, 0xBD, 0xF1, 0xB5, 0xF8, 0x48, 0x84, 0xB0, 0x82, 0x78, 0x41, 0x78, 0x12,
+	0x02, 0x89, 0x18, 0xC2, 0x78, 0x00, 0x79, 0x12, 0x04, 0x00, 0x06, 0x10, 0x18, 0x0C, 0x18, 0x08,
+	0x20, 0xFF, 0xF7, 0xD8, 0xFE, 0x05, 0x46, 0x09, 0x20, 0xFF, 0xF7, 0xD4, 0xFE, 0x00, 0x02, 0xFF,
+	0x26, 0x04, 0x99, 0x28, 0x18, 0xEF, 0x36, 0x00, 0x29, 0x01, 0xD1, 0xFF, 0x26, 0xFD, 0x36, 0xB0,
+	0x42, 0x00, 0xD8, 0x06, 0x46, 
+	0x00, 0x01, 0x4B, 0x00, 0x80, 0x01, 0x20, 0x00, 0x25, 0x01, 0x90, 0x28, 0x46, 0x0A, 0x30, 0x07,
+	0x46, 0x80, 0xB2, 0xFF, 0xF7, 0xBF, 0xFE, 0x02, 0xA9, 0x48, 0x55, 0xB8, 0xB2, 0x00, 0x21, 0xFF,
+	0xF7, 0xB5, 0xFE, 0xE2, 0x48, 0x02, 0xA9, 0x40, 0x5D, 0x49, 0x5D, 0x88, 0x42, 0x01, 0xD0, 0x00,
+	0x20, 0x01, 0x90, 0x6D, 0x1C, 0x08, 0x2D, 0xE8, 0xD3, 0x01, 0x98, 0x01, 0x28, 0x06, 0xD1, 0x40,
+	0x07, 0x84, 0x42, 0x03, 0xD3, 0xDA, 0x49, 0xA0, 0x19, 0x88, 0x42, 0x02, 0xD9, 0x01, 0x20, 0x05,
+	0xB0, 0xF0, 0xBD, 0x04, 0x98, 0x00, 0x28, 0x0C, 0xD0, 0x00, 0x25, 0x07, 0xE0, 0x28, 0x46, 0x12,
+	0x30, 0x80, 0xB2, 0xFF, 0xF7, 0x97, 0xFE, 0x20, 0x70, 0x64, 0x1C, 0x6D, 0x1C, 0xB5, 0x42, 0xF5,
+	0xD3, 0x13, 0xE0, 0xCD, 0x48, 0x00, 0x25, 0x40, 0x1D, 0x21, 0x78, 0x42, 0x19, 0x64, 0x1C, 0x6D,
+	0x1C, 0x51, 0x70, 0x04, 0x2D, 
+	0x00, 0x01, 0x4C, 0x00, 0x80, 0xF8, 0xD3, 0x06, 0xE0, 0x21, 0x78, 0x28, 0x1D, 0x64, 0x1C, 0x80,
+	0xB2, 0xFF, 0xF7, 0x7C, 0xFE, 0x6D, 0x1C, 0xB5, 0x42, 0xF6, 0xD3, 0x00, 0x20, 0xD7, 0xE7, 0xFE,
+	0xB5, 0xC1, 0x48, 0x01, 0x88, 0x06, 0x79, 0x4F, 0xBA, 0x41, 0x88, 0xC2, 0x48, 0x4D, 0xBA, 0xBE,
+	0x49, 0x09, 0x79, 0xC9, 0x00, 0x02, 0x91, 0x03, 0x2E, 0x01, 0xD2, 0x84, 0x6A, 0x07, 0xE0, 0x06,
+	0x2E, 0x01, 0xD2, 0x44, 0x6A, 0x03, 0xE0, 0x09, 0x2E, 0x15, 0xD2, 0x40, 0x6A, 0x44, 0x00, 0x08,
+	0x46, 0xB6, 0x49, 0x08, 0x31, 0x40, 0x18, 0x00, 0x79, 0x40, 0x07, 0x40, 0x0F, 0x01, 0x46, 0x01,
+	0x90, 0xFF, 0x20, 0xF9, 0x30, 0x03, 0xF0, 0x2B, 0xFA, 0x85, 0x42, 0x00, 0xD9, 0x05, 0x46, 0xA7,
+	0x42, 0x11, 0xD2, 0xE0, 0x1B, 0x10, 0xE0, 0x09, 0x2E, 0x09, 0xD1, 0xC0, 0x6A, 0x84, 0x00, 0xAD,
+	0x48, 0x40, 0x30, 0x40, 0x6A, 
+	0x00, 0x01, 0x4D, 0x00, 0x80, 0x03, 0x28, 0x00, 0xD1, 0x64, 0x00, 0x02, 0x20, 0xE6, 0xE7, 0xA6,
+	0x48, 0x01, 0x21, 0x40, 0x1D, 0x21, 0xE0, 0x00, 0x20, 0x85, 0x42, 0x00, 0xD9, 0x05, 0x46, 0xA3,
+	0x49, 0x02, 0x98, 0x08, 0x31, 0x08, 0x58, 0x01, 0x99, 0x4F, 0x43, 0x3F, 0x18, 0x08, 0x46, 0x68,
+	0x43, 0x00, 0x24, 0x00, 0x90, 0x07, 0xE0, 0x20, 0x46, 0x08, 0x30, 0x80, 0xB2, 0xFF, 0xF7, 0x2A,
+	0xFE, 0x38, 0x70, 0x7F, 0x1C, 0x64, 0x1C, 0x00, 0x98, 0x84, 0x42, 0xF4, 0xD3, 0x96, 0x48, 0x40,
+	0x1D, 0x46, 0x70, 0x29, 0x0A, 0x81, 0x70, 0xC5, 0x70, 0x00, 0x21, 0x01, 0x70, 0xFE, 0xBD, 0xF0,
+	0xB5, 0x95, 0x48, 0x04, 0x68, 0x95, 0x48, 0x05, 0x78, 0x95, 0x48, 0x00, 0x78, 0x85, 0x42, 0x00,
+	0xD9, 0x05, 0x46, 0x94, 0x48, 0x94, 0x4A, 0x00, 0x88, 0x12, 0x78, 0xDC, 0x23, 0x1A, 0x40, 0xA2,
+	0x72, 0x41, 0x1C, 0xEA, 0x00, 
+	0x00, 0x01, 0x4E, 0x00, 0x80, 0x89, 0xB2, 0x52, 0x1B, 0x52, 0x18, 0x09, 0x3A, 0x62, 0x72, 0x25,
+	0x54, 0x00, 0x20, 0x21, 0xE0, 0xC2, 0x00, 0x83, 0x18, 0x8C, 0x4A, 0x9A, 0x18, 0x53, 0x79, 0x16,
+	0x79, 0x1B, 0x02, 0x33, 0x43, 0x1B, 0x0A, 0x63, 0x54, 0x53, 0x79, 0x17, 0x79, 0x1E, 0x02, 0x63,
+	0x18, 0x3E, 0x43, 0x5E, 0x70, 0xD6, 0x78, 0x97, 0x78, 0x36, 0x02, 0x3E, 0x43, 0x36, 0x0A, 0x9E,
+	0x70, 0xD6, 0x78, 0x97, 0x78, 0x36, 0x02, 0x3E, 0x43, 0xDE, 0x70, 0x12, 0x7A, 0x1A, 0x71, 0xC9,
+	0x1D, 0x58, 0x71, 0x40, 0x1C, 0x89, 0xB2, 0xC0, 0xB2, 0xA8, 0x42, 0xDB, 0xD3, 0x7A, 0x49, 0x08,
+	0x78, 0x40, 0x30, 0x08, 0x70, 0xF0, 0xBD, 0x10, 0xB5, 0x6F, 0x4C, 0x01, 0x46, 0x10, 0x3C, 0x62,
+	0x68, 0xE0, 0x68, 0x90, 0x42, 0x07, 0xD3, 0xA3, 0x68, 0x98, 0x42, 0x04, 0xD2, 0x80, 0x1A, 0x08,
+	0x30, 0x80, 0xB2, 0xFF, 0xF7, 
+	0x00, 0x01, 0x4F, 0x00, 0x80, 0xC3, 0xFD, 0xE0, 0x68, 0x40, 0x1C, 0xE0, 0x60, 0x10, 0xBD, 0xFF,
+	0xB5, 0x83, 0xB0, 0x00, 0x20, 0x0F, 0x9E, 0x04, 0x46, 0x01, 0x90, 0x0E, 0xE0, 0x0E, 0x98, 0x00,
+	0x19, 0xF8, 0xF7, 0x8E, 0xFD, 0x16, 0x21, 0x48, 0x43, 0x69, 0x49, 0x40, 0x18, 0x81, 0x78, 0x01,
+	0x98, 0x08, 0x18, 0xC0, 0xB2, 0x64, 0x1C, 0xA4, 0xB2, 0x01, 0x90, 0x0D, 0x98, 0x84, 0x42, 0xED,
+	0xD3, 0x00, 0x25, 0x49, 0xE0, 0x11, 0x98, 0x04, 0x99, 0x68, 0x43, 0x40, 0x18, 0x80, 0xB2, 0x00,
+	0x90, 0x0E, 0x98, 0x00, 0x24, 0x40, 0x19, 0x02, 0x90, 0xF8, 0xF7, 0x72, 0xFD, 0x16, 0x21, 0x48,
+	0x43, 0x5B, 0x49, 0x09, 0x5A, 0x01, 0x20, 0xA0, 0x40, 0x01, 0x42, 0x2D, 0xD0, 0x03, 0x98, 0x01,
+	0x28, 0x06, 0xD1, 0x21, 0x46, 0x00, 0x98, 0xFD, 0xF7, 0x4B, 0xFA, 0x07, 0x46, 0x28, 0x46, 0x1A,
+	0xE0, 0x02, 0x28, 0x0C, 0x98, 
+	0x00, 0x01, 0x50, 0x00, 0x80, 0x11, 0xD1, 0x28, 0x18, 0x21, 0x46, 0xFD, 0xF7, 0x41, 0xFA, 0x07,
+	0x46, 0x02, 0x98, 0xF8, 0xF7, 0x55, 0xFD, 0x16, 0x21, 0x48, 0x43, 0x4D, 0x49, 0x40, 0x18, 0x00,
+	0x19, 0x01, 0x79, 0x44, 0x48, 0x40, 0x6A, 0x08, 0x1A, 0x0D, 0xE0, 0x28, 0x18, 0x21, 0x46, 0xFD,
+	0xF7, 0x2F, 0xFA, 0x07, 0x46, 0x02, 0x98, 0xF8, 0xF7, 0x43, 0xFD, 0x16, 0x21, 0x48, 0x43, 0x44,
+	0x49, 0x40, 0x18, 0x00, 0x19, 0x00, 0x79, 0x37, 0x54, 0x64, 0x1C, 0xA4, 0xB2, 0x08, 0x2C, 0x01,
+	0xD2, 0x02, 0x98, 0xC1, 0xE7, 0x6D, 0x1C, 0xAD, 0xB2, 0x0D, 0x98, 0x85, 0x42, 0xB2, 0xD3, 0x00,
+	0x24, 0x04, 0xE0, 0x30, 0x5D, 0xFF, 0xF7, 0x7F, 0xFF, 0x64, 0x1C, 0xA4, 0xB2, 0x01, 0x98, 0x84,
+	0x42, 0xF7, 0xD3, 0x07, 0xB0, 0xF0, 0xBD, 0xF0, 0xB5, 0x07, 0x46, 0x9D, 0xB0, 0x00, 0x20, 0x2A,
+	0x49, 0x1A, 0x90, 0x08, 0x88, 
+	0x00, 0x01, 0x51, 0x00, 0x80, 0xFF, 0x25, 0x40, 0xBA, 0x19, 0x90, 0x48, 0x88, 0x31, 0x4E, 0x40,
+	0xBA, 0xF9, 0x35, 0xA8, 0x42, 0x00, 0xD8, 0x05, 0x46, 0x23, 0x48, 0x19, 0x99, 0x10, 0x38, 0x41,
+	0x60, 0x19, 0x99, 0x49, 0x19, 0x81, 0x60, 0x00, 0x21, 0xC1, 0x60, 0x04, 0x2F, 0x01, 0xD1, 0x2A,
+	0x4E, 0x02, 0xE0, 0x05, 0x2F, 0x00, 0xD1, 0x29, 0x4E, 0x1E, 0x4C, 0x40, 0x34, 0x21, 0x6A, 0x28,
+	0x48, 0x02, 0x29, 0x00, 0x78, 0x02, 0xD1, 0xC0, 0x1C, 0x80, 0x08, 0x80, 0x00, 0x1C, 0x90, 0x3B,
+	0x46, 0x18, 0x48, 0x03, 0xF0, 0xDE, 0xF9, 0x06, 0x04, 0x47, 0x68, 0x6E, 0x04, 0x04, 0x7A, 0x00,
+	0x6B, 0x80, 0xB2, 0x18, 0x90, 0x00, 0x20, 0x17, 0x90, 0x1B, 0x90, 0x30, 0x78, 0xFF, 0xF7, 0x3B,
+	0xFF, 0x00, 0x24, 0x12, 0xE0, 0x1C, 0x9A, 0x0F, 0xA8, 0x03, 0x90, 0x05, 0x92, 0x1B, 0x98, 0x04,
+	0x96, 0x17, 0x9A, 0x18, 0x99, 
+	0x00, 0x01, 0x52, 0x00, 0x80, 0x00, 0x90, 0x02, 0x92, 0x01, 0x91, 0x2B, 0x46, 0x21, 0x46, 0x01,
+	0x20, 0x19, 0x9A, 0xFF, 0xF7, 0x3C, 0xFF, 0x64, 0x1C, 0xA4, 0xB2, 0x11, 0x48, 0x00, 0x78, 0x84,
+	0x42, 0xE8, 0xD3, 0x9F, 0xE0, 0xCA, 0x02, 0x00, 0x20, 0x4C, 0x02, 0x00, 0x20, 0x08, 0xDF, 0x00,
+	0x00, 0x00, 0x20, 0x00, 0x20, 0xF0, 0xE9, 0x00, 0x00, 0x28, 0x02, 0x00, 0x20, 0xEE, 0x00, 0x00,
+	0x20, 0x18, 0x03, 0x00, 0x20, 0x74, 0x02, 0x00, 0x20, 0x65, 0x02, 0x00, 0x20, 0x88, 0x03, 0x00,
+	0x20, 0x00, 0xEC, 0x00, 0x00, 0xC6, 0x0E, 0x00, 0x20, 0x64, 0x10, 0x00, 0x20, 0x02, 0x12, 0x00,
+	0x20, 0x9D, 0x00, 0x00, 0x20, 0x41, 0x6B, 0x82, 0x6B, 0x89, 0x18, 0x89, 0xB2, 0x18, 0x91, 0x01,
+	0x6B, 0xC9, 0xB2, 0x17, 0x91, 0x01, 0x6B, 0x1C, 0x98, 0x41, 0x43, 0x8C, 0xB2, 0x70, 0x78, 0xFF,
+	0xF7, 0xF2, 0xFE, 0xB0, 0x78, 
+	0x00, 0x01, 0x53, 0x00, 0x80, 0xFF, 0xF7, 0xEF, 0xFE, 0x1C, 0x9A, 0x06, 0xA8, 0x04, 0x96, 0x05,
+	0x92, 0x03, 0x90, 0x18, 0x99, 0x17, 0x9A, 0x01, 0x91, 0x00, 0x94, 0x02, 0x92, 0x00, 0x21, 0x2B,
+	0x46, 0x08, 0x46, 0x19, 0x9A, 0x5C, 0xE0, 0x21, 0x68, 0x01, 0x6B, 0xC1, 0x6B, 0x01, 0x6B, 0xC0,
+	0x6B, 0x58, 0xE0, 0x01, 0x21, 0x18, 0x91, 0x01, 0x6B, 0xC2, 0x6B, 0x89, 0x18, 0x22, 0x68, 0x89,
+	0x18, 0xC9, 0xB2, 0x17, 0x91, 0xC1, 0x6A, 0x00, 0x29, 0x02, 0xD1, 0x01, 0x20, 0x1A, 0x90, 0x49,
+	0xE0, 0x01, 0x6B, 0x1C, 0x9A, 0xC0, 0x6B, 0x51, 0x43, 0x08, 0x18, 0x21, 0x68, 0x40, 0x18, 0x80,
+	0xB2, 0x1B, 0x90, 0x60, 0x6A, 0x02, 0x28, 0x02, 0xD0, 0x60, 0x6A, 0x03, 0x28, 0x02, 0xD1, 0xF0,
+	0x78, 0xFF, 0xF7, 0xB9, 0xFE, 0x60, 0x6A, 0x01, 0x28, 0x02, 0xD0, 0x60, 0x6A, 0x03, 0x28, 0x02,
+	0xD1, 0x30, 0x79, 0xFF, 0xF7, 
+	0x00, 0x01, 0x54, 0x00, 0x80, 0xB0, 0xFE, 0x60, 0x6A, 0x02, 0x28, 0x02, 0xD0, 0x60, 0x6A, 0x03,
+	0x28, 0x10, 0xD1, 0x1C, 0x9A, 0x06, 0xA8, 0x03, 0x90, 0x05, 0x92, 0x1B, 0x98, 0x04, 0x96, 0x17,
+	0x9A, 0x18, 0x99, 0x00, 0x90, 0x02, 0x92, 0x01, 0x91, 0x2B, 0x46, 0x00, 0x21, 0x02, 0x20, 0x19,
+	0x9A, 0xFF, 0xF7, 0xAD, 0xFE, 0x60, 0x6A, 0x01, 0x28, 0x02, 0xD0, 0x60, 0x6A, 0x03, 0x28, 0x11,
+	0xD1, 0x1C, 0x9A, 0x06, 0xA8, 0x03, 0x90, 0x1B, 0x98, 0x04, 0x96, 0x05, 0x92, 0x40, 0x1C, 0x80,
+	0xB2, 0x17, 0x9A, 0x18, 0x99, 0x6C, 0x46, 0x07, 0xC4, 0x2B, 0x46, 0x00, 0x21, 0x02, 0x20, 0x19,
+	0x9A, 0xFF, 0xF7, 0x95, 0xFE, 0xFF, 0x48, 0x1A, 0x99, 0x01, 0x70, 0x47, 0x70, 0x29, 0x0A, 0x81,
+	0x70, 0xC5, 0x70, 0x09, 0x21, 0x01, 0x71, 0x1D, 0xB0, 0xF0, 0xBD, 0xF0, 0xB5, 0xF9, 0x48, 0x85,
+	0xB0, 0x40, 0x1F, 0x01, 0x88, 
+	0x00, 0x01, 0x55, 0x00, 0x80, 0x06, 0x79, 0x4F, 0xBA, 0x41, 0x88, 0xF7, 0x48, 0x4D, 0xBA, 0xF5,
+	0x49, 0x49, 0x1F, 0x09, 0x79, 0xC9, 0x00, 0x03, 0x91, 0x03, 0x2E, 0x01, 0xD2, 0x84, 0x6A, 0x07,
+	0xE0, 0x06, 0x2E, 0x01, 0xD2, 0x44, 0x6A, 0x03, 0xE0, 0x09, 0x2E, 0x14, 0xD2, 0x40, 0x6A, 0x44,
+	0x00, 0x08, 0x46, 0xEE, 0x49, 0x40, 0x18, 0x00, 0x79, 0x40, 0x07, 0x40, 0x0F, 0x01, 0x46, 0x01,
+	0x90, 0xFF, 0x20, 0xF9, 0x30, 0x02, 0xF0, 0xFB, 0xFF, 0x85, 0x42, 0x00, 0xD9, 0x05, 0x46, 0xA7,
+	0x42, 0x10, 0xD2, 0xE0, 0x1B, 0x0F, 0xE0, 0x09, 0x2E, 0x09, 0xD1, 0xC0, 0x6A, 0x84, 0x00, 0xE2,
+	0x48, 0x40, 0x30, 0x40, 0x6A, 0x03, 0x28, 0x00, 0xD1, 0x64, 0x00, 0x02, 0x20, 0xE6, 0xE7, 0x01,
+	0x21, 0xDC, 0x48, 0x3A, 0xE0, 0x00, 0x20, 0x85, 0x42, 0x00, 0xD9, 0x05, 0x46, 0x03, 0x98, 0xDB,
+	0x49, 0x02, 0x90, 0x08, 0x58, 
+	0x00, 0x01, 0x56, 0x00, 0x80, 0x01, 0x99, 0x4F, 0x43, 0x3F, 0x18, 0x08, 0x46, 0x68, 0x43, 0x00,
+	0x24, 0x00, 0x90, 0x07, 0xE0, 0x20, 0x46, 0x08, 0x30, 0x39, 0x78, 0x80, 0xB2, 0xFF, 0xF7, 0xF6,
+	0xFB, 0x7F, 0x1C, 0x64, 0x1C, 0x00, 0x98, 0x84, 0x42, 0xF4, 0xD3, 0xCE, 0x48, 0x29, 0x0A, 0x46,
+	0x70, 0x81, 0x70, 0xC5, 0x70, 0x09, 0x2E, 0x01, 0xD1, 0x32, 0x21, 0x14, 0xE0, 0x03, 0x2E, 0x03,
+	0xD3, 0xCA, 0x4A, 0x02, 0x99, 0x89, 0x18, 0x0D, 0xE0, 0xC9, 0x49, 0x49, 0x69, 0x01, 0x29, 0x06,
+	0xD1, 0xC6, 0x4A, 0x02, 0x99, 0x89, 0x18, 0x09, 0x79, 0x08, 0x22, 0x11, 0x43, 0x03, 0xE0, 0xC3,
+	0x49, 0x02, 0x9A, 0x51, 0x18, 0x09, 0x79, 0x01, 0x71, 0x00, 0x21, 0x01, 0x70, 0x2F, 0xE5, 0xFE,
+	0xB5, 0xBC, 0x48, 0x40, 0x1F, 0x01, 0x88, 0x4E, 0xBA, 0x41, 0x88, 0x00, 0x79, 0x4C, 0xBA, 0x01,
+	0x90, 0xFF, 0xF7, 0x2A, 0xFA, 
+	0x00, 0x01, 0x57, 0x00, 0x80, 0x00, 0x20, 0x00, 0x90, 0x01, 0x98, 0x02, 0x28, 0x03, 0xD0, 0x03,
+	0x28, 0x07, 0xD0, 0x04, 0x28, 0x33, 0xD1, 0x1B, 0x2C, 0x00, 0xD9, 0x1B, 0x24, 0x00, 0x25, 0xB5,
+	0x4F, 0x24, 0xE0, 0xFF, 0x20, 0xF9, 0x30, 0x84, 0x42, 0x00, 0xD9, 0x04, 0x46, 0x00, 0x25, 0x11,
+	0xE0, 0x77, 0x19, 0x09, 0x21, 0x38, 0x46, 0x02, 0xF0, 0x82, 0xFF, 0xC1, 0x00, 0x41, 0x18, 0x79,
+	0x1A, 0xFD, 0xF7, 0x66, 0xF8, 0xC1, 0xB2, 0x28, 0x46, 0x08, 0x30, 0x80, 0xB2, 0xFF, 0xF7, 0x9E,
+	0xFB, 0x6D, 0x1C, 0xAD, 0xB2, 0xA5, 0x42, 0xEB, 0xD3, 0x13, 0xE0, 0x70, 0x19, 0x39, 0x5C, 0x28,
+	0x46, 0x09, 0x30, 0x80, 0xB2, 0xFF, 0xF7, 0x92, 0xFB, 0x6D, 0x1C, 0xAD, 0xB2, 0xAC, 0x42, 0xF4,
+	0xD8, 0x9C, 0x48, 0x15, 0x38, 0x41, 0x78, 0x08, 0x20, 0xFF, 0xF7, 0x88, 0xFB, 0x01, 0xE0, 0x01,
+	0x20, 0x00, 0x90, 0x98, 0x48, 
+	0x00, 0x01, 0x58, 0x00, 0x80, 0x00, 0x99, 0x01, 0x70, 0x01, 0x99, 0x41, 0x70, 0x21, 0x0A, 0x81,
+	0x70, 0xC4, 0x70, 0xFE, 0xBD, 0xF8, 0xB5, 0x93, 0x49, 0x97, 0x48, 0x49, 0x1F, 0x0E, 0x78, 0x4F,
+	0x78, 0x00, 0x88, 0x00, 0x90, 0x01, 0x24, 0x00, 0x25, 0x94, 0x48, 0x01, 0xF0, 0x2F, 0xFE, 0x30,
+	0x46, 0x8C, 0x4E, 0x15, 0x3E, 0x01, 0x28, 0x08, 0xD0, 0x02, 0x28, 0x1E, 0xD0, 0x03, 0x28, 0x11,
+	0xD0, 0x04, 0x28, 0x33, 0xD1, 0x01, 0xF0, 0x4B, 0xFC, 0x2E, 0xE0, 0x8A, 0x48, 0x09, 0x38, 0x01,
+	0xF0, 0x5E, 0xFD, 0x70, 0x70, 0xC0, 0xB2, 0x00, 0x28, 0x02, 0xD0, 0x01, 0x21, 0x08, 0x43, 0x70,
+	0x70, 0x00, 0x24, 0x23, 0xE0, 0x83, 0x48, 0x39, 0x46, 0x09, 0x38, 0x01, 0xF0, 0x1D, 0xFD, 0x70,
+	0x70, 0xC0, 0xB2, 0x00, 0x28, 0xF4, 0xD1, 0x01, 0x25, 0xF2, 0xE7, 0x30, 0x78, 0x00, 0x28, 0x05,
+	0xD0, 0x01, 0x28, 0x13, 0xD1, 
+	0x00, 0x01, 0x59, 0x00, 0x80, 0x00, 0x20, 0x01, 0x46, 0x7A, 0x4A, 0x04, 0xE0, 0x79, 0x48, 0x09,
+	0x38, 0x01, 0xF0, 0xF0, 0xFB, 0x08, 0xE0, 0x11, 0x54, 0x40, 0x1C, 0xC0, 0xB2, 0x1B, 0x28, 0xFA,
+	0xD3, 0x74, 0x48, 0x09, 0x38, 0x01, 0xF0, 0x91, 0xFB, 0x70, 0x70, 0xE4, 0xE7, 0x00, 0x98, 0x01,
+	0xF0, 0xED, 0xFD, 0x6C, 0x48, 0x04, 0x70, 0x71, 0x78, 0x41, 0x70, 0x85, 0x70, 0xF8, 0xBD, 0xF0,
+	0xB5, 0x6F, 0x48, 0xA5, 0xB0, 0x00, 0x68, 0x01, 0x90, 0x66, 0x48, 0x40, 0x1F, 0x01, 0x88, 0x4E,
+	0xBA, 0x41, 0x88, 0x00, 0x79, 0x4D, 0xBA, 0x24, 0x90, 0x00, 0x28, 0x09, 0xD0, 0x01, 0x28, 0x0F,
+	0xD0, 0x02, 0x28, 0x11, 0xD1, 0x67, 0x49, 0x01, 0x20, 0x02, 0x91, 0x49, 0x02, 0x0F, 0x0C, 0x0E,
+	0xE0, 0x65, 0x48, 0x66, 0x49, 0xC0, 0x09, 0xC9, 0x09, 0x40, 0x1A, 0x64, 0x49, 0x02, 0x91, 0xF4,
+	0xE7, 0x61, 0x49, 0x01, 0x20, 
+	0x00, 0x01, 0x5A, 0x00, 0x80, 0x02, 0x91, 0xF0, 0xE7, 0x00, 0x20, 0x07, 0x46, 0x02, 0x90, 0x86,
+	0x42, 0x17, 0xD2, 0x80, 0x2D, 0x15, 0xD8, 0x00, 0x20, 0x04, 0x46, 0x03, 0x90, 0x28, 0x19, 0x08,
+	0x30, 0x80, 0xB2, 0xFF, 0xF7, 0xF7, 0xFA, 0x51, 0x49, 0x10, 0x39, 0x09, 0x5D, 0x88, 0x42, 0x01,
+	0xD0, 0x01, 0x20, 0x03, 0x90, 0x64, 0x1C, 0xA4, 0xB2, 0x08, 0x2C, 0xEF, 0xD3, 0x03, 0x98, 0x00,
+	0x28, 0x04, 0xD0, 0x48, 0x49, 0x01, 0x20, 0x08, 0x70, 0x25, 0xB0, 0xF0, 0xBD, 0x00, 0x24, 0x08,
+	0xE0, 0x20, 0x46, 0x08, 0x30, 0x80, 0xB2, 0xFF, 0xF7, 0xDD, 0xFA, 0x04, 0xA9, 0x08, 0x55, 0x64,
+	0x1C, 0xA4, 0xB2, 0xA5, 0x42, 0xF4, 0xD8, 0x02, 0x98, 0xF1, 0x01, 0x08, 0x18, 0x41, 0x19, 0x80,
+	0x20, 0x02, 0x1B, 0x04, 0xA8, 0x00, 0x19, 0x02, 0xF0, 0x31, 0xFE, 0x28, 0x46, 0x10, 0x30, 0x80,
+	0xB2, 0xFF, 0xF7, 0xC8, 0xFA, 
+	0x00, 0x01, 0x5B, 0x00, 0x80, 0x04, 0x02, 0x28, 0x46, 0x11, 0x30, 0x80, 0xB2, 0xFF, 0xF7, 0xC2,
+	0xFA, 0x04, 0x43, 0x04, 0xA9, 0x28, 0x46, 0x02, 0xF0, 0x83, 0xFD, 0x84, 0x42, 0x03, 0xD0, 0x31,
+	0x48, 0x01, 0x21, 0x01, 0x70, 0xD0, 0xE7, 0x00, 0x2E, 0x04, 0xD1, 0x04, 0x22, 0x04, 0xA8, 0x02,
+	0x99, 0x02, 0xF0, 0x14, 0xFE, 0xB8, 0x19, 0x80, 0xB2, 0x04, 0xA9, 0x01, 0x9A, 0xF6, 0xF7, 0x30,
+	0xFB, 0x00, 0x28, 0x00, 0xD0, 0x01, 0x20, 0x27, 0x49, 0x08, 0x70, 0x24, 0x98, 0x48, 0x70, 0x28,
+	0x0A, 0x88, 0x70, 0xCD, 0x70, 0x24, 0x98, 0x00, 0x28, 0xB6, 0xD1, 0x2D, 0x49, 0x08, 0x70, 0x2D,
+	0x48, 0x01, 0x88, 0xC9, 0x07, 0xC9, 0x0F, 0x01, 0x80, 0xAE, 0xE7, 0xFE, 0xB5, 0x1D, 0x48, 0x40,
+	0x1F, 0x01, 0x88, 0x42, 0x88, 0x00, 0x79, 0x49, 0xBA, 0x55, 0xBA, 0x00, 0x90, 0x00, 0x28, 0x06,
+	0xD0, 0x01, 0x28, 0x0B, 0xD0, 
+	0x00, 0x01, 0x5C, 0x00, 0x80, 0x02, 0x28, 0x0C, 0xD1, 0x01, 0x20, 0x1E, 0x4E, 0x0B, 0xE0, 0x1E,
+	0x48, 0x1E, 0x4A, 0xC0, 0x09, 0xD2, 0x09, 0x80, 0x1A, 0x1C, 0x4E, 0x04, 0xE0, 0x01, 0x20, 0x1A,
+	0x4E, 0x01, 0xE0, 0x00, 0x20, 0x06, 0x46, 0x81, 0x42, 0x01, 0xD2, 0x80, 0x2D, 0x03, 0xD9, 0x0D,
+	0x48, 0x01, 0x21, 0x01, 0x70, 0xFE, 0xBD, 0xC8, 0x01, 0x87, 0x19, 0x00, 0x24, 0x01, 0x90, 0x07,
+	0xE0, 0x20, 0x46, 0x08, 0x30, 0x39, 0x5D, 0x80, 0xB2, 0xFF, 0xF7, 0x60, 0xFA, 0x64, 0x1C, 0xA4,
+	0xB2, 0xA5, 0x42, 0xF5, 0xD8, 0x39, 0x46, 0x28, 0x46, 0x02, 0xF0, 0x22, 0xFD, 0x04, 0x46, 0x01,
+	0x0A, 0x28, 0x46, 0x19, 0xE0, 0x51, 0x02, 0x00, 0x20, 0xF0, 0xE9, 0x00, 0x00, 0x10, 0xDF, 0x00,
+	0x00, 0xD0, 0xE7, 0x00, 0x00, 0xB3, 0x19, 0x00, 0x20, 0xD0, 0x02, 0x00, 0x20, 0x10, 0x27, 0x00,
+	0x00, 0x28, 0x02, 0x00, 0x20, 
+	0x00, 0x01, 0x5D, 0x00, 0x80, 0x00, 0xEE, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xE6, 0x00,
+	0x00, 0xB6, 0x02, 0x00, 0x20, 0xC8, 0x02, 0x00, 0x20, 0x08, 0x30, 0x80, 0xB2, 0xFF, 0xF7, 0x36,
+	0xFA, 0x28, 0x46, 0x09, 0x30, 0xE1, 0xB2, 0x80, 0xB2, 0xFF, 0xF7, 0x30, 0xFA, 0x00, 0x2D, 0x03,
+	0xD1, 0x71, 0x88, 0x01, 0x98, 0x08, 0x1A, 0x85, 0xB2, 0xE1, 0x48, 0x00, 0x21, 0x01, 0x70, 0x00,
+	0x99, 0x41, 0x70, 0x29, 0x0A, 0x81, 0x70, 0xC5, 0x70, 0xFE, 0xBD, 0xFE, 0xB5, 0x02, 0x20, 0xFF,
+	0xF7, 0x21, 0xFA, 0x04, 0x46, 0x40, 0x06, 0x78, 0xD4, 0x01, 0xE0, 0x01, 0xF0, 0x33, 0xFD, 0xFF,
+	0xF7, 0x33, 0xFA, 0x00, 0x28, 0xF9, 0xD1, 0xD6, 0x4E, 0x00, 0x25, 0x76, 0x1F, 0xE8, 0x1C, 0xFF,
+	0xF7, 0x11, 0xFA, 0x70, 0x55, 0x6D, 0x1C, 0xED, 0xB2, 0x05, 0x2D, 0xF7, 0xD3, 0x05, 0x21, 0xD0,
+	0x48, 0x02, 0xF0, 0xC9, 0xFD, 
+	0x00, 0x01, 0x5E, 0x00, 0x80, 0xA3, 0x06, 0x9B, 0x0E, 0x00, 0x27, 0xCE, 0x48, 0xCC, 0x4D, 0x0B,
+	0x2B, 0x4D, 0xD0, 0x08, 0xDC, 0x02, 0xF0, 0xBD, 0xFE, 0x0B, 0xB4, 0xB2, 0x27, 0x2B, 0x2E, 0xB2,
+	0x31, 0x34, 0x37, 0x3A, 0x3D, 0xB2, 0x00, 0x10, 0x2B, 0x65, 0xD0, 0x0B, 0xDC, 0x0C, 0x2B, 0x4D,
+	0xD0, 0x0D, 0x2B, 0x4E, 0xD0, 0x0E, 0x2B, 0x5B, 0xD0, 0x0F, 0x2B, 0x70, 0xD1, 0xC2, 0x49, 0x30,
+	0x78, 0x08, 0x70, 0x32, 0xE0, 0x11, 0x2B, 0x6E, 0xD0, 0x12, 0x2B, 0x6F, 0xD0, 0x13, 0x2B, 0x70,
+	0xD0, 0x3F, 0x2B, 0xF2, 0xD1, 0x30, 0x78, 0xFE, 0x28, 0x7E, 0xD0, 0xFF, 0x28, 0x7D, 0xD1, 0x01,
+	0x20, 0xFF, 0xF7, 0xF0, 0xFA, 0x88, 0xE0, 0x2F, 0x70, 0x80, 0x20, 0x68, 0x70, 0x88, 0xE0, 0xFF,
+	0xF7, 0x3C, 0xFF, 0x85, 0xE0, 0xFF, 0xF7, 0xA3, 0xFE, 0x82, 0xE0, 0x00, 0xF0, 0x21, 0xF9, 0x7F,
+	0xE0, 0xFF, 0xF7, 0x48, 0xFE, 
+	0x00, 0x01, 0x5F, 0x00, 0x80, 0x7C, 0xE0, 0xFF, 0xF7, 0xF2, 0xFD, 0x79, 0xE0, 0x00, 0xF0, 0xEE,
+	0xF8, 0x76, 0xE0, 0x00, 0x78, 0x00, 0x28, 0x3F, 0xD0, 0x36, 0x78, 0xF0, 0x07, 0x01, 0xD0, 0xFA,
+	0xF7, 0xC9, 0xFB, 0x70, 0x07, 0x01, 0xD5, 0xFA, 0xF7, 0x96, 0xFB, 0x2F, 0x70, 0x68, 0xE0, 0x00,
+	0x78, 0x00, 0x28, 0x31, 0xD0, 0x01, 0x20, 0xFF, 0xF7, 0x04, 0xF8, 0x01, 0xF0, 0xFB, 0xFB, 0xFD,
+	0xF7, 0x1C, 0xFF, 0xC0, 0x07, 0xF9, 0xD1, 0x62, 0xB6, 0x5A, 0xE0, 0x74, 0xE0, 0xFF, 0xF7, 0x55,
+	0xFD, 0x56, 0xE0, 0x00, 0x26, 0x77, 0x00, 0xF8, 0x1C, 0x80, 0xB2, 0xFF, 0xF7, 0xAC, 0xF9, 0x9B,
+	0x49, 0x76, 0x1C, 0xC8, 0x53, 0x19, 0x2E, 0xF5, 0xD3, 0x99, 0x48, 0x01, 0x21, 0x01, 0x70, 0x47,
+	0xE0, 0x97, 0x48, 0x07, 0x70, 0x44, 0xE0, 0x30, 0x79, 0x00, 0x07, 0x00, 0x0F, 0x03, 0x46, 0x02,
+	0xF0, 0x48, 0xFE, 0x07, 0x05, 
+	0x00, 0x01, 0x60, 0x00, 0x80, 0x05, 0x05, 0x05, 0x05, 0x05, 0x08, 0x0B, 0x00, 0xFF, 0xF7, 0x33,
+	0xFC, 0x36, 0xE0, 0x00, 0xF0, 0x78, 0xF8, 0x33, 0xE0, 0x01, 0x20, 0x28, 0x70, 0x30, 0xE0, 0x2D,
+	0xE0, 0x01, 0xE0, 0x03, 0xE0, 0x05, 0xE0, 0x00, 0xF0, 0x48, 0xF8, 0x29, 0xE0, 0xFF, 0xF7, 0xF7,
+	0xFA, 0x26, 0xE0, 0x88, 0x48, 0xA1, 0x22, 0x01, 0x68, 0x92, 0x00, 0x68, 0x46, 0xF6, 0xF7, 0xD0,
+	0xF9, 0x60, 0x21, 0x68, 0x46, 0xF6, 0xF7, 0xD4, 0xF9, 0x06, 0x46, 0x01, 0x46, 0x68, 0x46, 0xF8,
+	0xF7, 0x3C, 0xFD, 0x31, 0x46, 0x68, 0x46, 0x01, 0xE0, 0x0B, 0xE0, 0x0C, 0xE0, 0xF8, 0xF7, 0xBA,
+	0xFD, 0x02, 0x46, 0x31, 0x46, 0x68, 0x46, 0xF9, 0xF7, 0x37, 0xFB, 0x68, 0x46, 0xF6, 0xF7, 0xCD,
+	0xF9, 0x9B, 0xE7, 0x00, 0x20, 0x74, 0xE7, 0x01, 0x20, 0x00, 0x28, 0x01, 0xD0, 0xA4, 0x09, 0xA4,
+	0x01, 0x00, 0x26, 0xA9, 0x5D, 
+	0x00, 0x01, 0x61, 0x00, 0x80, 0xF0, 0x1C, 0xFF, 0xF7, 0x41, 0xF9, 0x76, 0x1C, 0xF6, 0xB2, 0x05,
+	0x2E, 0xF7, 0xD3, 0x71, 0x48, 0x80, 0x22, 0x01, 0x78, 0x51, 0x40, 0x01, 0x70, 0xC8, 0xB2, 0xC1,
+	0x09, 0xC9, 0x01, 0x21, 0x43, 0x40, 0x20, 0x01, 0x43, 0x02, 0x20, 0xFF, 0xF7, 0x2F, 0xF9, 0x01,
+	0xF0, 0x37, 0xF8, 0x01, 0xF0, 0x6D, 0xF8, 0xFE, 0xBD, 0x70, 0x47, 0xF8, 0xB5, 0x60, 0x48, 0x00,
+	0x25, 0x40, 0x1F, 0x00, 0x78, 0x5E, 0x4F, 0x00, 0x28, 0x05, 0xD0, 0x01, 0x28, 0x05, 0xD0, 0x02,
+	0x28, 0x16, 0xD1, 0x62, 0x4C, 0x02, 0xE0, 0x62, 0x4C, 0x00, 0xE0, 0x62, 0x4C, 0x20, 0x88, 0x66,
+	0x88, 0x21, 0x46, 0x02, 0xF0, 0xDD, 0xFB, 0xA1, 0x19, 0x09, 0x88, 0x88, 0x42, 0x00, 0xD0, 0x01,
+	0x25, 0x3D, 0x70, 0x02, 0x0A, 0x7A, 0x70, 0xB8, 0x70, 0x08, 0x0A, 0xF8, 0x70, 0x39, 0x71, 0xF8,
+	0xBD, 0x01, 0x20, 0x38, 0x70, 
+	0x00, 0x01, 0x62, 0x00, 0x80, 0xF8, 0xBD, 0xF8, 0xB5, 0x52, 0x48, 0x07, 0x68, 0x4C, 0x48, 0x40,
+	0x1F, 0x01, 0x88, 0x40, 0x88, 0x4E, 0xBA, 0x45, 0xBA, 0x53, 0x48, 0x00, 0x78, 0xC1, 0x00, 0x08,
+	0x1A, 0x80, 0x1C, 0x80, 0xB2, 0x86, 0x42, 0x01, 0xD2, 0x80, 0x1B, 0x00, 0xE0, 0x00, 0x20, 0x85,
+	0x42, 0x00, 0xD9, 0x05, 0x46, 0x00, 0x2D, 0x01, 0xD0, 0xFF, 0xF7, 0xD1, 0xFA, 0x00, 0x24, 0x08,
+	0xE0, 0xA0, 0x19, 0xC0, 0x19, 0x41, 0x7A, 0x20, 0x46, 0x08, 0x30, 0x80, 0xB2, 0xFF, 0xF7, 0xDE,
+	0xF8, 0x64, 0x1C, 0xAC, 0x42, 0xF4, 0xD3, 0x3A, 0x48, 0x00, 0x21, 0x01, 0x70, 0x06, 0x21, 0x41,
+	0x70, 0x29, 0x0A, 0x81, 0x70, 0xC5, 0x70, 0x01, 0x21, 0x01, 0x71, 0xF8, 0xBD, 0xF8, 0xB5, 0x35,
+	0x48, 0x33, 0x4E, 0x00, 0x78, 0x00, 0x28, 0x02, 0xD1, 0x01, 0x20, 0x30, 0x70, 0xF8, 0xBD, 0x30,
+	0x48, 0x40, 0x1F, 0x04, 0x78, 
+	0x00, 0x01, 0x63, 0x00, 0x80, 0x39, 0x48, 0x07, 0x88, 0x39, 0x48, 0x01, 0xF0, 0x7F, 0xFB, 0x00,
+	0x25, 0x00, 0x2C, 0x09, 0xD0, 0x01, 0x2C, 0x09, 0xD0, 0x02, 0x2C, 0x09, 0xD0, 0x03, 0x2C, 0x09,
+	0xD1, 0x84, 0x20, 0xFD, 0xF7, 0x07, 0xFD, 0x06, 0xE0, 0x81, 0x20, 0xFA, 0xE7, 0x88, 0x20, 0xF8,
+	0xE7, 0x82, 0x20, 0xF6, 0xE7, 0x01, 0x25, 0x38, 0x46, 0x01, 0xF0, 0x68, 0xFB, 0x35, 0x70, 0xF8,
+	0xBD, 0xF8, 0xB5, 0x1F, 0x48, 0x40, 0x1F, 0x01, 0x88, 0x07, 0x79, 0x4E, 0xBA, 0x41, 0x88, 0x00,
+	0x20, 0x4D, 0xBA, 0x00, 0x90, 0x09, 0x2D, 0x00, 0xD9, 0x09, 0x25, 0x01, 0x2F, 0x03, 0xD0, 0x02,
+	0x2F, 0x0F, 0xD0, 0x03, 0x2F, 0x21, 0xD1, 0x00, 0x24, 0x08, 0xE0, 0x20, 0x46, 0x08, 0x30, 0xFF,
+	0xF7, 0x91, 0xF8, 0x31, 0x19, 0x1F, 0x4A, 0x64, 0x1C, 0x50, 0x54, 0xE4, 0xB2, 0xA5, 0x42, 0xF4,
+	0xD8, 0x15, 0xE0, 0x08, 0x20, 
+	0x00, 0x01, 0x64, 0x00, 0x80, 0xFF, 0xF7, 0x86, 0xF8, 0x0D, 0x49, 0x15, 0x39, 0x08, 0x70, 0x00,
+	0x24, 0x08, 0xE0, 0x20, 0x46, 0x09, 0x30, 0xFF, 0xF7, 0x7D, 0xF8, 0x31, 0x19, 0x15, 0x4A, 0x64,
+	0x1C, 0x50, 0x54, 0xE4, 0xB2, 0xA5, 0x42, 0xF4, 0xD8, 0x01, 0xE0, 0x01, 0x20, 0x00, 0x90, 0x04,
+	0x48, 0x00, 0x99, 0x01, 0x70, 0x47, 0x70, 0x29, 0x0A, 0x81, 0x70, 0xC5, 0x70, 0xF8, 0xBD, 0x00,
+	0x00, 0x51, 0x02, 0x00, 0x20, 0xB6, 0x02, 0x00, 0x20, 0xCB, 0x02, 0x00, 0x20, 0x80, 0x02, 0x00,
+	0x20, 0x5A, 0x02, 0x00, 0x20, 0x28, 0x02, 0x00, 0x20, 0xCA, 0x02, 0x00, 0x20, 0x00, 0xEE, 0x00,
+	0x00, 0x00, 0xE6, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x18, 0x03, 0x00, 0x20, 0xD0, 0x02, 0x00,
+	0x20, 0x10, 0x27, 0x00, 0x00, 0xAA, 0x19, 0x00, 0x20, 0x70, 0xB5, 0xFF, 0xF7, 0x10, 0xF8, 0x01,
+	0x20, 0xFF, 0xF7, 0x37, 0xF8, 
+	0x00, 0x01, 0x65, 0x00, 0x80, 0xFF, 0xF7, 0x00, 0xF8, 0x01, 0x24, 0x65, 0x02, 0xA0, 0xB2, 0x00,
+	0x21, 0xFF, 0xF7, 0x3C, 0xF8, 0x64, 0x1C, 0xAC, 0x42, 0xF8, 0xD3, 0x61, 0x4D, 0x00, 0x24, 0x60,
+	0x00, 0x41, 0x19, 0x49, 0x78, 0x28, 0x5C, 0xFF, 0xF7, 0x31, 0xF8, 0x64, 0x1C, 0x2E, 0x2C, 0xF6,
+	0xD3, 0xFF, 0x24, 0x01, 0x34, 0xA1, 0x78, 0x1C, 0x20, 0xFF, 0xF7, 0x28, 0xF8, 0xE1, 0x78, 0x1D,
+	0x20, 0xFF, 0xF7, 0x24, 0xF8, 0x57, 0x48, 0x81, 0x88, 0x1E, 0x20, 0xFF, 0xF7, 0x29, 0xF8, 0x55,
+	0x4C, 0x23, 0x20, 0x20, 0x34, 0x21, 0x8B, 0xFF, 0xF7, 0x23, 0xF8, 0xA1, 0x7E, 0x25, 0x20, 0xFF,
+	0xF7, 0x15, 0xF8, 0xE1, 0x7E, 0x26, 0x20, 0xFF, 0xF7, 0x11, 0xF8, 0x21, 0x7F, 0x27, 0x20, 0xFF,
+	0xF7, 0x0D, 0xF8, 0x61, 0x7F, 0x28, 0x20, 0xFF, 0xF7, 0x09, 0xF8, 0xA1, 0x7F, 0x29, 0x20, 0xFF,
+	0xF7, 0x05, 0xF8, 0xE1, 0x7F, 
+	0x00, 0x01, 0x66, 0x00, 0x80, 0x2A, 0x20, 0xFF, 0xF7, 0x01, 0xF8, 0x47, 0x4C, 0x60, 0x7A, 0x22,
+	0x7A, 0x01, 0x02, 0x11, 0x43, 0x2D, 0x20, 0xFF, 0xF7, 0x03, 0xF8, 0x44, 0x48, 0x01, 0x88, 0x32,
+	0x20, 0xFE, 0xF7, 0xFE, 0xFF, 0x60, 0x7B, 0x22, 0x7B, 0x01, 0x02, 0x11, 0x43, 0x36, 0x20, 0xFE,
+	0xF7, 0xF7, 0xFF, 0xE0, 0x7B, 0xA2, 0x7B, 0x01, 0x02, 0x11, 0x43, 0x38, 0x20, 0xFE, 0xF7, 0xF0,
+	0xFF, 0x3B, 0x4D, 0x68, 0x69, 0x3B, 0x4C, 0x01, 0x28, 0x06, 0xD1, 0xE0, 0x69, 0xC1, 0xB2, 0x34,
+	0x20, 0xFE, 0xF7, 0xDC, 0xFF, 0x20, 0x6A, 0x05, 0xE0, 0x20, 0x6A, 0xC1, 0xB2, 0x34, 0x20, 0xFE,
+	0xF7, 0xD5, 0xFF, 0xE0, 0x69, 0xC1, 0xB2, 0x35, 0x20, 0xFE, 0xF7, 0xD0, 0xFF, 0xE8, 0x68, 0x81,
+	0xB2, 0x3A, 0x20, 0xFE, 0xF7, 0xD5, 0xFF, 0x28, 0x69, 0x81, 0xB2, 0x3C, 0x20, 0xFE, 0xF7, 0xD0,
+	0xFF, 0x2D, 0x48, 0x01, 0x78, 
+	0x00, 0x01, 0x67, 0x00, 0x80, 0x40, 0x20, 0xFE, 0xF7, 0xC1, 0xFF, 0x00, 0xF0, 0x61, 0xF8, 0x2B,
+	0x4D, 0x2B, 0x4E, 0x28, 0x78, 0xC1, 0x00, 0x08, 0x1A, 0x31, 0x88, 0x40, 0x18, 0x08, 0x38, 0x81,
+	0xB2, 0x43, 0x20, 0xFE, 0xF7, 0xBD, 0xFF, 0xE0, 0x6A, 0xC1, 0xB2, 0x45, 0x20, 0xFE, 0xF7, 0xAE,
+	0xFF, 0x30, 0x88, 0xC1, 0xB2, 0x46, 0x20, 0xFE, 0xF7, 0xA9, 0xFF, 0x22, 0x48, 0x00, 0x88, 0x41,
+	0x06, 0x02, 0x06, 0xC9, 0x0F, 0xD2, 0x0F, 0x49, 0x00, 0x92, 0x00, 0x80, 0x06, 0x0A, 0x43, 0xC0,
+	0x0F, 0xC1, 0x00, 0x11, 0x43, 0x47, 0x20, 0xFE, 0xF7, 0x99, 0xFF, 0x29, 0x78, 0x48, 0x20, 0xFE,
+	0xF7, 0x95, 0xFF, 0x19, 0x4D, 0x00, 0x24, 0x28, 0x19, 0x01, 0x79, 0x20, 0x46, 0x5B, 0x30, 0x80,
+	0xB2, 0xFE, 0xF7, 0x8C, 0xFF, 0x64, 0x1C, 0x20, 0x2C, 0xF5, 0xD3, 0x14, 0x4D, 0x00, 0x24, 0x28,
+	0x19, 0x01, 0x79, 0x20, 0x46, 
+	0x00, 0x01, 0x68, 0x00, 0x80, 0x7B, 0x30, 0x80, 0xB2, 0xFE, 0xF7, 0x80, 0xFF, 0x64, 0x1C, 0x40,
+	0x2C, 0xF5, 0xD3, 0x70, 0xBD, 0x10, 0xB5, 0x01, 0xF0, 0x69, 0xFA, 0x10, 0xBD, 0x70, 0x47, 0x00,
+	0x00, 0x40, 0xDF, 0x00, 0x00, 0x40, 0xF1, 0xFF, 0x0F, 0x00, 0xE6, 0x00, 0x00, 0xC8, 0x02, 0x00,
+	0x20, 0xD0, 0xE7, 0x00, 0x00, 0xF0, 0xE9, 0x00, 0x00, 0x8E, 0x01, 0x00, 0x20, 0x18, 0x03, 0x00,
+	0x20, 0x74, 0x02, 0x00, 0x20, 0x1A, 0x03, 0x00, 0x20, 0x00, 0xEE, 0x00, 0x00, 0x00, 0xFF, 0x00,
+	0x00, 0xFE, 0x48, 0xC0, 0x6A, 0x00, 0x28, 0x00, 0xD0, 0x01, 0x20, 0xFD, 0x49, 0x0B, 0x30, 0x88,
+	0x83, 0x70, 0x47, 0xF8, 0xB5, 0xFA, 0x4D, 0x00, 0x26, 0x2E, 0x84, 0xFF, 0xF7, 0xF1, 0xFF, 0xFE,
+	0xF7, 0x16, 0xFF, 0x09, 0x20, 0xFE, 0xF7, 0x3D, 0xFF, 0xFE, 0xF7, 0x06, 0xFF, 0x20, 0x21, 0x0A,
+	0x20, 0xFE, 0xF7, 0x44, 0xFF, 
+	0x00, 0x01, 0x69, 0x00, 0x80, 0x40, 0x21, 0x02, 0x20, 0xFE, 0xF7, 0x40, 0xFF, 0x00, 0x21, 0x03,
+	0x20, 0xFE, 0xF7, 0x3C, 0xFF, 0x00, 0x21, 0x04, 0x20, 0xFE, 0xF7, 0x38, 0xFF, 0x00, 0x21, 0x05,
+	0x20, 0xFE, 0xF7, 0x34, 0xFF, 0x00, 0x21, 0x06, 0x20, 0xFE, 0xF7, 0x30, 0xFF, 0x00, 0x21, 0x07,
+	0x20, 0xFE, 0xF7, 0x2C, 0xFF, 0x00, 0x21, 0x08, 0x20, 0xFE, 0xF7, 0x28, 0xFF, 0x00, 0x21, 0x09,
+	0x20, 0xFE, 0xF7, 0x24, 0xFF, 0x0B, 0x24, 0x01, 0x27, 0x7F, 0x02, 0xA0, 0xB2, 0x00, 0x21, 0xFE,
+	0xF7, 0x1D, 0xFF, 0x64, 0x1C, 0xBC, 0x42, 0xF8, 0xD3, 0x01, 0xF0, 0xA8, 0xFA, 0xAE, 0x74, 0x00,
+	0x20, 0xDC, 0x49, 0x2E, 0x74, 0x0F, 0x22, 0x43, 0x00, 0x40, 0x1C, 0xC0, 0xB2, 0xCA, 0x54, 0x0B,
+	0x28, 0xF9, 0xD3, 0xD9, 0x48, 0x00, 0x78, 0x00, 0x28, 0x04, 0xD0, 0xFD, 0xF7, 0xCD, 0xFA, 0x00,
+	0x20, 0xFE, 0xF7, 0x5F, 0xFD, 
+	0x00, 0x01, 0x6A, 0x00, 0x80, 0xD5, 0x49, 0xA8, 0x7B, 0x08, 0x70, 0xEE, 0x70, 0x01, 0x20, 0x28,
+	0x70, 0xD3, 0x48, 0xEE, 0x73, 0x06, 0x80, 0xD3, 0x48, 0x06, 0x80, 0x00, 0xF0, 0x52, 0xFD, 0x02,
+	0x20, 0x28, 0x73, 0x01, 0xF0, 0x47, 0xF9, 0x68, 0x62, 0xCF, 0x48, 0x40, 0x68, 0xCF, 0x49, 0x08,
+	0x60, 0x68, 0x8B, 0x01, 0xF0, 0xB3, 0xF9, 0xF8, 0xBD, 0xCD, 0x49, 0x00, 0x20, 0x08, 0x70, 0x90,
+	0xE7, 0xC3, 0x48, 0xC0, 0x7A, 0x70, 0x47, 0xF8, 0xB5, 0x01, 0x24, 0x01, 0xF0, 0x33, 0xF9, 0x06,
+	0x46, 0xC8, 0x48, 0xC9, 0x4F, 0x05, 0x78, 0xBE, 0x49, 0x00, 0x2D, 0x02, 0xD1, 0x38, 0x78, 0x40,
+	0x07, 0x00, 0xD4, 0x4E, 0x62, 0xC8, 0x7A, 0x01, 0x28, 0x05, 0xD1, 0xC8, 0x7B, 0x05, 0x43, 0x3C,
+	0xD1, 0x00, 0xF0, 0x27, 0xFD, 0x39, 0xE0, 0xC1, 0x4A, 0x02, 0x28, 0x13, 0xD1, 0x00, 0x2D, 0x2B,
+	0xD1, 0x38, 0x78, 0x40, 0x07, 
+	0x00, 0x01, 0x6B, 0x00, 0x80, 0x31, 0xD5, 0x48, 0x6A, 0xCB, 0x8A, 0x30, 0x1A, 0x98, 0x42, 0x2C,
+	0xD9, 0x03, 0x20, 0xC8, 0x72, 0x08, 0x8B, 0x48, 0x83, 0xD0, 0x6E, 0x00, 0x28, 0x25, 0xD0, 0xFE,
+	0xF7, 0x1D, 0xFD, 0x22, 0xE0, 0x03, 0x28, 0x1E, 0xD1, 0xB4, 0x48, 0xC0, 0x6E, 0x00, 0x28, 0x0D,
+	0xD0, 0xB3, 0x48, 0xC0, 0x7E, 0x01, 0x28, 0x09, 0xD1, 0x00, 0x24, 0x00, 0xF0, 0x02, 0xFD, 0xB0,
+	0x49, 0x00, 0x20, 0xC8, 0x76, 0xA2, 0x48, 0x46, 0x62, 0x00, 0xF0, 0xAA, 0xFD, 0xAB, 0x48, 0xC0,
+	0x6E, 0x00, 0x28, 0x05, 0xD1, 0x00, 0x2D, 0x03, 0xD0, 0x00, 0x24, 0x00, 0xF0, 0xF8, 0xFC, 0x04,
+	0xE0, 0x38, 0x78, 0x40, 0x07, 0x01, 0xD4, 0x00, 0x24, 0xC2, 0xE7, 0x20, 0x46, 0xF8, 0xBD, 0xF0,
+	0xB5, 0x97, 0x4A, 0x91, 0xB0, 0xD1, 0x79, 0xA3, 0x4F, 0x49, 0x43, 0x07, 0x91, 0x11, 0x7A, 0x49,
+	0x43, 0x06, 0x91, 0x39, 0x78, 
+	0x00, 0x01, 0x6C, 0x00, 0x80, 0x10, 0x91, 0x88, 0x42, 0x00, 0xD9, 0x08, 0x46, 0x00, 0x25, 0x29,
+	0x46, 0x01, 0xAA, 0xFF, 0x23, 0x53, 0x54, 0x49, 0x1C, 0xC9, 0xB2, 0x0E, 0x29, 0xF9, 0xD9, 0x00,
+	0x21, 0x90, 0x4C, 0x0F, 0xE0, 0xCA, 0x00, 0x96, 0x4B, 0x8A, 0x18, 0xD2, 0x18, 0xD2, 0x79, 0x01,
+	0x23, 0x12, 0x07, 0x12, 0x0F, 0x93, 0x40, 0x26, 0x88, 0x1D, 0x43, 0x1E, 0x43, 0x26, 0x80, 0x01,
+	0xAE, 0xB1, 0x54, 0x49, 0x1C, 0x81, 0x42, 0xED, 0xD3, 0x85, 0x48, 0x22, 0x88, 0x01, 0x88, 0x11,
+	0x40, 0x00, 0x24, 0x01, 0x80, 0x22, 0x46, 0x83, 0xE0, 0x7E, 0x4E, 0x51, 0x00, 0x70, 0x5C, 0xC7,
+	0x43, 0x3F, 0x07, 0x72, 0xD0, 0x83, 0x06, 0x9B, 0x0F, 0x03, 0x2B, 0x70, 0xD0, 0x00, 0x07, 0x00,
+	0x0F, 0x01, 0x23, 0x83, 0x40, 0x89, 0x19, 0x49, 0x78, 0x9D, 0x43, 0x8E, 0x46, 0x01, 0xA9, 0x09,
+	0x5C, 0x9C, 0x46, 0xFF, 0x29, 
+	0x00, 0x01, 0x6D, 0x00, 0x80, 0x0C, 0xD1, 0x61, 0x00, 0x73, 0x46, 0x8F, 0x19, 0x7B, 0x70, 0x30,
+	0x23, 0x18, 0x43, 0x73, 0x4B, 0x70, 0x54, 0x19, 0x88, 0x60, 0x46, 0x81, 0x43, 0x19, 0x80, 0x52,
+	0xE0, 0x63, 0x00, 0x6C, 0x4E, 0x0F, 0x93, 0x9B, 0x19, 0x59, 0x70, 0xCB, 0x00, 0x74, 0x4E, 0xCB,
+	0x18, 0x9E, 0x19, 0x0E, 0x96, 0x73, 0x79, 0x37, 0x79, 0x1E, 0x02, 0x3E, 0x43, 0x65, 0x4F, 0x73,
+	0x46, 0x9B, 0x00, 0x7A, 0x37, 0x0D, 0x96, 0xFF, 0x5A, 0x0C, 0x97, 0xF6, 0x1B, 0x05, 0x96, 0x0E,
+	0x9E, 0x9E, 0x46, 0xF7, 0x78, 0xB3, 0x78, 0x3E, 0x02, 0x1E, 0x43, 0x5E, 0x4F, 0x73, 0x46, 0x7A,
+	0x37, 0xDB, 0x19, 0x0B, 0x96, 0x0A, 0x93, 0x5B, 0x88, 0x67, 0x46, 0xF3, 0x1A, 0x05, 0x9E, 0x5B,
+	0x43, 0x76, 0x43, 0xF3, 0x18, 0x56, 0x4E, 0x9E, 0x46, 0x36, 0x8C, 0x06, 0x9B, 0x09, 0x96, 0x37,
+	0x42, 0x00, 0xD1, 0x07, 0x9B, 
+	0x00, 0x01, 0x6E, 0x00, 0x80, 0x73, 0x45, 0x12, 0xD8, 0x20, 0x23, 0x18, 0x43, 0x51, 0x4E, 0x0F,
+	0x9B, 0xF0, 0x54, 0x88, 0x00, 0x31, 0x46, 0x7A, 0x31, 0x0D, 0x9B, 0x0B, 0x52, 0x40, 0x18, 0x0B,
+	0x9B, 0x43, 0x80, 0x09, 0x99, 0x60, 0x46, 0x4A, 0x4B, 0x08, 0x43, 0x18, 0x84, 0x0B, 0xE0, 0x49,
+	0x4E, 0x0F, 0x9B, 0xF0, 0x54, 0x33, 0x46, 0x7A, 0x33, 0x88, 0x00, 0x0C, 0x9E, 0x1E, 0x52, 0x0A,
+	0x99, 0xC0, 0x18, 0x49, 0x88, 0x41, 0x80, 0x64, 0x1C, 0x09, 0xE0, 0x0D, 0xE0, 0xFF, 0xE7, 0x00,
+	0x07, 0x00, 0x0F, 0x01, 0x23, 0x42, 0x49, 0x83, 0x40, 0x08, 0x88, 0x98, 0x43, 0x08, 0x80, 0x52,
+	0x1C, 0x10, 0x98, 0x82, 0x42, 0x00, 0xD2, 0x77, 0xE7, 0x00, 0x26, 0x38, 0xE0, 0xE8, 0x07, 0x33,
+	0xD0, 0x01, 0xA8, 0x87, 0x5D, 0xF8, 0x00, 0x39, 0x18, 0x41, 0x48, 0x08, 0x18, 0x08, 0x90, 0xC1,
+	0x78, 0x83, 0x78, 0x0A, 0x02, 
+	0x00, 0x01, 0x6F, 0x00, 0x80, 0x41, 0x79, 0x00, 0x79, 0x09, 0x02, 0x1A, 0x43, 0x01, 0x43, 0x30,
+	0x46, 0x01, 0x23, 0xF5, 0xF7, 0x07, 0xFF, 0x00, 0x28, 0x1E, 0xD1, 0x10, 0x20, 0x32, 0x46, 0x02,
+	0x43, 0x2C, 0x49, 0x60, 0x00, 0x0A, 0x54, 0x40, 0x18, 0x47, 0x70, 0x08, 0x98, 0x29, 0x4A, 0x41,
+	0x79, 0x00, 0x79, 0x09, 0x02, 0x01, 0x43, 0xB8, 0x00, 0x7A, 0x32, 0x11, 0x52, 0x08, 0x99, 0xCB,
+	0x78, 0x8F, 0x78, 0x19, 0x02, 0x39, 0x43, 0x80, 0x18, 0x41, 0x80, 0x21, 0x49, 0x01, 0x22, 0x08,
+	0x8C, 0xB2, 0x40, 0x90, 0x43, 0x08, 0x84, 0x64, 0x1C, 0x76, 0x1C, 0xF6, 0xB2, 0x6D, 0x08, 0x00,
+	0x2D, 0x03, 0xD0, 0x28, 0x48, 0x00, 0x78, 0x84, 0x42, 0xC0, 0xD3, 0x19, 0x48, 0xFF, 0x22, 0x44,
+	0x74, 0x24, 0x48, 0x18, 0x4B, 0x0F, 0x25, 0x01, 0x78, 0x04, 0xE0, 0x60, 0x00, 0x1D, 0x54, 0xC0,
+	0x18, 0x42, 0x70, 0x64, 0x1C, 
+	0x00, 0x01, 0x70, 0x00, 0x80, 0x8C, 0x42, 0xF8, 0xD3, 0x11, 0xB0, 0xF0, 0xBD, 0xF1, 0xB5, 0x10,
+	0x4F, 0x82, 0xB0, 0x38, 0x78, 0x00, 0x28, 0x03, 0xD0, 0x00, 0x20, 0x38, 0x70, 0x01, 0x25, 0x00,
+	0xE0, 0x00, 0x25, 0x14, 0x48, 0x17, 0x49, 0x00, 0x78, 0x09, 0x78, 0x88, 0x42, 0x00, 0xD9, 0x08,
+	0x46, 0xC0, 0xB2, 0xFF, 0xF7, 0xDC, 0xFE, 0x14, 0x48, 0x02, 0x78, 0x50, 0x06, 0x40, 0x0F, 0x27,
+	0xD1, 0x12, 0x48, 0x00, 0x78, 0x00, 0x28, 0x24, 0xD0, 0x01, 0x20, 0x22, 0xE0, 0xF0, 0xE9, 0x00,
+	0x00, 0x58, 0x02, 0x00, 0x20, 0xCE, 0x19, 0x00, 0x20, 0xB6, 0x02, 0x00, 0x20, 0xDF, 0x01, 0x00,
+	0x20, 0x86, 0x00, 0x00, 0x20, 0x88, 0x00, 0x00, 0x20, 0x00, 0x04, 0x01, 0x40, 0xD4, 0x02, 0x00,
+	0x20, 0xCA, 0x02, 0x00, 0x20, 0xEE, 0x00, 0x00, 0x20, 0xCC, 0x02, 0x00, 0x20, 0x80, 0xE6, 0x00,
+	0x00, 0x88, 0x03, 0x00, 0x20, 
+	0x00, 0x01, 0x71, 0x00, 0x80, 0x18, 0x03, 0x00, 0x20, 0xDE, 0x01, 0x00, 0x20, 0xEF, 0x00, 0x00,
+	0x20, 0x00, 0x20, 0x79, 0x7C, 0xFE, 0x4B, 0x00, 0x28, 0x02, 0xD1, 0x52, 0x00, 0x0A, 0x43, 0x07,
+	0xE0, 0x20, 0x22, 0x0A, 0x43, 0x59, 0x7F, 0xC9, 0x06, 0x89, 0x0F, 0x03, 0x29, 0x00, 0xD1, 0x01,
+	0x25, 0x79, 0x78, 0x81, 0x42, 0x05, 0xD0, 0x59, 0x7F, 0xC9, 0x06, 0x89, 0x0F, 0x00, 0xD0, 0x01,
+	0x25, 0x78, 0x70, 0xD1, 0xB2, 0xB8, 0x8B, 0x00, 0xF0, 0x88, 0xFB, 0xB8, 0x8B, 0x40, 0x1C, 0x84,
+	0xB2, 0x78, 0x7C, 0xC1, 0x00, 0x08, 0x1A, 0xEF, 0x49, 0x00, 0x19, 0x09, 0x38, 0x09, 0x68, 0x00,
+	0x26, 0x48, 0x72, 0x3B, 0xE0, 0xEC, 0x49, 0x70, 0x00, 0x0A, 0x5C, 0x40, 0x18, 0x00, 0x92, 0x40,
+	0x78, 0x91, 0x06, 0x8A, 0x0F, 0x00, 0xD0, 0x01, 0x25, 0x89, 0x0F, 0x03, 0x29, 0x03, 0xD0, 0xC1,
+	0x00, 0x41, 0x18, 0xE6, 0x48, 
+	0x00, 0x01, 0x72, 0x00, 0x80, 0x03, 0xE0, 0xC1, 0x00, 0x41, 0x18, 0xE3, 0x48, 0x16, 0x30, 0x0F,
+	0x18, 0x78, 0x79, 0x3A, 0x79, 0x01, 0x02, 0x11, 0x43, 0x20, 0x46, 0x00, 0xF0, 0x63, 0xFB, 0xF8,
+	0x78, 0xBA, 0x78, 0x01, 0x02, 0xA0, 0x1C, 0x11, 0x43, 0x80, 0xB2, 0x00, 0xF0, 0x5B, 0xFB, 0x20,
+	0x1D, 0x39, 0x7A, 0x80, 0xB2, 0x00, 0xF0, 0x51, 0xFB, 0xD6, 0x4A, 0x61, 0x1D, 0x13, 0x68, 0xB8,
+	0x79, 0x89, 0xB2, 0x59, 0x18, 0x00, 0x9B, 0x0B, 0x70, 0xA1, 0x1D, 0x12, 0x68, 0x40, 0x07, 0x89,
+	0xB2, 0x40, 0x0F, 0x51, 0x18, 0xE4, 0x1D, 0x08, 0x70, 0xA4, 0xB2, 0x76, 0x1C, 0xD0, 0x48, 0x40,
+	0x7C, 0x86, 0x42, 0xBF, 0xD3, 0xCC, 0x48, 0x16, 0x30, 0x80, 0x79, 0x00, 0x07, 0x00, 0x0F, 0x02,
+	0x28, 0x05, 0xD1, 0xCA, 0x49, 0x89, 0x79, 0x09, 0x07, 0x09, 0x0F, 0x03, 0x29, 0x07, 0xD0, 0x03,
+	0x28, 0x0C, 0xD1, 0xC6, 0x49, 
+	0x00, 0x01, 0x73, 0x00, 0x80, 0x89, 0x79, 0x09, 0x07, 0x09, 0x0F, 0x02, 0x29, 0x06, 0xD1, 0xC3,
+	0x49, 0x89, 0x79, 0x09, 0x07, 0x09, 0x0F, 0x88, 0x42, 0x00, 0xD0, 0x01, 0x25, 0xC1, 0x4C, 0xC2,
+	0x4E, 0x20, 0x78, 0x31, 0x78, 0x88, 0x42, 0x00, 0xD3, 0x08, 0x46, 0xC1, 0x00, 0x42, 0x18, 0xBA,
+	0x48, 0xBA, 0x49, 0x16, 0x30, 0x02, 0xF0, 0x12, 0xF8, 0xB9, 0x49, 0x30, 0x78, 0x88, 0x74, 0x48,
+	0x7C, 0x0A, 0x7C, 0x90, 0x42, 0x00, 0xD0, 0x01, 0x25, 0xB5, 0x49, 0x08, 0x74, 0x88, 0x78, 0x00,
+	0x28, 0x4E, 0xD0, 0xB6, 0x48, 0x01, 0x90, 0xC0, 0x6A, 0x01, 0x25, 0x20, 0x78, 0xC1, 0x00, 0x09,
+	0x1A, 0xAF, 0x48, 0x80, 0x8B, 0x08, 0x18, 0x40, 0x1C, 0x84, 0xB2, 0x00, 0x26, 0xAC, 0x49, 0x70,
+	0x00, 0x28, 0x31, 0x09, 0x5A, 0xAE, 0x4A, 0x48, 0x05, 0x40, 0x0D, 0x90, 0x42, 0x38, 0xD0, 0x03,
+	0x22, 0x92, 0x03, 0x11, 0x40, 
+	0x00, 0x01, 0x74, 0x00, 0x80, 0x1C, 0xD0, 0x01, 0x22, 0xD2, 0x03, 0x89, 0x1A, 0x2B, 0xD1, 0x01,
+	0x99, 0x49, 0x6A, 0x81, 0x42, 0x27, 0xD9, 0x47, 0x00, 0xA6, 0x48, 0xC1, 0x5B, 0x20, 0x46, 0x00,
+	0xF0, 0xE1, 0xFA, 0xA5, 0x48, 0xC1, 0x5B, 0x20, 0x46, 0x32, 0x30, 0x80, 0xB2, 0x00, 0xF0, 0xDA,
+	0xFA, 0xA2, 0x48, 0xC1, 0x5B, 0x20, 0x46, 0x64, 0x30, 0x80, 0xB2, 0x00, 0xF0, 0xD3, 0xFA, 0x12,
+	0xE0, 0x01, 0x99, 0x89, 0x6A, 0x81, 0x42, 0x0E, 0xD9, 0x47, 0x00, 0x9D, 0x48, 0xC1, 0x5B, 0x20,
+	0x46, 0x00, 0xF0, 0xC8, 0xFA, 0x9B, 0x48, 0xC1, 0x5B, 0x20, 0x46, 0x32, 0x30, 0x80, 0xB2, 0x00,
+	0xF0, 0xC1, 0xFA, 0x99, 0x48, 0xE5, 0xE7, 0xA4, 0x1C, 0x76, 0x1C, 0xA4, 0xB2, 0x19, 0x2E, 0xBD,
+	0xD3, 0x96, 0x48, 0x40, 0x68, 0x96, 0x49, 0x02, 0x9A, 0x09, 0x68, 0x41, 0x1A, 0x00, 0x20, 0xD2,
+	0x06, 0x00, 0xD5, 0x04, 0x20, 
+	0x00, 0x01, 0x75, 0x00, 0x80, 0x02, 0x9A, 0x92, 0x06, 0x0E, 0xD5, 0x92, 0x48, 0x92, 0x4A, 0x00,
+	0x68, 0x12, 0x68, 0x50, 0x43, 0xFF, 0x22, 0x00, 0x0A, 0x2E, 0x32, 0x50, 0x43, 0x00, 0x0A, 0x81,
+	0x42, 0x01, 0xD2, 0x08, 0x20, 0x00, 0xE0, 0x0C, 0x20, 0x02, 0x99, 0x09, 0x06, 0x00, 0xD5, 0x10,
+	0x20, 0x02, 0x99, 0xC9, 0x05, 0x01, 0xD5, 0x1C, 0x20, 0x01, 0xE0, 0x1C, 0x28, 0x05, 0xD1, 0x78,
+	0x49, 0xCA, 0x78, 0x00, 0x2A, 0x08, 0xD1, 0x01, 0x22, 0x04, 0xE0, 0x75, 0x49, 0xCA, 0x78, 0x01,
+	0x2A, 0x02, 0xD1, 0x00, 0x22, 0xCA, 0x70, 0x01, 0x25, 0x71, 0x49, 0xE3, 0x23, 0x4A, 0x7B, 0x1A,
+	0x40, 0x02, 0x43, 0x4A, 0x73, 0x00, 0x2D, 0x02, 0xD0, 0x48, 0x7B, 0x40, 0x30, 0x48, 0x73, 0x48,
+	0x7B, 0xDC, 0x21, 0x08, 0x40, 0x67, 0x49, 0x09, 0x68, 0x88, 0x72, 0x28, 0x46, 0xFE, 0xBD, 0x10,
+	0xB5, 0x00, 0xF0, 0x77, 0xFA, 
+	0x00, 0x01, 0x76, 0x00, 0x80, 0x66, 0x49, 0xFF, 0x20, 0x08, 0x71, 0x10, 0xBD, 0xF8, 0xB5, 0x73,
+	0x49, 0x00, 0x20, 0xFA, 0xF7, 0x1A, 0xFB, 0x62, 0x4C, 0x00, 0x26, 0x26, 0x71, 0x01, 0x20, 0x01,
+	0xF0, 0x4D, 0xFE, 0x6F, 0x49, 0x10, 0x20, 0x08, 0x61, 0x00, 0x20, 0xFA, 0xF7, 0x2E, 0xFB, 0x00,
+	0x20, 0xFA, 0xF7, 0x1C, 0xFB, 0x04, 0x20, 0xE0, 0x72, 0x6A, 0x48, 0x00, 0x78, 0x60, 0x83, 0x80,
+	0xB2, 0x00, 0xF0, 0xAC, 0xFE, 0x03, 0x20, 0xFE, 0xF7, 0xE5, 0xFB, 0xE0, 0x74, 0xE0, 0x7C, 0x00,
+	0x28, 0x01, 0xD0, 0x01, 0x20, 0x20, 0x75, 0xFE, 0xF7, 0x75, 0xFA, 0x4D, 0x4D, 0x62, 0x4F, 0x20,
+	0x35, 0x1D, 0xE0, 0x00, 0xF0, 0xEF, 0xFE, 0xFE, 0xF7, 0x07, 0xFC, 0x60, 0x48, 0x81, 0x68, 0x89,
+	0x07, 0xFC, 0xD5, 0x72, 0xB6, 0x00, 0xF0, 0x1E, 0xFE, 0xFD, 0xF7, 0x3F, 0xF9, 0xC0, 0x07, 0x62,
+	0xB6, 0x23, 0xD1, 0x38, 0x78, 
+	0x00, 0x01, 0x77, 0x00, 0x80, 0x00, 0x28, 0x00, 0xD0, 0x20, 0x71, 0xFE, 0xF7, 0x0D, 0xFC, 0x28,
+	0x78, 0x7D, 0x21, 0xC9, 0x00, 0x48, 0x43, 0x00, 0xF0, 0x7C, 0xFF, 0x00, 0xF0, 0xA7, 0xFE, 0x20,
+	0x79, 0x00, 0x28, 0xDE, 0xD0, 0x20, 0x79, 0xFF, 0x28, 0x01, 0xD0, 0x00, 0xF0, 0x22, 0xFA, 0x26,
+	0x75, 0xE6, 0x74, 0xFE, 0xF7, 0x4E, 0xFA, 0x00, 0xF0, 0x04, 0xFA, 0x60, 0x8B, 0x00, 0xF0, 0x6E,
+	0xFE, 0x21, 0x79, 0x03, 0x20, 0xFE, 0xF7, 0xA2, 0xFB, 0xF8, 0xBD, 0xD2, 0xE7, 0x70, 0xB5, 0x48,
+	0x48, 0x40, 0x69, 0xC1, 0xB2, 0x35, 0x48, 0x01, 0x29, 0x04, 0xD1, 0xC1, 0x69, 0x00, 0x6A, 0xC9,
+	0x05, 0x0C, 0x0E, 0x03, 0xE0, 0x01, 0x6A, 0xC0, 0x69, 0xC9, 0x05, 0x0C, 0x0E, 0xC0, 0x05, 0x05,
+	0x0E, 0x2B, 0x4E, 0x40, 0x48, 0xB1, 0x7B, 0x00, 0x88, 0x8A, 0x06, 0x04, 0xD5, 0x42, 0x06, 0x02,
+	0xD4, 0xDF, 0x22, 0x11, 0x40, 
+	0x00, 0x01, 0x78, 0x00, 0x80, 0xB1, 0x73, 0xB1, 0x7B, 0xCA, 0x06, 0x04, 0xD5, 0x80, 0x06, 0x02,
+	0xD4, 0xEF, 0x20, 0x01, 0x40, 0xB1, 0x73, 0x71, 0x79, 0xFA, 0x20, 0xFA, 0x29, 0x00, 0xD9, 0x70,
+	0x71, 0xB1, 0x79, 0xFA, 0x29, 0x00, 0xD9, 0xB0, 0x71, 0x31, 0x8B, 0x70, 0x79, 0x81, 0x42, 0x00,
+	0xD2, 0x30, 0x83, 0x31, 0x8B, 0xB0, 0x79, 0x81, 0x42, 0x00, 0xD2, 0x30, 0x83, 0x31, 0x8B, 0x7D,
+	0x20, 0xC0, 0x00, 0x81, 0x42, 0x00, 0xD9, 0x30, 0x83, 0xF1, 0x8A, 0x2B, 0x48, 0x81, 0x42, 0x00,
+	0xD9, 0xF0, 0x82, 0x00, 0xF0, 0x87, 0xFF, 0x26, 0x48, 0x40, 0x30, 0xC1, 0x8A, 0xF2, 0x8B, 0x91,
+	0x42, 0x01, 0xD9, 0xC0, 0x8A, 0xF0, 0x83, 0xF0, 0x8B, 0x00, 0x28, 0x02, 0xD1, 0x01, 0x20, 0xF0,
+	0x83, 0x04, 0xE0, 0x7D, 0x21, 0x09, 0x01, 0x88, 0x42, 0x00, 0xD9, 0xF1, 0x83, 0x70, 0x7A, 0xA0,
+	0x42, 0x00, 0xD9, 0x74, 0x72, 
+	0x00, 0x01, 0x79, 0x00, 0x80, 0xB0, 0x7A, 0xA8, 0x42, 0x00, 0xD9, 0xB5, 0x72, 0x70, 0xBD, 0x00,
+	0x00, 0x00, 0xE6, 0x00, 0x00, 0x28, 0x02, 0x00, 0x20, 0xCE, 0x19, 0x00, 0x20, 0x88, 0x03, 0x00,
+	0x20, 0x58, 0x02, 0x00, 0x20, 0x18, 0x03, 0x00, 0x20, 0xEE, 0x00, 0x00, 0x20, 0xF0, 0xE9, 0x00,
+	0x00, 0xFF, 0x07, 0x00, 0x00, 0xCC, 0x07, 0x00, 0x20, 0x1C, 0x0E, 0x00, 0x20, 0x32, 0x0B, 0x00,
+	0x20, 0x2C, 0x05, 0x00, 0x20, 0x7C, 0x0B, 0x00, 0x20, 0x92, 0x08, 0x00, 0x20, 0x00, 0x04, 0x01,
+	0x40, 0xD4, 0x02, 0x00, 0x20, 0xE8, 0x02, 0x00, 0x20, 0xE4, 0x02, 0x00, 0x20, 0xFB, 0xBA, 0x00,
+	0x00, 0x00, 0x00, 0x14, 0x40, 0x00, 0xE7, 0x00, 0x00, 0xF6, 0x01, 0x00, 0x20, 0x00, 0x00, 0x12,
+	0x40, 0xD0, 0xE7, 0x00, 0x00, 0x1A, 0x03, 0x00, 0x20, 0x60, 0xEA, 0x00, 0x00, 0x70, 0xB5, 0x03,
+	0x20, 0xFE, 0xF7, 0x08, 0xFB, 
+	0x00, 0x01, 0x7A, 0x00, 0x80, 0x05, 0x46, 0x04, 0x20, 0xFE, 0xF7, 0x04, 0xFB, 0x02, 0x46, 0x01,
+	0x24, 0xF0, 0x48, 0x00, 0x21, 0xCB, 0x00, 0xC3, 0x5C, 0xAB, 0x42, 0x23, 0xD1, 0xC9, 0x00, 0x08,
+	0x18, 0x45, 0x68, 0x40, 0x78, 0x00, 0x24, 0x90, 0x42, 0x1A, 0xD1, 0x01, 0x2A, 0x0E, 0xD0, 0x02,
+	0x2A, 0x11, 0xD0, 0x04, 0x2A, 0x14, 0xD1, 0x07, 0x20, 0xFE, 0xF7, 0xFD, 0xFA, 0x06, 0x46, 0x05,
+	0x20, 0xFE, 0xF7, 0xF9, 0xFA, 0x00, 0x04, 0x30, 0x18, 0x28, 0x60, 0x0F, 0xE0, 0x05, 0x20, 0xFE,
+	0xF7, 0xE1, 0xFA, 0x28, 0x70, 0x0A, 0xE0, 0x05, 0x20, 0xFE, 0xF7, 0xED, 0xFA, 0x28, 0x80, 0x05,
+	0xE0, 0x01, 0x24, 0x03, 0xE0, 0x49, 0x1C, 0xC9, 0xB2, 0x0B, 0x29, 0xD3, 0xD9, 0xFF, 0xF7, 0x2E,
+	0xFF, 0x00, 0x2C, 0x04, 0xD0, 0x00, 0x21, 0x04, 0x20, 0xFE, 0xF7, 0xC8, 0xFA, 0x86, 0xE7, 0xD6,
+	0x48, 0xD6, 0x49, 0x00, 0x68, 
+	0x00, 0x01, 0x7B, 0x00, 0x80, 0x09, 0x78, 0x00, 0x22, 0x40, 0x18, 0xD5, 0x49, 0x20, 0x38, 0x40,
+	0x7F, 0x8A, 0x5E, 0xD4, 0x49, 0x80, 0x18, 0x48, 0x60, 0xD3, 0x4A, 0xD1, 0x7A, 0x90, 0x79, 0x01,
+	0x29, 0x01, 0xD1, 0x50, 0x79, 0x02, 0xE0, 0x03, 0x29, 0x00, 0xD1, 0x10, 0x8B, 0xCF, 0x49, 0x09,
+	0x68, 0x88, 0x42, 0xE3, 0xD0, 0x80, 0xB2, 0x00, 0xF0, 0x71, 0xFD, 0x67, 0xE7, 0x70, 0xB5, 0x02,
+	0x20, 0xFE, 0xF7, 0xA8, 0xFA, 0x04, 0x46, 0x40, 0x06, 0x5D, 0xD4, 0x01, 0xE0, 0x00, 0xF0, 0xBA,
+	0xFD, 0xFE, 0xF7, 0xBA, 0xFA, 0x00, 0x28, 0xF9, 0xD1, 0xA1, 0x06, 0x89, 0x0E, 0x05, 0x29, 0x2F,
+	0xD0, 0x08, 0xDC, 0x00, 0x29, 0x3F, 0xD0, 0x02, 0x29, 0x27, 0xD0, 0x03, 0x29, 0x39, 0xD1, 0xFF,
+	0xF7, 0x85, 0xFF, 0x38, 0xE0, 0x06, 0x29, 0x31, 0xD0, 0x25, 0x29, 0x32, 0xD1, 0xF7, 0xF7, 0xFC,
+	0xF9, 0x01, 0x46, 0x03, 0x20, 
+	0x00, 0x01, 0x7C, 0x00, 0x80, 0xFE, 0xF7, 0x8C, 0xFA, 0xF7, 0xF7, 0xF9, 0xF9, 0x01, 0x46, 0x05,
+	0x20, 0xFE, 0xF7, 0x7C, 0xFA, 0xF7, 0xF7, 0xF6, 0xF9, 0x01, 0x46, 0x06, 0x20, 0xFE, 0xF7, 0x76,
+	0xFA, 0xF7, 0xF7, 0xF3, 0xF9, 0x01, 0x46, 0x07, 0x20, 0xFE, 0xF7, 0x70, 0xFA, 0xF7, 0xF7, 0xF6,
+	0xF9, 0x01, 0x46, 0x08, 0x20, 0xFE, 0xF7, 0x6A, 0xFA, 0x15, 0xE0, 0x00, 0xF0, 0xEC, 0xF8, 0x12,
+	0xE0, 0xAB, 0x49, 0xAC, 0x48, 0x01, 0xF0, 0x2C, 0xFD, 0x05, 0x46, 0x00, 0x21, 0x03, 0x20, 0xFE,
+	0xF7, 0x5D, 0xFA, 0x29, 0x46, 0x04, 0x20, 0xFE, 0xF7, 0x63, 0xFA, 0x04, 0xE0, 0xFF, 0xF7, 0x56,
+	0xFE, 0x01, 0xE0, 0xA4, 0x09, 0xA4, 0x01, 0xA4, 0x48, 0x80, 0x22, 0x01, 0x78, 0x51, 0x40, 0x01,
+	0x70, 0xC8, 0xB2, 0xC1, 0x09, 0xC9, 0x01, 0x21, 0x43, 0x40, 0x20, 0x01, 0x43, 0x02, 0x20, 0xFE,
+	0xF7, 0x45, 0xFA, 0x01, 0x20, 
+	0x00, 0x01, 0x7D, 0x00, 0x80, 0x02, 0xE7, 0x00, 0x20, 0x00, 0xE7, 0xF8, 0xB5, 0x96, 0x4E, 0x9B,
+	0x48, 0xB1, 0x7B, 0x9B, 0x4D, 0x01, 0x70, 0x28, 0x78, 0xC0, 0x07, 0x01, 0xD0, 0xFE, 0xF7, 0x21,
+	0xFA, 0x98, 0x4F, 0x99, 0x4C, 0x38, 0x78, 0x80, 0x07, 0x15, 0xD5, 0x20, 0x78, 0x00, 0x28, 0x01,
+	0xD0, 0xFC, 0xF7, 0x9C, 0xFF, 0x00, 0xF0, 0x5E, 0xFD, 0x38, 0x78, 0xFD, 0x21, 0x08, 0x40, 0x38,
+	0x70, 0xC1, 0xB2, 0x00, 0x20, 0xFE, 0xF7, 0x22, 0xFA, 0x20, 0x78, 0x00, 0x28, 0x01, 0xD0, 0xFC,
+	0xF7, 0x23, 0xFF, 0xFF, 0xF7, 0xC6, 0xFA, 0x28, 0x78, 0xC0, 0x07, 0x01, 0xD0, 0xFE, 0xF7, 0x01,
+	0xFA, 0x28, 0x78, 0x00, 0x28, 0x03, 0xD1, 0x00, 0xF0, 0x53, 0xF9, 0xFE, 0xF7, 0x4B, 0xF9, 0x20,
+	0x78, 0x00, 0x28, 0x04, 0xD0, 0x30, 0x78, 0x00, 0x28, 0x01, 0xD1, 0x00, 0xF0, 0xC0, 0xF8, 0xFF,
+	0xF7, 0x5D, 0xFF, 0x00, 0x28, 
+	0x00, 0x01, 0x7E, 0x00, 0x80, 0x01, 0xD0, 0x01, 0x20, 0xF0, 0x73, 0x28, 0x78, 0x00, 0x07, 0x01,
+	0xD5, 0xFE, 0xF7, 0xE7, 0xF9, 0xF0, 0x7B, 0x00, 0x28, 0x04, 0xD0, 0x28, 0x78, 0x00, 0x28, 0x01,
+	0xD1, 0x00, 0xF0, 0xFE, 0xF8, 0xFE, 0xF7, 0x28, 0xFA, 0x78, 0x48, 0x01, 0x69, 0x04, 0x22, 0x91,
+	0x43, 0x01, 0x61, 0x77, 0x48, 0x81, 0x68, 0x89, 0x07, 0xFC, 0xD5, 0x20, 0x78, 0x00, 0x28, 0x10,
+	0xD0, 0x72, 0xB6, 0x00, 0xF0, 0x37, 0xFC, 0xFC, 0xF7, 0x58, 0xFF, 0x04, 0x46, 0xC0, 0x07, 0x30,
+	0xD1, 0x62, 0xB6, 0x28, 0x78, 0x80, 0x07, 0x01, 0xD5, 0xFE, 0xF7, 0xC3, 0xF9, 0x20, 0x46, 0xFF,
+	0xF7, 0x55, 0xFC, 0xF0, 0x73, 0xFE, 0xF7, 0x20, 0xFA, 0x61, 0x48, 0x20, 0x30, 0x00, 0x78, 0x7D,
+	0x21, 0xC9, 0x00, 0x48, 0x43, 0x00, 0xF0, 0x8D, 0xFD, 0x00, 0x28, 0x04, 0xD0, 0x28, 0x78, 0x40,
+	0x07, 0x01, 0xD5, 0xFE, 0xF7, 
+	0x00, 0x01, 0x7F, 0x00, 0x80, 0xAE, 0xF9, 0xFF, 0xF7, 0xDE, 0xFA, 0x04, 0x46, 0x28, 0x78, 0xC0,
+	0x09, 0x01, 0xD0, 0xFE, 0xF7, 0xA6, 0xF9, 0x00, 0x2C, 0x01, 0xD0, 0x00, 0xF0, 0xA7, 0xFC, 0x30,
+	0x7B, 0xF1, 0x7A, 0x88, 0x42, 0x04, 0xD0, 0x70, 0x8B, 0x00, 0xF0, 0x78, 0xFC, 0xF0, 0x7A, 0x30,
+	0x73, 0xF8, 0xBD, 0xBF, 0xF3, 0x50, 0x8F, 0xBF, 0xF3, 0x60, 0x8F, 0x30, 0xBF, 0x62, 0xB6, 0xBF,
+	0xE7, 0x70, 0x47, 0x49, 0x48, 0x02, 0x21, 0xC1, 0x72, 0x81, 0x79, 0x41, 0x83, 0x70, 0x47, 0x46,
+	0x48, 0x01, 0x21, 0xC1, 0x72, 0x41, 0x79, 0x41, 0x83, 0x70, 0x47, 0x4E, 0x4A, 0x12, 0x68, 0x10,
+	0x18, 0x01, 0x70, 0x70, 0x47, 0x4B, 0x4A, 0x12, 0x68, 0x10, 0x18, 0x0A, 0x0A, 0x02, 0x70, 0x41,
+	0x70, 0x70, 0x47, 0x10, 0xB5, 0x00, 0x20, 0xFA, 0xF7, 0xC0, 0xF8, 0x00, 0x20, 0x01, 0xF0, 0xDE,
+	0xFB, 0x45, 0x49, 0x10, 0x20, 
+	0x00, 0x01, 0x80, 0x00, 0x80, 0x08, 0x61, 0x00, 0x20, 0xFA, 0xF7, 0xBF, 0xF8, 0x43, 0x49, 0x00,
+	0x20, 0xFA, 0xF7, 0x9B, 0xF8, 0x10, 0xBD, 0x70, 0xB5, 0x03, 0x20, 0xFE, 0xF7, 0x7B, 0xF9, 0x01,
+	0x23, 0x2C, 0x4A, 0x00, 0x21, 0xCC, 0x00, 0x14, 0x5D, 0x84, 0x42, 0x1D, 0xD1, 0xC8, 0x00, 0x80,
+	0x18, 0x45, 0x78, 0x44, 0x68, 0x29, 0x46, 0x04, 0x20, 0xFE, 0xF7, 0x68, 0xF9, 0x01, 0x2D, 0x0D,
+	0xD0, 0x02, 0x2D, 0x0E, 0xD0, 0x04, 0x2D, 0x15, 0xD1, 0x24, 0x68, 0x05, 0x20, 0x21, 0x0C, 0xFE,
+	0xF7, 0x67, 0xF9, 0xA1, 0xB2, 0x07, 0x20, 0xFE, 0xF7, 0x63, 0xF9, 0x17, 0xE6, 0x21, 0x78, 0x05,
+	0x20, 0x0A, 0xE0, 0x21, 0x88, 0x05, 0x20, 0xF6, 0xE7, 0x49, 0x1C, 0xC9, 0xB2, 0x0B, 0x29, 0xD9,
+	0xD9, 0x00, 0x2B, 0xF2, 0xD0, 0x00, 0x21, 0x04, 0x20, 0xFE, 0xF7, 0x48, 0xF9, 0x06, 0xE6, 0x70,
+	0xB5, 0x24, 0x48, 0x4E, 0x26, 
+	0x00, 0x01, 0x81, 0x00, 0x80, 0x05, 0x68, 0x18, 0x48, 0x81, 0x78, 0x00, 0x29, 0x00, 0xD0, 0xE4,
+	0x26, 0x41, 0x7B, 0x20, 0x20, 0x01, 0x43, 0x0A, 0x20, 0xFE, 0xF7, 0x38, 0xF9, 0x01, 0xE0, 0x00,
+	0xF0, 0x51, 0xFC, 0xFE, 0xF7, 0x51, 0xF9, 0x00, 0x28, 0xF9, 0xD1, 0x0B, 0x24, 0x0B, 0x36, 0x05,
+	0xE0, 0x29, 0x5D, 0x20, 0x46, 0xFE, 0xF7, 0x2A, 0xF9, 0x64, 0x1C, 0xA4, 0xB2, 0xB4, 0x42, 0xF7,
+	0xD3, 0x69, 0x7A, 0x09, 0x20, 0xFE, 0xF7, 0x22, 0xF9, 0xA9, 0x7A, 0x0A, 0x20, 0xFE, 0xF7, 0x1E,
+	0xF9, 0xDC, 0xE5, 0x00, 0x00, 0x9C, 0xDF, 0x00, 0x00, 0xF0, 0x02, 0x00, 0x20, 0xEC, 0x02, 0x00,
+	0x20, 0xEE, 0x02, 0x00, 0x20, 0x00, 0xFF, 0x01, 0x40, 0x58, 0x02, 0x00, 0x20, 0xE8, 0x02, 0x00,
+	0x20, 0x00, 0xE6, 0x00, 0x00, 0xFC, 0x07, 0x00, 0x00, 0xCA, 0x02, 0x00, 0x20, 0xDF, 0x01, 0x00,
+	0x20, 0xCB, 0x02, 0x00, 0x20, 
+	0x00, 0x01, 0x82, 0x00, 0x80, 0xCC, 0x02, 0x00, 0x20, 0xB6, 0x02, 0x00, 0x20, 0x00, 0xED, 0x00,
+	0xE0, 0x00, 0x00, 0x12, 0x40, 0x28, 0x02, 0x00, 0x20, 0x00, 0x00, 0x14, 0x40, 0xE3, 0xA1, 0x00,
+	0x00, 0x70, 0xB5, 0xFE, 0xF7, 0x2F, 0xF8, 0x00, 0x20, 0xFE, 0xF7, 0xF4, 0xF8, 0xC0, 0x09, 0xC0,
+	0x01, 0xFF, 0x4E, 0x70, 0x70, 0x00, 0x20, 0x30, 0x70, 0xFE, 0x4C, 0x60, 0x7F, 0x80, 0x07, 0x80,
+	0x0F, 0x01, 0x28, 0x1A, 0xD0, 0x02, 0x28, 0x1D, 0xD1, 0xFE, 0xF7, 0xC2, 0xF8, 0x30, 0x24, 0x0B,
+	0x25, 0x00, 0xF0, 0xF8, 0xFB, 0x00, 0x20, 0xFE, 0xF7, 0xDD, 0xF8, 0x01, 0x46, 0xF2, 0x78, 0x21,
+	0x40, 0x91, 0x42, 0x07, 0xD1, 0x01, 0x46, 0x29, 0x42, 0x04, 0xD1, 0xC0, 0x09, 0x71, 0x78, 0xC0,
+	0x01, 0x88, 0x42, 0xED, 0xD0, 0xFE, 0xF7, 0x06, 0xF8, 0x70, 0xBD, 0x01, 0x20, 0x30, 0x70, 0x00,
+	0xF0, 0x19, 0xFB, 0xF0, 0x60, 
+	0x00, 0x01, 0x83, 0x00, 0x80, 0xFE, 0xF7, 0xA4, 0xF8, 0x20, 0x7F, 0x00, 0xF0, 0x91, 0xFC, 0xF1,
+	0xE7, 0xF8, 0xB5, 0xE7, 0x4C, 0x20, 0x78, 0x00, 0x28, 0x20, 0xD0, 0xE6, 0x48, 0xC1, 0x7F, 0x80,
+	0x7F, 0x0D, 0x02, 0x05, 0x43, 0x30, 0x26, 0x0B, 0x27, 0x00, 0xF0, 0xCC, 0xFB, 0x00, 0x20, 0xFE,
+	0xF7, 0xB1, 0xF8, 0x01, 0x46, 0xE2, 0x78, 0x31, 0x40, 0x91, 0x42, 0x0D, 0xD1, 0x01, 0x46, 0x39,
+	0x42, 0x0A, 0xD1, 0xC0, 0x09, 0x61, 0x78, 0xC0, 0x01, 0x88, 0x42, 0x05, 0xD1, 0x00, 0xF0, 0xF2,
+	0xFA, 0xE1, 0x68, 0x40, 0x1A, 0xA8, 0x42, 0xE7, 0xD9, 0x00, 0x20, 0x20, 0x70, 0xF8, 0xBD, 0x10,
+	0xB5, 0xFD, 0xF7, 0xFA, 0xFE, 0xD4, 0x4B, 0x00, 0x21, 0xD3, 0x4A, 0x5C, 0x33, 0x8C, 0x00, 0x04,
+	0x59, 0x10, 0xC2, 0x49, 0x1C, 0x89, 0xB2, 0x9A, 0x42, 0xF8, 0xD3, 0xCF, 0x4A, 0xCE, 0x4B, 0x64,
+	0x32, 0xE8, 0x33, 0x8C, 0x00, 
+	0x00, 0x01, 0x84, 0x00, 0x80, 0x04, 0x59, 0x10, 0xC2, 0x49, 0x1C, 0x89, 0xB2, 0x9A, 0x42, 0xF8,
+	0xD9, 0x8A, 0x00, 0xCA, 0x4B, 0x82, 0x58, 0xDA, 0x60, 0x49, 0x1C, 0x89, 0xB2, 0x8A, 0x00, 0x83,
+	0x58, 0xC7, 0x4A, 0x53, 0x60, 0x49, 0x1C, 0x09, 0x04, 0x89, 0x0B, 0x40, 0x58, 0xD0, 0x60, 0x10,
+	0xBD, 0xF8, 0xB5, 0x82, 0x00, 0x0C, 0x46, 0xC3, 0x48, 0x00, 0x27, 0x1C, 0x21, 0x15, 0x18, 0x29,
+	0x60, 0xC0, 0x4A, 0xA0, 0x00, 0x86, 0x18, 0xFF, 0x2C, 0x00, 0xD0, 0x31, 0x60, 0x0A, 0x20, 0xF9,
+	0xF7, 0x75, 0xFF, 0x10, 0x20, 0x28, 0x60, 0x23, 0x20, 0xF9, 0xF7, 0x70, 0xFF, 0xB6, 0x48, 0x01,
+	0x68, 0x02, 0x03, 0x11, 0x43, 0x01, 0x60, 0xC1, 0x68, 0x09, 0x06, 0xFC, 0xD5, 0x80, 0x21, 0xC1,
+	0x60, 0x00, 0x20, 0x28, 0x60, 0xFF, 0x2C, 0x00, 0xD0, 0x30, 0x60, 0xAF, 0x48, 0xC0, 0x30, 0xC0,
+	0x68, 0xAB, 0x49, 0xFF, 0x38, 
+	0x00, 0x01, 0x85, 0x00, 0x80, 0x06, 0x22, 0xFF, 0x38, 0x8A, 0x5E, 0x02, 0x38, 0x50, 0x43, 0x00,
+	0x28, 0x00, 0xDA, 0x40, 0x42, 0x09, 0x69, 0x88, 0x42, 0x00, 0xD9, 0x01, 0x27, 0x38, 0x46, 0xF8,
+	0xBD, 0x70, 0xB5, 0xFD, 0xF7, 0x99, 0xFE, 0xA2, 0x4C, 0xA7, 0x4A, 0x21, 0x89, 0x00, 0x20, 0x43,
+	0x00, 0xD3, 0x5A, 0x8B, 0x42, 0x03, 0xD8, 0x40, 0x1C, 0xC0, 0xB2, 0x20, 0x28, 0xF7, 0xD3, 0x20,
+	0x28, 0x01, 0xD1, 0x1F, 0x20, 0x01, 0xE0, 0x00, 0x28, 0x0C, 0xD0, 0x43, 0x00, 0x9D, 0x18, 0x20,
+	0x3D, 0xED, 0x8B, 0xD3, 0x5A, 0x4D, 0x1B, 0x59, 0x1A, 0xAD, 0xB2, 0x89, 0xB2, 0x8D, 0x42, 0x01,
+	0xD2, 0x40, 0x1E, 0xC0, 0xB2, 0x41, 0x00, 0x51, 0x5A, 0x21, 0x81, 0x53, 0x21, 0x93, 0x4A, 0x49,
+	0x06, 0xD1, 0x60, 0x91, 0x4D, 0x95, 0x49, 0x69, 0x61, 0x8F, 0x4A, 0x95, 0x49, 0x40, 0x32, 0x51,
+	0x62, 0x01, 0x04, 0x94, 0x48, 
+	0x00, 0x01, 0x86, 0x00, 0x80, 0x01, 0x43, 0x8C, 0x48, 0x80, 0x30, 0x81, 0x63, 0x92, 0x49, 0xC1,
+	0x60, 0xC1, 0x6B, 0x89, 0x09, 0x89, 0x01, 0xC1, 0x63, 0x87, 0x4E, 0x90, 0x48, 0xC0, 0x36, 0x70,
+	0x60, 0x03, 0x20, 0xB0, 0x60, 0x8E, 0x48, 0x30, 0x61, 0x8E, 0x48, 0x30, 0x62, 0x00, 0x21, 0xB1,
+	0x61, 0x29, 0x61, 0x8D, 0x48, 0x28, 0x60, 0x28, 0x68, 0x40, 0x00, 0xFC, 0xD4, 0x01, 0x22, 0x80,
+	0x48, 0xD2, 0x07, 0x42, 0x60, 0x89, 0x4A, 0xC2, 0x60, 0x7E, 0x4B, 0x00, 0x20, 0x82, 0x00, 0xD2,
+	0x18, 0x11, 0x60, 0x40, 0x1C, 0xC0, 0xB2, 0x41, 0x28, 0xF8, 0xD3, 0x28, 0x69, 0x80, 0x21, 0x88,
+	0x43, 0x28, 0x61, 0x70, 0x68, 0x78, 0x49, 0x00, 0x07, 0xC0, 0x0E, 0x40, 0x31, 0x08, 0x5E, 0x21,
+	0x89, 0x01, 0xF0, 0xAF, 0xFB, 0xE0, 0x80, 0x70, 0xBD, 0x70, 0xB5, 0xFD, 0xF7, 0x2D, 0xFE, 0x6E,
+	0x4B, 0x00, 0x21, 0x6D, 0x4A, 
+	0x00, 0x01, 0x87, 0x00, 0x80, 0x5C, 0x33, 0x10, 0xCA, 0x8D, 0x00, 0x49, 0x1C, 0x44, 0x51, 0x89,
+	0xB2, 0x9A, 0x42, 0xF8, 0xD3, 0x68, 0x4A, 0x68, 0x4B, 0x64, 0x32, 0xE8, 0x33, 0x10, 0xCA, 0x8D,
+	0x00, 0x49, 0x1C, 0x44, 0x51, 0x89, 0xB2, 0x9A, 0x42, 0xF8, 0xD9, 0x64, 0x4A, 0xD2, 0x68, 0x8B,
+	0x00, 0xC2, 0x50, 0x63, 0x4A, 0x49, 0x1C, 0x53, 0x68, 0x89, 0xB2, 0x8C, 0x00, 0x03, 0x51, 0x49,
+	0x1C, 0xD2, 0x68, 0x09, 0x04, 0x89, 0x0B, 0x42, 0x50, 0x70, 0xBD, 0xF0, 0xB5, 0x85, 0xB0, 0x00,
+	0x20, 0x02, 0x90, 0x58, 0x48, 0x20, 0x30, 0xC1, 0x79, 0x83, 0x79, 0x0A, 0x02, 0x54, 0x49, 0x1A,
+	0x43, 0x0A, 0x81, 0x42, 0x79, 0x03, 0x79, 0x10, 0x02, 0x18, 0x43, 0x08, 0x61, 0xFF, 0xF7, 0xC4,
+	0xFF, 0xFF, 0xF7, 0x56, 0xFF, 0x09, 0x21, 0x5E, 0x48, 0x01, 0xF0, 0x4D, 0xFB, 0x00, 0x25, 0x68,
+	0x1C, 0xC4, 0xB2, 0x03, 0x90, 
+	0x00, 0x01, 0x88, 0x00, 0x80, 0x29, 0xE0, 0xEE, 0x08, 0xE7, 0x08, 0x6A, 0x07, 0x01, 0x21, 0x52,
+	0x0F, 0x08, 0x46, 0x90, 0x40, 0xC0, 0xB2, 0x01, 0x90, 0x60, 0x07, 0x40, 0x0F, 0x81, 0x40, 0xC8,
+	0xB2, 0x54, 0x4A, 0x00, 0x90, 0x91, 0x5D, 0x01, 0x98, 0x01, 0x42, 0x14, 0xD0, 0xD0, 0x5D, 0x00,
+	0x99, 0x08, 0x42, 0x10, 0xD0, 0x21, 0x46, 0x28, 0x46, 0xFF, 0xF7, 0xFA, 0xFE, 0x00, 0x28, 0x0A,
+	0xD0, 0x4B, 0x48, 0x01, 0x9A, 0x81, 0x5D, 0x11, 0x43, 0x81, 0x55, 0xC1, 0x5D, 0x00, 0x9A, 0x11,
+	0x43, 0xC1, 0x55, 0x01, 0x20, 0x02, 0x90, 0x64, 0x1C, 0xE4, 0xB2, 0x41, 0x2C, 0xD3, 0xD3, 0x00,
+	0xF0, 0x71, 0xFA, 0x03, 0x98, 0xC5, 0xB2, 0x41, 0x2D, 0xC9, 0xD3, 0xFF, 0xF7, 0xB8, 0xFE, 0x02,
+	0x98, 0x05, 0xB0, 0xF0, 0xBD, 0xF8, 0xB5, 0x2F, 0x48, 0x00, 0x27, 0x20, 0x30, 0x41, 0x7A, 0x03,
+	0x7A, 0x0A, 0x02, 0x2B, 0x49, 
+	0x00, 0x01, 0x89, 0x00, 0x80, 0x1A, 0x43, 0x0A, 0x81, 0x42, 0x79, 0x03, 0x79, 0x10, 0x02, 0x18,
+	0x43, 0x08, 0x61, 0xFF, 0xF7, 0x71, 0xFF, 0xFF, 0xF7, 0x03, 0xFF, 0x09, 0x21, 0x34, 0x48, 0x01,
+	0xF0, 0xFA, 0xFA, 0x00, 0x24, 0xE5, 0x08, 0x61, 0x07, 0x49, 0x0F, 0x01, 0x20, 0x88, 0x40, 0xC6,
+	0xB2, 0x30, 0x48, 0x40, 0x5D, 0x30, 0x42, 0x0A, 0xD0, 0xFF, 0x21, 0x20, 0x46, 0xFF, 0xF7, 0xB8,
+	0xFE, 0x00, 0x28, 0x04, 0xD0, 0x2A, 0x48, 0x41, 0x5D, 0x31, 0x43, 0x41, 0x55, 0x01, 0x27, 0x64,
+	0x1C, 0xE4, 0xB2, 0x41, 0x2C, 0xE6, 0xD3, 0xFF, 0xF7, 0x82, 0xFE, 0x38, 0x46, 0xF8, 0xBD, 0xF8,
+	0xB5, 0x09, 0x21, 0x24, 0x48, 0x01, 0xF0, 0xD7, 0xFA, 0x00, 0x20, 0x22, 0x4D, 0x22, 0x4F, 0x23,
+	0x4E, 0x0A, 0xE0, 0x3A, 0x5C, 0xD1, 0x08, 0x54, 0x07, 0x64, 0x0F, 0x6B, 0x5C, 0x01, 0x22, 0xA2,
+	0x40, 0x13, 0x43, 0x40, 0x1C, 
+	0x00, 0x01, 0x8A, 0x00, 0x80, 0x6B, 0x54, 0xC0, 0xB2, 0x71, 0x6A, 0x81, 0x42, 0xF1, 0xD8, 0x19,
+	0x48, 0xFF, 0xF7, 0xB0, 0xFF, 0x16, 0x49, 0x04, 0x46, 0x09, 0x22, 0x88, 0x18, 0x01, 0xF0, 0x5E,
+	0xFA, 0x14, 0x48, 0xFF, 0xF7, 0x52, 0xFF, 0x04, 0x43, 0x11, 0x49, 0x09, 0x22, 0x08, 0x46, 0x27,
+	0xE0, 0xB4, 0x02, 0x00, 0x20, 0x00, 0xE6, 0x00, 0x00, 0x00, 0x00, 0x11, 0x40, 0x00, 0x00, 0x01,
+	0x40, 0x00, 0x00, 0x03, 0x40, 0x00, 0x04, 0x11, 0x40, 0xFC, 0xDF, 0x00, 0x00, 0xFF, 0x01, 0x3A,
+	0xC0, 0x3A, 0xA0, 0x00, 0xF0, 0x40, 0x03, 0x00, 0x40, 0x01, 0x00, 0x03, 0xC0, 0x72, 0x40, 0x00,
+	0x80, 0x10, 0x0D, 0xCA, 0x98, 0x00, 0x02, 0x00, 0x80, 0x00, 0x03, 0x00, 0xC0, 0x51, 0x08, 0x00,
+	0x00, 0xB3, 0x19, 0x00, 0x20, 0xAA, 0x19, 0x00, 0x20, 0x00, 0xEB, 0x00, 0x00, 0xF0, 0xE9, 0x00,
+	0x00, 0x12, 0x30, 0x01, 0xF0, 
+	0x00, 0x01, 0x8B, 0x00, 0x80, 0x2B, 0xFA, 0x09, 0x22, 0x71, 0x49, 0x72, 0x48, 0x01, 0xF0, 0x26,
+	0xFA, 0x20, 0x46, 0xF8, 0xBD, 0x10, 0xB5, 0x70, 0x48, 0x70, 0x4B, 0x02, 0x88, 0x18, 0x46, 0xD9,
+	0x1D, 0x94, 0x05, 0x80, 0x30, 0xF9, 0x31, 0x00, 0x2C, 0x10, 0xDB, 0xC4, 0x1D, 0xF9, 0x34, 0x64,
+	0x69, 0x00, 0x2C, 0x22, 0xD1, 0x5C, 0x68, 0xA4, 0x06, 0x1F, 0xD1, 0x9C, 0x6D, 0xA4, 0x06, 0x1C,
+	0xD1, 0xC4, 0x6A, 0xA4, 0x06, 0x19, 0xD1, 0x0C, 0x68, 0xA4, 0x06, 0x16, 0xD1, 0xD2, 0x05, 0x16,
+	0xD4, 0xDA, 0x68, 0xF0, 0x24, 0x22, 0x40, 0x40, 0x2A, 0x0F, 0xD8, 0x1A, 0x6E, 0x22, 0x40, 0x40,
+	0x2A, 0x0B, 0xD8, 0x40, 0x6B, 0x20, 0x40, 0x40, 0x28, 0x07, 0xD8, 0x88, 0x68, 0x20, 0x40, 0x40,
+	0x28, 0x03, 0xD8, 0xF4, 0xF7, 0xB7, 0xFF, 0x04, 0x28, 0x01, 0xD9, 0x01, 0x20, 0x10, 0xBD, 0x00,
+	0x20, 0x10, 0xBD, 0x10, 0xB5, 
+	0x00, 0x01, 0x8C, 0x00, 0x80, 0x56, 0x49, 0x57, 0x48, 0x01, 0xF0, 0x4A, 0xF9, 0x56, 0x49, 0x09,
+	0x88, 0x88, 0x42, 0x01, 0xD0, 0x01, 0x20, 0x10, 0xBD, 0x00, 0x20, 0x10, 0xBD, 0x10, 0xB5, 0x53,
+	0x48, 0x00, 0x24, 0x01, 0x68, 0xEF, 0x22, 0x11, 0x40, 0x01, 0x29, 0x00, 0xD1, 0x01, 0x24, 0xFF,
+	0x21, 0x01, 0x60, 0x01, 0xF0, 0x53, 0xF9, 0xFF, 0xF7, 0xE4, 0xFF, 0x00, 0x28, 0x11, 0xD1, 0x02,
+	0x20, 0x04, 0x43, 0xFF, 0xF7, 0xA7, 0xFF, 0x00, 0x28, 0x0B, 0xD1, 0x01, 0x20, 0x40, 0x02, 0x04,
+	0x43, 0xFF, 0xF7, 0x45, 0xFF, 0x00, 0x28, 0x04, 0xD1, 0xFF, 0x21, 0x20, 0x46, 0x05, 0x31, 0x08,
+	0x43, 0x10, 0xBD, 0x20, 0x46, 0x10, 0xBD, 0xFF, 0xB5, 0x00, 0x25, 0x81, 0xB0, 0x16, 0x46, 0x1F,
+	0x46, 0x2C, 0x46, 0x02, 0x98, 0xF6, 0xF7, 0x24, 0xFE, 0x16, 0x21, 0x48, 0x43, 0x3C, 0x49, 0x09,
+	0x5A, 0x01, 0x20, 0xA0, 0x40, 
+	0x00, 0x01, 0x8D, 0x00, 0x80, 0x01, 0x42, 0x0A, 0xD0, 0x21, 0x46, 0x02, 0x98, 0xFB, 0xF7, 0x00,
+	0xFB, 0xC0, 0xB2, 0x86, 0x42, 0x01, 0xD3, 0x87, 0x42, 0x01, 0xD9, 0x6D, 0x1C, 0xAD, 0xB2, 0x64,
+	0x1C, 0x08, 0x2C, 0xE6, 0xD3, 0x28, 0x46, 0xE3, 0xE6, 0xF8, 0xB5, 0x0D, 0x46, 0x00, 0x26, 0xFD,
+	0xF7, 0x93, 0xFC, 0x01, 0x21, 0x49, 0x02, 0x00, 0x90, 0x01, 0xF0, 0xED, 0xF9, 0x2E, 0x49, 0x28,
+	0x4C, 0x2C, 0x48, 0x20, 0x34, 0x08, 0x60, 0xE1, 0x7B, 0xA0, 0x7B, 0x2B, 0x46, 0x00, 0x9A, 0xFB,
+	0xF7, 0x91, 0xFF, 0x00, 0x25, 0x29, 0x4F, 0x08, 0xE0, 0xA3, 0x7A, 0xE2, 0x7A, 0x29, 0x46, 0x00,
+	0x98, 0xFF, 0xF7, 0xC1, 0xFF, 0x80, 0x19, 0x86, 0xB2, 0x6D, 0x1C, 0x38, 0x6B, 0xA8, 0x42, 0xF3,
+	0xD8, 0x38, 0x6B, 0xF9, 0x6B, 0x41, 0x18, 0x21, 0x48, 0x40, 0x30, 0x00, 0x68, 0x23, 0x7B, 0x09,
+	0x18, 0x62, 0x7B, 0x00, 0x98, 
+	0x00, 0x01, 0x8E, 0x00, 0x80, 0xFF, 0xF7, 0xAF, 0xFF, 0x80, 0x19, 0xC0, 0xB2, 0xF8, 0xBD, 0x70,
+	0xB5, 0x04, 0x46, 0x13, 0x49, 0x13, 0x48, 0x01, 0xF0, 0xC3, 0xF8, 0x01, 0x46, 0x05, 0x20, 0xFD,
+	0xF7, 0xFF, 0xFD, 0x11, 0x48, 0x01, 0x88, 0x07, 0x20, 0xFD, 0xF7, 0xFA, 0xFD, 0x14, 0x4D, 0xA8,
+	0x78, 0x00, 0x28, 0x09, 0xD0, 0x20, 0x46, 0xFF, 0xF7, 0x9D, 0xFE, 0x20, 0x46, 0xFF, 0xF7, 0x45,
+	0xFE, 0x00, 0x21, 0x20, 0x46, 0xFF, 0xF7, 0xB0, 0xFF, 0xA8, 0x88, 0xC0, 0xB2, 0x70, 0xBD, 0x00,
+	0x00, 0xAA, 0x19, 0x00, 0x20, 0xB3, 0x19, 0x00, 0x20, 0x1A, 0x03, 0x00, 0x20, 0xB0, 0xE8, 0x00,
+	0x00, 0x00, 0xE6, 0x00, 0x00, 0xFC, 0x07, 0x00, 0x00, 0xFC, 0xED, 0x00, 0x00, 0x00, 0x00, 0x02,
+	0x40, 0x00, 0xEC, 0x00, 0x00, 0xC6, 0x0E, 0x00, 0x20, 0xD0, 0x01, 0x00, 0x20, 0xF0, 0xE9, 0x00,
+	0x00, 0xB4, 0x02, 0x00, 0x20, 
+	0x00, 0x01, 0x8F, 0x00, 0x80, 0x70, 0xB5, 0xDF, 0x4C, 0x25, 0x69, 0x61, 0x69, 0x40, 0x1B, 0x00,
+	0x02, 0x0E, 0x46, 0x01, 0xF0, 0x94, 0xF9, 0xFF, 0x28, 0x09, 0xD9, 0x01, 0x0A, 0x0A, 0x46, 0x72,
+	0x43, 0x52, 0x19, 0x22, 0x61, 0xE2, 0x68, 0x09, 0x02, 0x52, 0x18, 0x40, 0x1A, 0xE2, 0x60, 0xE1,
+	0x68, 0x08, 0x18, 0x70, 0xBD, 0xD4, 0x48, 0x40, 0x68, 0xE4, 0xE7, 0xF8, 0xB5, 0xD3, 0x4C, 0x21,
+	0x88, 0xD0, 0x4D, 0x28, 0x88, 0x06, 0x46, 0x01, 0xF0, 0x7A, 0xF9, 0x21, 0x88, 0x41, 0x43, 0xB1,
+	0x42, 0x00, 0xD2, 0x40, 0x1C, 0x03, 0x28, 0x00, 0xD2, 0x03, 0x20, 0x21, 0x88, 0x6A, 0x69, 0x51,
+	0x43, 0x09, 0x0A, 0xCB, 0x4A, 0x49, 0x1E, 0x91, 0x42, 0x00, 0xD9, 0x11, 0x46, 0x06, 0x04, 0x0E,
+	0x43, 0xF9, 0xF7, 0x9C, 0xFC, 0xC7, 0x4B, 0x05, 0x46, 0x19, 0x68, 0x03, 0x27, 0xBF, 0x03, 0x01,
+	0x20, 0xB9, 0x43, 0x80, 0x03, 
+	0x00, 0x01, 0x90, 0x00, 0x80, 0x08, 0x43, 0x18, 0x60, 0x01, 0x20, 0xC0, 0x03, 0x08, 0x43, 0x18,
+	0x60, 0xBD, 0x4C, 0x20, 0x69, 0xFF, 0x22, 0x02, 0x32, 0x90, 0x43, 0xBF, 0x4A, 0x10, 0x43, 0x20,
+	0x61, 0xBE, 0x48, 0x22, 0x69, 0x02, 0x42, 0xFC, 0xD1, 0xBD, 0x4A, 0x04, 0x20, 0x10, 0x60, 0xA6,
+	0x60, 0xBC, 0x48, 0xE0, 0x60, 0xBC, 0x48, 0x20, 0x61, 0x46, 0x00, 0x20, 0x69, 0x32, 0x46, 0x82,
+	0x43, 0xFB, 0xD1, 0x39, 0x43, 0x19, 0x60, 0xB9, 0x49, 0x02, 0x20, 0xF9, 0xF7, 0x7E, 0xFC, 0x03,
+	0x21, 0x02, 0x20, 0xF9, 0xF7, 0x81, 0xFC, 0x02, 0x20, 0xF9, 0xF7, 0x88, 0xFC, 0xB4, 0x49, 0x20,
+	0x69, 0x08, 0x42, 0xFC, 0xD1, 0xB3, 0x49, 0x00, 0x20, 0x08, 0x70, 0xE8, 0xB2, 0xF9, 0xF7, 0x62,
+	0xFC, 0xF8, 0xBD, 0xA6, 0x49, 0x00, 0x28, 0x01, 0xD1, 0x01, 0x20, 0x05, 0xE0, 0x4B, 0x22, 0x12,
+	0x01, 0x90, 0x42, 0x01, 0xD9, 
+	0x00, 0x01, 0x91, 0x00, 0x80, 0x0A, 0x80, 0x00, 0xE0, 0x08, 0x80, 0x96, 0xE7, 0xA0, 0x49, 0x9D,
+	0x4A, 0x88, 0x42, 0x01, 0xD9, 0x11, 0x80, 0x00, 0xE0, 0x10, 0x80, 0x8E, 0xE7, 0x10, 0xB5, 0x04,
+	0x46, 0x40, 0x00, 0x20, 0x18, 0xC8, 0x28, 0x00, 0xD2, 0xC8, 0x20, 0xFF, 0xF7, 0xEF, 0xFF, 0x95,
+	0x49, 0x20, 0x46, 0x8C, 0x61, 0xFF, 0xF7, 0xDD, 0xFF, 0x10, 0xBD, 0x1C, 0xB5, 0x68, 0x46, 0x01,
+	0xF0, 0x33, 0xF8, 0x00, 0x28, 0xFA, 0xD1, 0x6B, 0x46, 0x19, 0x79, 0x01, 0x20, 0x80, 0x07, 0x21,
+	0x29, 0x02, 0xD3, 0x99, 0x49, 0x49, 0x8A, 0xC1, 0x60, 0x01, 0x68, 0x49, 0x00, 0x49, 0x08, 0x01,
+	0x60, 0x96, 0x48, 0x01, 0x69, 0x04, 0x22, 0x11, 0x43, 0x01, 0x61, 0x1C, 0xBD, 0x10, 0xB5, 0xFD,
+	0xF7, 0x30, 0xFD, 0xFD, 0xF7, 0x69, 0xFB, 0xFF, 0xF7, 0xE0, 0xFF, 0x72, 0xB6, 0x90, 0x48, 0x81,
+	0x68, 0x89, 0x07, 0xFC, 0xD5, 
+	0x00, 0x01, 0x92, 0x00, 0x80, 0x62, 0xB6, 0x72, 0xB6, 0x8A, 0x4C, 0x20, 0x78, 0x00, 0x28, 0x0B,
+	0xD1, 0x06, 0xE0, 0xBF, 0xF3, 0x50, 0x8F, 0xBF, 0xF3, 0x60, 0x8F, 0x30, 0xBF, 0x62, 0xB6, 0x72,
+	0xB6, 0x20, 0x78, 0x00, 0x28, 0xF5, 0xD0, 0x01, 0xE0, 0xFF, 0xF7, 0x47, 0xFF, 0x00, 0x20, 0x20,
+	0x70, 0x75, 0x48, 0x40, 0x68, 0x73, 0x49, 0x48, 0x60, 0x62, 0xB6, 0xFD, 0xF7, 0x49, 0xFB, 0xFD,
+	0xF7, 0x1C, 0xFD, 0x10, 0xBD, 0x70, 0xB5, 0xF9, 0xF7, 0xF1, 0xFB, 0x72, 0x4A, 0x11, 0x68, 0x03,
+	0x23, 0x9B, 0x03, 0x01, 0x24, 0x99, 0x43, 0xA4, 0x03, 0x0C, 0x43, 0x14, 0x60, 0x01, 0x24, 0xE4,
+	0x03, 0x0C, 0x43, 0x14, 0x60, 0x68, 0x4D, 0x77, 0x4C, 0x2C, 0x61, 0x19, 0x43, 0x11, 0x60, 0xF9,
+	0xF7, 0xE1, 0xFB, 0x70, 0xBD, 0x10, 0xB5, 0x72, 0xB6, 0x7D, 0x20, 0xC0, 0x00, 0xFF, 0xF7, 0x79,
+	0xFF, 0x00, 0xF0, 0xB2, 0xF8, 
+	0x00, 0x01, 0x93, 0x00, 0x80, 0x63, 0x4C, 0x06, 0x20, 0x60, 0x60, 0x00, 0xF0, 0xA6, 0xF8, 0x6E,
+	0x48, 0x40, 0x7F, 0x40, 0x06, 0x80, 0x0F, 0x01, 0xD1, 0x02, 0x20, 0x04, 0xE0, 0x01, 0x28, 0x01,
+	0xD1, 0x03, 0x20, 0x00, 0xE0, 0x01, 0x20, 0xFD, 0xF7, 0x00, 0xFD, 0xFF, 0xF7, 0x86, 0xFF, 0xBF,
+	0xF3, 0x50, 0x8F, 0xBF, 0xF3, 0x60, 0x8F, 0x30, 0xBF, 0xFD, 0xF7, 0x38, 0xFD, 0x00, 0xF0, 0x94,
+	0xF8, 0x62, 0x48, 0x60, 0x60, 0x00, 0xF0, 0x89, 0xF8, 0xFF, 0xF7, 0xBC, 0xFF, 0x62, 0xB6, 0x10,
+	0xBD, 0x70, 0xB5, 0xF9, 0xF7, 0xAB, 0xFB, 0x4F, 0x4C, 0x21, 0x68, 0x03, 0x25, 0xAD, 0x03, 0x01,
+	0x22, 0xA9, 0x43, 0x92, 0x03, 0x0A, 0x43, 0x22, 0x60, 0x01, 0x22, 0xD2, 0x03, 0x0A, 0x43, 0x22,
+	0x60, 0x56, 0x4A, 0x62, 0x60, 0x44, 0x4A, 0xD3, 0x68, 0x55, 0x4E, 0x33, 0x40, 0xD3, 0x60, 0x13,
+	0x69, 0x05, 0x26, 0x36, 0x04, 
+	0x00, 0x01, 0x94, 0x00, 0x80, 0x33, 0x43, 0x13, 0x61, 0x13, 0x69, 0x9B, 0x03, 0xFC, 0xD5, 0x29,
+	0x43, 0x21, 0x60, 0x3C, 0x4C, 0x00, 0x21, 0xA1, 0x60, 0xE1, 0x60, 0x51, 0x68, 0xC0, 0xB2, 0x21,
+	0x61, 0xF9, 0xF7, 0x88, 0xFB, 0x01, 0x20, 0x40, 0x03, 0x60, 0x61, 0x70, 0xBD, 0x70, 0xB5, 0x4A,
+	0x4B, 0x48, 0x48, 0x58, 0x61, 0x05, 0x20, 0x18, 0x61, 0x72, 0xB6, 0x33, 0x48, 0x41, 0x68, 0x42,
+	0x68, 0x8A, 0x42, 0xFC, 0xD0, 0x00, 0x21, 0x99, 0x61, 0x44, 0x68, 0x41, 0x68, 0xA1, 0x42, 0xFC,
+	0xD0, 0x98, 0x69, 0x40, 0x49, 0x89, 0x1C, 0x0D, 0x1A, 0x04, 0x20, 0x18, 0x61, 0x62, 0xB6, 0x20,
+	0x46, 0xFF, 0xF7, 0x90, 0xFE, 0x27, 0x4E, 0x00, 0x2D, 0xF0, 0x60, 0x34, 0x61, 0xB0, 0x60, 0x0D,
+	0xD0, 0x3A, 0x48, 0x7D, 0x21, 0x00, 0x78, 0xC9, 0x02, 0x48, 0x43, 0x29, 0x46, 0x01, 0xF0, 0x1F,
+	0xF8, 0x70, 0x61, 0x00, 0x28, 
+	0x00, 0x01, 0x95, 0x00, 0x80, 0x01, 0xD1, 0x01, 0x20, 0x70, 0x61, 0x70, 0xBD, 0x01, 0x20, 0x40,
+	0x03, 0xFA, 0xE7, 0x10, 0xB5, 0x04, 0x46, 0xFF, 0xF7, 0x8D, 0xFE, 0x1A, 0x49, 0x89, 0x68, 0x40,
+	0x1A, 0xA0, 0x42, 0x03, 0xD3, 0xFF, 0xF7, 0xC2, 0xFF, 0x01, 0x20, 0x10, 0xBD, 0x00, 0x20, 0x10,
+	0xBD, 0x00, 0x28, 0x11, 0xD0, 0x2A, 0x49, 0x88, 0x42, 0x00, 0xD9, 0x08, 0x46, 0x27, 0x49, 0x09,
+	0x78, 0x48, 0x43, 0x25, 0x49, 0x48, 0x61, 0x05, 0x20, 0x08, 0x61, 0x00, 0x20, 0x88, 0x61, 0x08,
+	0x69, 0xC0, 0x03, 0xFC, 0xD5, 0x04, 0x20, 0x08, 0x61, 0x70, 0x47, 0x0E, 0x49, 0x08, 0x68, 0x03,
+	0x22, 0x92, 0x03, 0x10, 0x43, 0x08, 0x60, 0x70, 0x47, 0x0A, 0x49, 0x08, 0x68, 0x03, 0x22, 0x92,
+	0x03, 0x90, 0x43, 0x01, 0x22, 0x92, 0x03, 0x02, 0x43, 0x0A, 0x60, 0x01, 0x22, 0xD2, 0x03, 0x10,
+	0x43, 0x08, 0x60, 0x70, 0x47, 
+	0x00, 0x01, 0x96, 0x00, 0x80, 0xD0, 0x02, 0x00, 0x20, 0x00, 0x04, 0x01, 0x40, 0x38, 0x02, 0x00,
+	0x20, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x0C, 0x0C, 0x04, 0x00, 0x0A, 0x0A, 0x00,
+	0x00, 0x80, 0xE2, 0x00, 0xE0, 0x0D, 0x02, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0xBB, 0xA4, 0x00,
+	0x00, 0x08, 0x08, 0x08, 0x00, 0x3A, 0x02, 0x00, 0x20, 0x40, 0xF1, 0xFF, 0x0F, 0x00, 0xED, 0x00,
+	0xE0, 0x00, 0x00, 0x12, 0x40, 0x01, 0x09, 0x01, 0x00, 0x00, 0xE6, 0x00, 0x00, 0x06, 0x00, 0x00,
+	0x80, 0xFF, 0xF7, 0xFE, 0x20, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xE0, 0x00, 0xE0, 0xEC, 0x02, 0x00,
+	0x20, 0x50, 0xC3, 0x00, 0x00, 0x10, 0xB5, 0x3A, 0x4B, 0x02, 0x24, 0x18, 0x78, 0x59, 0x68, 0xC0,
+	0x1E, 0xC0, 0xB2, 0x0A, 0x5C, 0x1C, 0x5F, 0x52, 0x42, 0xA2, 0x42, 0x00, 0xDD, 0x5A, 0x80, 0x09,
+	0x5C, 0xFF, 0x20, 0x40, 0x1A, 
+	0x00, 0x01, 0x97, 0x00, 0x80, 0x02, 0x21, 0x59, 0x5E, 0x88, 0x42, 0x00, 0xDA, 0x58, 0x80, 0x10,
+	0xBD, 0x30, 0x48, 0xC1, 0x7A, 0x24, 0x29, 0x01, 0xD2, 0x24, 0x20, 0x70, 0x47, 0xC1, 0x7A, 0x30,
+	0x29, 0x01, 0xD9, 0x30, 0x20, 0x70, 0x47, 0xC0, 0x7A, 0x70, 0x47, 0xF0, 0xB5, 0x2A, 0x4F, 0x00,
+	0x21, 0x3A, 0x7B, 0x7B, 0x7B, 0x8C, 0x46, 0x0E, 0x46, 0x14, 0x46, 0x1D, 0x46, 0x04, 0x21, 0x20,
+	0x2A, 0x00, 0xD0, 0x01, 0x26, 0x20, 0x2B, 0x01, 0xD0, 0x01, 0x22, 0x94, 0x46, 0x49, 0x1E, 0x0B,
+	0xD4, 0x4A, 0x00, 0x21, 0x4B, 0x8A, 0x18, 0xD7, 0x18, 0x7A, 0x78, 0xBB, 0x78, 0x3F, 0x78, 0x87,
+	0x42, 0xED, 0xD3, 0x14, 0x46, 0x1D, 0x46, 0xEA, 0xE7, 0x1C, 0x48, 0x00, 0x2E, 0x00, 0xD0, 0xC4,
+	0x61, 0x61, 0x46, 0x00, 0x29, 0x00, 0xD0, 0x05, 0x62, 0xF0, 0xBD, 0xF8, 0xB5, 0x04, 0x46, 0xC0,
+	0x1E, 0xC5, 0xB2, 0x20, 0x46, 
+	0x00, 0x01, 0x98, 0x00, 0x80, 0x18, 0x38, 0xC6, 0xB2, 0x15, 0x48, 0x11, 0x4F, 0x24, 0x2C, 0x0B,
+	0xD2, 0x14, 0x49, 0x89, 0x5D, 0x06, 0x46, 0x81, 0x60, 0x05, 0x20, 0xF9, 0xF7, 0x7F, 0xFA, 0x78,
+	0x68, 0x40, 0x5D, 0x70, 0x60, 0xF0, 0x20, 0x0A, 0xE0, 0x79, 0x68, 0x49, 0x5D, 0x05, 0x46, 0x41,
+	0x60, 0xF0, 0x20, 0xF9, 0xF7, 0x73, 0xFA, 0x0B, 0x48, 0x80, 0x5D, 0xA8, 0x60, 0x05, 0x20, 0xF9,
+	0xF7, 0x6D, 0xFA, 0x09, 0x49, 0x20, 0x46, 0x48, 0x43, 0xF9, 0xF7, 0xAC, 0xFA, 0xF8, 0xBD, 0x00,
+	0x00, 0xEC, 0x02, 0x00, 0x20, 0x00, 0xE6, 0x00, 0x00, 0xC0, 0xF1, 0xFF, 0x0F, 0x00, 0xFF, 0x00,
+	0x40, 0x00, 0xFF, 0x01, 0x40, 0x5C, 0xE0, 0x00, 0x00, 0x40, 0x42, 0x0F, 0x00, 0xF0, 0xB5, 0x01,
+	0x09, 0x00, 0x07, 0x00, 0x0F, 0x85, 0xB0, 0x00, 0x90, 0x01, 0x29, 0x01, 0xD8, 0x07, 0x28, 0x02,
+	0xD9, 0x00, 0x20, 0x05, 0xB0, 
+	0x00, 0x01, 0x99, 0x00, 0x80, 0xF0, 0xBD, 0x88, 0x00, 0x8A, 0x49, 0x0C, 0x58, 0xA0, 0x07, 0x03,
+	0x90, 0x0F, 0xD0, 0xE0, 0x07, 0x08, 0xD0, 0x25, 0x7A, 0x60, 0x7A, 0x00, 0x02, 0x05, 0x43, 0xA0,
+	0x7A, 0xE1, 0x7A, 0x09, 0x02, 0x08, 0x43, 0x01, 0xE0, 0x25, 0x89, 0x60, 0x89, 0x00, 0x04, 0x05,
+	0x43, 0x00, 0xE0, 0xA5, 0x68, 0x00, 0x98, 0x03, 0x9B, 0x41, 0x00, 0x42, 0x18, 0x07, 0x20, 0x90,
+	0x40, 0x29, 0x46, 0x81, 0x43, 0x02, 0x20, 0x90, 0x40, 0x00, 0x2B, 0x34, 0xD0, 0xE2, 0x07, 0x10,
+	0xD0, 0x08, 0x43, 0x20, 0x72, 0x01, 0x0A, 0x61, 0x72, 0x01, 0x0C, 0xA1, 0x72, 0x00, 0x0E, 0xE0,
+	0x72, 0x26, 0x7E, 0x60, 0x7E, 0x00, 0x02, 0x06, 0x43, 0xA0, 0x7E, 0xE1, 0x7E, 0x09, 0x02, 0x08,
+	0x43, 0x05, 0xE0, 0x08, 0x43, 0x20, 0x81, 0x00, 0x0C, 0x60, 0x81, 0x26, 0x8B, 0x60, 0x8B, 0x00,
+	0x04, 0x06, 0x43, 0x00, 0x98, 
+	0x00, 0x01, 0x9A, 0x00, 0x80, 0x01, 0x21, 0x81, 0x40, 0x30, 0x46, 0x03, 0x9A, 0x88, 0x43, 0x00,
+	0x2A, 0x37, 0xD0, 0xE2, 0x07, 0x13, 0xD0, 0x20, 0x76, 0x02, 0x0A, 0x62, 0x76, 0x02, 0x0C, 0xA2,
+	0x76, 0x00, 0x0E, 0xE0, 0x76, 0x27, 0x7D, 0x60, 0x7D, 0x00, 0x02, 0x07, 0x43, 0xA0, 0x7D, 0xE2,
+	0x7D, 0x12, 0x02, 0x10, 0x43, 0x08, 0xE0, 0x08, 0x43, 0xA0, 0x60, 0xA6, 0x69, 0xE1, 0xE7, 0x20,
+	0x83, 0x00, 0x0C, 0x60, 0x83, 0xA7, 0x8A, 0xE0, 0x8A, 0x00, 0x04, 0x07, 0x43, 0x00, 0x98, 0x0F,
+	0x22, 0x80, 0x00, 0x82, 0x40, 0x38, 0x46, 0x90, 0x43, 0x03, 0x9A, 0x00, 0x2A, 0x2B, 0xD0, 0xE2,
+	0x07, 0x12, 0xD0, 0x20, 0x75, 0x02, 0x0A, 0x62, 0x75, 0x02, 0x0C, 0xA2, 0x75, 0x00, 0x0E, 0xE0,
+	0x75, 0x20, 0x78, 0x62, 0x78, 0x12, 0x02, 0x10, 0x43, 0xA2, 0x78, 0xE3, 0x78, 0x1B, 0x02, 0x1A,
+	0x43, 0x07, 0xE0, 0xA0, 0x61, 
+	0x00, 0x01, 0x9B, 0x00, 0x80, 0x67, 0x69, 0xE1, 0xE7, 0xA0, 0x82, 0x00, 0x0C, 0xE0, 0x82, 0x20,
+	0x88, 0x62, 0x88, 0x12, 0x04, 0x10, 0x43, 0x01, 0x90, 0x01, 0x22, 0x88, 0x43, 0xA3, 0x07, 0x12,
+	0xD0, 0xE3, 0x07, 0x0B, 0xD0, 0x01, 0x43, 0x21, 0x70, 0x08, 0x0A, 0x60, 0x70, 0x08, 0x0C, 0xA0,
+	0x70, 0x08, 0x0E, 0xE0, 0x70, 0x09, 0xE0, 0x60, 0x61, 0x20, 0x68, 0xEC, 0xE7, 0x01, 0x43, 0x21,
+	0x80, 0x08, 0x0C, 0x60, 0x80, 0x01, 0xE0, 0x01, 0x43, 0x21, 0x60, 0x3B, 0x49, 0x08, 0x68, 0x02,
+	0x90, 0x80, 0x08, 0x80, 0x00, 0x10, 0x43, 0x08, 0x60, 0xC8, 0x20, 0xFF, 0xF7, 0x69, 0xFE, 0x03,
+	0x98, 0x00, 0x28, 0x0F, 0xD0, 0xE0, 0x07, 0x08, 0xD0, 0x20, 0x79, 0x61, 0x79, 0x09, 0x02, 0x08,
+	0x43, 0xA1, 0x79, 0xE2, 0x79, 0x12, 0x02, 0x11, 0x43, 0x01, 0xE0, 0xA0, 0x88, 0xE1, 0x88, 0x09,
+	0x04, 0x08, 0x43, 0x00, 0xE0, 
+	0x00, 0x01, 0x9C, 0x00, 0x80, 0x60, 0x68, 0x03, 0x99, 0x00, 0x29, 0x31, 0xD0, 0xE1, 0x07, 0x20,
+	0xD0, 0x25, 0x72, 0x29, 0x0A, 0x61, 0x72, 0x29, 0x0C, 0xA1, 0x72, 0x29, 0x0E, 0xE1, 0x72, 0x26,
+	0x76, 0x31, 0x0A, 0x61, 0x76, 0x31, 0x0C, 0xA1, 0x76, 0x31, 0x0E, 0xE1, 0x76, 0x27, 0x75, 0x39,
+	0x0A, 0x61, 0x75, 0x39, 0x0C, 0xA1, 0x75, 0x39, 0x0E, 0xE1, 0x75, 0x01, 0x99, 0x21, 0x70, 0x01,
+	0x99, 0x09, 0x0A, 0x61, 0x70, 0x01, 0x99, 0x09, 0x0C, 0xA1, 0x70, 0x01, 0x99, 0x09, 0x0E, 0xE1,
+	0x70, 0x13, 0xE0, 0x25, 0x81, 0x29, 0x0C, 0x61, 0x81, 0x26, 0x83, 0x31, 0x0C, 0x61, 0x83, 0xA7,
+	0x82, 0x39, 0x0C, 0xE1, 0x82, 0x01, 0x99, 0x21, 0x80, 0x01, 0x99, 0x09, 0x0C, 0x61, 0x80, 0x04,
+	0xE0, 0xA5, 0x60, 0xA6, 0x61, 0x67, 0x61, 0x01, 0x99, 0x21, 0x60, 0x0F, 0x4A, 0x02, 0x99, 0x11,
+	0x60, 0x00, 0x99, 0xC8, 0x40, 
+	0x00, 0x01, 0x9D, 0x00, 0x80, 0xC0, 0x07, 0xC0, 0x0F, 0xFB, 0xE6, 0x70, 0xB5, 0x0B, 0x4C, 0x60,
+	0x7D, 0xFF, 0xF7, 0xEC, 0xFE, 0xC5, 0x07, 0xED, 0x0F, 0xA0, 0x7D, 0xFF, 0xF7, 0xE7, 0xFE, 0xC0,
+	0x07, 0x86, 0x0F, 0x2E, 0x43, 0xE0, 0x7D, 0xFF, 0xF7, 0xE1, 0xFE, 0xC0, 0x07, 0x40, 0x0F, 0x30,
+	0x43, 0x70, 0xBD, 0x00, 0x00, 0x78, 0xE0, 0x00, 0x00, 0x00, 0x20, 0x14, 0x40, 0x20, 0xE6, 0x00,
+	0x00, 0xAC, 0x49, 0x00, 0x20, 0x08, 0x70, 0x70, 0x47, 0xAA, 0x49, 0x00, 0x28, 0x01, 0xD1, 0xAA,
+	0x48, 0x03, 0xE0, 0x01, 0x28, 0x02, 0xD1, 0xA8, 0x48, 0x08, 0x30, 0x48, 0x60, 0x70, 0x47, 0xF0,
+	0xB5, 0xA4, 0x4B, 0x93, 0xB0, 0x58, 0x68, 0x12, 0x90, 0x01, 0x78, 0x00, 0x20, 0x05, 0x46, 0x09,
+	0x90, 0x12, 0x98, 0x0A, 0x91, 0xC0, 0x88, 0x04, 0x90, 0x12, 0x98, 0x80, 0x88, 0x03, 0x90, 0x12,
+	0x98, 0x82, 0x78, 0x20, 0x21, 
+	0x00, 0x01, 0x9E, 0x00, 0x80, 0x08, 0x46, 0xD0, 0x40, 0x02, 0x90, 0x12, 0x98, 0x40, 0x78, 0xC1,
+	0x40, 0x01, 0x91, 0x0A, 0x99, 0x20, 0x20, 0x00, 0x29, 0x7C, 0xD0, 0x98, 0x49, 0xCA, 0x68, 0x52,
+	0x01, 0x40, 0x3A, 0x08, 0x92, 0x0A, 0x69, 0x52, 0x01, 0x40, 0x3A, 0x07, 0x92, 0xCA, 0x68, 0x52,
+	0x01, 0x10, 0x3A, 0x06, 0x92, 0x09, 0x69, 0x49, 0x01, 0x10, 0x39, 0x05, 0x91, 0x90, 0x49, 0x09,
+	0x78, 0x11, 0x91, 0x19, 0x46, 0x09, 0x78, 0x0E, 0x91, 0x11, 0xE0, 0xE9, 0x00, 0x6A, 0x18, 0x8D,
+	0x49, 0x51, 0x18, 0x10, 0x91, 0xCB, 0x79, 0x09, 0x9A, 0x06, 0x21, 0x4A, 0x43, 0x8A, 0x49, 0x0F,
+	0x93, 0x51, 0x18, 0x4C, 0x79, 0xA3, 0x42, 0x0A, 0xD0, 0x09, 0x99, 0x49, 0x1C, 0x09, 0x91, 0x09,
+	0x9A, 0x0E, 0x99, 0x8A, 0x42, 0x02, 0xD2, 0x11, 0x99, 0x8D, 0x42, 0xE6, 0xD3, 0xF3, 0xE0, 0x10,
+	0x9B, 0x5C, 0x79, 0x1E, 0x79, 
+	0x00, 0x01, 0x9F, 0x00, 0x80, 0x23, 0x02, 0x33, 0x43, 0x0D, 0x93, 0x10, 0x9B, 0xDC, 0x78, 0x9B,
+	0x78, 0x27, 0x02, 0x1F, 0x43, 0x10, 0x9B, 0x1C, 0x7A, 0x0D, 0x9B, 0x00, 0x2B, 0x0C, 0xD0, 0x77,
+	0x4B, 0xDB, 0x68, 0x0D, 0x9E, 0x5B, 0x1E, 0xB3, 0x42, 0x06, 0xD0, 0x00, 0x2F, 0x04, 0xD0, 0x73,
+	0x4B, 0x1B, 0x69, 0x5B, 0x1E, 0xBB, 0x42, 0x03, 0xD1, 0x0A, 0x9B, 0x80, 0x26, 0xB3, 0x43, 0x01,
+	0xE0, 0x12, 0x9B, 0x1B, 0x78, 0x0A, 0x93, 0x70, 0x4B, 0x9E, 0x5A, 0x4B, 0x88, 0x0C, 0x93, 0x09,
+	0x79, 0x0B, 0x91, 0x59, 0x09, 0x0A, 0x9B, 0x72, 0x09, 0x1B, 0x06, 0x4B, 0xD5, 0x0D, 0x98, 0xC9,
+	0x1B, 0x10, 0x1A, 0x40, 0x43, 0x49, 0x43, 0x0A, 0x18, 0x00, 0x21, 0x01, 0x20, 0xC0, 0x03, 0x00,
+	0xE0, 0x40, 0x08, 0x90, 0x42, 0xFC, 0xD8, 0x06, 0xE0, 0x09, 0x18, 0x0B, 0x46, 0x4B, 0x43, 0x93,
+	0x42, 0x00, 0xD9, 0x09, 0x1A, 
+	0x00, 0x01, 0xA0, 0x00, 0x80, 0x40, 0x08, 0x00, 0x28, 0xF6, 0xD1, 0x03, 0x98, 0x81, 0x42, 0x02,
+	0xD8, 0x01, 0x98, 0x12, 0xE0, 0xAC, 0xE0, 0x04, 0x98, 0x81, 0x42, 0x01, 0xD9, 0x02, 0x98, 0x0C,
+	0xE0, 0x03, 0x98, 0x01, 0x9A, 0x08, 0x1A, 0x02, 0x99, 0x89, 0x1A, 0x48, 0x43, 0x03, 0x9A, 0x04,
+	0x99, 0x89, 0x1A, 0x00, 0xF0, 0x44, 0xFD, 0x01, 0x99, 0x40, 0x18, 0x4F, 0x49, 0x09, 0x1F, 0x09,
+	0x7D, 0x01, 0x29, 0x08, 0xD1, 0x51, 0x49, 0xC9, 0x6B, 0x01, 0x29, 0x04, 0xD1, 0x50, 0x49, 0x09,
+	0x88, 0x89, 0x06, 0x00, 0xD5, 0x80, 0x08, 0x31, 0x46, 0x41, 0x43, 0x49, 0x09, 0x72, 0x1A, 0x0D,
+	0x99, 0x0C, 0x9B, 0x41, 0x43, 0x51, 0x18, 0x0C, 0x9A, 0x47, 0x43, 0x42, 0x43, 0x52, 0x09, 0x9A,
+	0x1A, 0xD2, 0x19, 0x02, 0xE0, 0x0D, 0x99, 0x49, 0x01, 0x7A, 0x01, 0x0A, 0x9B, 0x9B, 0x06, 0x0B,
+	0xD5, 0x12, 0x9B, 0xDB, 0x78, 
+	0x00, 0x01, 0xA1, 0x00, 0x80, 0x01, 0x2B, 0x0B, 0x9B, 0x02, 0xD1, 0xE3, 0x18, 0x5C, 0x08, 0x03,
+	0xE0, 0x5F, 0x00, 0xDB, 0x19, 0x1B, 0x19, 0x9C, 0x08, 0x0A, 0x9B, 0x5B, 0x06, 0x23, 0xD5, 0xB1,
+	0x42, 0x06, 0xD9, 0x08, 0x9B, 0x99, 0x42, 0x03, 0xD8, 0x10, 0x29, 0x01, 0xD9, 0x09, 0x1A, 0x07,
+	0xE0, 0xB1, 0x42, 0x05, 0xD2, 0x40, 0x29, 0x03, 0xD3, 0x06, 0x9B, 0x99, 0x42, 0x00, 0xD2, 0x09,
+	0x18, 0x0C, 0x9B, 0x9A, 0x42, 0x06, 0xD9, 0x07, 0x9B, 0x9A, 0x42, 0x03, 0xD8, 0x10, 0x2A, 0x01,
+	0xD9, 0x12, 0x1A, 0x08, 0xE0, 0x0C, 0x9B, 0x9A, 0x42, 0x05, 0xD2, 0x40, 0x2A, 0x03, 0xD3, 0x05,
+	0x9B, 0x9A, 0x42, 0x00, 0xD2, 0x12, 0x18, 0x0A, 0x9B, 0xDB, 0x06, 0x07, 0xD5, 0x0B, 0x9B, 0x9C,
+	0x42, 0x01, 0xD9, 0x64, 0x1E, 0x02, 0xE0, 0x9C, 0x42, 0x00, 0xD2, 0x64, 0x1C, 0x06, 0x23, 0x2E,
+	0x46, 0x5E, 0x43, 0x21, 0x4B, 
+	0x00, 0x01, 0xA2, 0x00, 0x80, 0x0F, 0x9F, 0xF3, 0x18, 0x5F, 0x71, 0x1F, 0x4F, 0xB9, 0x53, 0xC9,
+	0x02, 0x10, 0x9E, 0x09, 0x0C, 0x31, 0x71, 0x09, 0x0A, 0x71, 0x71, 0x5A, 0x80, 0xD1, 0x02, 0x10,
+	0x9A, 0x09, 0x0C, 0x91, 0x70, 0x09, 0x0A, 0xD1, 0x70, 0x1C, 0x71, 0x10, 0x99, 0x6D, 0x1C, 0x0C,
+	0x72, 0x1A, 0xE7, 0xE8, 0x00, 0x29, 0x18, 0x13, 0x48, 0x08, 0x18, 0x41, 0x79, 0x02, 0x79, 0x09,
+	0x02, 0x11, 0x43, 0x4B, 0x01, 0x29, 0x46, 0x06, 0x22, 0x51, 0x43, 0x0F, 0x4A, 0x53, 0x52, 0xC3,
+	0x78, 0x84, 0x78, 0x1B, 0x02, 0x23, 0x43, 0x5B, 0x01, 0x89, 0x18, 0x4B, 0x80, 0x02, 0x7A, 0x0A,
+	0x71, 0xC0, 0x79, 0x48, 0x71, 0x6D, 0x1C, 0x11, 0x98, 0x85, 0x42, 0xE2, 0xD3, 0x01, 0x49, 0x08,
+	0x70, 0x13, 0xB0, 0xF0, 0xBD, 0xF4, 0x02, 0x00, 0x20, 0x74, 0xE7, 0x00, 0x00, 0xD0, 0xE7, 0x00,
+	0x00, 0xEE, 0x00, 0x00, 0x20, 
+	0x00, 0x01, 0xA3, 0x00, 0x80, 0x88, 0x03, 0x00, 0x20, 0x74, 0x1A, 0x00, 0x20, 0x80, 0xE6, 0x00,
+	0x00, 0xF8, 0x01, 0x00, 0x20, 0xFC, 0xB5, 0x57, 0x4A, 0x00, 0x20, 0xD1, 0x78, 0x56, 0x4D, 0x49,
+	0x1C, 0xC9, 0xB2, 0xD1, 0x70, 0x01, 0x91, 0xEC, 0x6E, 0x11, 0x46, 0x0B, 0x78, 0x53, 0x49, 0x0A,
+	0x78, 0xD1, 0x1A, 0x8E, 0x46, 0x99, 0x1A, 0x00, 0x91, 0x29, 0x46, 0x60, 0x31, 0x01, 0x2C, 0x08,
+	0xD1, 0x9A, 0x42, 0x01, 0xD9, 0x72, 0x46, 0x00, 0xE0, 0x00, 0x9A, 0x09, 0x7C, 0x8A, 0x42, 0x12,
+	0xDD, 0x10, 0xE0, 0x49, 0x4C, 0xE7, 0x6E, 0x47, 0x4C, 0x65, 0x78, 0x48, 0x4C, 0x64, 0x78, 0x66,
+	0x1B, 0xB4, 0x46, 0x2E, 0x1B, 0x02, 0x2F, 0x0C, 0xD1, 0xAC, 0x42, 0x00, 0xD9, 0x66, 0x46, 0x49,
+	0x7C, 0x8E, 0x42, 0x00, 0xDD, 0x01, 0x20, 0x01, 0x99, 0x03, 0x29, 0x01, 0xD2, 0x40, 0x42, 0x40,
+	0xB2, 0xFC, 0xBD, 0x3D, 0x4F, 
+	0x00, 0x01, 0xA4, 0x00, 0x80, 0xFF, 0x6E, 0x03, 0x2F, 0xF5, 0xD1, 0x9A, 0x42, 0x01, 0xD9, 0x72,
+	0x46, 0x00, 0xE0, 0x00, 0x9A, 0x0B, 0x7C, 0x9A, 0x42, 0xEC, 0xDC, 0xE5, 0xE7, 0x35, 0x49, 0x48,
+	0x60, 0x36, 0x48, 0x02, 0x78, 0x0A, 0x70, 0x40, 0x78, 0x48, 0x70, 0x01, 0x20, 0xC8, 0x70, 0x70,
+	0x47, 0x30, 0x49, 0x00, 0x20, 0x48, 0x60, 0x08, 0x70, 0x48, 0x70, 0xC8, 0x70, 0x88, 0x70, 0x70,
+	0x47, 0xF8, 0xB5, 0x07, 0x46, 0x00, 0x20, 0x00, 0x90, 0xF7, 0xF7, 0x7A, 0xFC, 0x00, 0x26, 0xC0,
+	0xB2, 0x31, 0x46, 0x01, 0x28, 0x07, 0xD1, 0x29, 0x4A, 0xD3, 0x78, 0x05, 0x2B, 0x03, 0xD8, 0x92,
+	0x78, 0x05, 0x2A, 0x00, 0xD8, 0x01, 0x21, 0x23, 0x4D, 0x03, 0x24, 0xAA, 0x78, 0x00, 0x2A, 0x09,
+	0xD1, 0x00, 0x28, 0x3D, 0xD0, 0x00, 0x29, 0x31, 0xD0, 0x01, 0x20, 0xA8, 0x70, 0x38, 0x46, 0xFF,
+	0xF7, 0xCD, 0xFF, 0x35, 0xE0, 
+	0x00, 0x01, 0xA5, 0x00, 0x80, 0x1C, 0x4B, 0x60, 0x33, 0x01, 0x2A, 0x13, 0xD1, 0x00, 0x28, 0x2B,
+	0xD0, 0x68, 0x68, 0x5A, 0x8A, 0x38, 0x1A, 0x90, 0x42, 0x00, 0xD9, 0xAC, 0x70, 0x00, 0x29, 0x1D,
+	0xD0, 0xFF, 0xF7, 0x78, 0xFF, 0x01, 0x28, 0x02, 0xD1, 0x02, 0x20, 0xA8, 0x70, 0x20, 0xE0, 0x40,
+	0x1C, 0x1E, 0xD1, 0x13, 0xE0, 0x02, 0x2A, 0x13, 0xD1, 0x00, 0x28, 0x03, 0xD1, 0xAE, 0x70, 0x01,
+	0x20, 0x00, 0x90, 0x15, 0xE0, 0x68, 0x68, 0x5A, 0x8A, 0x38, 0x1A, 0x90, 0x42, 0x00, 0xD9, 0xAC,
+	0x70, 0x00, 0x29, 0x03, 0xD0, 0xFF, 0xF7, 0x5E, 0xFF, 0x01, 0x28, 0x09, 0xD0, 0xAC, 0x70, 0x07,
+	0xE0, 0x03, 0x2A, 0x03, 0xD1, 0x00, 0x28, 0x03, 0xD1, 0xAE, 0x70, 0x01, 0xE0, 0xFF, 0xF7, 0xA0,
+	0xFF, 0x00, 0x98, 0xF8, 0xBD, 0x88, 0x03, 0x00, 0x20, 0x80, 0xE6, 0x00, 0x00, 0x00, 0x01, 0x00,
+	0x20, 0xFB, 0x49, 0xFC, 0x4A, 
+	0x00, 0x01, 0xA6, 0x00, 0x80, 0x48, 0x60, 0x13, 0x78, 0x0B, 0x70, 0x52, 0x78, 0x4A, 0x70, 0x01,
+	0x22, 0xCA, 0x70, 0x08, 0x31, 0x48, 0x60, 0xF8, 0x48, 0x03, 0x78, 0x0B, 0x70, 0x40, 0x78, 0x48,
+	0x70, 0xCA, 0x70, 0x70, 0x47, 0xF2, 0x49, 0x00, 0x20, 0x48, 0x60, 0x08, 0x70, 0x48, 0x70, 0xC8,
+	0x70, 0x88, 0x70, 0x08, 0x31, 0x48, 0x60, 0x08, 0x70, 0x48, 0x70, 0xC8, 0x70, 0x88, 0x70, 0x70,
+	0x47, 0xF0, 0xB5, 0xEB, 0x4C, 0x00, 0x20, 0x84, 0x46, 0x0C, 0x3C, 0x20, 0x78, 0x00, 0x28, 0x04,
+	0xD0, 0x00, 0x20, 0x20, 0x70, 0x20, 0x71, 0x60, 0x71, 0x60, 0x70, 0xE6, 0x48, 0x01, 0x78, 0xE6,
+	0x48, 0x02, 0x78, 0x8E, 0x1A, 0x55, 0x1A, 0x91, 0x42, 0x01, 0xD9, 0x37, 0x46, 0x00, 0xE0, 0x2F,
+	0x46, 0xE2, 0x4B, 0x58, 0x7A, 0x87, 0x42, 0x45, 0xDB, 0x91, 0x42, 0x00, 0xD9, 0x35, 0x46, 0x9E,
+	0x7A, 0xB5, 0x42, 0x3F, 0xDC, 
+	0x00, 0x01, 0xA7, 0x00, 0x80, 0xDA, 0x4E, 0x30, 0x78, 0xC5, 0x1C, 0xA9, 0x42, 0x3A, 0xD8, 0xC0,
+	0x1E, 0x37, 0x46, 0x81, 0x42, 0x36, 0xDB, 0x35, 0x46, 0x08, 0x35, 0x28, 0x78, 0xD6, 0x49, 0xC6,
+	0x1C, 0xB2, 0x42, 0x2F, 0xD8, 0xC0, 0x1E, 0x82, 0x42, 0x2C, 0xDB, 0xD2, 0x48, 0x7A, 0x78, 0x40,
+	0x78, 0x90, 0x42, 0x01, 0xD9, 0x80, 0x1A, 0x00, 0xE0, 0x10, 0x1A, 0x49, 0x78, 0x6A, 0x78, 0xC0,
+	0xB2, 0x91, 0x42, 0x01, 0xD9, 0x89, 0x1A, 0x00, 0xE0, 0x51, 0x1A, 0x22, 0x79, 0x01, 0x26, 0x85,
+	0x1A, 0xF6, 0x43, 0xC9, 0xB2, 0xB5, 0x42, 0x15, 0xDB, 0x65, 0x79, 0x4D, 0x1B, 0xB5, 0x42, 0x11,
+	0xDB, 0x1D, 0x7A, 0x85, 0x42, 0x04, 0xD8, 0x1B, 0x7A, 0x8B, 0x42, 0x01, 0xD8, 0x01, 0x21, 0x8C,
+	0x46, 0x82, 0x42, 0x00, 0xD8, 0x02, 0x46, 0xD1, 0xB2, 0x22, 0x71, 0x81, 0x42, 0x00, 0xD8, 0x01,
+	0x46, 0x21, 0x71, 0x01, 0xE0, 
+	0x00, 0x01, 0xA8, 0x00, 0x80, 0x01, 0x20, 0x60, 0x70, 0x60, 0x46, 0xF0, 0xBD, 0xF0, 0xB5, 0x86,
+	0xB0, 0x00, 0x20, 0x00, 0x90, 0xB7, 0x48, 0xB6, 0x4A, 0x05, 0x78, 0xB5, 0x48, 0x08, 0x32, 0x06,
+	0x78, 0xB5, 0x4B, 0x30, 0x46, 0x76, 0x1D, 0x40, 0x1F, 0x05, 0x96, 0x04, 0x90, 0x10, 0x78, 0x41,
+	0x1D, 0x40, 0x1F, 0x02, 0x90, 0xB1, 0x48, 0x01, 0x90, 0x03, 0x91, 0xAE, 0x48, 0x59, 0x78, 0x40,
+	0x78, 0x52, 0x78, 0x44, 0x1A, 0xA4, 0x46, 0x0C, 0x1A, 0xA6, 0x46, 0x1C, 0x78, 0xA8, 0x4B, 0xB5,
+	0x42, 0x5B, 0x78, 0x26, 0xD8, 0x04, 0x9E, 0xB5, 0x42, 0x23, 0xDB, 0x5E, 0x1D, 0xB0, 0x42, 0x20,
+	0xD8, 0x5E, 0x1F, 0xB0, 0x42, 0x1D, 0xDB, 0x03, 0x9E, 0xB4, 0x42, 0x1A, 0xD8, 0x02, 0x9E, 0xB4,
+	0x42, 0x17, 0xDB, 0x91, 0x42, 0x01, 0xD9, 0x8E, 0x1A, 0x00, 0xE0, 0x56, 0x1A, 0x01, 0x9F, 0xFF,
+	0x7A, 0xBE, 0x42, 0x0E, 0xDB, 
+	0x00, 0x01, 0xA9, 0x00, 0x80, 0x90, 0x42, 0x01, 0xD9, 0x86, 0x1A, 0x00, 0xE0, 0x16, 0x1A, 0x88,
+	0x42, 0x01, 0xD9, 0x67, 0x46, 0x00, 0xE0, 0x77, 0x46, 0xBE, 0x42, 0x02, 0xDD, 0x01, 0x20, 0x06,
+	0xB0, 0xF0, 0xBD, 0x03, 0x9E, 0xB4, 0x42, 0x25, 0xD8, 0x02, 0x9E, 0xB4, 0x42, 0x22, 0xDB, 0x54,
+	0x1D, 0xA1, 0x42, 0x1F, 0xD8, 0x52, 0x1F, 0x91, 0x42, 0x1C, 0xDB, 0x05, 0x9A, 0x95, 0x42, 0x19,
+	0xD8, 0x04, 0x9A, 0x95, 0x42, 0x16, 0xDB, 0x98, 0x42, 0x01, 0xD9, 0xC2, 0x1A, 0x00, 0xE0, 0x1A,
+	0x1A, 0x01, 0x9C, 0xE4, 0x7A, 0xA2, 0x42, 0x0D, 0xDB, 0x99, 0x42, 0x01, 0xD9, 0xCA, 0x1A, 0x00,
+	0xE0, 0x5A, 0x1A, 0x81, 0x42, 0x01, 0xD9, 0x70, 0x46, 0x00, 0xE0, 0x60, 0x46, 0x82, 0x42, 0x01,
+	0xDD, 0x01, 0x20, 0x00, 0x90, 0x00, 0x98, 0xD2, 0xE7, 0xF8, 0xB5, 0x05, 0x46, 0x00, 0x20, 0x00,
+	0x90, 0xF7, 0xF7, 0xF7, 0xF8, 
+	0x00, 0x01, 0xAA, 0x00, 0x80, 0xC4, 0xB2, 0x7E, 0x48, 0x01, 0x78, 0x79, 0x48, 0x00, 0x29, 0x12,
+	0xD0, 0x01, 0x2C, 0x09, 0xD1, 0x80, 0x78, 0x00, 0x28, 0x0B, 0xD1, 0x05, 0x20, 0xFF, 0xF7, 0xBE,
+	0xF9, 0x77, 0x48, 0x00, 0x21, 0x01, 0x70, 0x04, 0xE0, 0x81, 0x78, 0x07, 0x29, 0x01, 0xD1, 0x00,
+	0x21, 0x81, 0x70, 0x00, 0x20, 0xF8, 0xBD, 0x07, 0x26, 0x02, 0x2C, 0x00, 0xD9, 0x86, 0x70, 0x71,
+	0x49, 0x0A, 0x78, 0x00, 0x2A, 0x02, 0xD0, 0x00, 0x22, 0x0A, 0x70, 0x86, 0x70, 0x01, 0x2C, 0x0C,
+	0xD1, 0x6A, 0x49, 0x68, 0x4B, 0x20, 0x39, 0xDA, 0x78, 0xCF, 0x7F, 0xBA, 0x42, 0x05, 0xD8, 0x9A,
+	0x78, 0x89, 0x7F, 0x8A, 0x42, 0x01, 0xD8, 0x01, 0x22, 0x00, 0xE0, 0x00, 0x22, 0x60, 0x48, 0x63,
+	0x4F, 0x81, 0x78, 0x00, 0x29, 0x18, 0xD1, 0x0C, 0x38, 0x81, 0x70, 0x00, 0x2A, 0x03, 0xD0, 0x5C,
+	0x49, 0x01, 0x20, 0x88, 0x70, 
+	0x00, 0x01, 0xAB, 0x00, 0x80, 0x06, 0xE0, 0x02, 0x2C, 0x0B, 0xD1, 0x59, 0x4A, 0x08, 0x21, 0x91,
+	0x70, 0x01, 0x21, 0x01, 0x70, 0x28, 0x46, 0xFF, 0xF7, 0xB3, 0xFE, 0x1E, 0x20, 0xFF, 0xF7, 0x7E,
+	0xF9, 0xEF, 0xE0, 0x53, 0x48, 0x86, 0x70, 0xF1, 0xE0, 0x51, 0x48, 0x01, 0x29, 0x22, 0xD1, 0x00,
+	0x2C, 0x09, 0xD1, 0x02, 0x21, 0x81, 0x70, 0x0C, 0x38, 0xC1, 0x78, 0x00, 0x29, 0x02, 0xD0, 0x00,
+	0x21, 0x85, 0x60, 0xC1, 0x70, 0xF2, 0xE0, 0x02, 0x2C, 0x11, 0xD1, 0x04, 0x46, 0x40, 0x68, 0x29,
+	0x1A, 0xF8, 0x89, 0x81, 0x42, 0x09, 0xD8, 0x28, 0x46, 0xFF, 0xF7, 0x92, 0xFE, 0x08, 0x20, 0xA0,
+	0x70, 0x43, 0x49, 0x01, 0x20, 0x0C, 0x39, 0x08, 0x70, 0xE0, 0xE0, 0xA6, 0x70, 0xD4, 0xE0, 0x00,
+	0x2A, 0x28, 0xD0, 0xC0, 0xE0, 0x44, 0x4B, 0x08, 0x29, 0x35, 0xD1, 0x02, 0x2C, 0xD1, 0xD1, 0x43,
+	0x48, 0x00, 0x78, 0x02, 0x28, 
+	0x00, 0x01, 0xAC, 0x00, 0x80, 0x1F, 0xD1, 0x18, 0x78, 0x80, 0x07, 0x1A, 0xD5, 0xFF, 0xF7, 0x98,
+	0xFE, 0x00, 0x28, 0x06, 0xD0, 0x36, 0x48, 0x0A, 0x21, 0x81, 0x70, 0x35, 0x49, 0x01, 0x20, 0x0C,
+	0x39, 0x88, 0x70, 0x33, 0x48, 0xFA, 0x88, 0x41, 0x68, 0x69, 0x1A, 0x91, 0x42, 0x04, 0xD8, 0x01,
+	0x46, 0x0C, 0x39, 0x49, 0x78, 0x00, 0x29, 0xB3, 0xD0, 0x86, 0x70, 0x2D, 0x48, 0x00, 0x21, 0x0C,
+	0x38, 0xA9, 0xE0, 0x2B, 0x48, 0x9B, 0xE0, 0x01, 0x28, 0xBC, 0xD1, 0x18, 0x78, 0x00, 0x07, 0xF8,
+	0xD5, 0xFF, 0xF7, 0xDC, 0xFE, 0x00, 0x28, 0x15, 0xD1, 0x25, 0x48, 0xBA, 0x89, 0x41, 0x68, 0x69,
+	0x1A, 0x91, 0x42, 0x2B, 0xD9, 0x8B, 0xE0, 0x22, 0x48, 0x0A, 0x29, 0x2E, 0xD1, 0x00, 0x2C, 0x0B,
+	0xD1, 0x00, 0x21, 0x02, 0x46, 0x81, 0x70, 0x0C, 0x3A, 0x90, 0x78, 0x00, 0x28, 0x02, 0xD0, 0x02,
+	0x20, 0x91, 0x70, 0xF8, 0xBD, 
+	0x00, 0x01, 0xAD, 0x00, 0x80, 0x04, 0x20, 0xF8, 0xBD, 0x01, 0x2C, 0x06, 0xD1, 0xC1, 0x78, 0x49,
+	0x1C, 0xC9, 0xB2, 0xC1, 0x70, 0x0A, 0x29, 0x5D, 0xD3, 0x71, 0xE0, 0x02, 0x2C, 0x6F, 0xD1, 0x14,
+	0x49, 0x0C, 0x39, 0x89, 0x78, 0x00, 0x29, 0x0A, 0xD0, 0x11, 0x48, 0x40, 0x68, 0x29, 0x1A, 0xF8,
+	0x88, 0x81, 0x42, 0xC6, 0xD8, 0xFF, 0xF7, 0x44, 0xFE, 0x00, 0x28, 0xC2, 0xD0, 0x61, 0xE0, 0x41,
+	0x68, 0xBA, 0x89, 0x69, 0x1A, 0x91, 0x42, 0x71, 0xD9, 0x59, 0xE0, 0x02, 0x29, 0x43, 0xD1, 0x00,
+	0x2C, 0x1E, 0xD1, 0x07, 0x49, 0xFF, 0x23, 0x0C, 0x39, 0x8A, 0x68, 0x00, 0x21, 0xAA, 0x1A, 0x2D,
+	0x33, 0x9A, 0x42, 0x00, 0xD9, 0x01, 0x21, 0x00, 0x29, 0x60, 0xD0, 0x86, 0x70, 0x50, 0xE0, 0x00,
+	0x00, 0x08, 0x03, 0x00, 0x20, 0x20, 0x01, 0x00, 0x20, 0x24, 0x01, 0x00, 0x20, 0x00, 0xE7, 0x00,
+	0x00, 0x6C, 0x02, 0x00, 0x20, 
+	0x00, 0x01, 0xAE, 0x00, 0x80, 0xEC, 0x00, 0x00, 0x20, 0x6B, 0x02, 0x00, 0x20, 0xEB, 0x00, 0x00,
+	0x20, 0x01, 0x2A, 0x34, 0xD1, 0x26, 0x49, 0xFF, 0x23, 0x8A, 0x68, 0x00, 0x21, 0xAA, 0x1A, 0x28,
+	0x3A, 0x05, 0x33, 0x9A, 0x42, 0x12, 0xD8, 0x23, 0x4D, 0x03, 0x78, 0x2A, 0x78, 0x9C, 0x1C, 0xA2,
+	0x42, 0x0C, 0xD8, 0x9B, 0x1E, 0x2C, 0x46, 0x9A, 0x42, 0x08, 0xDB, 0x43, 0x78, 0x62, 0x78, 0x9C,
+	0x1C, 0xA2, 0x42, 0x03, 0xD8, 0x9B, 0x1E, 0x9A, 0x42, 0x00, 0xDB, 0x01, 0x21, 0x01, 0x29, 0x16,
+	0xD1, 0x05, 0x21, 0x81, 0x70, 0x2A, 0xE0, 0x05, 0x29, 0x13, 0xD1, 0x00, 0x2C, 0x09, 0xD1, 0x00,
+	0x21, 0x81, 0x70, 0x18, 0x78, 0xC0, 0x07, 0x21, 0xD0, 0x01, 0x20, 0x11, 0x49, 0x00, 0x90, 0xC8,
+	0x70, 0x1C, 0xE0, 0x01, 0x2A, 0x03, 0xD1, 0x41, 0x68, 0xBA, 0x88, 0x69, 0x1A, 0xA2, 0xE7, 0x86,
+	0x70, 0x0A, 0xE0, 0x0B, 0x48, 
+	0x00, 0x01, 0xAF, 0x00, 0x80, 0x0C, 0x30, 0x80, 0x78, 0x07, 0x28, 0x0F, 0xD1, 0x00, 0x2C, 0x03,
+	0xD1, 0x07, 0x48, 0x00, 0x21, 0x0C, 0x30, 0x81, 0x70, 0x07, 0x48, 0x01, 0x24, 0x04, 0x70, 0x38,
+	0x78, 0xFF, 0xF7, 0x7C, 0xF8, 0x02, 0x49, 0x00, 0x20, 0x88, 0x70, 0xCC, 0x70, 0x00, 0x98, 0xF8,
+	0xBD, 0xFC, 0x02, 0x00, 0x20, 0x20, 0x01, 0x00, 0x20, 0x6C, 0x02, 0x00, 0x20, 0x0C, 0x49, 0xCA,
+	0x68, 0x03, 0x23, 0x1B, 0x02, 0x9A, 0x43, 0x00, 0x02, 0x02, 0x43, 0xCA, 0x60, 0x70, 0x47, 0x08,
+	0x49, 0x4A, 0x69, 0x0F, 0x23, 0x1B, 0x04, 0x9A, 0x43, 0x00, 0x04, 0x02, 0x43, 0x4A, 0x61, 0x70,
+	0x47, 0x03, 0x49, 0x8A, 0x69, 0x10, 0x23, 0x9A, 0x43, 0x00, 0x01, 0x02, 0x43, 0x8A, 0x61, 0x70,
+	0x47, 0x00, 0x00, 0x14, 0x40, 0x01, 0x78, 0x01, 0x29, 0x09, 0xD1, 0x40, 0x78, 0x41, 0x00, 0x15,
+	0x48, 0x01, 0x62, 0x41, 0x69, 
+	0x00, 0x01, 0xB0, 0x00, 0x80, 0x30, 0x22, 0x91, 0x43, 0x02, 0x22, 0x11, 0x43, 0x41, 0x61, 0x70,
+	0x47, 0x10, 0xB5, 0x10, 0x48, 0x41, 0x69, 0x41, 0x61, 0x02, 0x21, 0x41, 0x62, 0x00, 0x21, 0xC1,
+	0x62, 0x81, 0x62, 0xFF, 0x21, 0xC1, 0x60, 0x01, 0x21, 0x01, 0x61, 0x03, 0x20, 0xF8, 0xF7, 0xA5,
+	0xFC, 0x03, 0x21, 0x08, 0x46, 0xF8, 0xF7, 0x90, 0xFC, 0x07, 0x49, 0x03, 0x20, 0xF8, 0xF7, 0x85,
+	0xFC, 0x03, 0x20, 0xF8, 0xF7, 0x93, 0xFC, 0x10, 0xBD, 0x04, 0x4A, 0x80, 0x00, 0x80, 0x18, 0x01,
+	0x60, 0x70, 0x47, 0xFE, 0xE7, 0x00, 0x00, 0x12, 0x40, 0x75, 0xD9, 0x00, 0x00, 0x00, 0x10, 0x12,
+	0x40, 0x0E, 0x4A, 0x11, 0x68, 0xEF, 0x23, 0xC0, 0x07, 0x19, 0x40, 0xC0, 0x0E, 0x08, 0x43, 0x10,
+	0x60, 0x70, 0x47, 0x0A, 0x49, 0x8A, 0x68, 0x07, 0x23, 0x1B, 0x03, 0x9A, 0x43, 0x00, 0x03, 0x02,
+	0x43, 0x8A, 0x60, 0x70, 0x47, 
+	0x00, 0x01, 0xB1, 0x00, 0x80, 0x05, 0x48, 0x40, 0x68, 0xC0, 0x06, 0xC0, 0x0F, 0x70, 0x47, 0x03,
+	0x49, 0x08, 0x69, 0x10, 0x22, 0x10, 0x40, 0x08, 0x61, 0x00, 0x09, 0x70, 0x47, 0x00, 0x00, 0x14,
+	0x40, 0x70, 0xB5, 0x05, 0x46, 0x0B, 0x48, 0x00, 0x23, 0x0B, 0x4C, 0x10, 0xE0, 0xCA, 0x5C, 0x12,
+	0x02, 0x50, 0x40, 0x08, 0x22, 0x06, 0x04, 0x02, 0xD5, 0x40, 0x00, 0x60, 0x40, 0x00, 0xE0, 0x40,
+	0x00, 0x52, 0x1E, 0x12, 0x06, 0x80, 0xB2, 0x12, 0x0E, 0xF4, 0xD1, 0x5B, 0x1C, 0x9B, 0xB2, 0xAB,
+	0x42, 0xEC, 0xD3, 0x70, 0xBD, 0xFF, 0xFF, 0x00, 0x00, 0x21, 0x10, 0x00, 0x00, 0x1C, 0xB5, 0x68,
+	0x46, 0x00, 0xF0, 0x22, 0xF8, 0x00, 0x22, 0x0E, 0x49, 0x00, 0x28, 0x08, 0xD1, 0x6B, 0x46, 0x58,
+	0x88, 0x90, 0x28, 0x04, 0xD1, 0x18, 0x88, 0xC3, 0x1F, 0xF9, 0x3B, 0x5F, 0x2B, 0x02, 0xD3, 0x0A,
+	0x70, 0x4A, 0x80, 0x1C, 0xBD, 
+	0x00, 0x01, 0xB2, 0x00, 0x80, 0x07, 0x4A, 0x40, 0x00, 0x80, 0x18, 0xFF, 0x38, 0xFF, 0x38, 0x02,
+	0x38, 0x00, 0x88, 0x48, 0x80, 0x80, 0xB2, 0xC0, 0x06, 0xC0, 0x0E, 0x08, 0x70, 0x1C, 0xBD, 0x00,
+	0x00, 0x18, 0x03, 0x00, 0x20, 0x9C, 0xE0, 0x00, 0x00, 0x70, 0xB5, 0x05, 0x46, 0x11, 0x4E, 0x10,
+	0x48, 0xB0, 0x60, 0xF8, 0xF7, 0xFB, 0xFB, 0xF1, 0x02, 0x71, 0x60, 0x71, 0x68, 0x00, 0x29, 0xFC,
+	0xDB, 0xB4, 0x68, 0x71, 0x68, 0xC0, 0xB2, 0x0E, 0x05, 0x36, 0x0D, 0xF8, 0xF7, 0xF3, 0xFB, 0x20,
+	0x0F, 0x0A, 0x28, 0x01, 0xD0, 0x01, 0x20, 0x70, 0xBD, 0x2C, 0x80, 0x20, 0x0C, 0x28, 0x71, 0x20,
+	0x02, 0x00, 0x0F, 0x68, 0x71, 0x20, 0x03, 0x00, 0x0F, 0xA8, 0x71, 0x6E, 0x80, 0x00, 0x20, 0x70,
+	0xBD, 0xB6, 0xD3, 0x00, 0x00, 0x00, 0x00, 0x10, 0x40, 0x70, 0xB5, 0x15, 0x49, 0xC8, 0x68, 0x15,
+	0x4D, 0xC8, 0x60, 0x09, 0x69, 
+	0x00, 0x01, 0xB3, 0x00, 0x80, 0x14, 0x4C, 0x01, 0x40, 0x29, 0x60, 0x88, 0x07, 0x01, 0xD5, 0x20,
+	0x68, 0x80, 0x47, 0x28, 0x68, 0x40, 0x07, 0x01, 0xD5, 0x60, 0x68, 0x80, 0x47, 0x28, 0x68, 0x00,
+	0x07, 0x01, 0xD5, 0xA0, 0x68, 0x80, 0x47, 0x28, 0x68, 0xC0, 0x06, 0x01, 0xD5, 0xE0, 0x68, 0x80,
+	0x47, 0x28, 0x68, 0x80, 0x06, 0x01, 0xD5, 0x20, 0x69, 0x80, 0x47, 0x28, 0x68, 0x40, 0x06, 0x01,
+	0xD5, 0x60, 0x69, 0x80, 0x47, 0x28, 0x68, 0x00, 0x06, 0x01, 0xD5, 0xA0, 0x69, 0x80, 0x47, 0x70,
+	0xBD, 0x00, 0x00, 0x12, 0x40, 0x1C, 0x03, 0x00, 0x20, 0x80, 0xE0, 0x00, 0x00, 0xF8, 0xB5, 0x04,
+	0x2A, 0x2C, 0xD3, 0x83, 0x07, 0x12, 0xD0, 0x0B, 0x78, 0x49, 0x1C, 0x03, 0x70, 0x40, 0x1C, 0x52,
+	0x1E, 0x83, 0x07, 0x0B, 0xD0, 0x0B, 0x78, 0x49, 0x1C, 0x03, 0x70, 0x40, 0x1C, 0x52, 0x1E, 0x83,
+	0x07, 0x04, 0xD0, 0x0B, 0x78, 
+	0x00, 0x01, 0xB4, 0x00, 0x80, 0x49, 0x1C, 0x03, 0x70, 0x40, 0x1C, 0x52, 0x1E, 0x8B, 0x07, 0x9B,
+	0x0F, 0x02, 0xD1, 0xF3, 0xF7, 0x91, 0xFC, 0xF8, 0xBD, 0xC9, 0x1A, 0xDE, 0x00, 0x20, 0x23, 0x9D,
+	0x1B, 0x08, 0xC9, 0x07, 0xE0, 0xF3, 0x40, 0x1C, 0x46, 0x08, 0xC9, 0x1F, 0x46, 0xAF, 0x40, 0x27,
+	0x43, 0x80, 0xC0, 0x12, 0x1F, 0x04, 0x2A, 0xF5, 0xD2, 0xEB, 0x08, 0xC9, 0x1A, 0x52, 0x1E, 0xEA,
+	0xD4, 0x0B, 0x78, 0x49, 0x1C, 0x03, 0x70, 0x40, 0x1C, 0x52, 0x1E, 0xE4, 0xD4, 0x0B, 0x78, 0x49,
+	0x1C, 0x03, 0x70, 0x40, 0x1C, 0x52, 0x1E, 0xDE, 0xD4, 0x09, 0x78, 0x01, 0x70, 0xF8, 0xBD, 0x01,
+	0xE0, 0x04, 0xC0, 0x09, 0x1F, 0x04, 0x29, 0xFB, 0xD2, 0x8B, 0x07, 0x01, 0xD5, 0x02, 0x80, 0x80,
+	0x1C, 0xC9, 0x07, 0x00, 0xD0, 0x02, 0x70, 0x70, 0x47, 0x00, 0x29, 0x0B, 0xD0, 0xC3, 0x07, 0x02,
+	0xD0, 0x02, 0x70, 0x40, 0x1C, 
+	0x00, 0x01, 0xB5, 0x00, 0x80, 0x49, 0x1E, 0x02, 0x29, 0x04, 0xD3, 0x83, 0x07, 0x02, 0xD5, 0x02,
+	0x80, 0x80, 0x1C, 0x89, 0x1E, 0xE3, 0xE7, 0x00, 0x22, 0xEE, 0xE7, 0x00, 0x22, 0xDF, 0xE7, 0x82,
+	0x08, 0x81, 0x07, 0x92, 0x00, 0xC9, 0x0E, 0x0C, 0xCA, 0xC0, 0x78, 0xCA, 0x40, 0x49, 0x42, 0x20,
+	0x31, 0x8B, 0x40, 0x1A, 0x43, 0x11, 0x02, 0x09, 0x0A, 0x00, 0x06, 0x08, 0x43, 0x70, 0x47, 0x00,
+	0x22, 0x03, 0x09, 0x8B, 0x42, 0x2C, 0xD3, 0x03, 0x0A, 0x8B, 0x42, 0x11, 0xD3, 0x00, 0x23, 0x9C,
+	0x46, 0x4E, 0xE0, 0x03, 0x46, 0x0B, 0x43, 0x3C, 0xD4, 0x00, 0x22, 0x43, 0x08, 0x8B, 0x42, 0x31,
+	0xD3, 0x03, 0x09, 0x8B, 0x42, 0x1C, 0xD3, 0x03, 0x0A, 0x8B, 0x42, 0x01, 0xD3, 0x94, 0x46, 0x3F,
+	0xE0, 0xC3, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x01, 0xC0, 0x1A, 0x52, 0x41, 0x83, 0x09, 0x8B,
+	0x42, 0x01, 0xD3, 0x8B, 0x01, 
+	0x00, 0x01, 0xB6, 0x00, 0x80, 0xC0, 0x1A, 0x52, 0x41, 0x43, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0x4B,
+	0x01, 0xC0, 0x1A, 0x52, 0x41, 0x03, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0x0B, 0x01, 0xC0, 0x1A, 0x52,
+	0x41, 0xC3, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x00, 0xC0, 0x1A, 0x52, 0x41, 0x83, 0x08, 0x8B,
+	0x42, 0x01, 0xD3, 0x8B, 0x00, 0xC0, 0x1A, 0x52, 0x41, 0x43, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0x4B,
+	0x00, 0xC0, 0x1A, 0x52, 0x41, 0x41, 0x1A, 0x00, 0xD2, 0x01, 0x46, 0x52, 0x41, 0x10, 0x46, 0x70,
+	0x47, 0x5D, 0xE0, 0xCA, 0x0F, 0x00, 0xD0, 0x49, 0x42, 0x03, 0x10, 0x00, 0xD3, 0x40, 0x42, 0x53,
+	0x40, 0x00, 0x22, 0x9C, 0x46, 0x03, 0x09, 0x8B, 0x42, 0x2D, 0xD3, 0x03, 0x0A, 0x8B, 0x42, 0x12,
+	0xD3, 0xFC, 0x22, 0x89, 0x01, 0x12, 0xBA, 0x03, 0x0A, 0x8B, 0x42, 0x0C, 0xD3, 0x89, 0x01, 0x92,
+	0x11, 0x8B, 0x42, 0x08, 0xD3, 
+	0x00, 0x01, 0xB7, 0x00, 0x80, 0x89, 0x01, 0x92, 0x11, 0x8B, 0x42, 0x04, 0xD3, 0x89, 0x01, 0x3A,
+	0xD0, 0x92, 0x11, 0x00, 0xE0, 0x89, 0x09, 0xC3, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x01, 0xC0,
+	0x1A, 0x52, 0x41, 0x83, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0x8B, 0x01, 0xC0, 0x1A, 0x52, 0x41, 0x43,
+	0x09, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x01, 0xC0, 0x1A, 0x52, 0x41, 0x03, 0x09, 0x8B, 0x42, 0x01,
+	0xD3, 0x0B, 0x01, 0xC0, 0x1A, 0x52, 0x41, 0xC3, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x00, 0xC0,
+	0x1A, 0x52, 0x41, 0x83, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0x8B, 0x00, 0xC0, 0x1A, 0x52, 0x41, 0xD9,
+	0xD2, 0x43, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x00, 0xC0, 0x1A, 0x52, 0x41, 0x41, 0x1A, 0x00,
+	0xD2, 0x01, 0x46, 0x63, 0x46, 0x52, 0x41, 0x5B, 0x10, 0x10, 0x46, 0x01, 0xD3, 0x40, 0x42, 0x00,
+	0x2B, 0x00, 0xD5, 0x49, 0x42, 
+	0x00, 0x01, 0xB8, 0x00, 0x80, 0x70, 0x47, 0x63, 0x46, 0x5B, 0x10, 0x00, 0xD3, 0x40, 0x42, 0x01,
+	0xB5, 0x00, 0x20, 0xC0, 0x46, 0xC0, 0x46, 0x02, 0xBD, 0x04, 0x46, 0xC0, 0x46, 0xC0, 0x46, 0x20,
+	0x46, 0xF3, 0xF7, 0x7E, 0xFB, 0x02, 0x48, 0x03, 0x49, 0xAB, 0xBE, 0x70, 0x47, 0x0D, 0x00, 0x00,
+	0x00, 0x18, 0x00, 0x00, 0x00, 0x26, 0x00, 0x02, 0x00, 0x70, 0x47, 0x70, 0xB5, 0x8C, 0x18, 0x05,
+	0x78, 0x40, 0x1C, 0x6B, 0x07, 0x5B, 0x0F, 0x01, 0xD1, 0x03, 0x78, 0x40, 0x1C, 0x2A, 0x11, 0x06,
+	0xD1, 0x02, 0x78, 0x40, 0x1C, 0x03, 0xE0, 0x06, 0x78, 0x40, 0x1C, 0x0E, 0x70, 0x49, 0x1C, 0x5B,
+	0x1E, 0xF9, 0xD1, 0x2B, 0x07, 0x06, 0xD4, 0x00, 0x23, 0x01, 0xE0, 0x0B, 0x70, 0x49, 0x1C, 0x52,
+	0x1E, 0xFB, 0xD5, 0x0A, 0xE0, 0x03, 0x78, 0x40, 0x1C, 0xCB, 0x1A, 0x92, 0x1C, 0x03, 0xE0, 0x1D,
+	0x78, 0x5B, 0x1C, 0x0D, 0x70, 
+	0x00, 0x01, 0xB9, 0x00, 0x80, 0x49, 0x1C, 0x52, 0x1E, 0xF9, 0xD5, 0xA1, 0x42, 0xD7, 0xD3, 0x00,
+	0x20, 0x70, 0xBD, 0x30, 0xB4, 0x74, 0x46, 0x64, 0x1E, 0x25, 0x78, 0x64, 0x1C, 0xAB, 0x42, 0x00,
+	0xD2, 0x1D, 0x46, 0x63, 0x5D, 0x5B, 0x00, 0xE3, 0x18, 0x30, 0xBC, 0x18, 0x47, 0x01, 0x01, 0x01,
+	0x02, 0x01, 0x01, 0x02, 0x01, 0x01, 0x02, 0x01, 0x01, 0x02, 0x01, 0x01, 0x01, 0x00, 0x6F, 0x53,
+	0xB2, 0x00, 0x6F, 0x57, 0xB2, 0x00, 0x6F, 0x4B, 0xB2, 0x00, 0x6F, 0x4B, 0xB8, 0x00, 0x79, 0x43,
+	0xB2, 0x00, 0x68, 0x43, 0xB2, 0x00, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x00, 0x01, 0x00,
+	0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
+	0x00, 0x33, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
+	0x00, 0x00, 0x30, 0x13, 0x40, 
+	0x00, 0x01, 0xBA, 0x00, 0x80, 0x00, 0x04, 0x00, 0x40, 0x13, 0x40, 0x00, 0x02, 0x01, 0x00, 0x13,
+	0x40, 0x56, 0x32, 0x13, 0x40, 0x34, 0x33, 0x13, 0x40, 0x01, 0x60, 0x13, 0x40, 0x83, 0x0F, 0x05,
+	0x03, 0x07, 0x14, 0x0D, 0x80, 0x11, 0x73, 0x13, 0x0C, 0x17, 0x5E, 0x19, 0x73, 0x1B, 0x04, 0x2D,
+	0x29, 0x2F, 0x10, 0x31, 0x60, 0x33, 0x10, 0x35, 0x80, 0x37, 0x0F, 0x39, 0x02, 0x3B, 0x80, 0x3F,
+	0x05, 0x40, 0x01, 0x45, 0x05, 0x46, 0x01, 0x48, 0x05, 0x49, 0xFF, 0x4A, 0x07, 0x4B, 0xFF, 0x4C,
+	0x40, 0x4D, 0x20, 0x4E, 0xF0, 0x4F, 0x05, 0x50, 0x08, 0x59, 0x04, 0x5A, 0x04, 0x5F, 0x01, 0x60,
+	0x40, 0x61, 0xA8, 0x62, 0x40, 0x63, 0x20, 0x85, 0x09, 0x86, 0x07, 0x87, 0xF0, 0x89, 0x14, 0x8C,
+	0x04, 0x8E, 0x01, 0x8F, 0x03, 0x90, 0x10, 0x91, 0x10, 0x93, 0xAC, 0x94, 0x04, 0x99, 0x0C, 0x9B,
+	0x71, 0x9C, 0x08, 0xA0, 0x01, 
+	0x00, 0x01, 0xBB, 0x00, 0x80, 0xA2, 0x02, 0xA4, 0x01, 0xA6, 0x06, 0xA9, 0x40, 0xAB, 0x10, 0xAD,
+	0xDC, 0xAF, 0x02, 0xB0, 0x07, 0xB2, 0x10, 0xB4, 0x08, 0xB5, 0xE0, 0xB7, 0x1F, 0xBA, 0x02, 0xBB,
+	0x20, 0xBE, 0x14, 0xC0, 0x42, 0xC1, 0x06, 0xC5, 0x0C, 0xC6, 0xBE, 0xC8, 0x0D, 0xC9, 0xFF, 0xCA,
+	0xFF, 0xCB, 0xFF, 0xCE, 0xF0, 0xCF, 0x44, 0xD0, 0x0C, 0xD4, 0x01, 0xD8, 0x04, 0xD9, 0x04, 0xDA,
+	0x04, 0xDB, 0x04, 0xDF, 0x01, 0xE6, 0xC0, 0xEA, 0x40, 0xEB, 0x02, 0x00, 0x04, 0x03, 0x02, 0x08,
+	0x01, 0x09, 0x40, 0x0A, 0x20, 0x0B, 0x80, 0x12, 0x20, 0x13, 0x02, 0x19, 0x04, 0x1A, 0x04, 0x1B,
+	0x02, 0x20, 0x08, 0x21, 0x40, 0x22, 0x20, 0x24, 0x04, 0x27, 0x5B, 0x2B, 0x06, 0x2F, 0x02, 0x32,
+	0x20, 0x33, 0x01, 0x36, 0x20, 0x37, 0x0A, 0x38, 0x24, 0x39, 0x80, 0x3D, 0x80, 0x3F, 0x04, 0x42,
+	0x04, 0x43, 0x01, 0x47, 0x40, 
+	0x00, 0x01, 0xBC, 0x00, 0x80, 0x48, 0x04, 0x4B, 0x04, 0x4E, 0x10, 0x4F, 0x08, 0x50, 0x10, 0x53,
+	0x40, 0x55, 0x40, 0x58, 0x01, 0x59, 0x14, 0x5A, 0x40, 0x61, 0x10, 0x63, 0x04, 0x8E, 0x40, 0x8F,
+	0x10, 0xC0, 0x05, 0xC2, 0x0D, 0xC4, 0x0C, 0xCA, 0x1C, 0xCC, 0xE5, 0xCE, 0x5E, 0xD0, 0x15, 0xD2,
+	0x04, 0xD6, 0x0F, 0x10, 0x01, 0x00, 0x01, 0x00, 0x01, 0x80, 0x00, 0x55, 0x00, 0x40, 0x00, 0x33,
+	0x00, 0x2A, 0x00, 0x24, 0x00, 0x20, 0x00, 0x00, 0x01, 0xB9, 0x00, 0x86, 0x00, 0x54, 0x00, 0x26,
+	0x00, 0x1B, 0x00, 0x27, 0x00, 0x37, 0x00, 0x52, 0x00, 0x94, 0x00, 0x00, 0x01, 0xBB, 0x8F, 0x00,
+	0x00, 0x79, 0x90, 0x00, 0x00, 0x2B, 0x92, 0x00, 0x00, 0x5D, 0x92, 0x00, 0x00, 0x7F, 0x92, 0x00,
+	0x00, 0x87, 0x91, 0x00, 0x00, 0x27, 0x93, 0x00, 0x00, 0xEB, 0x97, 0x00, 0x00, 0x43, 0x98, 0x00,
+	0x00, 0x47, 0x98, 0x00, 0x00, 
+	0x00, 0x01, 0xBD, 0x00, 0x80, 0x8B, 0x98, 0x00, 0x00, 0xCF, 0x98, 0x00, 0x00, 0x23, 0x99, 0x00,
+	0x00, 0xC9, 0x9A, 0x00, 0x00, 0x2D, 0x9B, 0x00, 0x00, 0x6F, 0x9B, 0x00, 0x00, 0xB7, 0x9B, 0x00,
+	0x00, 0xEB, 0x9B, 0x00, 0x00, 0x85, 0x9D, 0x00, 0x00, 0x23, 0x9E, 0x00, 0x00, 0x4B, 0x9E, 0x00,
+	0x00, 0xD7, 0x9E, 0x00, 0x00, 0xBB, 0x8F, 0x00, 0x00, 0xBB, 0x8F, 0x00, 0x00, 0xBB, 0x8F, 0x00,
+	0x00, 0xBB, 0x8F, 0x00, 0x00, 0xBB, 0x8F, 0x00, 0x00, 0xBB, 0x8F, 0x00, 0x00, 0xBB, 0x8F, 0x00,
+	0x00, 0xBB, 0x8F, 0x00, 0x00, 0xBB, 0x8F, 0x00, 0x00, 0xBB, 0x8F, 0x00, 0x00, 0xBB, 0x8F, 0x00,
+	0x00, 0x09, 0x98, 0x00, 0x00, 0x3F, 0x98, 0x00, 0x00, 0x97, 0x9F, 0x00, 0x00, 0xE7, 0x9F, 0x00,
+	0x00, 0xF7, 0x9F, 0x00, 0x00, 0x5B, 0xA0, 0x00, 0x00, 0x6B, 0xA0, 0x00, 0x00, 0xBB, 0x8F, 0x00,
+	0x00, 0xBB, 0x8F, 0x00, 0x00, 
+	0x00, 0x01, 0xBE, 0x00, 0x80, 0xA5, 0x01, 0x02, 0x03, 0xFF, 0xFE, 0xFD, 0x5A, 0x54, 0x53, 0x47,
+	0x34, 0x20, 0x44, 0x46, 0x54, 0x2C, 0x05, 0x00, 0x20, 0x32, 0x02, 0x00, 0x00, 0x7C, 0x0B, 0x00,
+	0x20, 0x32, 0x02, 0x00, 0x00, 0x92, 0x08, 0x00, 0x20, 0x32, 0x02, 0x00, 0x00, 0xCC, 0x07, 0x00,
+	0x20, 0x32, 0x01, 0x00, 0x00, 0x1C, 0x0E, 0x00, 0x20, 0x32, 0x01, 0x00, 0x00, 0x32, 0x0B, 0x00,
+	0x20, 0x32, 0x01, 0x00, 0x00, 0x02, 0x00, 0x03, 0xBB, 0x04, 0x00, 0x05, 0x10, 0x06, 0x00, 0x07,
+	0x32, 0x08, 0x00, 0x09, 0x34, 0x0A, 0x00, 0x0B, 0x41, 0x0C, 0x00, 0x0D, 0x5B, 0x0E, 0x00, 0x0F,
+	0x7B, 0x10, 0x00, 0x11, 0x02, 0x12, 0x01, 0x13, 0x01, 0x18, 0x00, 0x19, 0x06, 0x1A, 0x68, 0x1B,
+	0xB6, 0x22, 0x08, 0x2F, 0x02, 0x30, 0x02, 0x31, 0x01, 0x3E, 0x00, 0x3F, 0xFF, 0x41, 0x02, 0x42,
+	0x09, 0x49, 0x07, 0x4A, 0x00, 
+	0x00, 0x01, 0xBF, 0x00, 0x80, 0x4B, 0x0E, 0x4C, 0x02, 0x4D, 0x0E, 0x4E, 0x04, 0x4F, 0x08, 0x50,
+	0x05, 0x51, 0x04, 0x52, 0x85, 0x53, 0x02, 0x54, 0x06, 0x55, 0x03, 0x58, 0x00, 0x59, 0x00, 0x5A,
+	0x00, 0x4A, 0x01, 0x00, 0x00, 0x5F, 0x02, 0x00, 0x20, 0x4B, 0x01, 0x00, 0x00, 0x66, 0x02, 0x00,
+	0x20, 0x4C, 0x02, 0x00, 0x00, 0x70, 0x02, 0x00, 0x20, 0x4D, 0x01, 0x00, 0x00, 0x5D, 0x02, 0x00,
+	0x20, 0x4E, 0x02, 0x00, 0x00, 0x6E, 0x02, 0x00, 0x20, 0x4F, 0x01, 0x00, 0x00, 0x5E, 0x02, 0x00,
+	0x20, 0x50, 0x01, 0x00, 0x00, 0x60, 0x02, 0x00, 0x20, 0x51, 0x01, 0x00, 0x00, 0xE0, 0x01, 0x00,
+	0x20, 0x52, 0x02, 0x00, 0x00, 0xEE, 0x02, 0x00, 0x20, 0x53, 0x02, 0x00, 0x00, 0x76, 0x02, 0x00,
+	0x20, 0x81, 0x01, 0x00, 0x00, 0x61, 0x02, 0x00, 0x20, 0x82, 0x01, 0x00, 0x00, 0x62, 0x02, 0x00,
+	0x20, 0x28, 0x00, 0x2C, 0x00, 
+	0x00, 0x01, 0xC0, 0x00, 0x80, 0x30, 0x00, 0x34, 0x00, 0x38, 0x00, 0x3C, 0x00, 0x40, 0x00, 0x44,
+	0x00, 0x4C, 0x00, 0x54, 0x00, 0x5C, 0x00, 0x64, 0x00, 0x70, 0x00, 0x7C, 0x00, 0x88, 0x00, 0x98,
+	0x00, 0xA8, 0x00, 0xBC, 0x00, 0xD0, 0x00, 0xE8, 0x00, 0x00, 0x01, 0x1C, 0x01, 0x3C, 0x01, 0x60,
+	0x01, 0x88, 0x01, 0xB4, 0x01, 0xE8, 0x01, 0x20, 0x02, 0x60, 0x02, 0xA8, 0x02, 0xF8, 0x02, 0x50,
+	0x03, 0xC6, 0x08, 0x27, 0x09, 0x58, 0x09, 0x89, 0x09, 0xEB, 0x09, 0x4C, 0x0A, 0xAE, 0x0A, 0x10,
+	0x0B, 0x71, 0x0B, 0xD3, 0x0B, 0x35, 0x0C, 0x96, 0x0C, 0xF8, 0x0C, 0x59, 0x0D, 0xBB, 0x0D, 0x1D,
+	0x0E, 0x19, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x25, 0x26, 0x27, 0x28, 0x29,
+	0x2A, 0x2B, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14,
+	0x40, 0x00, 0x10, 0x14, 0x40, 
+	0x00, 0x01, 0xC1, 0x00, 0x80, 0x4F, 0xD8, 0x00, 0x00, 0x4F, 0xD8, 0x00, 0x00, 0x4F, 0xD8, 0x00,
+	0x00, 0x4F, 0xD8, 0x00, 0x00, 0x4F, 0xD8, 0x00, 0x00, 0x4F, 0xD8, 0x00, 0x00, 0x4F, 0xD8, 0x00,
+	0x00, 0xEA, 0x03, 0xEA, 0x03, 0xEA, 0x03, 0xEA, 0x03, 0xEA, 0x03, 0xEA, 0x03, 0xEA, 0x03, 0xEA,
+	0x03, 0x0A, 0x03, 0x00, 0x00, 0x0A, 0x03, 0x00, 0x00, 0x0A, 0x01, 0x0A, 0x01, 0x0A, 0x01, 0x0A,
+	0x01, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0xE4, 0x03, 0xE4, 0x03, 0xE4, 0x03, 0xE4,
+	0x03, 0x04, 0x03, 0x04, 0x03, 0x04, 0x03, 0x04, 0x03, 0x04, 0x01, 0x04, 0x01, 0x04, 0x01, 0x04,
+	0x01, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0xE2, 0x03, 0xE2, 0x03, 0xE2, 0x03, 0xE2,
+	0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02,
+	0x01, 0x02, 0x00, 0x02, 0x00, 
+	0x00, 0x01, 0xC2, 0x00, 0x80, 0x02, 0x00, 0x02, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A,
+	0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x03, 0x0A, 0x03, 0xEA, 0x03, 0x0A, 0x03, 0x00,
+	0x00, 0x02, 0x00, 0x02, 0x03, 0xEA, 0x03, 0x0A, 0x03, 0x0A, 0x03, 0x0A, 0x01, 0x05, 0x00, 0x0A,
+	0x00, 0x05, 0x01, 0x00, 0x00, 0x0A, 0x03, 0x05, 0x00, 0x05, 0x01, 0x00, 0x00, 0x0A, 0x03, 0x0A,
+	0x00, 0x0A, 0x01, 0x2A, 0x03, 0x2A, 0x03, 0x00, 0x00, 0x00, 0x00, 0xEA, 0x03, 0xEA, 0x03, 0xEA,
+	0x03, 0x02, 0x00, 0x04, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00,
+	0x00, 0x8C, 0xE1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x80, 0x00, 0x00, 0x00, 0xC4, 0x12, 0x00,
+	0x00, 0x0C, 0xE2, 0x00, 0x00, 0x84, 0x00, 0x00, 0x20, 0x9C, 0x02, 0x00, 0x00, 0x36, 0xDC, 0x00,
+	0x00, 0x78, 0xE2, 0x00, 0x00, 
+	0x00, 0x01, 0xC3, 0x00, 0x80, 0x20, 0x03, 0x00, 0x20, 0x98, 0x17, 0x00, 0x00, 0xE0, 0x12, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0xC4, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x01, 0x48, 0x03, 0x1F, 0xD1, 0x24, 0x02, 0x3A, 0x03, 0x1A, 0x01, 0x02, 0x81, 0x13, 0x17,
+	0x08, 0x1B, 0x20, 0x18, 0x04, 0x1A, 0x16, 0x04, 0x1A, 0x36, 0x04, 0x1A, 0x37, 0x04, 0x1A, 0x35,
+	0x04, 0x1A, 0x55, 0x04, 0x1A, 0x56, 0x04, 0x1A, 0x54, 0x04, 0x1A, 0x74, 0x04, 0x1A, 0x75, 0x04,
+	0x1A, 0x73, 0x04, 0x41, 0x0B, 0x25, 0x64, 0xE8, 0x68, 0x59, 0xC4, 0x39, 0x07, 0x46, 0x51, 0x25,
+	0x02, 0xA0, 0x8C, 0x03, 0x28, 0x50, 0x46, 0x4B, 0xC6, 0x0E, 0x70, 0x01, 0x30, 0x5A, 0xFF, 0x01,
+	0x01, 0x28, 0x0A, 0x3D, 0x01, 0x20, 0x79, 0x78, 0x0A, 0x2E, 0x07, 0x02, 0x09, 0x1E, 0xC8, 0x01,
+	0x1A, 0x32, 0x24, 0x45, 0xD0, 0xF1, 0xFF, 0x0F, 0x0B, 0x24, 0x74, 0xE7, 0xA7, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0xC5, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0xC6, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0xC7, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0xC8, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0xC9, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0xCA, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0xCB, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0xCC, 0x00, 0x80, 0xFC, 0x07, 0xFC, 0x07, 0x4C, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01,
+	0x24, 0xEC, 0x1D, 0x80, 0x34, 0x10, 0x00, 0x80, 0x0C, 0x03, 0x00, 0x14, 0x00, 0xE8, 0x03, 0x00,
+	0x00, 0x32, 0x08, 0xF4, 0x01, 0x1E, 0x00, 0x00, 0x00, 0x88, 0x13, 0x96, 0x00, 0x96, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0xCD, 0x00, 0x80, 0x70, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
+	0x00, 0x64, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
+	0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0x07, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x64, 0x00, 0x00,
+	0x00, 0xD8, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0xA0, 0x0F, 0x00, 0x00, 0x48, 0xF4, 0xFF,
+	0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
+	0x00, 0x14, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xD0, 0x07, 0x00, 0x00, 0x01, 0x00, 0x00,
+	0x00, 0xA0, 0x00, 0xC4, 0xFF, 0xA0, 0x00, 0xC4, 0xFF, 0x06, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x0A, 0xD0, 0x07, 0xC8, 0x00, 0xC8, 0x00, 0x64, 0x00, 0x14,
+	0x00, 0x20, 0x03, 0x05, 0x05, 
+	0x00, 0x01, 0xCE, 0x00, 0x80, 0x64, 0x00, 0x00, 0x01, 0xE8, 0x03, 0xDC, 0x05, 0x0A, 0x02, 0x08,
+	0x0A, 0xB8, 0x0B, 0xE8, 0x03, 0x50, 0x14, 0x08, 0x06, 0x0A, 0x0A, 0x28, 0x00, 0x0A, 0x00, 0xFF,
+	0x00, 0x03, 0x01, 0x28, 0x00, 0x02, 0x0A, 0x0A, 0x00, 0xFE, 0x00, 0xC8, 0x00, 0x64, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x02, 0x3C, 0x00, 0xE8, 0x03, 0x0C, 0x03, 0x3C, 0x00, 0xE8,
+	0x03, 0x0C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0xF0, 0x02, 0x00, 0x01, 0x32, 0x00, 0xFF,
+	0x00, 0xF0, 0x02, 0x00, 0x02, 
+	0x00, 0x01, 0xCF, 0x00, 0x80, 0x32, 0x00, 0xFF, 0x00, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0xC3, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x02, 0x28, 0x0F, 0x96, 0x96, 0xFA, 0x00, 0x96, 0x00, 0x0F,
+	0x0C, 0xD0, 0x02, 0x00, 0x00, 0x6E, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
+	0x00, 0x01, 0x00, 0x2C, 0x01, 0x64, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x05, 0x70, 0x00, 0x97,
+	0x00, 0x6E, 0xFF, 0xC2, 0x01, 
+	0x00, 0x01, 0xD0, 0x00, 0x80, 0xD7, 0xFF, 0xCF, 0xFF, 0x9C, 0xFF, 0xD9, 0xFF, 0xDC, 0xFF, 0xDC,
+	0xFF, 0x4F, 0xFF, 0x07, 0x00, 0x91, 0xFF, 0x14, 0xFF, 0xB3, 0x00, 0x40, 0x1E, 0xC8, 0x32, 0xA0,
+	0x0F, 0x04, 0x01, 0x04, 0x01, 0x0E, 0x0E, 0x58, 0x01, 0x1E, 0x00, 0x14, 0x00, 0x02, 0x1E, 0x58,
+	0x1B, 0x70, 0x17, 0x64, 0x00, 0x05, 0x00, 0x02, 0x0A, 0xB0, 0x04, 0x96, 0x00, 0x02, 0x03, 0x0A,
+	0x01, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x05, 0x00, 0x0F, 0x00,
+	0x14, 0x00, 0x0A, 0x00, 0x00, 0x77, 0x77, 0x01, 0x05, 0x00, 0x0F, 0x01, 0x14, 0x01, 0x14, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0xD1, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0A, 0x14,
+	0x03, 0x96, 0x00, 0x64, 0x00, 0x08, 0x00, 0x0F, 0x00, 0x14, 0x00, 0x02, 0x0A, 0x0A, 0x01, 0x0A,
+	0x96, 0x50, 0x50, 0x50, 0x50, 0x50, 0xFA, 0x96, 0x0C, 0x0C, 0x0C, 0x28, 0x00, 0x02, 0x03, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x01, 0x00, 0x00, 0x05, 0x04, 0xFF, 0x81, 0x02, 0x06, 0x00,
+	0x00, 0xCF, 0x00, 0xAF, 0xC0, 0xFF, 0xFF, 0xB0, 0x00, 0x22, 0x02, 0x7F, 0x81, 0x7F, 0x72, 0x01,
+	0x80, 0x01, 0x81, 0x40, 0x04, 0x5F, 0x0C, 0x5F, 0x0C, 0x12, 0x01, 0x01, 0x00, 0x04, 0x01, 0x08,
+	0x10, 0x01, 0x04, 0x00, 0x00, 0x44, 0x01, 0x02, 0x80, 0x01, 0x01, 0x00, 0x00, 0x80, 0x00, 0x01,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x90, 0x80, 0x00, 0xFF, 0x07, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0xD2, 0x00, 0x80, 0x3A, 0xA0, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x05, 0x04, 0xFF,
+	0x81, 0x03, 0x0A, 0x00, 0x00, 0x8F, 0x02, 0xAF, 0x80, 0xFF, 0xFF, 0xD0, 0x00, 0x22, 0x02, 0x7F,
+	0x81, 0x7F, 0x72, 0x01, 0x80, 0x01, 0x81, 0x40, 0x04, 0x78, 0x11, 0x78, 0x11, 0x12, 0x01, 0x01,
+	0x00, 0x04, 0x01, 0x08, 0x10, 0x01, 0x04, 0x00, 0x00, 0x44, 0x01, 0x02, 0x80, 0x01, 0x01, 0x00,
+	0x00, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x90, 0x80, 0x00, 0xFF,
+	0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3A, 0xA6, 0x00, 0xF0, 0x00, 0x00, 0x00,
+	0x00, 0x05, 0x04, 0xFF, 0x80, 0x02, 0x04, 0x00, 0x00, 0xAF, 0x08, 0xAF, 0xC0, 0xFF, 0xFF, 0xB0,
+	0x00, 0x22, 0x02, 0x7F, 0x81, 0x7F, 0x72, 0x01, 0x80, 0x01, 0x81, 0x40, 0x04, 0x64, 0x0F, 0x64,
+	0x0F, 0x11, 0x01, 0x01, 0x00, 
+	0x00, 0x01, 0xD3, 0x00, 0x80, 0x04, 0x01, 0x08, 0x10, 0x01, 0x04, 0x00, 0x00, 0x44, 0x01, 0x02,
+	0x80, 0x01, 0x01, 0x00, 0x00, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00,
+	0x90, 0x80, 0x00, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3A, 0xA0, 0x00,
+	0xD0, 0x00, 0x00, 0x00, 0x00, 0x05, 0x04, 0xFF, 0x80, 0x02, 0x04, 0x00, 0x00, 0xFF, 0x00, 0xAF,
+	0xC0, 0xFF, 0xFF, 0xB0, 0x00, 0x22, 0x02, 0x7F, 0x81, 0x7F, 0x72, 0x01, 0x80, 0x01, 0x81, 0x40,
+	0x04, 0x64, 0x0F, 0x64, 0x0F, 0x11, 0x01, 0x01, 0x00, 0x04, 0x01, 0x08, 0x10, 0x01, 0x04, 0x00,
+	0x00, 0x44, 0x01, 0x02, 0x80, 0x01, 0x01, 0x00, 0x00, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x01, 0x01, 0x00, 0x90, 0x80, 0x00, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x3A, 0xA0, 0x00, 0xD0, 
+	0x00, 0x01, 0xD4, 0x00, 0x80, 0x08, 0x04, 0x00, 0x00, 0x32, 0x00, 0x30, 0x30, 0x40, 0x03, 0x07,
+	0x40, 0x18, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x38, 0x01, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
+	0x00, 0x06, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0xE8, 0x03, 0x00,
+	0x00, 0x64, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00,
+	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00,
+	0x00, 0x6E, 0x56, 0x32, 0x01, 0x04, 0x00, 0x00, 0x00, 0x01, 0x01, 0xB8, 0x0B, 0x40, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0xD5, 0x00, 0x80, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
+	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x37, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
+	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xC0, 0xF9, 0xA0,
+	0xF6, 0x90, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0xD6, 0x00, 0x80, 0x25, 0x24, 0x22, 0x18, 0x16, 0x13, 0x14, 0x11, 0x12, 0x17, 0x15,
+	0x19, 0x23, 0x30, 0x2F, 0x2C, 0x2B, 0x28, 0x27, 0x0F, 0x0E, 0x0B, 0x0A, 0x07, 0x06, 0x31, 0x2E,
+	0x2D, 0x2A, 0x29, 0x26, 0x10, 0x0D, 0x0C, 0x09, 0x08, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0F, 0x30, 0x0F, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
+	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0xD7, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x1F, 0x00, 0xFE, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC,
+	0x07, 0x80, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0xD8, 0x00, 0x80, 0x7F, 0x00, 0x07, 0x05, 0x03, 0x07, 0x02, 0x05, 0x01, 0x00, 0x04,
+	0x00, 0x00, 0x0B, 0x0B, 0x0B, 0x09, 0x0B, 0x0B, 0x0A, 0x0F, 0x0F, 0xBE, 0x00, 0x06, 0x05, 0x00,
+	0x0B, 0x08, 0x0C, 0x06, 0x0A, 0x00, 0x09, 0x00, 0x0F, 0x0B, 0x0A, 0x0A, 0x09, 0x0A, 0x0F, 0x0A,
+	0x0F, 0xFF, 0x00, 0x08, 0x05, 0x0D, 0x19, 0x16, 0x10, 0x0F, 0x1B, 0x14, 0x0E, 0x00, 0x0B, 0x0A,
+	0x0B, 0x0B, 0x0B, 0x0B, 0x09, 0x0A, 0x0F, 0xFF, 0x00, 0x08, 0x05, 0x11, 0x1D, 0x1C, 0x15, 0x21,
+	0x20, 0x18, 0x12, 0x00, 0x0B, 0x0B, 0x0B, 0x0B, 0x0A, 0x0A, 0x0A, 0x0B, 0x0F, 0xE3, 0x00, 0x05,
+	0x30, 0x1F, 0x22, 0x00, 0x00, 0x00, 0x24, 0x1A, 0x13, 0x00, 0x0B, 0x0B, 0x0F, 0x0F, 0x0F, 0x0A,
+	0x0A, 0x0A, 0x0F, 0xC1, 0x00, 0x03, 0x05, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x17, 0x00,
+	0x0B, 0x0F, 0x0F, 0x0F, 0x0F, 
+	0x00, 0x01, 0xD9, 0x00, 0x80, 0x0F, 0x0B, 0x0A, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0xDA, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0xDB, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x62, 0x65, 0x00, 0x00, 
+	0x00, 0x01, 0xDC, 0x00, 0x80, 0x24, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0xF3, 0xCC, 
+	0x00, 0x01, 0xFF, 0x00, 0x80, 0x3C, 0x00, 0x3C, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0xD4, 0xFB,
+	0xDB, 0x81, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x99, 0xD6, 0x00, 0x00, 0xF8, 0x25, 0x13, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0xC0, 0xED,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 
+	
+};
+/* DTS2013012402104 houming 20130124 end >*/
+/* DTS2013050605374 shenjinming 20130508 end > */
\ No newline at end of file
diff --git a/drivers/input/touchscreen/cypress/cyttsp4_loader.c b/drivers/input/touchscreen/cypress/cyttsp4_loader.c
new file mode 100644
index 0000000..cd882be
--- /dev/null
+++ b/drivers/input/touchscreen/cypress/cyttsp4_loader.c
@@ -0,0 +1,1883 @@
+/*
+ * cyttsp4_loader.c
+ * Cypress TrueTouch(TM) Standard Product V4 FW loader module.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2009-2012 Cypress Semiconductor, Inc.
+ * Copyright (C) 2011 Motorola Mobility, Inc.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#include <asm/unaligned.h>
+#include <linux/delay.h>
+#include <linux/gpio.h>
+#include <linux/interrupt.h>
+#include <linux/pm_runtime.h>
+#include <linux/slab.h>
+#include <linux/firmware.h>
+#include <linux/cyttsp4_bus.h>
+#include <linux/cyttsp4_core.h>
+#include "cyttsp4_regs.h"
+
+#define CYTTSP4_LOADER_NAME "cyttsp4_loader"
+#define CYTTSP4_AUTO_LOAD_FOR_CORRUPTED_FW 1
+
+#define CYTTSP4_FW_UPGRADE \
+	(defined(CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_PLATFORM_FW_UPGRADE) \
+	|| defined(CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_BINARY_FW_UPGRADE))
+
+#define CYTTSP4_TTCONFIG_UPGRADE \
+	(defined(CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_PLATFORM_TTCONFIG_UPGRADE) \
+	|| defined(CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_MANUAL_TTCONFIG_UPGRADE))
+
+/* Timeout values in ms. */
+#define CY_CMD_TIMEOUT					500
+#define CY_CMD_LDR_INIT_TIMEOUT				10000
+#define CY_LDR_REQUEST_EXCLUSIVE_TIMEOUT		5000
+
+#define CY_CMD_BYTE					1
+#define CY_STATUS_BYTE					1
+#define CY_MAX_STATUS_SIZE				32
+#define CY_START_OF_PACKET				0x01
+#define CY_END_OF_PACKET				0x17
+#define CY_DATA_ROW_SIZE				288
+#define CY_DATA_ROW_SIZE_TMA400				128
+#define CY_PACKET_DATA_LEN				96
+#define CY_MAX_PACKET_LEN				512
+#define CY_COMM_BUSY					0xFF
+#define CY_CMD_BUSY					0xFE
+#define CY_ARRAY_ID_OFFSET				0
+#define CY_ROW_NUM_OFFSET				1
+#define CY_ROW_SIZE_OFFSET				3
+#define CY_ROW_DATA_OFFSET				5
+#define CY_CMD_LDR_HOST_SYNC				0xFF /* tma400 */
+#define CY_CMD_LDR_EXIT					0x3B
+#define CY_CMD_LDR_EXIT_CMD_SIZE			7
+#define CY_CMD_LDR_EXIT_STAT_SIZE			7
+#define CY_CMD_LDR_ENTER				0x38
+#define CY_CMD_LDR_ENTER_CMD_SIZE			7
+#define CY_CMD_LDR_ENTER_STAT_SIZE			15
+#define CY_CMD_LDR_INIT					0x48
+#define CY_CMD_LDR_INIT_CMD_SIZE			15
+#define CY_CMD_LDR_INIT_STAT_SIZE			7
+#define CY_CMD_LDR_ERASE_ROW				0x34
+#define CY_CMD_LDR_ERASE_ROW_CMD_SIZE			10
+#define CY_CMD_LDR_ERASE_ROW_STAT_SIZE			7
+#define CY_CMD_LDR_SEND_DATA				0x37
+#define CY_CMD_LDR_SEND_DATA_CMD_SIZE			4 /* hdr bytes only */
+#define CY_CMD_LDR_SEND_DATA_STAT_SIZE			8
+#define CY_CMD_LDR_PROG_ROW				0x39
+#define CY_CMD_LDR_PROG_ROW_CMD_SIZE			7 /* hdr bytes only */
+#define CY_CMD_LDR_PROG_ROW_STAT_SIZE			7
+#define CY_CMD_LDR_VERIFY_ROW				0x3A
+#define CY_CMD_LDR_VERIFY_ROW_STAT_SIZE			8
+#define CY_CMD_LDR_VERIFY_ROW_CMD_SIZE			10
+#define CY_CMD_LDR_VERIFY_CHKSUM			0x31
+#define CY_CMD_LDR_VERIFY_CHKSUM_CMD_SIZE		7
+#define CY_CMD_LDR_VERIFY_CHKSUM_STAT_SIZE		8
+
+struct cyttsp4_loader_data {
+	struct cyttsp4_device *ttsp;
+	struct cyttsp4_sysinfo *si;
+	u8 status_buf[CY_MAX_STATUS_SIZE];
+	struct completion int_running;
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_BINARY_FW_UPGRADE
+	struct completion builtin_bin_fw_complete;
+	int builtin_bin_fw_status;
+#endif
+	struct work_struct fw_and_config_upgrade;
+	struct work_struct calibration_work;
+	struct cyttsp4_loader_platform_data *loader_pdata;
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_MANUAL_TTCONFIG_UPGRADE
+	struct mutex config_lock;
+	u8 *config_data;
+	int config_size;
+	bool config_loading;
+#endif
+};
+
+struct cyttsp4_dev_id {
+	u32 silicon_id;
+	u8 rev_id;
+	u32 bl_ver;
+};
+
+enum ldr_status {
+	ERROR_SUCCESS = 0,
+	ERROR_COMMAND = 1,
+	ERROR_FLASH_ARRAY = 2,
+	ERROR_PACKET_DATA = 3,
+	ERROR_PACKET_LEN = 4,
+	ERROR_PACKET_CHECKSUM = 5,
+	ERROR_FLASH_PROTECTION = 6,
+	ERROR_FLASH_CHECKSUM = 7,
+	ERROR_VERIFY_IMAGE = 8,
+	ERROR_UKNOWN1 = 9,
+	ERROR_UKNOWN2 = 10,
+	ERROR_UKNOWN3 = 11,
+	ERROR_UKNOWN4 = 12,
+	ERROR_UKNOWN5 = 13,
+	ERROR_UKNOWN6 = 14,
+	ERROR_INVALID_COMMAND = 15,
+	ERROR_INVALID
+};
+
+#if CYTTSP4_FW_UPGRADE || CYTTSP4_TTCONFIG_UPGRADE
+/*
+ * return code:
+ * -1: Firmware version compared is older
+ *  0: Firmware version compared is identical
+ *  1: Firmware version compared is newer
+ */
+static int cyttsp4_check_firmware_version(struct cyttsp4_device *ttsp,
+		u32 fw_ver_new, u32 fw_revctrl_new_h, u32 fw_revctrl_new_l)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_loader_data *data = dev_get_drvdata(dev);
+	u32 fw_ver_img;
+	u32 fw_revctrl_img_h;
+	u32 fw_revctrl_img_l;
+
+	fw_ver_img = data->si->si_ptrs.cydata->fw_ver_major << 8;
+	fw_ver_img += data->si->si_ptrs.cydata->fw_ver_minor;
+
+	dev_dbg(dev, "%s: img vers:0x%04X new vers:0x%04X\n", __func__,
+			fw_ver_img, fw_ver_new);
+
+	if (fw_ver_new > fw_ver_img)
+		return 1;
+
+	if (fw_ver_new < fw_ver_img)
+		return -1;
+
+	fw_revctrl_img_h = be32_to_cpu(
+		*(u32 *)(data->si->si_ptrs.cydata->revctrl + 0));
+
+	dev_dbg(dev, "%s: img revctrl_h:0x%04X new revctrl_h:0x%04X\n",
+			__func__, fw_revctrl_img_h, fw_revctrl_new_h);
+
+	if (fw_revctrl_new_h > fw_revctrl_img_h)
+		return 1;
+
+	if (fw_revctrl_new_h < fw_revctrl_img_h)
+		return -1;
+
+	fw_revctrl_img_l = be32_to_cpu(
+		*(u32 *)(data->si->si_ptrs.cydata->revctrl + 4));
+
+	dev_dbg(dev, "%s: img revctrl_l:0x%04X new revctrl_l:0x%04X\n",
+			__func__, fw_revctrl_img_l, fw_revctrl_new_l);
+
+	if (fw_revctrl_new_l > fw_revctrl_img_l)
+		return 1;
+
+	if (fw_revctrl_new_l < fw_revctrl_img_l)
+		return -1;
+
+	return 0;
+}
+#endif /* CYTTSP4_FW_UPGRADE || CYTTSP4_TTCONFIG_UPGRADE */
+
+
+#if CYTTSP4_FW_UPGRADE
+static u16 _cyttsp4_compute_crc(struct cyttsp4_device *ttsp, u8 *buf, int size)
+{
+	u16 crc = 0xffff;
+	u16 tmp;
+	int i;
+
+	if (size == 0)
+		crc = ~crc;
+	else {
+
+		do {
+			for (i = 0, tmp = 0x00ff & *buf++; i < 8;
+				i++, tmp >>= 1) {
+				if ((crc & 0x0001) ^ (tmp & 0x0001))
+					crc = (crc >> 1) ^ 0x8408;
+				else
+					crc >>= 1;
+			}
+		} while (--size);
+
+		crc = ~crc;
+		tmp = crc;
+		crc = (crc << 8) | (tmp >> 8 & 0xFF);
+	}
+
+	return crc;
+}
+
+static u16 _cyttsp4_get_short(u8 *buf)
+{
+	return ((u16)(*buf) << 8) + *(buf+1);
+}
+
+static u8 *_cyttsp4_get_row(struct cyttsp4_device *ttsp,
+			    u8 *row_buf, u8 *image_buf, int size)
+{
+	memcpy(row_buf, image_buf, size);
+	image_buf = image_buf + size;
+	return image_buf;
+}
+
+static int _cyttsp4_get_status(struct cyttsp4_device *ttsp,
+			       u8 *buf, int size, unsigned long timeout_ms)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_loader_data *data = dev_get_drvdata(dev);
+
+	unsigned long uretval;
+	int tries;
+	int retval = 0;
+
+	if (timeout_ms != 0) {
+		/* wait until status ready interrupt or timeout occurs */
+		uretval = wait_for_completion_timeout(
+			&data->int_running, msecs_to_jiffies(timeout_ms));
+
+		/* TODO: Reconsider purpose of having retries here */
+		for (tries = 0; tries < 2; tries++) {
+			retval = cyttsp4_read(ttsp, CY_MODE_BOOTLOADER,
+					      CY_REG_BASE, buf, size);
+			/*
+			 * retry if bus read error or
+			 * status byte shows not ready
+			 */
+			if (buf[1] == CY_COMM_BUSY || buf[1] == CY_CMD_BUSY)
+				msleep(20); /* TODO: Constant if code kept */
+			else
+				break;
+		}
+		dev_vdbg(dev,
+			"%s: tries=%d ret=%d status=%02X\n",
+			__func__, tries, retval, buf[1]);
+	}
+
+	return retval;
+}
+
+static int _cyttsp4_send_cmd(struct cyttsp4_device *ttsp, const u8 *cmd_buf,
+			     int cmd_size, u8 *stat_ret, size_t num_stat_byte,
+			     size_t status_size, unsigned long timeout_ms)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_loader_data *data = dev_get_drvdata(dev);
+
+	u8 *status_buf = data->status_buf;
+	int retval = 0;
+
+	if (cmd_buf == NULL)
+		goto _cyttsp4_send_cmd_exit;
+
+	if (cmd_size == 0)
+		goto _cyttsp4_send_cmd_exit;
+
+	if (timeout_ms > 0)
+		INIT_COMPLETION(data->int_running);
+	retval = cyttsp4_write(ttsp, CY_MODE_BOOTLOADER,
+			       CY_REG_BASE, cmd_buf, cmd_size);
+	if (retval < 0) {
+		dev_err(dev,
+			"%s: Fail writing command=%02X\n",
+			__func__, cmd_buf[CY_CMD_BYTE]);
+		goto _cyttsp4_send_cmd_exit;
+	}
+
+	if (timeout_ms > 0) {
+		memset(status_buf, 0, sizeof(data->status_buf));
+		retval = _cyttsp4_get_status(ttsp, status_buf,
+			status_size, timeout_ms);
+		if (retval < 0 || status_buf[0] != CY_START_OF_PACKET) {
+			dev_err(dev,
+				"%s: Error getting status r=%d"
+				" status_buf[0]=%02X\n",
+				__func__, retval, status_buf[0]);
+			if (!(retval < 0))
+				retval = -EIO;
+			goto _cyttsp4_send_cmd_exit;
+		} else {
+			if (status_buf[CY_STATUS_BYTE] != ERROR_SUCCESS) {
+				dev_err(dev,
+					"%s: Status=0x%02X error\n",
+					__func__, status_buf[CY_STATUS_BYTE]);
+				retval = -EIO;
+			} else if (stat_ret != NULL) {
+				if (num_stat_byte < status_size)
+					*stat_ret = status_buf[num_stat_byte];
+				else
+					*stat_ret = 0;
+			}
+		}
+	} else {
+		if (stat_ret != NULL)
+			*stat_ret = ERROR_SUCCESS;
+	}
+
+_cyttsp4_send_cmd_exit:
+	return retval;
+}
+
+static int _cyttsp4_ldr_enter(struct cyttsp4_device *ttsp,
+		struct cyttsp4_dev_id *dev_id)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_loader_data *data = dev_get_drvdata(dev);
+
+	u16 crc = 0;
+	int i = 0;
+	size_t cmd_size = 0;
+	u8 *status_buf = &data->status_buf[0];
+	u8 status = 0;
+	int retval;
+	/* +1 for TMA400 host sync byte */
+	u8 ldr_enter_cmd[CY_CMD_LDR_ENTER_CMD_SIZE+1];
+	memset(status_buf, 0, sizeof(data->status_buf));
+	dev_id->bl_ver = 0;
+	dev_id->rev_id = 0;
+	dev_id->silicon_id = 0;
+
+	ldr_enter_cmd[i++] = CY_CMD_LDR_HOST_SYNC;
+	ldr_enter_cmd[i++] = CY_START_OF_PACKET;
+	ldr_enter_cmd[i++] = CY_CMD_LDR_ENTER;
+	ldr_enter_cmd[i++] = 0x00;	/* data len lsb */
+	ldr_enter_cmd[i++] = 0x00;	/* data len msb */
+	crc = _cyttsp4_compute_crc(ttsp, &ldr_enter_cmd[1], i - 1);
+	cmd_size = sizeof(ldr_enter_cmd);
+	ldr_enter_cmd[i++] = (u8)crc;
+	ldr_enter_cmd[i++] = (u8)(crc >> 8);
+	ldr_enter_cmd[i++] = CY_END_OF_PACKET;
+
+	INIT_COMPLETION(data->int_running);
+
+	retval = cyttsp4_write(ttsp, CY_MODE_BOOTLOADER,
+		CY_REG_BASE, ldr_enter_cmd, cmd_size);
+	if (retval < 0) {
+		dev_err(dev,
+			"%s: write block failed %d\n", __func__, retval);
+		return retval;
+	}
+	retval = _cyttsp4_get_status(ttsp, status_buf,
+		CY_CMD_LDR_ENTER_STAT_SIZE, CY_CMD_TIMEOUT);
+
+	if (retval < 0) {
+		dev_err(dev,
+			"%s: Fail get status to Enter Loader command r=%d\n",
+			__func__, retval);
+		return retval;
+	}
+	status = status_buf[CY_STATUS_BYTE];
+	if (status == ERROR_SUCCESS) {
+		dev_id->bl_ver =
+			status_buf[11] << 16 |
+			status_buf[10] <<  8 |
+			status_buf[9] <<  0;
+		dev_id->rev_id =
+			status_buf[8] <<  0;
+		dev_id->silicon_id =
+			status_buf[7] << 24 |
+			status_buf[6] << 16 |
+			status_buf[5] <<  8 |
+			status_buf[4] <<  0;
+		retval = 0;
+	} else
+		retval = -EIO;
+	dev_vdbg(dev,
+		 "%s: status=%d "
+		 "bl_ver=%08X rev_id=%02X silicon_id=%08X\n",
+		 __func__, status,
+		 dev_id->bl_ver, dev_id->rev_id, dev_id->silicon_id);
+
+	return retval;
+}
+
+static int _cyttsp4_ldr_init(struct cyttsp4_device *ttsp)
+{
+	u16 crc;
+	int i = 0;
+	int retval = 0;
+	const u8 *cyttsp4_security_key;
+	int key_size;
+	/* +1 for TMA400 host sync byte */
+	u8 ldr_init_cmd[CY_CMD_LDR_INIT_CMD_SIZE+1];
+
+	cyttsp4_security_key = cyttsp4_get_security_key(ttsp, &key_size);
+
+	ldr_init_cmd[i++] = CY_CMD_LDR_HOST_SYNC;
+	ldr_init_cmd[i++] = CY_START_OF_PACKET;
+	ldr_init_cmd[i++] = CY_CMD_LDR_INIT;
+	ldr_init_cmd[i++] = 0x08;	/* data len lsb */
+	ldr_init_cmd[i++] = 0x00;	/* data len msb */
+	memcpy(&ldr_init_cmd[i], cyttsp4_security_key,
+			key_size);
+	i += key_size;
+	crc = _cyttsp4_compute_crc(ttsp, &ldr_init_cmd[1], i - 1);
+	ldr_init_cmd[i++] = (u8)crc;
+	ldr_init_cmd[i++] = (u8)(crc >> 8);
+	ldr_init_cmd[i++] = CY_END_OF_PACKET;
+
+	retval = _cyttsp4_send_cmd(ttsp, ldr_init_cmd, i, NULL, 0,
+				   CY_CMD_LDR_INIT_STAT_SIZE,
+				   CY_CMD_LDR_INIT_TIMEOUT);
+	if (retval < 0) {
+		dev_err(&ttsp->dev,
+			"%s: Fail ldr init r=%d\n",
+			__func__, retval);
+	}
+
+	return retval;
+}
+
+struct cyttsp4_hex_image {
+	u8 array_id;
+	u16 row_num;
+	u16 row_size;
+	u8 row_data[CY_DATA_ROW_SIZE];
+} __packed;
+
+static int _cyttsp4_ldr_parse_row(struct cyttsp4_device *ttsp, u8 *row_buf,
+	struct cyttsp4_hex_image *row_image)
+{
+	int retval = 0;
+
+	row_image->array_id = row_buf[CY_ARRAY_ID_OFFSET];
+	row_image->row_num = _cyttsp4_get_short(&row_buf[CY_ROW_NUM_OFFSET]);
+	row_image->row_size = _cyttsp4_get_short(&row_buf[CY_ROW_SIZE_OFFSET]);
+
+	if (row_image->row_size > ARRAY_SIZE(row_image->row_data)) {
+		dev_err(&ttsp->dev,
+			"%s: row data buffer overflow\n", __func__);
+		retval = -EOVERFLOW;
+		goto cyttsp4_ldr_parse_row_exit;
+	}
+
+	memcpy(row_image->row_data, &row_buf[CY_ROW_DATA_OFFSET],
+	       row_image->row_size);
+cyttsp4_ldr_parse_row_exit:
+	return retval;
+}
+
+static int _cyttsp4_ldr_prog_row(struct cyttsp4_device *ttsp,
+				 struct cyttsp4_hex_image *row_image)
+{
+	u16 crc;
+	int next;
+	int data;
+	int row_data;
+	u16 row_sum;
+	size_t data_len;
+	int retval = 0;
+
+	u8 *cmd = kzalloc(CY_MAX_PACKET_LEN, GFP_KERNEL);
+
+	if (cmd != NULL) {
+		row_data = 0;
+		row_sum = 0;
+		next = 0;
+		cmd[next++] = CY_CMD_LDR_HOST_SYNC;
+		cmd[next++] = CY_START_OF_PACKET;
+		cmd[next++] = CY_CMD_LDR_PROG_ROW;
+		/*
+		 * include array id size and row id size in CY_PACKET_DATA_LEN
+		 */
+		data_len = CY_DATA_ROW_SIZE_TMA400;
+		cmd[next++] = (u8)(data_len+3);
+		cmd[next++] = (u8)((data_len+3) >> 8);
+		cmd[next++] = row_image->array_id;
+		cmd[next++] = (u8)row_image->row_num;
+		cmd[next++] = (u8)(row_image->row_num >> 8);
+
+		for (data = 0;
+			data < data_len; data++) {
+			cmd[next] = row_image->row_data[row_data++];
+			row_sum += cmd[next];
+			next++;
+		}
+
+		crc = _cyttsp4_compute_crc(ttsp, &cmd[1], next - 1);
+		cmd[next++] = (u8)crc;
+		cmd[next++] = (u8)(crc >> 8);
+		cmd[next++] = CY_END_OF_PACKET;
+
+		retval = _cyttsp4_send_cmd(ttsp, cmd, next, NULL, 0,
+					   CY_CMD_LDR_PROG_ROW_STAT_SIZE,
+					   CY_CMD_TIMEOUT);
+
+		if (retval < 0) {
+			dev_err(&ttsp->dev,
+				"%s: prog row=%d fail r=%d\n",
+				__func__, row_image->row_num, retval);
+			goto cyttsp4_ldr_prog_row_exit;
+		}
+
+	} else {
+		dev_err(&ttsp->dev,
+			"%s prog row error - cmd buf is NULL\n", __func__);
+		retval = -EIO;
+	}
+
+cyttsp4_ldr_prog_row_exit:
+	kfree(cmd);
+	return retval;
+}
+
+static int _cyttsp4_ldr_verify_row(struct cyttsp4_device *ttsp,
+	struct cyttsp4_hex_image *row_image)
+{
+	u16 crc = 0;
+	int i = 0;
+	u8 verify_checksum;
+	int retval = 0;
+	/* +1 for TMA400 host sync byte */
+	u8 ldr_verify_row_cmd[CY_CMD_LDR_VERIFY_ROW_CMD_SIZE+1];
+
+	ldr_verify_row_cmd[i++] = CY_CMD_LDR_HOST_SYNC;
+	ldr_verify_row_cmd[i++] = CY_START_OF_PACKET;
+	ldr_verify_row_cmd[i++] = CY_CMD_LDR_VERIFY_ROW;
+	ldr_verify_row_cmd[i++] = 0x03;	/* data len lsb */
+	ldr_verify_row_cmd[i++] = 0x00;	/* data len msb */
+	ldr_verify_row_cmd[i++] = row_image->array_id;
+	ldr_verify_row_cmd[i++] = (u8)row_image->row_num;
+	ldr_verify_row_cmd[i++] = (u8)(row_image->row_num >> 8);
+	crc = _cyttsp4_compute_crc(ttsp, &ldr_verify_row_cmd[1], i - 1);
+	ldr_verify_row_cmd[i++] = (u8)crc;
+	ldr_verify_row_cmd[i++] = (u8)(crc >> 8);
+	ldr_verify_row_cmd[i++] = CY_END_OF_PACKET;
+
+	retval = _cyttsp4_send_cmd(ttsp, ldr_verify_row_cmd, i,
+				   &verify_checksum, 4,
+				   CY_CMD_LDR_VERIFY_ROW_STAT_SIZE,
+				   CY_CMD_TIMEOUT);
+
+	if (retval < 0) {
+		dev_err(&ttsp->dev,
+			"%s: verify row=%d fail r=%d\n",
+			__func__, row_image->row_num, retval);
+	}
+
+	return retval;
+}
+
+static int _cyttsp4_ldr_verify_chksum(struct cyttsp4_device *ttsp,
+	u8 *app_chksum)
+{
+	u16 crc = 0;
+	int i = 0;
+	int retval = 0;
+	/* +1 for TMA400 host sync byte */
+	u8 ldr_verify_chksum_cmd[CY_CMD_LDR_VERIFY_CHKSUM_CMD_SIZE+1];
+
+	ldr_verify_chksum_cmd[i++] = CY_CMD_LDR_HOST_SYNC;
+	ldr_verify_chksum_cmd[i++] = CY_START_OF_PACKET;
+	ldr_verify_chksum_cmd[i++] = CY_CMD_LDR_VERIFY_CHKSUM;
+	ldr_verify_chksum_cmd[i++] = 0x00;	/* data len lsb */
+	ldr_verify_chksum_cmd[i++] = 0x00;	/* data len msb */
+	crc = _cyttsp4_compute_crc(ttsp, &ldr_verify_chksum_cmd[1], i - 1);
+	ldr_verify_chksum_cmd[i++] = (u8)crc;
+	ldr_verify_chksum_cmd[i++] = (u8)(crc >> 8);
+	ldr_verify_chksum_cmd[i++] = CY_END_OF_PACKET;
+
+	retval = _cyttsp4_send_cmd(ttsp, ldr_verify_chksum_cmd, i,
+				   app_chksum, 4,
+				   CY_CMD_LDR_VERIFY_CHKSUM_STAT_SIZE,
+				   CY_CMD_TIMEOUT);
+
+	if (retval < 0) {
+		dev_err(&ttsp->dev,
+			"%s: verify checksum fail r=%d\n",
+			__func__, retval);
+	}
+
+	return retval;
+}
+
+/* Constructs loader exit command and sends via _cyttsp4_send_cmd() */
+static int _cyttsp4_ldr_exit(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	u16 crc = 0;
+	int i = 0;
+	int retval;
+	/* +1 for TMA400 host sync byte */
+	u8 ldr_exit_cmd[CY_CMD_LDR_EXIT_CMD_SIZE+1];
+
+	ldr_exit_cmd[i++] = CY_CMD_LDR_HOST_SYNC;
+	ldr_exit_cmd[i++] = CY_START_OF_PACKET;
+	ldr_exit_cmd[i++] = CY_CMD_LDR_EXIT;
+	ldr_exit_cmd[i++] = 0x00;	/* data len lsb */
+	ldr_exit_cmd[i++] = 0x00;	/* data len msb */
+	crc = _cyttsp4_compute_crc(ttsp, &ldr_exit_cmd[1], i - 1);
+	ldr_exit_cmd[i++] = (u8)crc;
+	ldr_exit_cmd[i++] = (u8)(crc >> 8);
+	ldr_exit_cmd[i++] = CY_END_OF_PACKET;
+
+	retval = _cyttsp4_send_cmd(ttsp, ldr_exit_cmd, i, NULL, 0,
+				   CY_CMD_LDR_EXIT_STAT_SIZE, 0);
+
+	if (retval < 0) {
+		dev_err(dev,
+			"%s: BL Loader exit fail r=%d\n",
+			__func__, retval);
+	}
+
+	dev_vdbg(dev,
+		"%s: Exit BL Loader r=%d\n", __func__, retval);
+
+	return retval;
+}
+
+static int _cyttsp4_load_app(struct cyttsp4_device *ttsp, const u8 *fw,
+			     int fw_size)
+{
+	struct device *dev = &ttsp->dev;
+	u8 *p;
+	int ret;
+	int retval;	/* need separate return value at exit stage */
+	struct cyttsp4_dev_id *file_id = NULL;
+	struct cyttsp4_dev_id *dev_id = NULL;
+	struct cyttsp4_hex_image *row_image = NULL;
+	u8 app_chksum;
+
+	u8 *row_buf = NULL;
+	/* Prevent loading if TMA ver not defined. */
+	size_t image_rec_size = fw_size + 1;
+	size_t row_buf_size = 1024 > CY_MAX_PRBUF_SIZE ?
+		1024 : CY_MAX_PRBUF_SIZE;
+	int row_count = 0;
+
+	image_rec_size = CY_DATA_ROW_SIZE_TMA400 +
+		(sizeof(struct cyttsp4_hex_image) - CY_DATA_ROW_SIZE);
+	if (fw_size % image_rec_size != 0) {
+		dev_err(dev,
+			"%s: Firmware image is misaligned\n", __func__);
+		retval = -EINVAL;
+		goto _cyttsp4_load_app_exit;
+	}
+
+	dev_info(dev, "%s: start load app\n", __func__);
+
+	row_buf = kzalloc(row_buf_size, GFP_KERNEL);
+	row_image = kzalloc(sizeof(struct cyttsp4_hex_image), GFP_KERNEL);
+	file_id = kzalloc(sizeof(struct cyttsp4_dev_id), GFP_KERNEL);
+	dev_id = kzalloc(sizeof(struct cyttsp4_dev_id), GFP_KERNEL);
+	if (row_buf == NULL || row_image == NULL ||
+	    file_id == NULL || dev_id == NULL) {
+		dev_err(dev,
+			"%s: Unable to alloc row buffers(%p %p %p %p)\n",
+			__func__, row_buf, row_image, file_id, dev_id);
+		retval = -ENOMEM;
+		goto _cyttsp4_load_app_exit;
+	}
+
+	cyttsp4_request_stop_wd(ttsp);
+
+	p = (u8 *)fw;
+	/* Enter Loader and return Silicon ID and Rev */
+
+	retval = cyttsp4_request_reset(ttsp);
+	if (retval < 0) {
+		dev_err(dev,
+			"%s: Fail reset device r=%d\n", __func__, retval);
+		goto _cyttsp4_load_app_exit;
+	}
+
+	dev_info(dev, "%s: Send BL Loader Enter\n", __func__);
+
+	retval = _cyttsp4_ldr_enter(ttsp, dev_id);
+	if (retval < 0) {
+		dev_err(dev,
+			"%s: Error cannot start Loader (ret=%d)\n",
+			__func__, retval);
+		goto _cyttsp4_load_app_exit;
+	}
+
+	dev_vdbg(dev,
+		"%s: dev: silicon id=%08X rev=%02X bl=%08X\n",
+		__func__, dev_id->silicon_id,
+		dev_id->rev_id, dev_id->bl_ver);
+
+	udelay(1000);
+	retval = _cyttsp4_ldr_init(ttsp);
+	if (retval < 0) {
+		dev_err(dev,
+			"%s: Error cannot init Loader (ret=%d)\n",
+			__func__, retval);
+		goto _cyttsp4_load_app_exit;
+	}
+
+	dev_info(dev, "%s: Send BL Loader Blocks\n", __func__);
+
+	while (p < (fw + fw_size)) {
+		/* Get row */
+		dev_dbg(dev,
+			"%s: read row=%d\n", __func__, ++row_count);
+		memset(row_buf, 0, row_buf_size);
+		p = _cyttsp4_get_row(ttsp, row_buf, p, image_rec_size);
+
+		/* Parse row */
+		dev_vdbg(dev,
+			"%s: p=%p buf=%p buf[0]=%02X\n", __func__,
+			p, row_buf, row_buf[0]);
+		retval = _cyttsp4_ldr_parse_row(ttsp, row_buf, row_image);
+		dev_vdbg(dev,
+			"%s: array_id=%02X row_num=%04X(%d)"
+				" row_size=%04X(%d)\n", __func__,
+			row_image->array_id,
+			row_image->row_num, row_image->row_num,
+			row_image->row_size, row_image->row_size);
+		if (retval < 0) {
+			dev_err(dev,
+			"%s: Parse Row Error "
+				"(a=%d r=%d ret=%d\n",
+				__func__, row_image->array_id,
+				row_image->row_num,
+				retval);
+			goto bl_exit;
+		} else {
+			dev_vdbg(dev,
+				"%s: Parse Row "
+				"(a=%d r=%d ret=%d\n",
+				__func__, row_image->array_id,
+				row_image->row_num, retval);
+		}
+
+		/* program row */
+		retval = _cyttsp4_ldr_prog_row(ttsp, row_image);
+		if (retval < 0) {
+			dev_err(dev,
+			"%s: Program Row Error "
+				"(array=%d row=%d ret=%d)\n",
+				__func__, row_image->array_id,
+				row_image->row_num, retval);
+			goto _cyttsp4_load_app_exit;
+		}
+
+		/* verify row */
+		retval = _cyttsp4_ldr_verify_row(ttsp, row_image);
+		if (retval < 0) {
+			dev_err(dev,
+			"%s: Verify Row Error "
+				"(array=%d row=%d ret=%d)\n",
+				__func__, row_image->array_id,
+				row_image->row_num, retval);
+			goto _cyttsp4_load_app_exit;
+		}
+
+		dev_vdbg(dev,
+			"%s: array=%d row_cnt=%d row_num=%04X\n",
+			__func__, row_image->array_id, row_count,
+			row_image->row_num);
+	}
+
+	/* verify app checksum */
+	retval = _cyttsp4_ldr_verify_chksum(ttsp, &app_chksum);
+	dev_dbg(dev,
+		"%s: Application Checksum = %02X r=%d\n",
+		__func__, app_chksum, retval);
+	if (retval < 0) {
+		dev_err(dev,
+			"%s: ldr_verify_chksum fail r=%d\n", __func__, retval);
+		retval = 0;
+	}
+
+	/* exit loader */
+bl_exit:
+	dev_info(dev,
+			"%s: Send BL Loader Terminate\n", __func__);
+	ret = _cyttsp4_ldr_exit(ttsp);
+	if (ret) {
+		dev_err(dev,
+			"%s: Error on exit Loader (ret=%d)\n",
+			__func__, ret);
+		retval = ret;
+	}
+
+_cyttsp4_load_app_exit:
+	kfree(row_buf);
+	kfree(row_image);
+	kfree(file_id);
+	kfree(dev_id);
+	return retval;
+}
+
+static void cyttsp4_fw_calibrate(struct work_struct *calibration_work)
+{
+	struct cyttsp4_loader_data *data = container_of(calibration_work,
+			struct cyttsp4_loader_data, calibration_work);
+	struct cyttsp4_device *ttsp = data->ttsp;
+	struct device *dev = &ttsp->dev;
+	u8 cmd_buf[CY_CMD_CAT_CALIBRATE_IDAC_CMD_SZ];
+	u8 return_buf[CY_CMD_CAT_CALIBRATE_IDAC_RET_SZ];
+	int rc;
+
+	dev_vdbg(dev, "%s\n", __func__);
+
+	pm_runtime_get_sync(dev);
+
+	dev_vdbg(dev, "%s: Requesting exclusive\n", __func__);
+	rc = cyttsp4_request_exclusive(ttsp, CY_LDR_REQUEST_EXCLUSIVE_TIMEOUT);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error on request exclusive r=%d\n",
+				__func__, rc);
+		goto exit;
+	}
+
+	dev_vdbg(dev, "%s: Requesting mode change to CAT\n", __func__);
+	rc = cyttsp4_request_set_mode(ttsp, CY_MODE_CAT);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error on request set mode r=%d\n",
+				__func__, rc);
+		goto exit_release;
+	}
+
+	cmd_buf[0] = CY_CMD_CAT_CALIBRATE_IDACS;
+	cmd_buf[1] = 0x00; /* Mutual Capacitance Screen */
+	rc = cyttsp4_request_exec_cmd(ttsp, CY_MODE_CAT,
+			cmd_buf, CY_CMD_CAT_CALIBRATE_IDAC_CMD_SZ,
+			return_buf, CY_CMD_CAT_CALIBRATE_IDAC_RET_SZ,
+			CY_CALIBRATE_COMPLETE_TIMEOUT);
+	if (rc < 0) {
+		dev_err(dev, "%s: Unable to execute calibrate command.\n",
+			__func__);
+		goto exit_setmode;
+	}
+	if (return_buf[0] != CY_CMD_STATUS_SUCCESS) {
+		dev_err(dev, "%s: calibrate command unsuccessful\n", __func__);
+		goto exit_setmode;
+	}
+
+	cmd_buf[1] = 0x01; /* Mutual Capacitance Button */
+	rc = cyttsp4_request_exec_cmd(ttsp, CY_MODE_CAT,
+			cmd_buf, CY_CMD_CAT_CALIBRATE_IDAC_CMD_SZ,
+			return_buf, CY_CMD_CAT_CALIBRATE_IDAC_RET_SZ,
+			CY_CALIBRATE_COMPLETE_TIMEOUT);
+	if (rc < 0) {
+		dev_err(dev, "%s: Unable to execute calibrate command.\n",
+			__func__);
+		goto exit_setmode;
+	}
+	if (return_buf[0] != CY_CMD_STATUS_SUCCESS) {
+		dev_err(dev, "%s: calibrate command unsuccessful\n", __func__);
+		goto exit_setmode;
+	}
+
+	cmd_buf[1] = 0x02; /* Self Capacitance */
+	rc = cyttsp4_request_exec_cmd(ttsp, CY_MODE_CAT,
+			cmd_buf, CY_CMD_CAT_CALIBRATE_IDAC_CMD_SZ,
+			return_buf, CY_CMD_CAT_CALIBRATE_IDAC_RET_SZ,
+			CY_CALIBRATE_COMPLETE_TIMEOUT);
+	if (rc < 0) {
+		dev_err(dev, "%s: Unable to execute calibrate command.\n",
+			__func__);
+		goto exit_setmode;
+	}
+	if (return_buf[0] != CY_CMD_STATUS_SUCCESS) {
+		dev_err(dev, "%s: calibrate command unsuccessful\n", __func__);
+		goto exit_setmode;
+	}
+
+exit_setmode:
+	rc = cyttsp4_request_set_mode(ttsp, CY_MODE_OPERATIONAL);
+	if (rc < 0)
+		dev_err(dev, "%s: Error on request set mode 2 r=%d\n",
+				__func__, rc);
+
+exit_release:
+	rc = cyttsp4_release_exclusive(ttsp);
+	if (rc < 0)
+		dev_err(dev, "%s: Error on release exclusive r=%d\n",
+				__func__, rc);
+
+exit:
+	pm_runtime_put(dev);
+}
+
+static int cyttsp4_fw_calibration_attention(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_loader_data *data = dev_get_drvdata(dev);
+	int rc = 0;
+
+	dev_vdbg(dev, "%s\n", __func__);
+
+	schedule_work(&data->calibration_work);
+
+	cyttsp4_unsubscribe_attention(ttsp, CY_ATTEN_STARTUP,
+		cyttsp4_fw_calibration_attention, 0);
+
+	return rc;
+}
+
+static int cyttsp4_upgrade_firmware(struct cyttsp4_device *ttsp,
+		const u8 *fw_img, int fw_size)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_loader_data *data = dev_get_drvdata(dev);
+	int rc;
+
+	pm_runtime_get_sync(dev);
+
+	rc = cyttsp4_request_exclusive(ttsp, CY_LDR_REQUEST_EXCLUSIVE_TIMEOUT);
+	if (rc < 0)
+		goto exit;
+
+	rc = _cyttsp4_load_app(ttsp, fw_img, fw_size);
+	if (rc < 0) {
+		dev_err(dev, "%s: Firmware update failed with error code %d\n",
+			__func__, rc);
+	} else if (data->loader_pdata &&
+			(data->loader_pdata->flags &
+				CY_LOADER_FLAG_CALIBRATE_AFTER_FW_UPGRADE)) {
+		/* set up call back for startup */
+		dev_vdbg(dev, "%s: Adding callback for calibration\n",
+			__func__);
+		rc = cyttsp4_subscribe_attention(ttsp, CY_ATTEN_STARTUP,
+				cyttsp4_fw_calibration_attention, 0);
+		if (rc) {
+			dev_err(dev, "%s: Failed adding callback for calibration\n",
+				__func__);
+			dev_err(dev, "%s: No calibration will be performed\n",
+				__func__);
+			rc = 0;
+		}
+	}
+
+	cyttsp4_release_exclusive(ttsp);
+	cyttsp4_request_restart(ttsp, false);
+
+exit:
+	pm_runtime_put(dev);
+	return rc;
+}
+
+static int cyttsp4_loader_attention(struct cyttsp4_device *ttsp)
+{
+	struct cyttsp4_loader_data *data = dev_get_drvdata(&ttsp->dev);
+	complete(&data->int_running);
+	return 0;
+}
+#endif /* CYTTSP4_FW_UPGRADE */
+
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_PLATFORM_FW_UPGRADE
+static int cyttsp4_check_firmware_version_platform(struct cyttsp4_device *ttsp,
+		struct cyttsp4_touch_firmware *fw)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_loader_data *data = dev_get_drvdata(dev);
+	u32 fw_ver_new;
+	u32 fw_revctrl_new_h;
+	u32 fw_revctrl_new_l;
+	int upgrade;
+
+	if (!data->si) {
+		dev_info(dev, "%s: No firmware infomation found, device FW may be corrupted\n",
+			__func__);
+		return CYTTSP4_AUTO_LOAD_FOR_CORRUPTED_FW;
+	}
+
+	fw_ver_new = get_unaligned_be16(fw->ver + 2);
+	fw_revctrl_new_h = get_unaligned_be32(fw->ver + 4);
+	fw_revctrl_new_l = get_unaligned_be32(fw->ver + 8);
+
+	upgrade = cyttsp4_check_firmware_version(ttsp, fw_ver_new,
+			fw_revctrl_new_h, fw_revctrl_new_l);
+
+	if (upgrade > 0)
+		return 1;
+
+	return 0;
+}
+
+static int upgrade_firmware_from_platform(struct cyttsp4_device *ttsp,
+		bool forced)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_loader_data *data = dev_get_drvdata(dev);
+	struct cyttsp4_touch_firmware *fw;
+	int rc = -ENOSYS;
+	int upgrade;
+
+	if (data->loader_pdata == NULL) {
+		dev_err(dev, "%s: No loader platform data\n", __func__);
+		return rc;
+	}
+
+	fw = data->loader_pdata->fw;
+	if (fw == NULL || fw->img == NULL || fw->size == 0) {
+		dev_err(dev, "%s: No platform firmware\n", __func__);
+		return rc;
+	}
+
+	if (fw->ver == NULL || fw->vsize == 0) {
+		dev_err(dev, "%s: No platform firmware version\n",
+			__func__);
+		return rc;
+	}
+
+	if (forced)
+		upgrade = forced;
+	else
+		upgrade = cyttsp4_check_firmware_version_platform(ttsp, fw);
+
+	if (upgrade)
+		return cyttsp4_upgrade_firmware(ttsp, fw->img, fw->size);
+
+	return rc;
+}
+#endif /* CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_PLATFORM_FW_UPGRADE */
+
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_BINARY_FW_UPGRADE
+static void _cyttsp4_firmware_cont(const struct firmware *fw, void *context)
+{
+	struct cyttsp4_device *ttsp = context;
+	struct device *dev = &ttsp->dev;
+	u8 header_size = 0;
+
+	if (fw == NULL)
+		goto cyttsp4_firmware_cont_exit;
+
+	if (fw->data == NULL || fw->size == 0) {
+		dev_err(dev,
+			"%s: No firmware received\n", __func__);
+		goto cyttsp4_firmware_cont_release_exit;
+	}
+
+	header_size = fw->data[0];
+	if (header_size >= (fw->size + 1)) {
+		dev_err(dev,
+			"%s: Firmware format is invalid\n", __func__);
+		goto cyttsp4_firmware_cont_release_exit;
+	}
+
+	cyttsp4_upgrade_firmware(ttsp, &(fw->data[header_size + 1]),
+		fw->size - (header_size + 1));
+
+cyttsp4_firmware_cont_release_exit:
+	release_firmware(fw);
+
+cyttsp4_firmware_cont_exit:
+	return;
+}
+
+static int cyttsp4_check_firmware_version_builtin(struct cyttsp4_device *ttsp,
+		const struct firmware *fw)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_loader_data *data = dev_get_drvdata(dev);
+	u32 fw_ver_new;
+	u32 fw_revctrl_new_h;
+	u32 fw_revctrl_new_l;
+	int upgrade;
+
+	if (!data->si) {
+		dev_info(dev, "%s: No firmware infomation found, device FW may be corrupted\n",
+			__func__);
+		return CYTTSP4_AUTO_LOAD_FOR_CORRUPTED_FW;
+	}
+
+	fw_ver_new = get_unaligned_be16(fw->data + 3);
+	fw_revctrl_new_h = get_unaligned_be32(fw->data + 5);
+	fw_revctrl_new_l = get_unaligned_be32(fw->data + 9);
+
+	upgrade = cyttsp4_check_firmware_version(ttsp, fw_ver_new,
+			fw_revctrl_new_h, fw_revctrl_new_l);
+
+	if (upgrade > 0)
+		return 1;
+
+	return 0;
+}
+
+static void _cyttsp4_firmware_cont_builtin(const struct firmware *fw,
+		void *context)
+{
+	struct cyttsp4_device *ttsp = context;
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_loader_data *data = dev_get_drvdata(dev);
+	int upgrade;
+
+	if (fw == NULL) {
+		dev_info(dev, "%s: No builtin firmware\n", __func__);
+		goto _cyttsp4_firmware_cont_builtin_exit;
+	}
+
+	if (fw->data == NULL || fw->size == 0) {
+		dev_err(dev, "%s: Invalid builtin firmware\n", __func__);
+		goto _cyttsp4_firmware_cont_builtin_exit;
+	}
+
+	dev_dbg(dev, "%s: Found firmware\n", __func__);
+
+	upgrade = cyttsp4_check_firmware_version_builtin(ttsp, fw);
+	if (upgrade) {
+		_cyttsp4_firmware_cont(fw, ttsp);
+		data->builtin_bin_fw_status = 0;
+		complete(&data->builtin_bin_fw_complete);
+		return;
+	}
+
+_cyttsp4_firmware_cont_builtin_exit:
+	release_firmware(fw);
+
+	data->builtin_bin_fw_status = -EINVAL;
+	complete(&data->builtin_bin_fw_complete);
+}
+
+static int upgrade_firmware_from_class(struct cyttsp4_device *ttsp)
+{
+	int retval;
+
+	dev_vdbg(&ttsp->dev, "%s: Enabling firmware class loader\n", __func__);
+
+	retval = request_firmware_nowait(THIS_MODULE, FW_ACTION_NOHOTPLUG, "",
+			&ttsp->dev, GFP_KERNEL, ttsp, _cyttsp4_firmware_cont);
+	if (retval < 0) {
+		dev_err(&ttsp->dev, "%s: Fail request firmware class file load\n",
+			__func__);
+		return retval;
+	}
+
+	return 0;
+}
+
+static int upgrade_firmware_from_builtin(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_loader_data *data = dev_get_drvdata(dev);
+	int retval;
+
+	dev_vdbg(dev, "%s: Enabling firmware class loader built-in\n",
+		__func__);
+
+	retval = request_firmware_nowait(THIS_MODULE, FW_ACTION_HOTPLUG,
+			CY_FW_FILE_NAME, dev, GFP_KERNEL, ttsp,
+			_cyttsp4_firmware_cont_builtin);
+	if (retval < 0) {
+		dev_err(dev, "%s: Fail request firmware class file load\n",
+			__func__);
+		return retval;
+	}
+
+	/* wait until FW binary upgrade finishes */
+	wait_for_completion(&data->builtin_bin_fw_complete);
+
+	return data->builtin_bin_fw_status;
+}
+#endif /* CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_BINARY_FW_UPGRADE */
+
+#if CYTTSP4_TTCONFIG_UPGRADE
+static int cyttsp4_upgrade_ttconfig(struct cyttsp4_device *ttsp,
+		const u8 *ttconfig_data, int ttconfig_size)
+{
+	struct device *dev = &ttsp->dev;
+	int rc, rc2;
+
+	dev_vdbg(dev, "%s\n", __func__);
+
+	pm_runtime_get_sync(dev);
+
+	dev_vdbg(dev, "%s: Requesting exclusive\n", __func__);
+	rc = cyttsp4_request_exclusive(ttsp, CY_LDR_REQUEST_EXCLUSIVE_TIMEOUT);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error on request exclusive r=%d\n",
+				__func__, rc);
+		goto exit;
+	}
+
+	dev_vdbg(dev, "%s: Requesting mode change to CAT\n", __func__);
+	rc = cyttsp4_request_set_mode(ttsp, CY_MODE_CAT);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error on request set mode r=%d\n",
+				__func__, rc);
+		goto exit_release;
+	}
+
+	rc = cyttsp4_request_write_config(ttsp, CY_TCH_PARM_EBID,
+			0, (u8 *)ttconfig_data, ttconfig_size);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error on request write config r=%d\n",
+				__func__, rc);
+		goto exit_setmode;
+	}
+
+exit_setmode:
+	rc2 = cyttsp4_request_set_mode(ttsp, CY_MODE_OPERATIONAL);
+	if (rc2 < 0)
+		dev_err(dev, "%s: Error on request set mode r=%d\n",
+				__func__, rc2);
+
+exit_release:
+	rc2 = cyttsp4_release_exclusive(ttsp);
+	if (rc < 0)
+		dev_err(dev, "%s: Error on release exclusive r=%d\n",
+				__func__, rc2);
+
+exit:
+	if (!rc)
+		cyttsp4_request_restart(ttsp, true);
+
+	pm_runtime_put(dev);
+
+	return rc;
+}
+#endif /* CYTTSP4_TTCONFIG_UPGRADE */
+
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_PLATFORM_TTCONFIG_UPGRADE
+static int cyttsp4_get_ttconfig_crc(struct cyttsp4_device *ttsp,
+		const u8 *ttconfig_data, int ttconfig_size, u16 *crc)
+{
+	u16 crc_loc;
+
+	crc_loc = get_unaligned_le16(&ttconfig_data[2]);
+	if (ttconfig_size < crc_loc + 2)
+		return -EINVAL;
+
+	*crc = get_unaligned_le16(&ttconfig_data[crc_loc]);
+
+	return 0;
+}
+
+static int cyttsp4_get_ttconfig_version(struct cyttsp4_device *ttsp,
+		const u8 *ttconfig_data, int ttconfig_size, u16 *version)
+{
+	if (ttconfig_size < CY_TTCONFIG_VERSION_OFFSET
+			+ CY_TTCONFIG_VERSION_SIZE)
+		return -EINVAL;
+
+	*version = get_unaligned_le16(
+		&ttconfig_data[CY_TTCONFIG_VERSION_OFFSET]);
+
+	return 0;
+}
+
+static int cyttsp4_check_ttconfig_version(struct cyttsp4_device *ttsp,
+		const u8 *ttconfig_data, int ttconfig_size)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_loader_data *data = dev_get_drvdata(dev);
+	int rc;
+
+	if (!data->si)
+		return 0;
+
+	/* Check if device POST config CRC test failed */
+	if (!(data->si->si_ptrs.test->post_codel &
+			CY_POST_CODEL_CFG_DATA_CRC_FAIL)) {
+		dev_info(dev, "%s: Config CRC invalid, will upgrade\n",
+			__func__);
+		return 1;
+	}
+
+	/* Check for config version */
+	if (data->loader_pdata->flags &
+			CY_LOADER_FLAG_CHECK_TTCONFIG_VERSION) {
+		u16 cfg_ver_new;
+
+		rc = cyttsp4_get_ttconfig_version(ttsp, ttconfig_data,
+				ttconfig_size, &cfg_ver_new);
+		if (rc)
+			return 0;
+
+		dev_dbg(dev, "%s: img_ver:0x%04X new_ver:0x%04X\n",
+			__func__, data->si->ttconfig.version, cfg_ver_new);
+
+		/* Check if config version is newer */
+		if (cfg_ver_new > data->si->ttconfig.version) {
+			dev_dbg(dev, "%s: Config version newer, will upgrade\n",
+				__func__);
+			return 1;
+		}
+
+		dev_dbg(dev, "%s: Config version is identical or older, will NOT upgrade\n",
+			__func__);
+	/* Check for config CRC */
+	} else {
+		u16 cfg_crc_new;
+
+		rc = cyttsp4_get_ttconfig_crc(ttsp, ttconfig_data,
+				ttconfig_size, &cfg_crc_new);
+		if (rc)
+			return 0;
+
+		dev_dbg(dev, "%s: img_crc:0x%04X new_crc:0x%04X\n",
+			__func__, data->si->ttconfig.crc, cfg_crc_new);
+
+		/* Check if config CRC different. */
+		if (cfg_crc_new != data->si->ttconfig.crc) {
+			dev_dbg(dev, "%s: Config CRC different, will upgrade\n",
+				__func__);
+			return 1;
+		}
+
+		dev_dbg(dev, "%s: Config CRC equal, will NOT upgrade\n",
+			__func__);
+	}
+
+	return 0;
+}
+
+static int cyttsp4_check_ttconfig_version_platform(struct cyttsp4_device *ttsp,
+		struct cyttsp4_touch_config *ttconfig)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_loader_data *data = dev_get_drvdata(dev);
+	u32 fw_ver_config;
+	u32 fw_revctrl_config_h;
+	u32 fw_revctrl_config_l;
+
+	if (!data->si) {
+		dev_info(dev, "%s: No firmware infomation found, device FW may be corrupted\n",
+			__func__);
+		return 0;
+	}
+
+	fw_ver_config = get_unaligned_be16(ttconfig->fw_ver + 2);
+	fw_revctrl_config_h = get_unaligned_be32(ttconfig->fw_ver + 4);
+	fw_revctrl_config_l = get_unaligned_be32(ttconfig->fw_ver + 8);
+
+	/* FW versions should match */
+	if (cyttsp4_check_firmware_version(ttsp, fw_ver_config,
+			fw_revctrl_config_h, fw_revctrl_config_l)) {
+		dev_err(dev, "%s: FW versions mismatch\n", __func__);
+		return 0;
+	}
+
+	return cyttsp4_check_ttconfig_version(ttsp, ttconfig->param_regs->data,
+			ttconfig->param_regs->size);
+}
+
+static int upgrade_ttconfig_from_platform(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_loader_data *data = dev_get_drvdata(dev);
+	struct cyttsp4_touch_config *ttconfig;
+	struct touch_settings *param_regs;
+	struct cyttsp4_touch_fw;
+	int rc = -ENOSYS;
+	int upgrade;
+
+	if (data->loader_pdata == NULL) {
+		dev_info(dev, "%s: No loader platform data\n", __func__);
+		return rc;
+	}
+
+	ttconfig = data->loader_pdata->ttconfig;
+	if (ttconfig == NULL) {
+		dev_info(dev, "%s: No ttconfig data\n", __func__);
+		return rc;
+	}
+
+	param_regs = ttconfig->param_regs;
+	if (param_regs == NULL) {
+		dev_info(dev, "%s: No touch parameters\n", __func__);
+		return rc;
+	}
+
+	if (param_regs->data == NULL || param_regs->size == 0) {
+		dev_info(dev, "%s: Invalid touch parameters\n", __func__);
+		return rc;
+	}
+
+	if (ttconfig->fw_ver == NULL || ttconfig->fw_vsize == 0) {
+		dev_info(dev, "%s: Invalid FW version for touch parameters\n",
+			__func__);
+		return rc;
+	}
+
+	upgrade = cyttsp4_check_ttconfig_version_platform(ttsp, ttconfig);
+	if (upgrade)
+		return cyttsp4_upgrade_ttconfig(ttsp, param_regs->data,
+				param_regs->size);
+
+	return rc;
+}
+#endif /* CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_PLATFORM_TTCONFIG_UPGRADE */
+
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_MANUAL_TTCONFIG_UPGRADE
+static ssize_t cyttsp4_config_data_write(struct file *filp,
+		struct kobject *kobj, struct bin_attribute *bin_attr,
+		char *buf, loff_t offset, size_t count)
+{
+	struct device *dev = container_of(kobj, struct device, kobj);
+	struct cyttsp4_loader_data *data = dev_get_drvdata(dev);
+	u8 *p;
+
+	dev_vdbg(dev, "%s: offset:%lld count:%d\n", __func__, offset, count);
+
+	mutex_lock(&data->config_lock);
+
+	if (!data->config_loading) {
+		mutex_unlock(&data->config_lock);
+		return -ENODEV;
+	}
+
+	p = krealloc(data->config_data, offset + count, GFP_KERNEL);
+	if (!p) {
+		kfree(data->config_data);
+		data->config_data = NULL;
+		data->config_size = 0;
+		data->config_loading = false;
+		mutex_unlock(&data->config_lock);
+		return -ENOMEM;
+	}
+	data->config_data = p;
+
+	memcpy(&data->config_data[offset], buf, count);
+	data->config_size += count;
+
+	mutex_unlock(&data->config_lock);
+
+	return count;
+}
+
+static struct bin_attribute bin_attr_config_data = {
+	.attr = {
+		.name = "config_data",
+		.mode = S_IWUSR,
+	},
+	.size = 0,
+	.write = cyttsp4_config_data_write,
+};
+
+static ssize_t cyttsp4_config_loading_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct cyttsp4_loader_data *data = dev_get_drvdata(dev);
+	bool config_loading;
+
+	mutex_lock(&data->config_lock);
+	config_loading = data->config_loading;
+	mutex_unlock(&data->config_lock);
+
+	return sprintf(buf, "%d\n", config_loading);
+}
+
+static int cyttsp4_verify_ttconfig_binary(struct cyttsp4_device *ttsp,
+		u8 *bin_config_data, int bin_config_size, u8 **start, int *len)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_loader_data *data = dev_get_drvdata(dev);
+	int header_size;
+	u16 config_size;
+	u16 max_config_size;
+	u32 fw_ver_config;
+	u32 fw_revctrl_config_h;
+	u32 fw_revctrl_config_l;
+
+	if (!data->si) {
+		dev_err(dev, "%s: No firmware infomation found, device FW may be corrupted\n",
+			__func__);
+		return -ENODEV;
+	}
+
+	/*
+	 * We need 11 bytes for FW version control info and at
+	 * least 6 bytes in config (Length + Max Length + CRC)
+	 */
+	header_size = bin_config_data[0] + 1;
+	if (header_size < 11 || header_size >= bin_config_size - 6) {
+		dev_err(dev, "%s: Invalid header size %d\n", __func__,
+			header_size);
+		return -EINVAL;
+	}
+
+	fw_ver_config = get_unaligned_be16(&bin_config_data[1]);
+	fw_revctrl_config_h = get_unaligned_be32(&bin_config_data[3]);
+	fw_revctrl_config_l = get_unaligned_be32(&bin_config_data[7]);
+
+	/* FW versions should match */
+	if (cyttsp4_check_firmware_version(ttsp, fw_ver_config,
+			fw_revctrl_config_h, fw_revctrl_config_l)) {
+		dev_err(dev, "%s: FW versions mismatch\n", __func__);
+		return -EINVAL;
+	}
+
+	config_size = get_unaligned_le16(&bin_config_data[header_size]);
+	max_config_size =
+		get_unaligned_le16(&bin_config_data[header_size + 2]);
+	/* Perform a simple size check (2 bytes for CRC) */
+	if (config_size != bin_config_size - header_size - 2) {
+		dev_err(dev, "%s: Config size invalid\n", __func__);
+		return -EINVAL;
+	}
+	/* Perform a size check against device config length */
+	if (config_size != data->si->ttconfig.length
+			|| max_config_size != data->si->ttconfig.max_length) {
+		dev_err(dev, "%s: Config size mismatch\n", __func__);
+		return -EINVAL;
+	}
+
+	*start = &bin_config_data[header_size];
+	*len = bin_config_size - header_size;
+
+	return 0;
+}
+
+/*
+ * 1: Start loading TT Config
+ * 0: End loading TT Config and perform upgrade
+ *-1: Exit loading
+ */
+static ssize_t cyttsp4_config_loading_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)
+{
+	struct cyttsp4_loader_data *data = dev_get_drvdata(dev);
+	long value;
+	u8 *start;
+	int length;
+	int rc;
+
+	rc = kstrtol(buf, 10, &value);
+	if (rc < 0 || value < -1 || value > 1) {
+		dev_err(dev, "%s: Invalid value\n", __func__);
+		return size;
+	}
+
+	mutex_lock(&data->config_lock);
+
+	if (value == 1)
+		data->config_loading = true;
+	else if (value == -1)
+		data->config_loading = false;
+	else if (value == 0 && data->config_loading) {
+		data->config_loading = false;
+		if (data->config_size == 0) {
+			dev_err(dev, "%s: No config data\n", __func__);
+			goto exit_free;
+		}
+
+		rc = cyttsp4_verify_ttconfig_binary(data->ttsp,
+				data->config_data, data->config_size,
+				&start, &length);
+		if (rc)
+			goto exit_free;
+
+		rc = cyttsp4_upgrade_ttconfig(data->ttsp, start, length);
+	}
+
+exit_free:
+	kfree(data->config_data);
+	data->config_data = NULL;
+	data->config_size = 0;
+
+	mutex_unlock(&data->config_lock);
+
+	if (rc)
+		return rc;
+
+	return size;
+}
+
+static DEVICE_ATTR(config_loading, S_IRUSR | S_IWUSR,
+	cyttsp4_config_loading_show, cyttsp4_config_loading_store);
+#endif /* CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_MANUAL_TTCONFIG_UPGRADE */
+
+static void cyttsp4_fw_and_config_upgrade(
+		struct work_struct *fw_and_config_upgrade)
+{
+	struct cyttsp4_loader_data *data = container_of(fw_and_config_upgrade,
+			struct cyttsp4_loader_data, fw_and_config_upgrade);
+	struct cyttsp4_device *ttsp = data->ttsp;
+	struct device *dev = &ttsp->dev;
+
+	data->si = cyttsp4_request_sysinfo(ttsp);
+	if (data->si == NULL)
+		dev_err(dev, "%s: Fail get sysinfo pointer from core\n",
+			__func__);
+
+#if !CYTTSP4_FW_UPGRADE
+	dev_info(dev, "%s: No FW upgrade method selected!\n", __func__);
+#endif
+
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_PLATFORM_FW_UPGRADE
+	if (!upgrade_firmware_from_platform(ttsp, false))
+		return;
+#endif
+
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_BINARY_FW_UPGRADE
+	if (!upgrade_firmware_from_builtin(ttsp))
+		return;
+#endif
+
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_PLATFORM_TTCONFIG_UPGRADE
+	if (!upgrade_ttconfig_from_platform(ttsp))
+		return;
+#endif
+}
+
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_PLATFORM_FW_UPGRADE
+static ssize_t cyttsp4_forced_upgrade_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)
+{
+	int rc;
+	struct cyttsp4_loader_data *data = dev_get_drvdata(dev);
+	rc = upgrade_firmware_from_platform(data->ttsp, true);
+	if (rc)
+		return rc;
+	return size;
+}
+
+static DEVICE_ATTR(forced_upgrade, S_IRUSR | S_IWUSR,
+	NULL, cyttsp4_forced_upgrade_store);
+#endif
+
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_BINARY_FW_UPGRADE
+static ssize_t cyttsp4_manual_upgrade_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)
+{
+	struct cyttsp4_loader_data *data = dev_get_drvdata(dev);
+	upgrade_firmware_from_class(data->ttsp);
+	return size;
+}
+
+static DEVICE_ATTR(manual_upgrade, S_IRUSR | S_IWUSR,
+	NULL, cyttsp4_manual_upgrade_store);
+#endif
+
+static int cyttsp4_loader_probe(struct cyttsp4_device *ttsp)
+{
+	struct cyttsp4_loader_data *data;
+	struct device *dev = &ttsp->dev;
+	int rc;
+
+	dev_dbg(dev, "%s\n", __func__);
+	data = kzalloc(sizeof(*data), GFP_KERNEL);
+	if (data == NULL) {
+		dev_err(dev, "%s: Error, kzalloc\n", __func__);
+		rc = -ENOMEM;
+		goto error_alloc_data_failed;
+	}
+
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_PLATFORM_FW_UPGRADE
+	rc = device_create_file(dev, &dev_attr_forced_upgrade);
+	if (rc) {
+		dev_err(dev, "%s: Error, could not create forced_upgrade\n",
+				__func__);
+		goto error_create_forced_upgrade;
+	}
+#endif
+
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_BINARY_FW_UPGRADE
+	rc = device_create_file(dev, &dev_attr_manual_upgrade);
+	if (rc) {
+		dev_err(dev, "%s: Error, could not create manual_upgrade\n",
+				__func__);
+		goto error_create_manual_upgrade;
+	}
+#endif
+
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_MANUAL_TTCONFIG_UPGRADE
+	rc = device_create_file(dev, &dev_attr_config_loading);
+	if (rc) {
+		dev_err(dev, "%s: Error, could not create config_loading\n",
+				__func__);
+		goto error_create_config_loading;
+	}
+
+	rc = device_create_bin_file(dev, &bin_attr_config_data);
+	if (rc) {
+		dev_err(dev, "%s: Error, could not create config_data\n",
+				__func__);
+		goto error_create_config_data;
+	}
+#endif
+
+	data->loader_pdata = cyttsp4_request_loader_pdata(ttsp);
+	data->ttsp = ttsp;
+	dev_set_drvdata(dev, data);
+
+	pm_runtime_enable(dev);
+
+#if CYTTSP4_FW_UPGRADE
+	init_completion(&data->int_running);
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_BINARY_FW_UPGRADE
+	init_completion(&data->builtin_bin_fw_complete);
+#endif
+	cyttsp4_subscribe_attention(ttsp, CY_ATTEN_IRQ,
+		cyttsp4_loader_attention, CY_MODE_BOOTLOADER);
+
+	INIT_WORK(&data->calibration_work, cyttsp4_fw_calibrate);
+#endif
+
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_MANUAL_TTCONFIG_UPGRADE
+	mutex_init(&data->config_lock);
+#endif
+	INIT_WORK(&data->fw_and_config_upgrade, cyttsp4_fw_and_config_upgrade);
+	schedule_work(&data->fw_and_config_upgrade);
+
+	dev_info(dev, "%s: Successful probe %s\n", __func__, ttsp->name);
+	return 0;
+
+
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_MANUAL_TTCONFIG_UPGRADE
+error_create_config_data:
+	device_remove_file(dev, &dev_attr_config_loading);
+error_create_config_loading:
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_BINARY_FW_UPGRADE
+	device_remove_file(dev, &dev_attr_manual_upgrade);
+#endif
+#endif
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_BINARY_FW_UPGRADE
+error_create_manual_upgrade:
+#endif
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_PLATFORM_FW_UPGRADE
+	device_remove_file(dev, &dev_attr_forced_upgrade);
+error_create_forced_upgrade:
+#endif
+	kfree(data);
+error_alloc_data_failed:
+	dev_err(dev, "%s failed.\n", __func__);
+	return rc;
+}
+
+static int cyttsp4_loader_release(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_loader_data *data = dev_get_drvdata(dev);
+	int retval = 0;
+
+	dev_dbg(dev, "%s\n", __func__);
+#if CYTTSP4_FW_UPGRADE
+	retval = cyttsp4_unsubscribe_attention(ttsp, CY_ATTEN_IRQ,
+		cyttsp4_loader_attention, CY_MODE_BOOTLOADER);
+	if (retval < 0) {
+		dev_err(dev,
+			"%s: Failed to restart IC with error code %d\n",
+			__func__, retval);
+	}
+#endif
+	pm_runtime_suspend(dev);
+	pm_runtime_disable(dev);
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_MANUAL_TTCONFIG_UPGRADE
+	device_remove_bin_file(dev, &bin_attr_config_data);
+	device_remove_file(dev, &dev_attr_config_loading);
+	kfree(data->config_data);
+#endif
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_BINARY_FW_UPGRADE
+	device_remove_file(dev, &dev_attr_manual_upgrade);
+#endif
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_PLATFORM_FW_UPGRADE
+	device_remove_file(dev, &dev_attr_forced_upgrade);
+#endif
+	dev_set_drvdata(dev, NULL);
+	kfree(data);
+	return retval;
+}
+
+static struct cyttsp4_driver cyttsp4_loader_driver = {
+	.probe = cyttsp4_loader_probe,
+	.remove = cyttsp4_loader_release,
+	.driver = {
+		.name = CYTTSP4_LOADER_NAME,
+		.bus = &cyttsp4_bus_type,
+		.owner = THIS_MODULE,
+	},
+};
+
+static const char cyttsp4_loader_name[] = CYTTSP4_LOADER_NAME;
+static struct cyttsp4_device_info cyttsp4_loader_infos[CY_MAX_NUM_CORE_DEVS];
+
+static char *core_ids[CY_MAX_NUM_CORE_DEVS] = {
+	CY_DEFAULT_CORE_ID,
+	NULL,
+	NULL,
+	NULL,
+	NULL
+};
+
+static int num_core_ids = 1;
+
+module_param_array(core_ids, charp, &num_core_ids, 0);
+MODULE_PARM_DESC(core_ids,
+	"Core id list of cyttsp4 core devices for loader module");
+
+static int __init cyttsp4_loader_init(void)
+{
+	int rc = 0;
+	int i, j;
+
+	/* Check for invalid or duplicate core_ids */
+	for (i = 0; i < num_core_ids; i++) {
+		if (!strlen(core_ids[i])) {
+			pr_err("%s: core_id %d is empty\n",
+				__func__, i+1);
+			return -EINVAL;
+		}
+		for (j = i+1; j < num_core_ids; j++)
+			if (!strcmp(core_ids[i], core_ids[j])) {
+				pr_err("%s: core_ids %d and %d are same\n",
+					__func__, i+1, j+1);
+				return -EINVAL;
+			}
+	}
+
+	for (i = 0; i < num_core_ids; i++) {
+		cyttsp4_loader_infos[i].name = cyttsp4_loader_name;
+		cyttsp4_loader_infos[i].core_id = core_ids[i];
+		pr_info("%s: Registering loader device for core_id: %s\n",
+			__func__, cyttsp4_loader_infos[i].core_id);
+		rc = cyttsp4_register_device(&cyttsp4_loader_infos[i]);
+		if (rc < 0) {
+			pr_err("%s: Error, failed registering device\n",
+				__func__);
+			goto fail_unregister_devices;
+		}
+	}
+	rc = cyttsp4_register_driver(&cyttsp4_loader_driver);
+	if (rc) {
+		pr_err("%s: Error, failed registering driver\n", __func__);
+		goto fail_unregister_devices;
+	}
+
+	pr_info("%s: Cypress TTSP FW loader (Built %s) rc=%d\n",
+		 __func__, CY_DRIVER_DATE, rc);
+	return 0;
+
+fail_unregister_devices:
+	for (i--; i >= 0; i--) {
+		cyttsp4_unregister_device(cyttsp4_loader_infos[i].name,
+			cyttsp4_loader_infos[i].core_id);
+		pr_info("%s: Unregistering loader device for core_id: %s\n",
+			__func__, cyttsp4_loader_infos[i].core_id);
+	}
+	return rc;
+}
+module_init(cyttsp4_loader_init);
+
+static void __exit cyttsp4_loader_exit(void)
+{
+	int i;
+
+	cyttsp4_unregister_driver(&cyttsp4_loader_driver);
+	for (i = 0; i < num_core_ids; i++) {
+		cyttsp4_unregister_device(cyttsp4_loader_infos[i].name,
+			cyttsp4_loader_infos[i].core_id);
+		pr_info("%s: Unregistering loader device for core_id: %s\n",
+			__func__, cyttsp4_loader_infos[i].core_id);
+	}
+	pr_info("%s: module exit\n", __func__);
+}
+module_exit(cyttsp4_loader_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Cypress TrueTouch(R) Standard touchscreen FW loader");
+MODULE_AUTHOR("Cypress Semiconductor");
diff --git a/drivers/input/touchscreen/cypress/cyttsp4_mt_common.c b/drivers/input/touchscreen/cypress/cyttsp4_mt_common.c
new file mode 100644
index 0000000..5b519ef
--- /dev/null
+++ b/drivers/input/touchscreen/cypress/cyttsp4_mt_common.c
@@ -0,0 +1,699 @@
+/*
+ * cyttsp4_mt_common.c
+ * Cypress TrueTouch(TM) Standard Product V4 Multi-touch module.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2012 Cypress Semiconductor
+ * Copyright (C) 2011 Sony Ericsson Mobile Communications AB.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#include "cyttsp4_mt_common.h"
+
+static void cyttsp4_lift_all(struct cyttsp4_mt_data *md)
+{
+	if (!md->si)
+		return;
+
+	if (md->num_prv_rec != 0) {
+		if (md->mt_function.report_slot_liftoff)
+			md->mt_function.report_slot_liftoff(md,
+				md->si->si_ofs.tch_abs[CY_TCH_T].max);
+		input_sync(md->input);
+		md->num_prv_rec = 0;
+	}
+}
+
+static void cyttsp4_mt_process_touch(struct cyttsp4_mt_data *md,
+	struct cyttsp4_touch *touch)
+{
+	//struct device *dev = &md->ttsp->dev;
+	int tmp;
+	bool flipped;
+
+	if (md->pdata->flags & CY_MT_FLAG_FLIP) {
+		tmp = touch->abs[CY_TCH_X];
+		touch->abs[CY_TCH_X] = touch->abs[CY_TCH_Y];
+		touch->abs[CY_TCH_Y] = tmp;
+		flipped = true;
+	} else
+		flipped = false;
+
+	if (md->pdata->flags & CY_MT_FLAG_INV_X) {
+		if (flipped)
+			touch->abs[CY_TCH_X] = md->si->si_ofs.max_y -
+				touch->abs[CY_TCH_X];
+		else
+			touch->abs[CY_TCH_X] = md->si->si_ofs.max_x -
+				touch->abs[CY_TCH_X];
+	}
+	if (md->pdata->flags & CY_MT_FLAG_INV_Y) {
+		if (flipped)
+			touch->abs[CY_TCH_Y] = md->si->si_ofs.max_x -
+				touch->abs[CY_TCH_Y];
+		else
+			touch->abs[CY_TCH_Y] = md->si->si_ofs.max_y -
+				touch->abs[CY_TCH_Y];
+	}
+#if 0
+	dev_vdbg(dev, "%s: flip=%s inv-x=%s inv-y=%s x=%04X(%d) y=%04X(%d)\n",
+		__func__, flipped ? "true" : "false",
+		md->pdata->flags & CY_MT_FLAG_INV_X ? "true" : "false",
+		md->pdata->flags & CY_MT_FLAG_INV_Y ? "true" : "false",
+		touch->abs[CY_TCH_X], touch->abs[CY_TCH_X],
+		touch->abs[CY_TCH_Y], touch->abs[CY_TCH_Y]);
+#endif
+}
+
+static void cyttsp4_get_mt_touches(struct cyttsp4_mt_data *md, int num_cur_rec)
+{
+	struct device *dev = &md->ttsp->dev;
+	struct cyttsp4_sysinfo *si = md->si;
+	struct cyttsp4_touch tch;
+	int sig;
+	int i, j, t = 0;
+	int mt_sync_count = 0;
+	DECLARE_BITMAP(ids, max(CY_TMA1036_MAX_TCH, CY_TMA4XX_MAX_TCH));
+
+	bitmap_zero(ids, si->si_ofs.tch_abs[CY_TCH_T].max);
+
+	for (i = 0; i < num_cur_rec; i++) {
+		cyttsp4_get_touch_record(md->ttsp, i, tch.abs);
+
+		/* Discard proximity event */
+		if (tch.abs[CY_TCH_O] == CY_OBJ_PROXIMITY) {
+			//dev_dbg(dev, "%s: Discarding proximity event\n",
+			//	__func__);
+			continue;
+		}
+
+		if ((tch.abs[CY_TCH_T] < md->pdata->frmwrk->abs
+			[(CY_ABS_ID_OST * CY_NUM_ABS_SET) + CY_MIN_OST]) ||
+			(tch.abs[CY_TCH_T] > md->pdata->frmwrk->abs
+			[(CY_ABS_ID_OST * CY_NUM_ABS_SET) + CY_MAX_OST])) {
+			dev_err(dev, "%s: tch=%d -> bad trk_id=%d max_id=%d\n",
+				__func__, i, tch.abs[CY_TCH_T],
+				md->pdata->frmwrk->abs[(CY_ABS_ID_OST *
+				CY_NUM_ABS_SET) + CY_MAX_OST]);
+			if (md->mt_function.input_sync)
+				md->mt_function.input_sync(md->input);
+			mt_sync_count++;
+			continue;
+		}
+
+		/* Process touch */
+		cyttsp4_mt_process_touch(md, &tch);
+
+		/* use 0 based track id's */
+		sig = md->pdata->frmwrk->abs
+			[(CY_ABS_ID_OST * CY_NUM_ABS_SET) + 0];
+		if (sig != CY_IGNORE_VALUE) {
+			t = tch.abs[CY_TCH_T] - md->pdata->frmwrk->abs
+				[(CY_ABS_ID_OST * CY_NUM_ABS_SET) + CY_MIN_OST];
+			if (tch.abs[CY_TCH_E] == CY_EV_LIFTOFF) {
+				//dev_dbg(dev, "%s: t=%d e=%d lift-off\n",
+				//	__func__, t, tch.abs[CY_TCH_E]);
+				goto cyttsp4_get_mt_touches_pr_tch;
+			}
+			if (md->mt_function.input_report)
+				md->mt_function.input_report(md->input, sig,
+					t, tch.abs[CY_TCH_O]);
+			__set_bit(t, ids);
+		}
+
+		/* all devices: position and pressure fields */
+		for (j = 0; j <= CY_ABS_W_OST ; j++) {
+			sig = md->pdata->frmwrk->abs[((CY_ABS_X_OST + j) *
+				CY_NUM_ABS_SET) + 0];
+			if (sig != CY_IGNORE_VALUE)
+				input_report_abs(md->input, sig,
+					tch.abs[CY_TCH_X + j]);
+		}
+		if (IS_TTSP_VER_GE(si, 2, 3)) {
+			/*
+			 * TMA400 size and orientation fields:
+			 * if pressure is non-zero and major touch
+			 * signal is zero, then set major and minor touch
+			 * signals to minimum non-zero value
+			 */
+			if (tch.abs[CY_TCH_P] > 0 && tch.abs[CY_TCH_MAJ] == 0)
+				tch.abs[CY_TCH_MAJ] = tch.abs[CY_TCH_MIN] = 1;
+
+			/* Get the extended touch fields */
+			for (j = 0; j < CY_NUM_EXT_TCH_FIELDS; j++) {
+				sig = md->pdata->frmwrk->abs
+					[((CY_ABS_MAJ_OST + j) *
+					CY_NUM_ABS_SET) + 0];
+				if (sig != CY_IGNORE_VALUE)
+					input_report_abs(md->input, sig,
+						tch.abs[CY_TCH_MAJ + j]);
+			}
+		}
+		if (md->mt_function.input_sync)
+			md->mt_function.input_sync(md->input);
+		mt_sync_count++;
+
+cyttsp4_get_mt_touches_pr_tch:
+			printk("x y z\n");
+#if 0
+		if (IS_TTSP_VER_GE(si, 2, 3))
+			dev_dbg(dev,
+				"%s: t=%d x=%d y=%d z=%d M=%d m=%d o=%d e=%d\n",
+				__func__, t,
+				tch.abs[CY_TCH_X],
+				tch.abs[CY_TCH_Y],
+				tch.abs[CY_TCH_P],
+				tch.abs[CY_TCH_MAJ],
+				tch.abs[CY_TCH_MIN],
+				tch.abs[CY_TCH_OR],
+				tch.abs[CY_TCH_E]);
+		else
+			dev_dbg(dev,
+				"%s: t=%d x=%d y=%d z=%d e=%d\n", __func__,
+				t,
+				tch.abs[CY_TCH_X],
+				tch.abs[CY_TCH_Y],
+				tch.abs[CY_TCH_P],
+				tch.abs[CY_TCH_E]);
+#endif
+	}
+
+	if (md->mt_function.final_sync)
+		md->mt_function.final_sync(md->input,
+			si->si_ofs.tch_abs[CY_TCH_T].max, mt_sync_count, ids);
+
+	md->num_prv_rec = num_cur_rec;
+	md->prv_tch_type = tch.abs[CY_TCH_O];
+
+	return;
+}
+
+/* read xy_data for all current touches */
+static int cyttsp4_xy_worker(struct cyttsp4_mt_data *md)
+{
+	struct device *dev = &md->ttsp->dev;
+	struct cyttsp4_sysinfo *si = md->si;
+	u8 num_cur_rec;
+	u8 rep_len;
+	u8 rep_stat;
+	u8 tt_stat;
+	int rc = 0;
+
+	/*
+	 * Get event data from cyttsp4 device.
+	 * The event data includes all data
+	 * for all active touches.
+	 * Event data also includes button data
+	 */
+	rep_len = si->xy_mode[si->si_ofs.rep_ofs];
+	rep_stat = si->xy_mode[si->si_ofs.rep_ofs + 1];
+	tt_stat = si->xy_mode[si->si_ofs.tt_stat_ofs];
+
+	num_cur_rec = GET_NUM_TOUCH_RECORDS(tt_stat);
+
+	if (rep_len == 0 && num_cur_rec > 0) {
+		dev_err(dev, "%s: report length error rep_len=%d num_tch=%d\n",
+			__func__, rep_len, num_cur_rec);
+		goto cyttsp4_xy_worker_exit;
+	}
+
+	/* check any error conditions */
+	if (IS_BAD_PKT(rep_stat)) {
+		//dev_dbg(dev, "%s: Invalid buffer detected\n", __func__);
+		rc = 0;
+		goto cyttsp4_xy_worker_exit;
+	}
+
+	if (IS_LARGE_AREA(tt_stat)) {
+		//dev_dbg(dev, "%s: Large area detected\n", __func__);
+		/* Do not report touch if configured so */
+		if (md->pdata->flags & CY_MT_FLAG_NO_TOUCH_ON_LO)
+			num_cur_rec = 0;
+	}
+
+	if (num_cur_rec > si->si_ofs.max_tchs) {
+		dev_err(dev, "%s: %s (n=%d c=%d)\n", __func__,
+			"too many tch; set to max tch",
+			num_cur_rec, si->si_ofs.max_tchs);
+		num_cur_rec = si->si_ofs.max_tchs;
+	}
+
+	/* extract xy_data for all currently reported touches */
+	//dev_vdbg(dev, "%s: extract data num_cur_rec=%d\n", __func__,
+	//	num_cur_rec);
+	if (num_cur_rec)
+		cyttsp4_get_mt_touches(md, num_cur_rec);
+	else
+		cyttsp4_lift_all(md);
+
+	//dev_vdbg(dev, "%s: done\n", __func__);
+	rc = 0;
+
+cyttsp4_xy_worker_exit:
+	return rc;
+}
+
+static void cyttsp4_mt_send_dummy_event(struct cyttsp4_mt_data *md)
+{
+	unsigned long ids = 0;
+
+	/* for easy wakeup */
+	if (md->mt_function.input_report)
+		md->mt_function.input_report(md->input, ABS_MT_TRACKING_ID,
+			0, CY_OBJ_STANDARD_FINGER);
+	if (md->mt_function.input_sync)
+		md->mt_function.input_sync(md->input);
+	if (md->mt_function.final_sync)
+		md->mt_function.final_sync(md->input, 0, 1, &ids);
+	if (md->mt_function.report_slot_liftoff)
+		md->mt_function.report_slot_liftoff(md, 1);
+	if (md->mt_function.final_sync)
+		md->mt_function.final_sync(md->input, 1, 1, &ids);
+}
+
+static int cyttsp4_mt_attention(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_mt_data *md = dev_get_drvdata(dev);
+	int rc = 0;
+
+	//dev_vdbg(dev, "%s\n", __func__);
+
+	mutex_lock(&md->report_lock);
+	if (!md->is_suspended) {
+		/* core handles handshake */
+		rc = cyttsp4_xy_worker(md);
+	}
+	mutex_unlock(&md->report_lock);
+	if (rc < 0)
+		dev_err(dev, "%s: xy_worker error r=%d\n", __func__, rc);
+
+	return rc;
+}
+
+static int cyttsp4_mt_wake_attention(struct cyttsp4_device *ttsp)
+{
+	struct cyttsp4_mt_data *md = dev_get_drvdata(&ttsp->dev);
+
+	mutex_lock(&md->report_lock);
+	cyttsp4_mt_send_dummy_event(md);
+	mutex_unlock(&md->report_lock);
+	return 0;
+}
+
+static int cyttsp4_startup_attention(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_mt_data *md = dev_get_drvdata(dev);
+	int rc = 0;
+
+	//dev_vdbg(dev, "%s\n", __func__);
+
+	mutex_lock(&md->report_lock);
+	cyttsp4_lift_all(md);
+	mutex_unlock(&md->report_lock);
+	return rc;
+}
+
+static int cyttsp4_mt_open(struct input_dev *input)
+{
+	struct device *dev = input->dev.parent;
+	struct cyttsp4_device *ttsp =
+		container_of(dev, struct cyttsp4_device, dev);
+
+//	dev_dbg(dev, "%s\n", __func__);
+
+	pm_runtime_get(dev);
+
+//	dev_vdbg(dev, "%s: setup subscriptions\n", __func__);
+
+	/* set up touch call back */
+	cyttsp4_subscribe_attention(ttsp, CY_ATTEN_IRQ,
+		cyttsp4_mt_attention, CY_MODE_OPERATIONAL);
+
+	/* set up startup call back */
+	cyttsp4_subscribe_attention(ttsp, CY_ATTEN_STARTUP,
+		cyttsp4_startup_attention, 0);
+
+	/* set up wakeup call back */
+	cyttsp4_subscribe_attention(ttsp, CY_ATTEN_WAKE,
+		cyttsp4_mt_wake_attention, 0);
+
+	return 0;
+}
+
+static void cyttsp4_mt_close(struct input_dev *input)
+{
+	struct device *dev = input->dev.parent;
+	struct cyttsp4_device *ttsp =
+		container_of(dev, struct cyttsp4_device, dev);
+
+	//dev_dbg(dev, "%s\n", __func__);
+
+	cyttsp4_unsubscribe_attention(ttsp, CY_ATTEN_IRQ,
+		cyttsp4_mt_attention, CY_MODE_OPERATIONAL);
+
+	cyttsp4_unsubscribe_attention(ttsp, CY_ATTEN_STARTUP,
+		cyttsp4_startup_attention, 0);
+
+	cyttsp4_unsubscribe_attention(ttsp, CY_ATTEN_WAKE,
+		cyttsp4_mt_wake_attention, 0);
+
+	pm_runtime_put(dev);
+}
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+static void cyttsp4_mt_early_suspend(struct early_suspend *h)
+{
+	struct cyttsp4_mt_data *md =
+		container_of(h, struct cyttsp4_mt_data, es);
+	struct device *dev = &md->ttsp->dev;
+
+	//dev_dbg(dev, "%s\n", __func__);
+
+#ifndef CONFIG_PM_RUNTIME
+	mutex_lock(&md->report_lock);
+	md->is_suspended = true;
+	cyttsp4_lift_all(md);
+	mutex_unlock(&md->report_lock);
+#endif
+
+	pm_runtime_put(dev);
+}
+
+static void cyttsp4_mt_late_resume(struct early_suspend *h)
+{
+	struct cyttsp4_mt_data *md =
+		container_of(h, struct cyttsp4_mt_data, es);
+	struct device *dev = &md->ttsp->dev;
+
+	//dev_dbg(dev, "%s\n", __func__);
+
+#ifndef CONFIG_PM_RUNTIME
+	mutex_lock(&md->report_lock);
+	md->is_suspended = false;
+	mutex_unlock(&md->report_lock);
+#endif
+
+	pm_runtime_get(dev);
+}
+
+static void cyttsp4_setup_early_suspend(struct cyttsp4_mt_data *md)
+{
+	md->es.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN + 1;
+	md->es.suspend = cyttsp4_mt_early_suspend;
+	md->es.resume = cyttsp4_mt_late_resume;
+
+	register_early_suspend(&md->es);
+}
+#endif
+
+#if defined(CONFIG_PM_SLEEP) || defined(CONFIG_PM_RUNTIME)
+static int cyttsp4_mt_suspend(struct device *dev)
+{
+	struct cyttsp4_mt_data *md = dev_get_drvdata(dev);
+
+	//dev_dbg(dev, "%s\n", __func__);
+
+	mutex_lock(&md->report_lock);
+	md->is_suspended = true;
+	cyttsp4_lift_all(md);
+	mutex_unlock(&md->report_lock);
+
+	return 0;
+}
+
+static int cyttsp4_mt_rt_resume(struct device *dev)
+{
+	struct cyttsp4_mt_data *md = dev_get_drvdata(dev);
+
+	//dev_dbg(dev, "%s\n", __func__);
+
+	mutex_lock(&md->report_lock);
+	md->is_suspended = false;
+	mutex_unlock(&md->report_lock);
+
+	return 0;
+}
+
+static int cyttsp4_mt_resume(struct device *dev)
+{
+	return 0;
+}
+#endif
+
+static const struct dev_pm_ops cyttsp4_mt_pm_ops = {
+	SET_SYSTEM_SLEEP_PM_OPS(cyttsp4_mt_suspend, cyttsp4_mt_resume)
+	SET_RUNTIME_PM_OPS(cyttsp4_mt_suspend, cyttsp4_mt_rt_resume, NULL)
+};
+
+static int cyttsp4_setup_input_device(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_mt_data *md = dev_get_drvdata(dev);
+	int signal = CY_IGNORE_VALUE;
+	int max_x, max_y, max_p, min, max;
+	int max_x_tmp, max_y_tmp;
+	int i;
+	int rc;
+
+	//dev_vdbg(dev, "%s: Initialize event signals\n", __func__);
+	__set_bit(EV_ABS, md->input->evbit);
+	__set_bit(EV_REL, md->input->evbit);
+	__set_bit(EV_KEY, md->input->evbit);
+#ifdef INPUT_PROP_DIRECT
+	__set_bit(INPUT_PROP_DIRECT, md->input->propbit);
+#endif
+
+	/* If virtualkeys enabled, don't use all screen */
+	if (md->pdata->flags & CY_MT_FLAG_VKEYS) {
+		max_x_tmp = md->pdata->vkeys_x;
+		max_y_tmp = md->pdata->vkeys_y;
+	} else {
+		max_x_tmp = md->si->si_ofs.max_x;
+		max_y_tmp = md->si->si_ofs.max_y;
+	}
+	//max_y_tmp=1280;
+		printk(" resolution is %dx%d\n",max_x_tmp,max_y_tmp);
+	max_y_tmp=960;
+	/* get maximum values from the sysinfo data */
+	if (md->pdata->flags & CY_MT_FLAG_FLIP) {
+		max_x = max_y_tmp - 1;
+		max_y = max_x_tmp - 1;
+	} else {
+		max_x = max_x_tmp - 1;
+		max_y = max_y_tmp - 1;
+	}
+	max_p = md->si->si_ofs.max_p;
+
+	/* set event signal capabilities */
+	for (i = 0; i < (md->pdata->frmwrk->size / CY_NUM_ABS_SET); i++) {
+		signal = md->pdata->frmwrk->abs
+			[(i * CY_NUM_ABS_SET) + CY_SIGNAL_OST];
+		if (signal != CY_IGNORE_VALUE) {
+			__set_bit(signal, md->input->absbit);
+			min = md->pdata->frmwrk->abs
+				[(i * CY_NUM_ABS_SET) + CY_MIN_OST];
+			max = md->pdata->frmwrk->abs
+				[(i * CY_NUM_ABS_SET) + CY_MAX_OST];
+			if (i == CY_ABS_ID_OST) {
+				/* shift track ids down to start at 0 */
+				max = max - min;
+				min = min - min;
+			} else if (i == CY_ABS_X_OST)
+				max = max_x;
+			else if (i == CY_ABS_Y_OST)
+				max = max_y;
+			else if (i == CY_ABS_P_OST)
+				max = max_p;
+			input_set_abs_params(md->input, signal, min, max,
+				md->pdata->frmwrk->abs
+				[(i * CY_NUM_ABS_SET) + CY_FUZZ_OST],
+				md->pdata->frmwrk->abs
+				[(i * CY_NUM_ABS_SET) + CY_FLAT_OST]);
+			//dev_dbg(dev, "%s: register signal=%02X min=%d max=%d\n",
+			//	__func__, signal, min, max);
+			if (i == CY_ABS_ID_OST && !IS_TTSP_VER_GE(md->si, 2, 3))
+				break;
+		}
+	}
+
+	rc = md->mt_function.input_register_device(md->input,
+			md->si->si_ofs.tch_abs[CY_TCH_T].max);
+	if (rc < 0)
+		dev_err(dev, "%s: Error, failed register input device r=%d\n",
+			__func__, rc);
+	else
+		md->input_device_registered = true;
+
+	return rc;
+}
+
+static int cyttsp4_setup_input_attention(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_mt_data *md = dev_get_drvdata(dev);
+	int rc = 0;
+
+	//dev_vdbg(dev, "%s\n", __func__);
+
+	md->si = cyttsp4_request_sysinfo(ttsp);
+	if (!md->si)
+		return -EINVAL;
+
+	rc = cyttsp4_setup_input_device(ttsp);
+
+	cyttsp4_unsubscribe_attention(ttsp, CY_ATTEN_STARTUP,
+		cyttsp4_setup_input_attention, 0);
+
+	return rc;
+}
+
+static int cyttsp4_mt_release(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_mt_data *md = dev_get_drvdata(dev);
+
+	//dev_dbg(dev, "%s\n", __func__);
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	/*
+	 * This check is to prevent pm_runtime usage_count drop below zero
+	 * because of removing the module while in suspended state
+	 */
+	if (md->is_suspended)
+		pm_runtime_get_noresume(dev);
+
+	unregister_early_suspend(&md->es);
+#endif
+
+	if (md->input_device_registered) {
+		input_unregister_device(md->input);
+	} else {
+		input_free_device(md->input);
+		cyttsp4_unsubscribe_attention(ttsp, CY_ATTEN_STARTUP,
+			cyttsp4_setup_input_attention, 0);
+	}
+
+	pm_runtime_suspend(dev);
+	pm_runtime_disable(dev);
+
+	dev_set_drvdata(dev, NULL);
+	kfree(md);
+	return 0;
+}
+
+static int cyttsp4_mt_probe(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_mt_data *md;
+	struct cyttsp4_mt_platform_data *pdata = dev_get_platdata(dev);
+	int rc = 0;
+
+	dev_info(dev, "%s\n", __func__);
+	//dev_dbg(dev, "%s: debug on\n", __func__);
+	//dev_vdbg(dev, "%s: verbose debug on\n", __func__);
+
+	if (pdata == NULL) {
+		dev_err(dev, "%s: Missing platform data\n", __func__);
+		rc = -ENODEV;
+		goto error_no_pdata;
+	}
+
+	md = kzalloc(sizeof(*md), GFP_KERNEL);
+	if (md == NULL) {
+		dev_err(dev, "%s: Error, kzalloc\n", __func__);
+		rc = -ENOMEM;
+		goto error_alloc_data_failed;
+	}
+
+	cyttsp4_init_function_ptrs(md);
+
+	mutex_init(&md->report_lock);
+	md->prv_tch_type = CY_OBJ_STANDARD_FINGER;
+	md->ttsp = ttsp;
+	md->pdata = pdata;
+	dev_set_drvdata(dev, md);
+	/* Create the input device and register it. */
+	//dev_vdbg(dev, "%s: Create the input device and register it\n",
+	//	__func__);
+	md->input = input_allocate_device();
+	if (md->input == NULL) {
+		dev_err(dev, "%s: Error, failed to allocate input device\n",
+			__func__);
+		rc = -ENOSYS;
+		goto error_alloc_failed;
+	}
+
+	md->input->name = ttsp->name;
+	scnprintf(md->phys, sizeof(md->phys)-1, "%s", dev_name(dev));
+	md->input->phys = md->phys;
+	md->input->dev.parent = &md->ttsp->dev;
+	md->input->open = cyttsp4_mt_open;
+	md->input->close = cyttsp4_mt_close;
+	input_set_drvdata(md->input, md);
+
+	pm_runtime_enable(dev);
+
+	/* get sysinfo */
+	md->si = cyttsp4_request_sysinfo(ttsp);
+	if (md->si) {
+		rc = cyttsp4_setup_input_device(ttsp);
+		if (rc)
+			goto error_init_input;
+	} else {
+		dev_err(dev, "%s: Fail get sysinfo pointer from core p=%p\n",
+			__func__, md->si);
+		cyttsp4_subscribe_attention(ttsp, CY_ATTEN_STARTUP,
+			cyttsp4_setup_input_attention, 0);
+	}
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	cyttsp4_setup_early_suspend(md);
+#endif
+
+	//dev_dbg(dev, "%s: OK\n", __func__);
+	return 0;
+
+error_init_input:
+	pm_runtime_suspend(dev);
+	pm_runtime_disable(dev);
+	input_free_device(md->input);
+error_alloc_failed:
+	dev_set_drvdata(dev, NULL);
+	kfree(md);
+error_alloc_data_failed:
+error_no_pdata:
+	dev_err(dev, "%s failed.\n", __func__);
+	return rc;
+}
+
+struct cyttsp4_driver cyttsp4_mt_driver = {
+	.probe = cyttsp4_mt_probe,
+	.remove = cyttsp4_mt_release,
+	.driver = {
+		.name = CYTTSP4_MT_NAME,
+		.bus = &cyttsp4_bus_type,
+		.pm = &cyttsp4_mt_pm_ops,
+	},
+};
+
diff --git a/drivers/input/touchscreen/cypress/cyttsp4_mt_common.h b/drivers/input/touchscreen/cypress/cyttsp4_mt_common.h
new file mode 100644
index 0000000..94fa791
--- /dev/null
+++ b/drivers/input/touchscreen/cypress/cyttsp4_mt_common.h
@@ -0,0 +1,86 @@
+/*
+ * cyttsp4_mt_common.h
+ * Cypress TrueTouch(TM) Standard Product V4 Multi-touch module.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2012 Cypress Semiconductor
+ * Copyright (C) 2011 Sony Ericsson Mobile Communications AB.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#include <linux/cyttsp4_bus.h>
+
+#include <linux/delay.h>
+#ifdef CONFIG_HAS_EARLYSUSPEND
+#include <linux/earlysuspend.h>
+#endif
+#include <linux/gpio.h>
+#include <linux/input.h>
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+#include <linux/limits.h>
+#include <linux/module.h>
+#include <linux/pm_runtime.h>
+#include <linux/slab.h>
+#include <linux/workqueue.h>
+
+#include <linux/cyttsp4_core.h>
+#include <linux/cyttsp4_mt.h>
+#include "cyttsp4_regs.h"
+
+struct cyttsp4_mt_data;
+struct cyttsp4_mt_function {
+	int (*mt_release)(struct cyttsp4_device *ttsp);
+	int (*mt_probe)(struct cyttsp4_device *ttsp,
+			struct cyttsp4_mt_data *md);
+	void (*report_slot_liftoff)(struct cyttsp4_mt_data *md, int max_slots);
+	void (*input_sync)(struct input_dev *input);
+	void (*input_report)(struct input_dev *input, int sig, int t,
+			int type);
+	void (*final_sync)(struct input_dev *input, int max_slots,
+			int mt_sync_count, unsigned long *ids);
+	int (*input_register_device)(struct input_dev *input, int max_slots);
+};
+
+struct cyttsp4_mt_data {
+	struct cyttsp4_device *ttsp;
+	struct cyttsp4_mt_platform_data *pdata;
+	struct cyttsp4_sysinfo *si;
+	struct input_dev *input;
+	struct cyttsp4_mt_function mt_function;
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	struct early_suspend es;
+#endif
+	struct mutex report_lock;
+	bool is_suspended;
+	bool input_device_registered;
+	char phys[NAME_MAX];
+	int num_prv_rec; /* Number of previous touch records */
+	int prv_tch_type;
+#ifdef VERBOSE_DEBUG
+	u8 pr_buf[CY_MAX_PRBUF_SIZE];
+#endif
+};
+
+extern void cyttsp4_init_function_ptrs(struct cyttsp4_mt_data *md);
+extern struct cyttsp4_driver cyttsp4_mt_driver;
+
diff --git a/drivers/input/touchscreen/cypress/cyttsp4_mta.c b/drivers/input/touchscreen/cypress/cyttsp4_mta.c
new file mode 100644
index 0000000..aee4124
--- /dev/null
+++ b/drivers/input/touchscreen/cypress/cyttsp4_mta.c
@@ -0,0 +1,108 @@
+/*
+ * cyttsp4_mta.c
+ * Cypress TrueTouch(TM) Standard Product V4 Multi-touch module.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2012 Cypress Semiconductor
+ * Copyright (C) 2011 Sony Ericsson Mobile Communications AB.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#include <linux/input.h>
+#include <linux/cyttsp4_core.h>
+
+#include "cyttsp4_mt_common.h"
+
+static void cyttsp4_final_sync(struct input_dev *input, int max_slots,
+		int mt_sync_count, unsigned long *ids)
+{
+	if (mt_sync_count)
+		input_sync(input);
+}
+
+static void cyttsp4_input_sync(struct input_dev *input)
+{
+	input_mt_sync(input);
+}
+
+static void cyttsp4_input_report(struct input_dev *input, int sig,
+		 int t, int type)
+{
+	if (type == CY_OBJ_STANDARD_FINGER || type == CY_OBJ_GLOVE) {
+		input_report_key(input, BTN_TOOL_FINGER, CY_BTN_PRESSED);
+		input_report_key(input, BTN_TOOL_PEN, CY_BTN_RELEASED);
+	} else if (type == CY_OBJ_STYLUS) {
+		input_report_key(input, BTN_TOOL_PEN, CY_BTN_PRESSED);
+		input_report_key(input, BTN_TOOL_FINGER, CY_BTN_RELEASED);
+	}
+	input_report_key(input, BTN_TOUCH, CY_BTN_PRESSED);
+
+	input_report_abs(input, sig, t);
+}
+
+static void cyttsp4_report_slot_liftoff(struct cyttsp4_mt_data *md,
+		int max_slots)
+{
+	input_report_key(md->input, BTN_TOUCH, CY_BTN_RELEASED);
+	input_report_key(md->input, BTN_TOOL_FINGER, CY_BTN_RELEASED);
+	input_report_key(md->input, BTN_TOOL_PEN, CY_BTN_RELEASED);
+
+}
+
+static int cyttsp4_input_register_device(struct input_dev *input, int max_slots)
+{
+	__set_bit(BTN_TOUCH, input->keybit);
+	__set_bit(BTN_TOOL_FINGER, input->keybit);
+	__set_bit(BTN_TOOL_PEN, input->keybit);
+	return input_register_device(input);
+}
+
+void cyttsp4_init_function_ptrs(struct cyttsp4_mt_data *md)
+{
+	md->mt_function.report_slot_liftoff = cyttsp4_report_slot_liftoff;
+	md->mt_function.final_sync = cyttsp4_final_sync;
+	md->mt_function.input_sync = cyttsp4_input_sync;
+	md->mt_function.input_report = cyttsp4_input_report;
+	md->mt_function.input_register_device = cyttsp4_input_register_device;
+}
+
+static int __init cyttsp4_mt_init(void)
+{
+	int rc;
+	cyttsp4_mt_driver.driver.owner = THIS_MODULE;
+	rc = cyttsp4_register_driver(&cyttsp4_mt_driver);
+	pr_info("%s: Cypress TTSP MT v4 multi-touch (Built %s), rc=%d\n",
+		 __func__, CY_DRIVER_DATE, rc);
+	return rc;
+}
+module_init(cyttsp4_mt_init);
+
+static void __exit cyttsp4_mt_exit(void)
+{
+	cyttsp4_unregister_driver(&cyttsp4_mt_driver);
+	pr_info("%s: module exit\n", __func__);
+}
+module_exit(cyttsp4_mt_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Cypress TrueTouch(R) Standard 2D multi-touch driver");
+MODULE_AUTHOR("Cypress Semiconductor");
diff --git a/drivers/input/touchscreen/cypress/cyttsp4_mtb.c b/drivers/input/touchscreen/cypress/cyttsp4_mtb.c
new file mode 100644
index 0000000..19c96c4
--- /dev/null
+++ b/drivers/input/touchscreen/cypress/cyttsp4_mtb.c
@@ -0,0 +1,115 @@
+/*
+ * cyttsp4_mtb.c
+ * Cypress TrueTouch(TM) Standard Product V4 Multi-touch module.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2012 Cypress Semiconductor
+ * Copyright (C) 2011 Sony Ericsson Mobile Communications AB.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#include <linux/input.h>
+#include <linux/input/mt.h>
+#include <linux/cyttsp4_core.h>
+
+#include "cyttsp4_mt_common.h"
+
+static void cyttsp4_final_sync(struct input_dev *input, int max_slots,
+		int mt_sync_count, unsigned long *ids)
+{
+	int t;
+
+	for (t = 0; t < max_slots; t++) {
+		if (test_bit(t, ids))
+			continue;
+		input_mt_slot(input, t);
+		input_mt_report_slot_state(input, MT_TOOL_FINGER, false);
+	}
+
+	input_sync(input);
+}
+
+static void cyttsp4_input_report(struct input_dev *input, int sig,
+		int t, int type)
+{
+	input_mt_slot(input, t);
+
+	if (type == CY_OBJ_STANDARD_FINGER || type == CY_OBJ_GLOVE)
+		input_mt_report_slot_state(input, MT_TOOL_FINGER, true);
+	else if (type == CY_OBJ_STYLUS)
+		input_mt_report_slot_state(input, MT_TOOL_PEN, true);
+}
+
+static void cyttsp4_report_slot_liftoff(struct cyttsp4_mt_data *md,
+		int max_slots)
+{
+	int t;
+
+	if (md->num_prv_rec == 0)
+		return;
+
+	for (t = 0; t < max_slots; t++) {
+		input_mt_slot(md->input, t);
+		input_mt_report_slot_state(md->input,
+			MT_TOOL_FINGER, false);
+	}
+}
+
+static int cyttsp4_input_register_device(struct input_dev *input, int max_slots)
+{
+	input_set_abs_params(input, ABS_MT_TOOL_TYPE,
+			0, MT_TOOL_MAX, 0, 0);
+
+	input_mt_init_slots(input, max_slots);
+	return input_register_device(input);
+}
+
+void cyttsp4_init_function_ptrs(struct cyttsp4_mt_data *md)
+{
+	md->mt_function.report_slot_liftoff = cyttsp4_report_slot_liftoff;
+	md->mt_function.final_sync = cyttsp4_final_sync;
+	md->mt_function.input_sync = NULL;
+	md->mt_function.input_report = cyttsp4_input_report;
+	md->mt_function.input_register_device = cyttsp4_input_register_device;
+}
+
+static int __init cyttsp4_mt_init(void)
+{
+	int rc;
+	cyttsp4_mt_driver.driver.owner = THIS_MODULE;
+	rc = cyttsp4_register_driver(&cyttsp4_mt_driver);
+	pr_info("%s: Cypress TTSP MT v4 multi-touch (Built %s), rc=%d\n",
+		 __func__, CY_DRIVER_DATE, rc);
+	return rc;
+}
+module_init(cyttsp4_mt_init);
+
+static void __exit cyttsp4_mt_exit(void)
+{
+	cyttsp4_unregister_driver(&cyttsp4_mt_driver);
+	pr_info("%s: module exit\n", __func__);
+}
+module_exit(cyttsp4_mt_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Cypress TrueTouch(R) Standard 2D multi-touch driver");
+MODULE_AUTHOR("Cypress Semiconductor");
diff --git a/drivers/input/touchscreen/cypress/cyttsp4_platform.c b/drivers/input/touchscreen/cypress/cyttsp4_platform.c
new file mode 100644
index 0000000..4a19db6
--- /dev/null
+++ b/drivers/input/touchscreen/cypress/cyttsp4_platform.c
@@ -0,0 +1,235 @@
+/*
+ * cyttsp4_platform.c
+ * Cypress TrueTouch(TM) Standard Product V4 Platform Module.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2013 Cypress Semiconductor
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#include <linux/device.h>
+#include <linux/gpio.h>
+#include <linux/delay.h>
+
+/* cyttsp */
+#include <linux/cyttsp4_bus.h>
+#include <linux/cyttsp4_core.h>
+
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_PLATFORM_FW_UPGRADE
+#include "cyttsp4_img.h"
+static struct cyttsp4_touch_firmware cyttsp4_firmware = {
+	.img = cyttsp4_img,
+	.size = ARRAY_SIZE(cyttsp4_img),
+	.ver = cyttsp4_ver,
+	.vsize = ARRAY_SIZE(cyttsp4_ver),
+};
+#else
+static struct cyttsp4_touch_firmware cyttsp4_firmware = {
+	.img = NULL,
+	.size = 0,
+	.ver = NULL,
+	.vsize = 0,
+};
+#endif
+
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_PLATFORM_TTCONFIG_UPGRADE
+#include "cyttsp4_params.h"
+static struct touch_settings cyttsp4_sett_param_regs = {
+	.data = (uint8_t *)&cyttsp4_param_regs[0],
+	.size = ARRAY_SIZE(cyttsp4_param_regs),
+	.tag = 0,
+};
+
+static struct touch_settings cyttsp4_sett_param_size = {
+	.data = (uint8_t *)&cyttsp4_param_size[0],
+	.size = ARRAY_SIZE(cyttsp4_param_size),
+	.tag = 0,
+};
+
+static struct cyttsp4_touch_config cyttsp4_ttconfig = {
+	.param_regs = &cyttsp4_sett_param_regs,
+	.param_size = &cyttsp4_sett_param_size,
+	.fw_ver = ttconfig_fw_ver,
+	.fw_vsize = ARRAY_SIZE(ttconfig_fw_ver),
+};
+#else
+static struct cyttsp4_touch_config cyttsp4_ttconfig = {
+	.param_regs = NULL,
+	.param_size = NULL,
+	.fw_ver = NULL,
+	.fw_vsize = 0,
+};
+#endif
+
+struct cyttsp4_loader_platform_data _cyttsp4_loader_platform_data = {
+	.fw = &cyttsp4_firmware,
+	.ttconfig = &cyttsp4_ttconfig,
+	.flags = CY_LOADER_FLAG_NONE,
+};
+
+int cyttsp4_xres(struct cyttsp4_core_platform_data *pdata,
+		struct device *dev)
+{
+	int rst_gpio = pdata->rst_gpio;
+	int rc = 0;
+
+	gpio_set_value(rst_gpio, 1);
+	msleep(20);
+	gpio_set_value(rst_gpio, 0);
+	msleep(40);
+	gpio_set_value(rst_gpio, 1);
+	msleep(20);
+	dev_info(dev,
+		"%s: RESET CYTTSP gpio=%d r=%d\n", __func__,
+		pdata->rst_gpio, rc);
+	return rc;
+}
+
+int cyttsp4_init(struct cyttsp4_core_platform_data *pdata,
+		int on, struct device *dev)
+{
+	int rst_gpio = pdata->rst_gpio;
+	int irq_gpio = pdata->irq_gpio;
+	int rc = 0;
+
+	if (on) {
+		rc = gpio_request(rst_gpio, NULL);
+		if (rc < 0) {
+			gpio_free(rst_gpio);
+			rc = gpio_request(rst_gpio, NULL);
+		}
+		if (rc < 0) {
+			dev_err(dev,
+				"%s: Fail request gpio=%d\n", __func__,
+				rst_gpio);
+		} else {
+			rc = gpio_direction_output(rst_gpio, 1);
+			if (rc < 0) {
+				pr_err("%s: Fail set output gpio=%d\n",
+					__func__, rst_gpio);
+				gpio_free(rst_gpio);
+			} else {
+				rc = gpio_request(irq_gpio, NULL);
+				if (rc < 0) {
+					gpio_free(irq_gpio);
+					rc = gpio_request(irq_gpio,
+						NULL);
+				}
+				if (rc < 0) {
+					dev_err(dev,
+						"%s: Fail request gpio=%d\n",
+						__func__, irq_gpio);
+					gpio_free(rst_gpio);
+				} else {
+					gpio_direction_input(irq_gpio);
+				}
+			}
+		}
+	} else {
+		gpio_free(rst_gpio);
+		gpio_free(irq_gpio);
+	}
+
+	dev_info(dev,
+		"%s: INIT CYTTSP RST gpio=%d and IRQ gpio=%d r=%d\n",
+		__func__, rst_gpio, irq_gpio, rc);
+	return rc;
+}
+
+static int cyttsp4_wakeup(struct cyttsp4_core_platform_data *pdata,
+		struct device *dev, atomic_t *ignore_irq)
+{
+	int irq_gpio = pdata->irq_gpio;
+	int rc = 0;
+
+	if (ignore_irq)
+		atomic_set(ignore_irq, 1);
+	rc = gpio_direction_output(irq_gpio, 0);
+	if (rc < 0) {
+		if (ignore_irq)
+			atomic_set(ignore_irq, 0);
+		dev_err(dev,
+			"%s: Fail set output gpio=%d\n",
+			__func__, irq_gpio);
+	} else {
+		udelay(2000);
+		rc = gpio_direction_input(irq_gpio);
+		if (ignore_irq)
+			atomic_set(ignore_irq, 0);
+		if (rc < 0) {
+			dev_err(dev,
+				"%s: Fail set input gpio=%d\n",
+				__func__, irq_gpio);
+		}
+	}
+
+	dev_info(dev,
+		"%s: WAKEUP CYTTSP gpio=%d r=%d\n", __func__,
+		irq_gpio, rc);
+	return rc;
+}
+
+static int cyttsp4_sleep(struct cyttsp4_core_platform_data *pdata,
+		struct device *dev, atomic_t *ignore_irq)
+{
+	return 0;
+}
+
+int cyttsp4_power(struct cyttsp4_core_platform_data *pdata,
+		int on, struct device *dev, atomic_t *ignore_irq)
+{
+	if (on)
+		return cyttsp4_wakeup(pdata, dev, ignore_irq);
+
+	return cyttsp4_sleep(pdata, dev, ignore_irq);
+}
+
+int cyttsp4_irq_stat(struct cyttsp4_core_platform_data *pdata,
+		struct device *dev)
+{
+	return gpio_get_value(pdata->irq_gpio);
+}
+
+#ifdef CYTTSP4_DETECT_HW
+int cyttsp4_detect(struct cyttsp4_core_platform_data *pdata,
+		struct device *dev, cyttsp4_platform_read read)
+{
+	int retry = 3;
+	int rc;
+	char buf[1];
+
+	while (retry--) {
+		/* Perform reset, wait for 100 ms and perform read */
+		dev_vdbg(dev, "%s: Performing a reset\n", __func__);
+		pdata->xres(pdata, dev);
+		msleep(100);
+		rc = read(dev, 0, buf, 1);
+		if (!rc)
+			return 0;
+
+		dev_vdbg(dev, "%s: Read unsuccessful, try=%d\n",
+			__func__, 3 - retry);
+	}
+
+	return rc;
+}
+#endif
diff --git a/drivers/input/touchscreen/cypress/cyttsp4_proximity.c b/drivers/input/touchscreen/cypress/cyttsp4_proximity.c
new file mode 100644
index 0000000..f714f95
--- /dev/null
+++ b/drivers/input/touchscreen/cypress/cyttsp4_proximity.c
@@ -0,0 +1,585 @@
+/*
+ * cyttsp4_proximity.c
+ * Cypress TrueTouch(TM) Standard Product V4 Proximity touch reports module.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2013 Cypress Semiconductor
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#include <linux/cyttsp4_bus.h>
+
+#include <linux/delay.h>
+#include <linux/gpio.h>
+#include <linux/input.h>
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+#include <linux/limits.h>
+#include <linux/module.h>
+#include <linux/pm_runtime.h>
+#include <linux/slab.h>
+#include <linux/workqueue.h>
+
+#include <linux/cyttsp4_core.h>
+#include <linux/cyttsp4_mt.h>
+#include <linux/cyttsp4_proximity.h>
+#include "cyttsp4_regs.h"
+
+/* Timeout value in ms. */
+#define CY_PROXIMITY_REQUEST_EXCLUSIVE_TIMEOUT		1000
+
+#define CY_PROXIMITY_ON 0
+#define CY_PROXIMITY_OFF 1
+
+static int cyttsp4_proximity_attention(struct cyttsp4_device *ttsp);
+static int cyttsp4_startup_attention(struct cyttsp4_device *ttsp);
+
+struct cyttsp4_proximity_data {
+	struct cyttsp4_device *ttsp;
+	struct cyttsp4_proximity_platform_data *pdata;
+	struct cyttsp4_sysinfo *si;
+	struct input_dev *input;
+	struct mutex report_lock;
+	struct mutex sysfs_lock;
+	int enable_count;
+	bool is_suspended;
+	bool input_device_registered;
+	char phys[NAME_MAX];
+	u8 pr_buf[CY_MAX_PRBUF_SIZE];
+};
+
+static void cyttsp4_report_proximity(struct cyttsp4_proximity_data *pd,
+	bool on)
+{
+	int val = on ? CY_PROXIMITY_ON : CY_PROXIMITY_OFF;
+
+	input_report_abs(pd->input, ABS_DISTANCE, val);
+	input_sync(pd->input);
+}
+
+static void cyttsp4_get_proximity_touch(struct cyttsp4_proximity_data *pd,
+		int num_cur_rec)
+{
+	struct cyttsp4_touch tch;
+	int i;
+
+	for (i = 0; i < num_cur_rec; i++) {
+		cyttsp4_get_touch_record(pd->ttsp, i, tch.abs);
+
+		/* Check for proximity event */
+		if (tch.abs[CY_TCH_O] == CY_OBJ_PROXIMITY) {
+			if (tch.abs[CY_TCH_E] == CY_EV_TOUCHDOWN)
+				cyttsp4_report_proximity(pd, true);
+			else if (tch.abs[CY_TCH_E] == CY_EV_LIFTOFF)
+				cyttsp4_report_proximity(pd, false);
+			break;
+		}
+	}
+}
+
+/* read xy_data for all current touches */
+static int cyttsp4_xy_worker(struct cyttsp4_proximity_data *pd)
+{
+	struct device *dev = &pd->ttsp->dev;
+	struct cyttsp4_sysinfo *si = pd->si;
+	u8 num_cur_rec;
+	u8 rep_len;
+	u8 rep_stat;
+	u8 tt_stat;
+	int rc = 0;
+
+	/*
+	 * Get event data from cyttsp4 device.
+	 * The event data includes all data
+	 * for all active touches.
+	 * Event data also includes button data
+	 */
+	rep_len = si->xy_mode[si->si_ofs.rep_ofs];
+	rep_stat = si->xy_mode[si->si_ofs.rep_ofs + 1];
+	tt_stat = si->xy_mode[si->si_ofs.tt_stat_ofs];
+
+	num_cur_rec = GET_NUM_TOUCH_RECORDS(tt_stat);
+
+	if (rep_len == 0 && num_cur_rec > 0) {
+		dev_err(dev, "%s: report length error rep_len=%d num_rec=%d\n",
+			__func__, rep_len, num_cur_rec);
+		goto cyttsp4_xy_worker_exit;
+	}
+
+	/* check any error conditions */
+	if (IS_BAD_PKT(rep_stat)) {
+		dev_dbg(dev, "%s: Invalid buffer detected\n", __func__);
+		rc = 0;
+		goto cyttsp4_xy_worker_exit;
+	}
+
+	if (IS_LARGE_AREA(tt_stat))
+		dev_dbg(dev, "%s: Large area detected\n", __func__);
+
+	if (num_cur_rec > si->si_ofs.max_tchs) {
+		dev_err(dev, "%s: %s (n=%d c=%d)\n", __func__,
+			"too many tch; set to max tch",
+			num_cur_rec, si->si_ofs.max_tchs);
+		num_cur_rec = si->si_ofs.max_tchs;
+	}
+
+	/* extract xy_data for all currently reported touches */
+	dev_vdbg(dev, "%s: extract data num_cur_rec=%d\n", __func__,
+		num_cur_rec);
+	if (num_cur_rec)
+		cyttsp4_get_proximity_touch(pd, num_cur_rec);
+	else
+		cyttsp4_report_proximity(pd, false);
+
+	dev_vdbg(dev, "%s: done\n", __func__);
+	rc = 0;
+
+cyttsp4_xy_worker_exit:
+	return rc;
+}
+
+static int _cyttsp4_proximity_enable(struct cyttsp4_proximity_data *pd)
+{
+	struct cyttsp4_device *ttsp = pd->ttsp;
+	struct device *dev = &ttsp->dev;
+	int rc = 0;
+
+	dev_dbg(dev, "%s\n", __func__);
+
+	/* We use pm_runtime_get_sync to activate
+	 * the core device until it is disabled back
+	 */
+	pm_runtime_get_sync(dev);
+
+	rc = cyttsp4_request_exclusive(ttsp,
+			CY_PROXIMITY_REQUEST_EXCLUSIVE_TIMEOUT);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error on request exclusive r=%d\n",
+				__func__, rc);
+		goto exit;
+	}
+
+	rc = cyttsp4_request_enable_scan_type(ttsp, CY_ST_PROXIMITY);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error on request enable proximity scantype r=%d\n",
+				__func__, rc);
+		goto exit_release;
+	}
+
+	dev_vdbg(dev, "%s: setup subscriptions\n", __func__);
+
+	/* set up touch call back */
+	cyttsp4_subscribe_attention(ttsp, CY_ATTEN_IRQ,
+		cyttsp4_proximity_attention, CY_MODE_OPERATIONAL);
+
+	/* set up startup call back */
+	cyttsp4_subscribe_attention(ttsp, CY_ATTEN_STARTUP,
+		cyttsp4_startup_attention, 0);
+
+exit_release:
+	cyttsp4_release_exclusive(ttsp);
+exit:
+	return rc;
+}
+
+static int _cyttsp4_proximity_disable(struct cyttsp4_proximity_data *pd,
+		bool force)
+{
+	struct cyttsp4_device *ttsp = pd->ttsp;
+	struct device *dev = &ttsp->dev;
+	int rc = 0;
+
+	dev_dbg(dev, "%s\n", __func__);
+
+	rc = cyttsp4_request_exclusive(ttsp,
+			CY_PROXIMITY_REQUEST_EXCLUSIVE_TIMEOUT);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error on request exclusive r=%d\n",
+				__func__, rc);
+		goto exit;
+	}
+
+	rc = cyttsp4_request_disable_scan_type(ttsp, CY_ST_PROXIMITY);
+	if (rc < 0) {
+		dev_err(dev, "%s: Error on request disable proximity scan r=%d\n",
+				__func__, rc);
+		goto exit_release;
+	}
+
+exit_release:
+	cyttsp4_release_exclusive(ttsp);
+
+exit:
+	if (!rc || force) {
+		cyttsp4_unsubscribe_attention(ttsp, CY_ATTEN_IRQ,
+			cyttsp4_proximity_attention, CY_MODE_OPERATIONAL);
+
+		cyttsp4_unsubscribe_attention(ttsp, CY_ATTEN_STARTUP,
+			cyttsp4_startup_attention, 0);
+
+		pm_runtime_put(dev);
+	}
+
+	return rc;
+}
+
+static ssize_t cyttsp4_proximity_enable_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct cyttsp4_proximity_data *pd = dev_get_drvdata(dev);
+	int val = 0;
+
+	mutex_lock(&pd->sysfs_lock);
+	val = pd->enable_count;
+	mutex_unlock(&pd->sysfs_lock);
+
+	return scnprintf(buf, CY_MAX_PRBUF_SIZE, "%d\n", val);
+}
+
+static ssize_t cyttsp4_proximity_enable_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)
+{
+	struct cyttsp4_proximity_data *pd = dev_get_drvdata(dev);
+	unsigned long value;
+	int rc;
+
+	rc = kstrtoul(buf, 10, &value);
+	if (rc < 0 || (value != 0 && value != 1)) {
+		dev_err(dev, "%s: Invalid value\n", __func__);
+		return -EINVAL;
+	}
+
+	mutex_lock(&pd->sysfs_lock);
+	if (value) {
+		if (pd->enable_count++) {
+			dev_vdbg(dev, "%s: '%s' already enabled\n", __func__,
+				pd->ttsp->name);
+		} else {
+			rc = _cyttsp4_proximity_enable(pd);
+			if (rc)
+				pd->enable_count--;
+		}
+	} else {
+		if (--pd->enable_count) {
+			if (pd->enable_count < 0) {
+				dev_err(dev, "%s: '%s' unbalanced disable\n",
+					__func__, pd->ttsp->name);
+				pd->enable_count = 0;
+			}
+		} else {
+			rc = _cyttsp4_proximity_disable(pd, false);
+			if (rc)
+				pd->enable_count++;
+		}
+	}
+	mutex_unlock(&pd->sysfs_lock);
+
+	if (rc)
+		return rc;
+
+	return size;
+}
+
+static DEVICE_ATTR(enable, S_IRUSR | S_IWUSR,
+		cyttsp4_proximity_enable_show,
+		cyttsp4_proximity_enable_store);
+
+static int cyttsp4_proximity_attention(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_proximity_data *pd = dev_get_drvdata(dev);
+	int rc = 0;
+
+	dev_vdbg(dev, "%s\n", __func__);
+
+	mutex_lock(&pd->report_lock);
+	if (!pd->is_suspended) {
+		/* core handles handshake */
+		rc = cyttsp4_xy_worker(pd);
+	} else {
+		dev_vdbg(dev, "%s: Ignoring report while suspended\n",
+			__func__);
+	}
+	mutex_unlock(&pd->report_lock);
+	if (rc < 0)
+		dev_err(dev, "%s: xy_worker error r=%d\n", __func__, rc);
+
+	return rc;
+}
+
+static int cyttsp4_startup_attention(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_proximity_data *pd = dev_get_drvdata(dev);
+
+	dev_vdbg(dev, "%s\n", __func__);
+
+	mutex_lock(&pd->report_lock);
+	cyttsp4_report_proximity(pd, false);
+	mutex_unlock(&pd->report_lock);
+
+	return 0;
+}
+
+#ifdef CONFIG_PM_RUNTIME
+static int cyttsp4_proximity_suspend(struct device *dev)
+{
+	struct cyttsp4_proximity_data *pd = dev_get_drvdata(dev);
+
+	dev_dbg(dev, "%s\n", __func__);
+
+	mutex_lock(&pd->report_lock);
+	pd->is_suspended = true;
+	cyttsp4_report_proximity(pd, false);
+	mutex_unlock(&pd->report_lock);
+
+	return 0;
+}
+
+static int cyttsp4_proximity_resume(struct device *dev)
+{
+	struct cyttsp4_proximity_data *pd = dev_get_drvdata(dev);
+
+	dev_dbg(dev, "%s\n", __func__);
+
+	mutex_lock(&pd->report_lock);
+	pd->is_suspended = false;
+	mutex_unlock(&pd->report_lock);
+
+	return 0;
+}
+#endif
+
+static const struct dev_pm_ops cyttsp4_proximity_pm_ops = {
+	SET_RUNTIME_PM_OPS(cyttsp4_proximity_suspend,
+		cyttsp4_proximity_resume, NULL)
+};
+
+static int cyttsp4_setup_input_device_and_sysfs(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_proximity_data *pd = dev_get_drvdata(dev);
+	int signal = CY_IGNORE_VALUE;
+	int min, max;
+	int i;
+	int rc;
+
+	rc = device_create_file(dev, &dev_attr_enable);
+	if (rc) {
+		dev_err(dev, "%s: Error, could not create enable\n",
+				__func__);
+		goto exit;
+	}
+
+	dev_vdbg(dev, "%s: Initialize event signals\n", __func__);
+
+	__set_bit(EV_ABS, pd->input->evbit);
+
+	for (i = 0; i < (pd->pdata->frmwrk->size / CY_NUM_ABS_SET); i++) {
+		signal = pd->pdata->frmwrk->abs
+			[(i * CY_NUM_ABS_SET) + CY_SIGNAL_OST];
+		if (signal != CY_IGNORE_VALUE) {
+			min = pd->pdata->frmwrk->abs
+				[(i * CY_NUM_ABS_SET) + CY_MIN_OST];
+			max = pd->pdata->frmwrk->abs
+				[(i * CY_NUM_ABS_SET) + CY_MAX_OST];
+			input_set_abs_params(pd->input, signal, min, max,
+				pd->pdata->frmwrk->abs
+				[(i * CY_NUM_ABS_SET) + CY_FUZZ_OST],
+				pd->pdata->frmwrk->abs
+				[(i * CY_NUM_ABS_SET) + CY_FLAT_OST]);
+		}
+	}
+
+	rc = input_register_device(pd->input);
+	if (rc) {
+		dev_err(dev, "%s: Error, failed register input device r=%d\n",
+			__func__, rc);
+		goto unregister_enable;
+	}
+
+	pd->input_device_registered = true;
+	return rc;
+
+unregister_enable:
+	device_remove_file(dev, &dev_attr_enable);
+exit:
+	return rc;
+}
+
+static int cyttsp4_setup_input_attention(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_proximity_data *pd = dev_get_drvdata(dev);
+	int rc;
+
+	dev_vdbg(dev, "%s\n", __func__);
+
+	pd->si = cyttsp4_request_sysinfo(ttsp);
+	if (!pd->si)
+		return -EINVAL;
+
+	rc = cyttsp4_setup_input_device_and_sysfs(ttsp);
+
+	cyttsp4_unsubscribe_attention(ttsp, CY_ATTEN_STARTUP,
+		cyttsp4_setup_input_attention, 0);
+
+	return rc;
+}
+
+static int cyttsp4_proximity_probe(struct cyttsp4_device *ttsp)
+{
+	struct cyttsp4_proximity_data *pd;
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_proximity_platform_data *pdata = dev_get_platdata(dev);
+	int rc = 0;
+
+	dev_info(dev, "%s\n", __func__);
+	dev_dbg(dev, "%s: debug on\n", __func__);
+	dev_vdbg(dev, "%s: verbose debug on\n", __func__);
+
+	if (pdata == NULL) {
+		dev_err(dev, "%s: Missing platform data\n", __func__);
+		rc = -ENODEV;
+		goto error_no_pdata;
+	}
+
+	pd = kzalloc(sizeof(*pd), GFP_KERNEL);
+	if (pd == NULL) {
+		dev_err(dev, "%s: Error, kzalloc\n", __func__);
+		rc = -ENOMEM;
+		goto error_alloc_data_failed;
+	}
+
+	mutex_init(&pd->report_lock);
+	mutex_init(&pd->sysfs_lock);
+	pd->ttsp = ttsp;
+	pd->pdata = pdata;
+	dev_set_drvdata(dev, pd);
+	/* Create the input device and register it. */
+	dev_vdbg(dev, "%s: Create the input device and register it\n",
+		__func__);
+	pd->input = input_allocate_device();
+	if (pd->input == NULL) {
+		dev_err(dev, "%s: Error, failed to allocate input device\n",
+			__func__);
+		rc = -ENOSYS;
+		goto error_alloc_failed;
+	}
+
+	pd->input->name = ttsp->name;
+	scnprintf(pd->phys, sizeof(pd->phys)-1, "%s", dev_name(dev));
+	pd->input->phys = pd->phys;
+	pd->input->dev.parent = &pd->ttsp->dev;
+	input_set_drvdata(pd->input, pd);
+
+	pm_runtime_enable(dev);
+
+	/* get sysinfo */
+	pd->si = cyttsp4_request_sysinfo(ttsp);
+	if (pd->si) {
+		rc = cyttsp4_setup_input_device_and_sysfs(ttsp);
+		if (rc)
+			goto error_init_input;
+	} else {
+		dev_err(dev, "%s: Fail get sysinfo pointer from core p=%p\n",
+			__func__, pd->si);
+		cyttsp4_subscribe_attention(ttsp, CY_ATTEN_STARTUP,
+			cyttsp4_setup_input_attention, 0);
+	}
+
+	dev_dbg(dev, "%s: ok\n", __func__);
+	return 0;
+
+error_init_input:
+	pm_runtime_suspend(dev);
+	pm_runtime_disable(dev);
+	input_free_device(pd->input);
+error_alloc_failed:
+	dev_set_drvdata(dev, NULL);
+	kfree(pd);
+error_alloc_data_failed:
+error_no_pdata:
+	dev_err(dev, "%s failed.\n", __func__);
+	return rc;
+}
+
+static int cyttsp4_proximity_release(struct cyttsp4_device *ttsp)
+{
+	struct device *dev = &ttsp->dev;
+	struct cyttsp4_proximity_data *pd = dev_get_drvdata(dev);
+
+	dev_dbg(dev, "%s\n", __func__);
+
+	if (pd->input_device_registered) {
+		/* Disable proximity sensing */
+		mutex_lock(&pd->sysfs_lock);
+		if (pd->enable_count)
+			_cyttsp4_proximity_disable(pd, true);
+		mutex_unlock(&pd->sysfs_lock);
+		device_remove_file(dev, &dev_attr_enable);
+		input_unregister_device(pd->input);
+	} else {
+		input_free_device(pd->input);
+		cyttsp4_unsubscribe_attention(ttsp, CY_ATTEN_STARTUP,
+			cyttsp4_setup_input_attention, 0);
+	}
+
+	pm_runtime_suspend(dev);
+	pm_runtime_disable(dev);
+
+	dev_set_drvdata(dev, NULL);
+	kfree(pd);
+	return 0;
+}
+
+static struct cyttsp4_driver cyttsp4_proximity_driver = {
+	.probe = cyttsp4_proximity_probe,
+	.remove = cyttsp4_proximity_release,
+	.driver = {
+		.name = CYTTSP4_PROXIMITY_NAME,
+		.bus = &cyttsp4_bus_type,
+		.owner = THIS_MODULE,
+		.pm = &cyttsp4_proximity_pm_ops,
+	},
+};
+
+static int __init cyttsp4_proximity_init(void)
+{
+	int rc = 0;
+	rc = cyttsp4_register_driver(&cyttsp4_proximity_driver);
+	pr_info("%s: Cypress TTSP MT v4 Proximity (Built %s), rc=%d\n",
+		 __func__, CY_DRIVER_DATE, rc);
+	return rc;
+}
+module_init(cyttsp4_proximity_init);
+
+static void __exit cyttsp4_proximity_exit(void)
+{
+	cyttsp4_unregister_driver(&cyttsp4_proximity_driver);
+	pr_info("%s: module exit\n", __func__);
+}
+module_exit(cyttsp4_proximity_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Cypress TTSP Proximity driver");
+MODULE_AUTHOR("Cypress Semiconductor");
diff --git a/drivers/input/touchscreen/cypress/cyttsp4_regs.h b/drivers/input/touchscreen/cypress/cyttsp4_regs.h
new file mode 100644
index 0000000..a9c0fb0
--- /dev/null
+++ b/drivers/input/touchscreen/cypress/cyttsp4_regs.h
@@ -0,0 +1,578 @@
+/*
+ * cyttsp4_regs.h
+ * Cypress TrueTouch(TM) Standard Product V4 registers.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2012 Cypress Semiconductor
+ * Copyright (C) 2011 Sony Ericsson Mobile Communications AB.
+ *
+ * Author: Aleksej Makarov <aleksej.makarov@sonyericsson.com>
+ * Modified by: Cypress Semiconductor to add test modes and commands
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#ifndef _CYTTSP4_REGS_H
+#define _CYTTSP4_REGS_H
+
+#define CY_FW_FILE_NAME			"cyttsp4_fw.bin"
+
+#define CY_DEFAULT_ADAP_MAX_XFER	512
+#define CY_ADAP_MIN_XFER		140
+
+#define CY_MAX_PRBUF_SIZE		PIPE_BUF
+#define CY_PR_TRUNCATED			" truncated..."
+
+#define CY_DEFAULT_CORE_ID		"main_ttsp_core"
+#define CY_MAX_NUM_CORE_DEVS		5
+
+#define CY_TMA1036_MAX_TCH		0x0E
+#define CY_TMA4XX_MAX_TCH		0x1E
+
+#define IS_BOOTLOADER(hst_mode, reset_detect) \
+		((hst_mode) & 0x01 || (reset_detect) != 0)
+#define IS_BOOTLOADER_IDLE(hst_mode, reset_detect) \
+		((hst_mode) & 0x01 && (reset_detect) & 0x01)
+
+#define GET_HSTMODE(reg)		((reg & 0x70) >> 4)
+#define GET_TOGGLE(reg)			((reg & 0x80) >> 7)
+
+#define IS_LITTLEENDIAN(reg)		((reg & 0x01) == 1)
+#define GET_PANELID(reg)		(reg & 0x07)
+
+#define HI_BYTE(x)			(u8)(((x) >> 8) & 0xFF)
+#define LO_BYTE(x)			(u8)((x) & 0xFF)
+
+#define CY_REG_BASE			0x00
+#define CY_NUM_REVCTRL			8
+#define CY_NUM_DDATA			32
+#define CY_NUM_MDATA			64
+
+#define CY_REG_CAT_CMD			2
+#define CY_CMD_COMPLETE_MASK		(1 << 6)
+#define CY_CMD_MASK			0x3F
+
+#define CY_TTCONFIG_VERSION_OFFSET	8
+#define CY_TTCONFIG_VERSION_SIZE	2
+#define CY_TTCONFIG_VERSION_ROW		0
+
+#define CY_CONFIG_LENGTH_INFO_OFFSET	0
+#define CY_CONFIG_LENGTH_INFO_SIZE	4
+#define CY_CONFIG_LENGTH_OFFSET		0
+#define CY_CONFIG_LENGTH_SIZE		2
+#define CY_CONFIG_MAXLENGTH_OFFSET	2
+#define CY_CONFIG_MAXLENGTH_SIZE	2
+
+enum cyttsp4_ic_ebid {
+	CY_TCH_PARM_EBID,
+	CY_MDATA_EBID,
+	CY_DDATA_EBID,
+	CY_EBID_NUM,
+};
+
+/* touch record system information offset masks and shifts */
+#define CY_BYTE_OFS_MASK		0x1F
+#define CY_BOFS_MASK			0xE0
+#define CY_BOFS_SHIFT			5
+
+/* helpers */
+#define GET_NUM_TOUCH_RECORDS(x)	((x) & 0x1F)
+#define IS_LARGE_AREA(x)		((x) & 0x20)
+#define IS_BAD_PKT(x)			((x) & 0x20)
+#define IS_TTSP_VER_GE(p, maj, min) \
+		((p)->si_ptrs.cydata == NULL ? \
+		0 : \
+		((p)->si_ptrs.cydata->ttsp_ver_major < (maj) ? \
+			0 : \
+			((p)->si_ptrs.cydata->ttsp_ver_minor < (min) ? \
+				0 : \
+				1)))
+
+/* Timeout in ms. */
+#define CY_COMMAND_COMPLETE_TIMEOUT	500
+#define CY_CALIBRATE_COMPLETE_TIMEOUT	5000
+#define CY_WATCHDOG_TIMEOUT		1000
+
+/* drv_debug commands */
+#define CY_DBG_SUSPEND			4
+#define CY_DBG_RESUME			5
+#define CY_DBG_SOFT_RESET		97
+#define CY_DBG_RESET			98
+
+/* scan types */
+#define CY_SCAN_TYPE_GLOVE		0x8
+#define CY_SCAN_TYPE_STYLUS		0x10
+#define CY_SCAN_TYPE_PROXIMITY		0x40
+#define CY_SCAN_TYPE_APA_MC		0x80
+
+enum cyttsp4_hst_mode_bits {
+	CY_HST_TOGGLE      = (1 << 7),
+	CY_HST_MODE_CHANGE = (1 << 3),
+	CY_HST_DEVICE_MODE = (7 << 4),
+	CY_HST_OPERATE     = (0 << 4),
+	CY_HST_SYSINFO     = (1 << 4),
+	CY_HST_CAT         = (2 << 4),
+	CY_HST_LOWPOW      = (1 << 2),
+	CY_HST_SLEEP       = (1 << 1),
+	CY_HST_RESET       = (1 << 0),
+};
+
+enum cyttsp_cmd_bits {
+	CY_CMD_COMPLETE    = (1 << 6),
+};
+
+enum cyttsp4_cmd_cat {
+	CY_CMD_CAT_NULL,
+	CY_CMD_CAT_RESERVED_1,
+	CY_CMD_CAT_GET_CFG_ROW_SZ,
+	CY_CMD_CAT_READ_CFG_BLK,
+	CY_CMD_CAT_WRITE_CFG_BLK,
+	CY_CMD_CAT_RESERVED_2,
+	CY_CMD_CAT_LOAD_SELF_TEST_DATA,
+	CY_CMD_CAT_RUN_SELF_TEST,
+	CY_CMD_CAT_GET_SELF_TEST_RESULT,
+	CY_CMD_CAT_CALIBRATE_IDACS,
+	CY_CMD_CAT_INIT_BASELINES,
+	CY_CMD_CAT_EXEC_PANEL_SCAN,
+	CY_CMD_CAT_RETRIEVE_PANEL_SCAN,
+	CY_CMD_CAT_START_SENSOR_DATA_MODE,
+	CY_CMD_CAT_STOP_SENSOR_DATA_MODE,
+	CY_CMD_CAT_INT_PIN_MODE,
+	CY_CMD_CAT_RETRIEVE_DATA_STRUCTURE,
+	CY_CMD_CAT_VERIFY_CFG_BLK_CRC,
+	CY_CMD_CAT_RESERVED_N,
+};
+
+enum cyttsp4_cmd_op {
+	CY_CMD_OP_NULL,
+	CY_CMD_OP_RESERVED_1,
+	CY_CMD_OP_GET_PARAM,
+	CY_CMD_OP_SET_PARAM,
+	CY_CMD_OP_RESERVED_2,
+	CY_CMD_OP_GET_CRC,
+	CY_CMD_OP_WAIT_FOR_EVENT,
+};
+
+enum cyttsp4_cmd_status {
+	CY_CMD_STATUS_SUCCESS,
+	CY_CMD_STATUS_FAILURE,
+};
+
+/* Operational Mode Command Sizes */
+/* NULL Command */
+#define CY_CMD_OP_NULL_CMD_SZ			1
+#define CY_CMD_OP_NULL_RET_SZ			0
+/* Get Parameter */
+#define CY_CMD_OP_GET_PARAM_CMD_SZ		2
+#define CY_CMD_OP_GET_PARAM_RET_SZ		6
+/* Set Parameter */
+#define CY_CMD_OP_SET_PARAM_CMD_SZ		7
+#define CY_CMD_OP_SET_PARAM_RET_SZ		2
+/* Get Config Block CRC */
+#define CY_CMD_OP_GET_CFG_BLK_CRC_CMD_SZ	2
+#define CY_CMD_OP_GET_CFG_BLK_CRC_RET_SZ	3
+/* Wait For Event */
+#define CY_CMD_OP_WAIT_FOR_EVENT_CMD_SZ		2
+
+/* CaT Mode Command Sizes */
+/* NULL Command */
+#define CY_CMD_CAT_NULL_CMD_SZ			1
+#define CY_CMD_CAT_NULL_RET_SZ			0
+/* Get Config Row Size */
+#define CY_CMD_CAT_GET_CFG_ROW_SIZE_CMD_SZ	1
+#define CY_CMD_CAT_GET_CFG_ROW_SIZE_RET_SZ	2
+/* Read Config Block */
+#define CY_CMD_CAT_READ_CFG_BLK_CMD_SZ		6
+#define CY_CMD_CAT_READ_CFG_BLK_RET_SZ		7 /* + Data */
+#define CY_CMD_CAT_READ_CFG_BLK_RET_HDR_SZ	5
+/* Write Config Block */
+#define CY_CMD_CAT_WRITE_CFG_BLK_CMD_SZ		8 /* + Data + Security Key */
+#define CY_CMD_CAT_WRITE_CFG_BLK_RET_SZ		5
+#define CY_CMD_CAT_WRITE_CFG_BLK_CMD_HDR_SZ	6
+/* Load Self-Test Data */
+#define CY_CMD_CAT_LOAD_SELFTEST_DATA_CMD_SZ	6
+#define CY_CMD_CAT_LOAD_SELFTEST_DATA_RET_SZ	5 /* + Data */
+/* Run Self-Test */
+#define CY_CMD_CAT_RUN_SELFTEST_CMD_SZ		2
+#define CY_CMD_CAT_RUN_SELFTEST_RET_SZ		3
+/* Calibrate IDACs */
+#define CY_CMD_CAT_CALIBRATE_IDAC_CMD_SZ	2
+#define CY_CMD_CAT_CALIBRATE_IDAC_RET_SZ	1
+/* Get Self-Test Results */
+#define CY_CMD_CAT_GET_SELFTEST_RES_CMD_SZ	6
+#define CY_CMD_CAT_GET_SELFTEST_RES_RET_SZ	5 /* + Data */
+/* Initialize Baselines */
+#define CY_CMD_CAT_INIT_BASELINE_CMD_SZ		2
+#define CY_CMD_CAT_INIT_BASELINE_RET_SZ		1
+/* Execute Panel Scan */
+#define CY_CMD_CAT_EXECUTE_PANEL_SCAN_CMD_SZ	1
+#define CY_CMD_CAT_EXECUTE_PANEL_SCAN_RET_SZ	1
+/* Retrieve Panel Scan */
+#define CY_CMD_CAT_RETRIEVE_PANEL_SCAN_CMD_SZ	6
+#define CY_CMD_CAT_RETRIEVE_PANEL_SCAN_RET_SZ	5 /* + Data */
+/* Start Sensor Data Mode */
+#define CY_CMD_CAT_START_SENSOR_MODE_CMD_SZ	1 /* + Data */
+#define CY_CMD_CAT_START_SENSOR_MODE_RET_SZ	0 /* + Data */
+/* Stop Sensor Data Mode */
+#define CY_CMD_CAT_STOP_SENSOR_MODE_CMD_SZ	1
+#define CY_CMD_CAT_STOP_SENSOR_MODE_RET_SZ	0
+/* Interrupt Pin Override */
+#define CY_CMD_CAT_INT_PIN_OVERRIDE_CMD_SZ	2
+#define CY_CMD_CAT_INT_PIN_OVERRIDE_RET_SZ	1
+/* Retrieve Data Structure */
+#define CY_CMD_CAT_RETRIEVE_DATA_STRUCT_CMD_SZ	6
+#define CY_CMD_CAT_RETRIEVE_DATA_STRUCT_RET_SZ	5 /* + Data */
+/* Verify Config Block CRC */
+#define CY_CMD_CAT_VERIFY_CFG_BLK_CRC_CMD_SZ	2
+#define CY_CMD_CAT_VERIFY_CFG_BLK_CRC_RET_SZ	5
+
+#define CY_RAM_ID_ACTIVE_DISTANCE		0x4A
+#define CY_RAM_ID_SCAN_TYPE			0x4B
+#define CY_RAM_ID_LOW_POWER_INTERVAL		0x4C
+#define CY_RAM_ID_REFRESH_INTERVAL		0x4D
+#define CY_RAM_ID_ACTIVE_MODE_TIMEOUT		0x4E
+#define CY_RAM_ID_ACTIVE_LFT_INTERVAL		0x4F
+#define CY_RAM_ID_ACTIVE_DISTANCE2		0x50
+#define CY_RAM_ID_CHARGER_STATUS		0x51
+#define CY_RAM_ID_IMO_TRIM_VALUE		0x52
+#define CY_RAM_ID_FINGER_THRESHOLH		0x93
+#define CY_RAM_ID_DETECT_AREA_MARGIN_X		0x58
+#define CY_RAM_ID_DETECT_AREA_MARGIN_Y		0x59
+#define CY_RAM_ID_GRIP_XEDGE_A			0x70
+#define CY_RAM_ID_GRIP_XEDGE_B			0x71
+#define CY_RAM_ID_GRIP_XEXC_A			0x72
+#define CY_RAM_ID_GRIP_XEXC_B			0x73
+#define CY_RAM_ID_GRIP_YEDGE_A			0x74
+#define CY_RAM_ID_GRIP_YEDGE_B			0x75
+#define CY_RAM_ID_GRIP_YEXC_A			0x76
+#define CY_RAM_ID_GRIP_YEXC_B			0x77
+#define CY_RAM_ID_GRIP_FIRST_EXC		0x78
+#define CY_RAM_ID_GRIP_EXC_EDGE_ORIGIN		0x79
+#define CY_RAM_ID_PROX_ACTIVE_DIST_Z_VALUE	0x9B
+
+enum cyttsp4_scan_type {
+	CY_ST_APA_MC,
+	CY_ST_GLOVE,
+	CY_ST_STYLUS,
+	CY_ST_PROXIMITY,
+};
+
+enum cyttsp4_mode {
+	CY_MODE_UNKNOWN      = 0,
+	CY_MODE_BOOTLOADER   = (1 << 1),
+	CY_MODE_OPERATIONAL  = (1 << 2),
+	CY_MODE_SYSINFO      = (1 << 3),
+	CY_MODE_CAT          = (1 << 4),
+	CY_MODE_STARTUP      = (1 << 5),
+	CY_MODE_LOADER       = (1 << 6),
+	CY_MODE_CHANGE_MODE  = (1 << 7),
+	CY_MODE_CHANGED      = (1 << 8),
+	CY_MODE_CMD_COMPLETE = (1 << 9),
+};
+
+enum cyttsp4_int_state {
+	CY_INT_NONE,
+	CY_INT_IGNORE      = (1 << 0),
+	CY_INT_MODE_CHANGE = (1 << 1),
+	CY_INT_EXEC_CMD    = (1 << 2),
+	CY_INT_AWAKE       = (1 << 3),
+};
+
+enum cyttsp4_ic_grpnum {
+	CY_IC_GRPNUM_RESERVED,
+	CY_IC_GRPNUM_CMD_REGS,
+	CY_IC_GRPNUM_TCH_REP,
+	CY_IC_GRPNUM_DATA_REC,
+	CY_IC_GRPNUM_TEST_REC,
+	CY_IC_GRPNUM_PCFG_REC,
+	CY_IC_GRPNUM_TCH_PARM_VAL,
+	CY_IC_GRPNUM_TCH_PARM_SIZE,
+	CY_IC_GRPNUM_RESERVED1,
+	CY_IC_GRPNUM_RESERVED2,
+	CY_IC_GRPNUM_OPCFG_REC,
+	CY_IC_GRPNUM_DDATA_REC,
+	CY_IC_GRPNUM_MDATA_REC,
+	CY_IC_GRPNUM_TEST_REGS,
+	CY_IC_GRPNUM_BTN_KEYS,
+	CY_IC_GRPNUM_TTHE_REGS,
+	CY_IC_GRPNUM_NUM
+};
+
+enum cyttsp4_event_id {
+	CY_EV_NO_EVENT,
+	CY_EV_TOUCHDOWN,
+	CY_EV_MOVE,		/* significant displacement (> act dist) */
+	CY_EV_LIFTOFF,		/* record reports last position */
+};
+
+enum cyttsp4_object_id {
+	CY_OBJ_STANDARD_FINGER = 0,
+	CY_OBJ_PROXIMITY       = 1,
+	CY_OBJ_STYLUS          = 2,
+	CY_OBJ_GLOVE           = 4,
+};
+
+#define CY_POST_CODEL_WDG_RST           0x01
+#define CY_POST_CODEL_CFG_DATA_CRC_FAIL 0x02
+#define CY_POST_CODEL_PANEL_TEST_FAIL   0x04
+
+/* test mode NULL command driver codes */
+enum cyttsp4_null_test_cmd_code {
+	CY_NULL_CMD_NULL,
+	CY_NULL_CMD_MODE,
+	CY_NULL_CMD_STATUS_SIZE,
+	CY_NULL_CMD_HANDSHAKE,
+	CY_NULL_CMD_LOW_POWER,
+};
+
+enum cyttsp4_test_mode {
+	CY_TEST_MODE_NORMAL_OP,		/* Send touch data to OS; normal op */
+	CY_TEST_MODE_CAT,		/* Configuration and Test */
+	CY_TEST_MODE_SYSINFO,		/* System information mode */
+	CY_TEST_MODE_CLOSED_UNIT,	/* Send scan data to sysfs */
+};
+
+struct cyttsp4_test_mode_params {
+	int cur_mode;
+	int cur_cmd;
+	size_t cur_status_size;
+};
+
+/* GEN4/SOLO Operational interface definitions */
+/* TTSP System Information interface definitions */
+struct cyttsp4_cydata {
+	u8 ttpidh;
+	u8 ttpidl;
+	u8 fw_ver_major;
+	u8 fw_ver_minor;
+	u8 revctrl[CY_NUM_REVCTRL];
+	u8 blver_major;
+	u8 blver_minor;
+	u8 jtag_si_id3;
+	u8 jtag_si_id2;
+	u8 jtag_si_id1;
+	u8 jtag_si_id0;
+	u8 mfgid_sz;
+	u8 cyito_idh;
+	u8 cyito_idl;
+	u8 cyito_verh;
+	u8 cyito_verl;
+	u8 ttsp_ver_major;
+	u8 ttsp_ver_minor;
+	u8 device_info;
+	u8 mfg_id[];
+} __packed;
+
+struct cyttsp4_test {
+	u8 post_codeh;
+	u8 post_codel;
+} __packed;
+
+struct cyttsp4_pcfg {
+	u8 electrodes_x;
+	u8 electrodes_y;
+	u8 len_xh;
+	u8 len_xl;
+	u8 len_yh;
+	u8 len_yl;
+	u8 res_xh;
+	u8 res_xl;
+	u8 res_yh;
+	u8 res_yl;
+	u8 max_zh;
+	u8 max_zl;
+	u8 panel_info0;
+} __packed;
+
+enum cyttsp4_tch_abs {	/* for ordering within the extracted touch data array */
+	CY_TCH_X,	/* X */
+	CY_TCH_Y,	/* Y */
+	CY_TCH_P,	/* P (Z) */
+	CY_TCH_T,	/* TOUCH ID */
+	CY_TCH_E,	/* EVENT ID */
+	CY_TCH_O,	/* OBJECT ID */
+	CY_TCH_W,	/* SIZE */
+	CY_TCH_MAJ,	/* TOUCH_MAJOR */
+	CY_TCH_MIN,	/* TOUCH_MINOR */
+	CY_TCH_OR,	/* ORIENTATION */
+	CY_TCH_NUM_ABS
+};
+
+static const char * const cyttsp4_tch_abs_string[] = {
+	[CY_TCH_X]	= "X",
+	[CY_TCH_Y]	= "Y",
+	[CY_TCH_P]	= "P",
+	[CY_TCH_T]	= "T",
+	[CY_TCH_E]	= "E",
+	[CY_TCH_O]	= "O",
+	[CY_TCH_W]	= "W",
+	[CY_TCH_MAJ]	= "MAJ",
+	[CY_TCH_MIN]	= "MIN",
+	[CY_TCH_OR]	= "OR",
+	[CY_TCH_NUM_ABS] = "INVALID"
+};
+
+#define CY_NUM_TCH_FIELDS		7
+#define CY_NUM_EXT_TCH_FIELDS		3
+
+struct cyttsp4_tch_rec_params {
+	u8 loc;
+	u8 size;
+} __packed;
+
+struct cyttsp4_opcfg {
+	u8 cmd_ofs;
+	u8 rep_ofs;
+	u8 rep_szh;
+	u8 rep_szl;
+	u8 num_btns;
+	u8 tt_stat_ofs;
+	u8 obj_cfg0;
+	u8 max_tchs;
+	u8 tch_rec_size;
+	struct cyttsp4_tch_rec_params tch_rec_old[CY_NUM_TCH_FIELDS];
+	u8 btn_rec_size;/* btn record size (in bytes) */
+	u8 btn_diff_ofs;/* btn data loc ,diff counts, (Op-Mode byte ofs) */
+	u8 btn_diff_size;/* btn size of diff counts (in bits) */
+	struct cyttsp4_tch_rec_params tch_rec_new[CY_NUM_EXT_TCH_FIELDS];
+	u8 noise_data_ofs;
+	u8 noise_data_sz;
+} __packed;
+
+struct cyttsp4_sysinfo_data {
+	u8 hst_mode;
+	u8 reserved;
+	u8 map_szh;
+	u8 map_szl;
+	u8 cydata_ofsh;
+	u8 cydata_ofsl;
+	u8 test_ofsh;
+	u8 test_ofsl;
+	u8 pcfg_ofsh;
+	u8 pcfg_ofsl;
+	u8 opcfg_ofsh;
+	u8 opcfg_ofsl;
+	u8 ddata_ofsh;
+	u8 ddata_ofsl;
+	u8 mdata_ofsh;
+	u8 mdata_ofsl;
+} __packed;
+
+struct cyttsp4_sysinfo_ptr {
+	struct cyttsp4_cydata *cydata;
+	struct cyttsp4_test *test;
+	struct cyttsp4_pcfg *pcfg;
+	struct cyttsp4_opcfg *opcfg;
+	struct cyttsp4_ddata *ddata;
+	struct cyttsp4_mdata *mdata;
+} __packed;
+
+struct cyttsp4_touch {
+	int abs[CY_TCH_NUM_ABS];
+};
+
+struct cyttsp4_tch_abs_params {
+	size_t ofs;	/* abs byte offset */
+	size_t size;	/* size in bits */
+	size_t max;	/* max value */
+	size_t bofs;	/* bit offset */
+};
+
+#define CY_NORMAL_ORIGIN		0	/* upper, left corner */
+#define CY_INVERT_ORIGIN		1	/* lower, right corner */
+
+struct cyttsp4_sysinfo_ofs {
+	size_t chip_type;
+	size_t cmd_ofs;
+	size_t rep_ofs;
+	size_t rep_sz;
+	size_t num_btns;
+	size_t num_btn_regs;	/* ceil(num_btns/4) */
+	size_t tt_stat_ofs;
+	size_t tch_rec_size;
+	size_t obj_cfg0;
+	size_t max_tchs;
+	size_t mode_size;
+	size_t data_size;
+	size_t rep_hdr_size;
+	size_t map_sz;
+	size_t max_x;
+	size_t x_origin;	/* left or right corner */
+	size_t max_y;
+	size_t y_origin;	/* upper or lower corner */
+	size_t max_p;
+	size_t cydata_ofs;
+	size_t test_ofs;
+	size_t pcfg_ofs;
+	size_t opcfg_ofs;
+	size_t ddata_ofs;
+	size_t mdata_ofs;
+	size_t cydata_size;
+	size_t test_size;
+	size_t pcfg_size;
+	size_t opcfg_size;
+	size_t ddata_size;
+	size_t mdata_size;
+	size_t btn_keys_size;
+	struct cyttsp4_tch_abs_params tch_abs[CY_TCH_NUM_ABS];
+	size_t btn_rec_size; /* btn record size (in bytes) */
+	size_t btn_diff_ofs;/* btn data loc ,diff counts, (Op-Mode byte ofs) */
+	size_t btn_diff_size;/* btn size of diff counts (in bits) */
+	size_t noise_data_ofs;
+	size_t noise_data_sz;
+};
+
+/* button to keycode support */
+#define CY_NUM_BTN_PER_REG		4
+#define CY_BITS_PER_BTN			2
+
+enum cyttsp4_btn_state {
+	CY_BTN_RELEASED = 0,
+	CY_BTN_PRESSED = 1,
+	CY_BTN_NUM_STATE
+};
+
+struct cyttsp4_btn {
+	bool enabled;
+	int state;	/* CY_BTN_PRESSED, CY_BTN_RELEASED */
+	int key_code;
+};
+
+struct cyttsp4_ttconfig {
+	u16 version;
+	u16 length;
+	u16 max_length;
+	u16 crc;
+};
+
+struct cyttsp4_sysinfo {
+	bool ready;
+	struct cyttsp4_sysinfo_data si_data;
+	struct cyttsp4_sysinfo_ptr si_ptrs;
+	struct cyttsp4_sysinfo_ofs si_ofs;
+	struct cyttsp4_ttconfig ttconfig;
+	struct cyttsp4_btn *btn;	/* button states */
+	u8 *btn_rec_data;		/* button diff count data */
+	u8 *xy_mode;			/* operational mode and status regs */
+	u8 *xy_data;			/* operational touch regs */
+};
+
+#endif /* _CYTTSP4_REGS_H */
diff --git a/drivers/input/touchscreen/cypress/cyttsp4_spi.c b/drivers/input/touchscreen/cypress/cyttsp4_spi.c
new file mode 100644
index 0000000..4f2662b
--- /dev/null
+++ b/drivers/input/touchscreen/cypress/cyttsp4_spi.c
@@ -0,0 +1,462 @@
+/*
+ * cyttsp4_spi.c
+ * Cypress TrueTouch(TM) Standard Product V4 SPI Driver module.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2012 Cypress Semiconductor
+ * Copyright (C) 2011 Sony Ericsson Mobile Communications AB.
+ *
+ * Author: Aleksej Makarov <aleksej.makarov@sonyericsson.com>
+ * Modified by: Cypress Semiconductor for test with device
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/spi/spi.h>
+#include <linux/delay.h>
+#include <linux/mutex.h>
+#include <linux/of_device.h>
+#include <linux/pm_runtime.h>
+#include <linux/hrtimer.h>
+#include <linux/cyttsp4_bus.h>
+#include <linux/cyttsp4_core.h>
+#include "cyttsp4_spi.h"
+
+#include "cyttsp4_devtree.h"
+
+#define CY_SPI_WR_OP		0x00 /* r/~w */
+#define CY_SPI_RD_OP		0x01
+#define CY_SPI_A8_BIT		0x02
+#define CY_SPI_WR_HEADER_BYTES	2
+#define CY_SPI_RD_HEADER_BYTES	1
+#define CY_SPI_SYNC_BYTE	0
+#define CY_SPI_SYNC_ACK		0x62 /* from TRM *A protocol */
+#define CY_SPI_DATA_SIZE	(3 * 256)
+#define CY_SPI_BITS_PER_WORD	8
+#define CY_SPI_NUM_RETRY	3
+
+#define CY_SPI_MAX_HEADER_BYTES	\
+		max(CY_SPI_WR_HEADER_BYTES, CY_SPI_RD_HEADER_BYTES)
+
+struct cyttsp4_spi {
+	struct spi_device *client;
+	char const *id;
+	struct mutex lock;
+};
+
+static void _cyttsp4_spi_pr_buf(struct cyttsp4_spi *ts_spi, u8 *buf,
+			int size, char const *info)
+{
+#ifdef VERBOSE_DEBUG
+	static char b[CY_SPI_DATA_SIZE * 3 + 1];
+	unsigned i, k;
+
+	for (i = k = 0; i < size; i++, k += 3)
+		snprintf(b + k, sizeof(b) - k, "%02x ", buf[i]);
+	dev_dbg(&ts_spi->client->dev, "%s: %s\n", info, b);
+#endif
+}
+
+static int cyttsp4_spi_xfer(u8 op, struct cyttsp4_spi *ts,
+			u16 reg, u8 *buf, int length)
+{
+	struct device *dev = &ts->client->dev;
+	struct spi_message msg;
+	struct spi_transfer xfer[2];
+	u8 wr_hdr_buf[CY_SPI_MAX_HEADER_BYTES];
+	u8 rd_hdr_buf[CY_SPI_MAX_HEADER_BYTES];
+	int rc;
+
+	memset(wr_hdr_buf, 0, CY_SPI_MAX_HEADER_BYTES);
+	memset(rd_hdr_buf, 0, CY_SPI_MAX_HEADER_BYTES);
+	memset(xfer, 0, sizeof(xfer));
+
+	spi_message_init(&msg);
+
+	/* Header buffer */
+	xfer[0].tx_buf = wr_hdr_buf;
+	xfer[0].rx_buf = rd_hdr_buf;
+
+	switch (op) {
+	case CY_SPI_WR_OP:
+		if (length + CY_SPI_WR_HEADER_BYTES > CY_SPI_DATA_SIZE) {
+			dev_vdbg(dev,
+				"%s: length+%d=%d is greater than SPI max=%d\n",
+				__func__, CY_SPI_WR_HEADER_BYTES,
+				length + CY_SPI_WR_HEADER_BYTES,
+				CY_SPI_DATA_SIZE);
+			rc = -EINVAL;
+			goto cyttsp4_spi_xfer_exit;
+		}
+
+		/* Header byte 0 */
+		if (reg > 255)
+			wr_hdr_buf[0] = CY_SPI_WR_OP + CY_SPI_A8_BIT;
+		else
+			wr_hdr_buf[0] = CY_SPI_WR_OP;
+
+		/* Header byte 1 */
+		wr_hdr_buf[1] = reg % 256;
+
+		xfer[0].len = CY_SPI_WR_HEADER_BYTES;
+
+		spi_message_add_tail(&xfer[0], &msg);
+
+		/* Data buffer */
+		if (buf) {
+			xfer[1].tx_buf = buf;
+			xfer[1].len = length;
+
+			spi_message_add_tail(&xfer[1], &msg);
+		}
+		break;
+
+	case CY_SPI_RD_OP:
+		if (!buf) {
+			dev_err(dev, "%s: No read buffer\n", __func__);
+			rc = -EINVAL;
+			goto cyttsp4_spi_xfer_exit;
+		}
+
+		if ((length + CY_SPI_RD_HEADER_BYTES) > CY_SPI_DATA_SIZE) {
+			dev_vdbg(dev,
+				"%s: length+%d=%d is greater than SPI max=%d\n",
+				__func__, CY_SPI_RD_HEADER_BYTES,
+				length + CY_SPI_RD_HEADER_BYTES,
+				CY_SPI_DATA_SIZE);
+			rc = -EINVAL;
+			goto cyttsp4_spi_xfer_exit;
+		}
+
+		/* Header byte 0 */
+		wr_hdr_buf[0] = CY_SPI_RD_OP;
+
+		xfer[0].len = CY_SPI_RD_HEADER_BYTES;
+
+		spi_message_add_tail(&xfer[0], &msg);
+
+		/* Data buffer */
+		xfer[1].rx_buf = buf;
+		xfer[1].len = length;
+
+		spi_message_add_tail(&xfer[1], &msg);
+		break;
+
+	default:
+		dev_dbg(dev, "%s: bad op code=%d\n", __func__, op);
+		rc = -EINVAL;
+		goto cyttsp4_spi_xfer_exit;
+	}
+
+	rc = spi_sync(ts->client, &msg);
+	if (rc < 0) {
+		dev_vdbg(dev, "%s: spi_sync() error %d, len=%d, op=%d\n",
+			__func__, rc, xfer[0].len, op);
+		/*
+		 * do not return here since probably a bad ACK sequence
+		 * let the following ACK check handle any errors and
+		 * allow silent retries
+		 */
+	}
+
+	if (rd_hdr_buf[CY_SPI_SYNC_BYTE] != CY_SPI_SYNC_ACK) {
+		/* signal ACK error so silent retry */
+		rc = 1;
+
+		switch (op) {
+		case CY_SPI_WR_OP:
+			_cyttsp4_spi_pr_buf(ts, wr_hdr_buf,
+				CY_SPI_WR_HEADER_BYTES,
+				"spi_wr_buf HEAD");
+			if (buf)
+				_cyttsp4_spi_pr_buf(ts, buf,
+					length, "spi_wr_buf DATA");
+			break;
+
+		case CY_SPI_RD_OP:
+			_cyttsp4_spi_pr_buf(ts, rd_hdr_buf,
+				CY_SPI_RD_HEADER_BYTES, "spi_rd_buf HEAD");
+			_cyttsp4_spi_pr_buf(ts, buf, length,
+				"spi_rd_buf DATA");
+			break;
+
+		default:
+			/*
+			 * should not get here due to error check
+			 * in first switch
+			 */
+			break;
+		}
+	}
+
+cyttsp4_spi_xfer_exit:
+	return rc;
+}
+
+static s32 cyttsp4_spi_read_block_data(struct cyttsp4_spi *ts, u16 addr,
+				int length, void *data, int max_xfer)
+{
+	int rc = -EINVAL;
+	int retry = 0;
+	int trans_len;
+	struct device *dev = &ts->client->dev;
+
+	dev_vdbg(dev, "%s: Enter\n", __func__);
+
+	while (length > 0) {
+		trans_len = min(length, max_xfer);
+
+		/* Write address */
+		rc = cyttsp4_spi_xfer(CY_SPI_WR_OP, ts, addr, NULL, 0);
+		if (rc < 0) {
+			dev_err(dev, "%s: Fail write address r=%d\n",
+				__func__, rc);
+			return rc;
+		}
+
+		/* Read data */
+		rc = cyttsp4_spi_xfer(CY_SPI_RD_OP, ts, addr, data, trans_len);
+		if (rc < 0) {
+			dev_err(dev, "%s: Fail read r=%d\n", __func__, rc);
+			goto exit;
+		} else if (rc > 0) {
+			/* Perform retry or fail */
+			if (retry++ < CY_SPI_NUM_RETRY) {
+				dev_dbg(dev, "%s: ACK error, retry %d\n",
+					__func__, retry);
+				continue;
+			} else {
+				dev_err(dev, "%s: ACK error\n", __func__);
+				rc = -EIO;
+				goto exit;
+			}
+		}
+
+		length -= trans_len;
+		data += trans_len;
+		addr += trans_len;
+	}
+exit:
+	return rc;
+}
+
+static s32 cyttsp4_spi_write_block_data(struct cyttsp4_spi *ts, u16 addr,
+				int length, const void *data, int max_xfer)
+{
+	int rc = -EINVAL;
+	int retry = 0;
+	int trans_len;
+	struct device *dev = &ts->client->dev;
+
+	dev_vdbg(dev, "%s: Enter\n", __func__);
+
+	while (length > 0) {
+		trans_len = min(length, max_xfer);
+
+		rc = cyttsp4_spi_xfer(CY_SPI_WR_OP, ts, addr, (void *)data,
+				trans_len);
+		if (rc < 0) {
+			dev_err(dev, "%s: Fail write r=%d\n", __func__, rc);
+			goto exit;
+		} else if (rc > 0) {
+			/* Perform retry or fail */
+			if (retry++ < CY_SPI_NUM_RETRY) {
+				dev_dbg(dev, "%s: ACK error, retry %d\n",
+					__func__, retry);
+				continue;
+			} else {
+				dev_err(dev, "%s: ACK error\n", __func__);
+				rc = -EIO;
+				goto exit;
+			}
+		}
+
+		length -= trans_len;
+		data += trans_len;
+		addr += trans_len;
+	}
+exit:
+	return rc;
+}
+
+static int cyttsp4_spi_write(struct cyttsp4_adapter *adap, u16 addr,
+		const void *buf, int size, int max_xfer)
+{
+	struct cyttsp4_spi *ts = dev_get_drvdata(adap->dev);
+	int rc;
+
+	pm_runtime_get_noresume(adap->dev);
+	mutex_lock(&ts->lock);
+	rc = cyttsp4_spi_write_block_data(ts, addr, size, buf, max_xfer);
+	mutex_unlock(&ts->lock);
+	pm_runtime_put_noidle(adap->dev);
+
+	return rc;
+}
+
+static int cyttsp4_spi_read(struct cyttsp4_adapter *adap, u16 addr,
+		void *buf, int size, int max_xfer)
+{
+	struct cyttsp4_spi *ts = dev_get_drvdata(adap->dev);
+	int rc;
+
+	pm_runtime_get_noresume(adap->dev);
+	mutex_lock(&ts->lock);
+	rc = cyttsp4_spi_read_block_data(ts, addr, size, buf, max_xfer);
+	mutex_unlock(&ts->lock);
+	pm_runtime_put_noidle(adap->dev);
+
+	return rc;
+}
+
+static struct cyttsp4_ops ops = {
+	.write = cyttsp4_spi_write,
+	.read = cyttsp4_spi_read,
+};
+
+static struct of_device_id cyttsp4_spi_of_match[] = {
+	{ .compatible = "cy,cyttsp4_spi_adapter", }, { }
+};
+MODULE_DEVICE_TABLE(of, cyttsp4_spi_of_match);
+
+static int __devinit cyttsp4_spi_probe(struct spi_device *spi)
+{
+	struct cyttsp4_spi *ts_spi;
+	int rc = 0;
+	struct device *dev = &spi->dev;
+	const struct of_device_id *match;
+	char const *adap_id;
+
+	dev_dbg(dev, "%s: Probing ...\n", __func__);
+
+	spi->bits_per_word = CY_SPI_BITS_PER_WORD;
+	spi->mode = SPI_MODE_0;
+
+	rc = spi_setup(spi);
+	if (rc < 0) {
+		dev_err(dev, "%s: SPI setup error %d\n", __func__, rc);
+		return rc;
+	}
+
+	ts_spi = kzalloc(sizeof(*ts_spi), GFP_KERNEL);
+	if (ts_spi == NULL) {
+		dev_err(dev, "%s: Error, kzalloc\n", __func__);
+		rc = -ENOMEM;
+		goto error_alloc_data_failed;
+	}
+
+	match = of_match_device(of_match_ptr(cyttsp4_spi_of_match), dev);
+	if (match) {
+		rc = of_property_read_string(dev->of_node, "cy,adapter_id",
+				&adap_id);
+		if (rc) {
+			dev_err(dev, "%s: OF error rc=%d\n", __func__, rc);
+			goto error_free_data;
+		}
+		cyttsp4_devtree_register_devices(dev);
+	} else {
+		adap_id = dev_get_platdata(dev);
+	}
+
+	mutex_init(&ts_spi->lock);
+	ts_spi->client = spi;
+	ts_spi->id = (adap_id) ? adap_id : CYTTSP4_SPI_NAME;
+	dev_set_drvdata(&spi->dev, ts_spi);
+
+	dev_dbg(dev, "%s: add adap='%s' (CYTTSP4_SPI_NAME=%s)\n", __func__,
+		ts_spi->id, CYTTSP4_SPI_NAME);
+
+	pm_runtime_enable(&spi->dev);
+
+	rc = cyttsp4_add_adapter(ts_spi->id, &ops, dev);
+	if (rc) {
+		dev_err(dev, "%s: Error on probe %s\n", __func__,
+			CYTTSP4_SPI_NAME);
+		goto add_adapter_err;
+	}
+
+	dev_info(dev, "%s: Successful prob %s\n", __func__, CYTTSP4_SPI_NAME);
+
+	return 0;
+
+add_adapter_err:
+	pm_runtime_disable(&spi->dev);
+	dev_set_drvdata(&spi->dev, NULL);
+error_free_data:
+	kfree(ts_spi);
+error_alloc_data_failed:
+	return rc;
+}
+
+static int __devexit cyttsp4_spi_remove(struct spi_device *spi)
+{
+	struct device *dev = &spi->dev;
+	struct cyttsp4_spi *ts_spi = dev_get_drvdata(dev);
+
+	dev_info(dev, "%s\n", __func__);
+	cyttsp4_del_adapter(ts_spi->id);
+	pm_runtime_disable(&spi->dev);
+	dev_set_drvdata(&spi->dev, NULL);
+	kfree(ts_spi);
+	return 0;
+}
+
+static const struct spi_device_id cyttsp4_spi_id[] = {
+	{ CYTTSP4_SPI_NAME, 0 },  { }
+};
+MODULE_DEVICE_TABLE(spi, cyttsp4_spi_id);
+
+static struct spi_driver cyttsp4_spi_driver = {
+	.driver = {
+		.name = CYTTSP4_SPI_NAME,
+		.bus = &spi_bus_type,
+		.owner = THIS_MODULE,
+		.of_match_table = cyttsp4_spi_of_match,
+	},
+	.probe = cyttsp4_spi_probe,
+	.remove = __devexit_p(cyttsp4_spi_remove),
+	.id_table = cyttsp4_spi_id,
+};
+
+static int __init cyttsp4_spi_init(void)
+{
+	int err;
+
+	err = spi_register_driver(&cyttsp4_spi_driver);
+	pr_info("%s: Cypress TTSP SPI Touchscreen Driver (Built %s) rc=%d\n",
+		 __func__, CY_DRIVER_DATE, err);
+
+	return err;
+}
+module_init(cyttsp4_spi_init);
+
+static void __exit cyttsp4_spi_exit(void)
+{
+	spi_unregister_driver(&cyttsp4_spi_driver);
+	pr_info("%s: module exit\n", __func__);
+}
+module_exit(cyttsp4_spi_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Cypress TrueTouch(R) Standard Product SPI driver");
+MODULE_AUTHOR("Aleksej Makarov <aleksej.makarov@sonyericsson.com>");
diff --git a/drivers/input/touchscreen/cypress/cyttsp4_spi.h b/drivers/input/touchscreen/cypress/cyttsp4_spi.h
new file mode 100644
index 0000000..b6401b6
--- /dev/null
+++ b/drivers/input/touchscreen/cypress/cyttsp4_spi.h
@@ -0,0 +1,37 @@
+/*
+ * cyttsp4_spi.h
+ * Cypress TrueTouch(TM) Standard Product V4 SPI Driver module.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2012 Cypress Semiconductor
+ * Copyright (C) 2011 Sony Ericsson Mobile Communications AB.
+ *
+ * Author: Aleksej Makarov <aleksej.makarov@sonyericsson.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#ifndef _LINUX_CYTTSP4_SPI_H
+#define _LINUX_CYTTSP4_SPI_H
+
+#define CYTTSP4_SPI_NAME "cyttsp4_spi_adapter"
+
+#endif /* _LINUX_CYTTSP4_SPI_H */
diff --git a/drivers/input/touchscreen/cypress/cyttsp4_test_device_access_api.c b/drivers/input/touchscreen/cypress/cyttsp4_test_device_access_api.c
new file mode 100644
index 0000000..92308d8
--- /dev/null
+++ b/drivers/input/touchscreen/cypress/cyttsp4_test_device_access_api.c
@@ -0,0 +1,196 @@
+/*
+ * cyttsp4_test_device_access_api.c
+ * Cypress TrueTouch(TM) Standard Product V4 Device Access API test module.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2012 Cypress Semiconductor
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/cyttsp4_device_access-api.h>
+
+#define CONFIG_VER_OFFSET	8
+#define CONFIG_VER_SIZE		2
+
+#define BUFFER_SIZE		256
+
+static u8 buffer[BUFFER_SIZE];
+static int active_refresh_interval;
+
+static int __init cyttsp4_test_device_access_api_init(void)
+{
+	u16 config_ver;
+	int i;
+	int j;
+	int value;
+	int rc;
+
+	pr_info("%s: Enter\n", __func__);
+
+	/*
+	 * CASE 1 - Get CONFIG_VER and update it
+	 */
+
+	/*
+	 * Get CONFIG_VER
+	 * Group 6 read requires to fetch from offset to the end of row
+	 * The return buffer should be at least read config block command
+	 * return size + config row size bytes
+	 */
+	rc = cyttsp4_device_access_read_command(NULL,
+			GRPNUM_TOUCH_CONFIG, CONFIG_VER_OFFSET,
+			buffer, BUFFER_SIZE);
+	if (rc < 0) {
+		pr_err("%s: cyttsp4_device_access_read_command failed, rc=%d\n",
+			__func__, rc);
+		goto exit;
+	}
+
+	pr_info("%s: cyttsp4_device_access_read_command returned %d bytes\n",
+		__func__, rc);
+
+	/* Calculate CONFIG_VER (Little Endian) */
+	config_ver = buffer[0] + (buffer[1] << 8);
+
+	pr_info("%s: Old CONFIG_VER:%04X New CONFIG_VER:%04X\n", __func__,
+		config_ver, config_ver + 1);
+
+	config_ver++;
+
+	/* Store CONFIG_VER (Little Endian) */
+	buffer[0] = config_ver & 0xFF;
+	buffer[1] = config_ver >> 8;
+
+	/*
+	 * Set CONFIG_VER
+	 * Group 6 write supports writing arbitrary number of bytes
+	 */
+	rc = cyttsp4_device_access_write_command(NULL,
+			GRPNUM_TOUCH_CONFIG, CONFIG_VER_OFFSET,
+			buffer, CONFIG_VER_SIZE);
+	if (rc < 0) {
+		pr_err("%s: cyttsp4_device_access_write_command failed, rc=%d\n",
+			__func__, rc);
+		goto exit;
+	}
+
+	/*
+	 * CASE 2 - Get Operational mode parameters
+	 */
+	for (i = OP_PARAM_ACTIVE_DISTANCE;
+			i <= OP_PARAM_ACTIVE_LOOK_FOR_TOUCH_INTERVAL; i++) {
+		buffer[0] = OP_CMD_GET_PARAMETER;
+		buffer[1] = i;
+
+		rc = cyttsp4_device_access_write_command(NULL,
+				GRPNUM_OP_COMMAND, 0, buffer, 2);
+		if (rc < 0) {
+			pr_err("%s: cyttsp4_device_access_write_command failed, rc=%d\n",
+				__func__, rc);
+			goto exit;
+		}
+
+		/*
+		 * The return buffer should be at least
+		 * number of command data registers + 1
+		 */
+		rc = cyttsp4_device_access_read_command(NULL,
+				GRPNUM_OP_COMMAND, 0, buffer, 7);
+		if (rc < 0) {
+			pr_err("%s: cyttsp4_device_access_read_command failed, rc=%d\n",
+				__func__, rc);
+			goto exit;
+		}
+
+		if (buffer[0] != OP_CMD_GET_PARAMETER || buffer[1] != i) {
+			pr_err("%s: Invalid response\n", __func__);
+			rc = -EINVAL;
+			goto exit;
+		}
+
+		/*
+		 * Get value stored starting at &buffer[3] whose
+		 * size (in bytes) is specified at buffer[2]
+		 */
+		value = 0;
+		j = 0;
+		while (buffer[2]--)
+			value += buffer[3 + j++] << (8 * buffer[2]);
+
+		/* Store Active mode refresh interval to restore */
+		if (i == OP_PARAM_REFRESH_INTERVAL)
+			active_refresh_interval = value;
+
+		pr_info("%s: Parameter %02X: %d\n", __func__, i, value);
+	}
+
+	/*
+	 * CASE 3 - Set Active mode refresh interval to 200 ms
+	 */
+	buffer[0] = OP_CMD_SET_PARAMETER; /* Set Parameter */
+	buffer[1] = OP_PARAM_REFRESH_INTERVAL; /* Refresh Interval parameter */
+	buffer[2] = 1; /* Parameter length - 1 byte */
+	buffer[3] = 200; /* 200 ms */
+
+	rc = cyttsp4_device_access_write_command(NULL,
+			GRPNUM_OP_COMMAND, 0, buffer, 4);
+	if (rc < 0) {
+		pr_err("%s: cyttsp4_device_access_write_command failed, rc=%d\n",
+			__func__, rc);
+		goto exit;
+	}
+
+exit:
+	return 0;
+}
+module_init(cyttsp4_test_device_access_api_init);
+
+static void __exit cyttsp4_test_device_access_api_exit(void)
+{
+	int rc;
+
+	pr_info("%s: Exit\n", __func__);
+
+	/*
+	 * CASE 4 - Restore Active mode refresh interval to original
+	 */
+	if (active_refresh_interval) {
+		buffer[0] = OP_CMD_SET_PARAMETER; /* Set Parameter */
+		buffer[1] = OP_PARAM_REFRESH_INTERVAL;
+					/* Refresh Interval parameter */
+		buffer[2] = 1; /* Parameter length - 1 byte */
+		buffer[3] = (u8)active_refresh_interval;
+
+		rc = cyttsp4_device_access_write_command(NULL,
+				GRPNUM_OP_COMMAND, 0, buffer, 4);
+		if (rc < 0) {
+			pr_err("%s: cyttsp4_device_access_write_command failed, rc=%d\n",
+				__func__, rc);
+		}
+	}
+}
+module_exit(cyttsp4_test_device_access_api_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Cypress TrueTouch(R) Standard touchscreen device access API tester");
+MODULE_AUTHOR("Cypress Semiconductor");
diff --git a/drivers/media/platform/msm/camera_v2/Kconfig b/drivers/media/platform/msm/camera_v2/Kconfig
index ec2e381..646714c 100644
--- a/drivers/media/platform/msm/camera_v2/Kconfig
+++ b/drivers/media/platform/msm/camera_v2/Kconfig
@@ -182,6 +182,14 @@ config OV8825
 		snapshot config = 3264 * 2448 at 18 fps.
 		2 lanes max fps is 18, 4 lanes max fps is 24.
 
+config OV8850
+	bool "OmniVision OV8850 (BAYER 8MP)"
+	depends on MSMB_CAMERA
+	---help---
+		OmniVision 8 MP Bayer Sensor with auto focus.uses
+		2 mipi lanes, preview config = 1632*1224 30 fps,
+		snapshot config = 3264 * 2448 at 20 fps.
+
 config MSM_V4L2_VIDEO_OVERLAY_DEVICE
 	tristate "Qualcomm MSM V4l2 video overlay device"
 	---help---
diff --git a/drivers/media/platform/msm/camera_v2/sensor/Makefile b/drivers/media/platform/msm/camera_v2/sensor/Makefile
index 40931ef..6a8eb0a 100644
--- a/drivers/media/platform/msm/camera_v2/sensor/Makefile
+++ b/drivers/media/platform/msm/camera_v2/sensor/Makefile
@@ -8,6 +8,7 @@ obj-$(CONFIG_MSM_CAMERA_SENSOR) += msm_sensor.o
 obj-$(CONFIG_S5K3L1YX) += s5k3l1yx.o
 obj-$(CONFIG_IMX135) += imx135.o
 obj-$(CONFIG_OV8825) += ov8825.o
+obj-$(CONFIG_OV8850) += ov8850.o
 obj-$(CONFIG_OV2720) += ov2720.o
 obj-$(CONFIG_OV9724) += ov9724.o
 obj-$(CONFIG_HI256) += hi256.o
diff --git a/drivers/media/platform/msm/camera_v2/sensor/ov8850.c b/drivers/media/platform/msm/camera_v2/sensor/ov8850.c
new file mode 100644
index 0000000..9ab2e4d
--- /dev/null
+++ b/drivers/media/platform/msm/camera_v2/sensor/ov8850.c
@@ -0,0 +1,459 @@
+/* Copyright (c) 2013, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+#include <mach/gpiomux.h>
+#include "msm_sensor.h"
+#include "msm_sd.h"
+#include "camera.h"
+#include "msm_cci.h"
+#include "msm_camera_io_util.h"
+#include "msm_camera_i2c_mux.h"
+#include <mach/rpm-regulator.h>
+#include <mach/rpm-regulator-smd.h>
+#include <linux/regulator/consumer.h>
+
+#define OV8850_SENSOR_NAME "ov8850"
+DEFINE_MSM_MUTEX(ov8850_mut);
+
+#define GPIO_CAM_DVDD_EN 101
+
+#undef CDBG
+#define OV8850_DEBUG
+#ifdef OV8850_DEBUG
+#define CDBG(fmt, args...) pr_err(fmt, ##args)
+#else
+#define CDBG(fmt, args...) do { } while (0)
+#endif
+
+static struct msm_sensor_ctrl_t ov8850_s_ctrl;
+
+static struct msm_sensor_power_setting ov8850_power_setting[] = {
+	{
+		.seq_type = SENSOR_VREG,
+		.seq_val = CAM_VANA,
+		.config_val = 0,
+		.delay = 5,
+	},	
+	{
+		.seq_type = SENSOR_VREG,
+		.seq_val = CAM_VIO,
+		.config_val = 0,
+		.delay = 5,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_STANDBY,
+		.config_val = GPIO_OUT_LOW,
+		.delay = 15,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_RESET,
+		.config_val = GPIO_OUT_LOW,
+		.delay = 40,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_STANDBY,
+		.config_val = GPIO_OUT_HIGH,
+		.delay = 40,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_RESET,
+		.config_val = GPIO_OUT_HIGH,
+		.delay = 40,
+	},
+	{
+		.seq_type = SENSOR_CLK,
+		.seq_val = SENSOR_CAM_MCLK,
+		.config_val = 24000000,
+		.delay = 5,
+	},
+	{
+		.seq_type = SENSOR_I2C_MUX,
+		.seq_val = 0,
+		.config_val = 0,
+		.delay = 0,
+	},
+};
+
+static struct v4l2_subdev_info ov8850_subdev_info[] = {
+	{
+		.code   = V4L2_MBUS_FMT_SBGGR10_1X10,
+		.colorspace = V4L2_COLORSPACE_JPEG,
+		.fmt    = 1,
+		.order    = 0,
+	},
+};
+
+static const struct i2c_device_id ov8850_i2c_id[] = {
+	{OV8850_SENSOR_NAME, (kernel_ulong_t)&ov8850_s_ctrl},
+	{ }
+};
+
+static int32_t msm_ov8850_i2c_probe(struct i2c_client *client,
+	const struct i2c_device_id *id)
+{
+	return msm_sensor_i2c_probe(client, id, &ov8850_s_ctrl);
+}
+
+static struct i2c_driver ov8850_i2c_driver = {
+	.id_table = ov8850_i2c_id,
+	.probe  = msm_ov8850_i2c_probe,
+	.driver = {
+		.name = OV8850_SENSOR_NAME,
+	},
+};
+
+static struct msm_camera_i2c_client ov8850_sensor_i2c_client = {
+	.addr_type = MSM_CAMERA_I2C_WORD_ADDR,
+};
+
+static const struct of_device_id ov8850_dt_match[] = {
+	{.compatible = "qcom,ov8850", .data = &ov8850_s_ctrl},
+	{}
+};
+
+MODULE_DEVICE_TABLE(of, ov8850_dt_match);
+
+static struct platform_driver ov8850_platform_driver = {
+	.driver = {
+		.name = "qcom,ov8850",
+		.owner = THIS_MODULE,
+		.of_match_table = ov8850_dt_match,
+	},
+};
+
+static int32_t ov8850_platform_probe(struct platform_device *pdev)
+{
+	int32_t rc = 0;
+	const struct of_device_id *match;
+	match = of_match_device(ov8850_dt_match, &pdev->dev);
+	rc = msm_sensor_platform_probe(pdev, match->data);
+	return rc;
+}
+
+static int __init ov8850_init_module(void)
+{
+	int32_t rc = 0;
+	pr_info("%s:%d\n", __func__, __LINE__);
+	rc = platform_driver_probe(&ov8850_platform_driver,
+		ov8850_platform_probe);
+	if (!rc)
+		return rc;
+	pr_err("%s:%d rc %d\n", __func__, __LINE__, rc);
+	return i2c_add_driver(&ov8850_i2c_driver);
+}
+
+static void __exit ov8850_exit_module(void)
+{
+	pr_info("%s:%d\n", __func__, __LINE__);
+	if (ov8850_s_ctrl.pdev) {
+		msm_sensor_free_sensor_data(&ov8850_s_ctrl);
+		platform_driver_unregister(&ov8850_platform_driver);
+	} else
+		i2c_del_driver(&ov8850_i2c_driver);
+	return;
+}
+
+static int32_t ov8850_sensor_enable_i2c_mux(struct msm_camera_i2c_conf *i2c_conf)
+{
+	struct v4l2_subdev *i2c_mux_sd =
+		dev_get_drvdata(&i2c_conf->mux_dev->dev);
+	v4l2_subdev_call(i2c_mux_sd, core, ioctl,
+		VIDIOC_MSM_I2C_MUX_INIT, NULL);
+	v4l2_subdev_call(i2c_mux_sd, core, ioctl,
+		VIDIOC_MSM_I2C_MUX_CFG, (void *)&i2c_conf->i2c_mux_mode);
+	return 0;
+}
+
+static int32_t ov8850_sensor_disable_i2c_mux(struct msm_camera_i2c_conf *i2c_conf)
+{
+	struct v4l2_subdev *i2c_mux_sd =
+		dev_get_drvdata(&i2c_conf->mux_dev->dev);
+	v4l2_subdev_call(i2c_mux_sd, core, ioctl,
+				VIDIOC_MSM_I2C_MUX_RELEASE, NULL);
+	return 0;
+}
+
+int32_t ov8850_sensor_power_up(struct msm_sensor_ctrl_t *s_ctrl)
+{
+	int32_t rc = 0, index = 0;
+	struct msm_sensor_power_setting_array *power_setting_array = NULL;
+	struct msm_sensor_power_setting *power_setting = NULL;
+	struct msm_camera_sensor_board_info *data = s_ctrl->sensordata;
+
+	CDBG("%s:%d\n", __func__, __LINE__);
+	power_setting_array = &s_ctrl->power_setting_array;
+
+	if (data->gpio_conf->cam_gpiomux_conf_tbl != NULL) {
+		pr_err("%s:%d mux install\n", __func__, __LINE__);
+		msm_gpiomux_install(
+			(struct msm_gpiomux_config *)
+			data->gpio_conf->cam_gpiomux_conf_tbl,
+			data->gpio_conf->cam_gpiomux_conf_tbl_size);
+	}
+
+	rc = msm_camera_request_gpio_table(
+		data->gpio_conf->cam_gpio_req_tbl,
+		data->gpio_conf->cam_gpio_req_tbl_size, 1);
+	if (rc < 0) {
+		pr_err("%s: request gpio failed\n", __func__);
+		return rc;
+	}
+	for (index = 0; index < power_setting_array->size; index++) {
+		CDBG("%s index %d\n", __func__, index);
+		power_setting = &power_setting_array->power_setting[index];
+		CDBG("%s type %d\n", __func__, power_setting->seq_type);
+		switch (power_setting->seq_type) {
+		case SENSOR_CLK:
+			if (power_setting->seq_val >= s_ctrl->clk_info_size) {
+				pr_err("%s clk index %d >= max %d\n", __func__,
+					power_setting->seq_val,
+					s_ctrl->clk_info_size);
+				goto power_up_failed;
+			}
+			if (power_setting->config_val)
+				s_ctrl->clk_info[power_setting->seq_val].
+					clk_rate = power_setting->config_val;
+
+			rc = msm_cam_clk_enable(s_ctrl->dev,
+				&s_ctrl->clk_info[0],
+				(struct clk **)&power_setting->data[0],
+				s_ctrl->clk_info_size,
+				1);
+			if (rc < 0) {
+				pr_err("%s: clk enable failed\n",
+					__func__);
+				goto power_up_failed;
+			}
+			break;
+		case SENSOR_GPIO:
+			if (power_setting->seq_val >= SENSOR_GPIO_MAX ||
+				!data->gpio_conf->gpio_num_info) {
+				pr_err("%s gpio index %d >= max %d\n", __func__,
+					power_setting->seq_val,
+					SENSOR_GPIO_MAX);
+				goto power_up_failed;
+			}
+			pr_debug("%s:%d gpio set val %d\n", __func__, __LINE__,
+				data->gpio_conf->gpio_num_info->gpio_num
+				[power_setting->seq_val]);
+			gpio_set_value_cansleep(
+				data->gpio_conf->gpio_num_info->gpio_num
+				[power_setting->seq_val],
+				power_setting->config_val);		
+			break;
+		case SENSOR_VREG:
+			if (power_setting->seq_val >= CAM_VREG_MAX) {
+				pr_err("%s vreg index %d >= max %d\n", __func__,
+					power_setting->seq_val,
+					SENSOR_GPIO_MAX);
+				goto power_up_failed;
+			}
+			msm_camera_config_single_vreg(s_ctrl->dev,
+				&data->cam_vreg[power_setting->seq_val],
+				(struct regulator **)&power_setting->data[0],
+				1);
+
+			gpio_set_value_cansleep(GPIO_CAM_DVDD_EN,1); //enable dvdd_en
+			
+			break;
+		case SENSOR_I2C_MUX:
+			if (data->i2c_conf && data->i2c_conf->use_i2c_mux)
+				ov8850_sensor_enable_i2c_mux(data->i2c_conf);
+			break;
+		default:
+			pr_err("%s error power seq type %d\n", __func__,
+				power_setting->seq_type);
+			break;
+		}
+		if (power_setting->delay > 20) {
+			msleep(power_setting->delay);
+		} else if (power_setting->delay) {
+			usleep_range(power_setting->delay * 1000,
+				(power_setting->delay * 1000) + 1000);
+		}
+	}
+
+	if (s_ctrl->sensor_device_type == MSM_CAMERA_PLATFORM_DEVICE) {
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->i2c_util(
+			s_ctrl->sensor_i2c_client, MSM_CCI_INIT);
+		if (rc < 0) {
+			pr_err("%s cci_init failed\n", __func__);
+			goto power_up_failed;
+		}
+	}
+
+	if (s_ctrl->func_tbl->sensor_match_id)
+		rc = s_ctrl->func_tbl->sensor_match_id(s_ctrl);
+	else
+		rc = msm_sensor_match_id(s_ctrl);
+	if (rc < 0) {
+		pr_err("%s:%d match id failed rc %d\n", __func__, __LINE__, rc);
+		goto power_up_failed;
+	}
+
+	CDBG("%s exit\n", __func__);
+	return 0;
+power_up_failed:
+	pr_err("%s:%d failed\n", __func__, __LINE__);
+	if (s_ctrl->sensor_device_type == MSM_CAMERA_PLATFORM_DEVICE) {
+		s_ctrl->sensor_i2c_client->i2c_func_tbl->i2c_util(
+			s_ctrl->sensor_i2c_client, MSM_CCI_RELEASE);
+	}
+
+	for (index--; index >= 0; index--) {
+		CDBG("%s index %d\n", __func__, index);
+		power_setting = &power_setting_array->power_setting[index];
+		CDBG("%s type %d\n", __func__, power_setting->seq_type);
+		switch (power_setting->seq_type) {
+		case SENSOR_CLK:
+			msm_cam_clk_enable(s_ctrl->dev,
+				&s_ctrl->clk_info[0],
+				(struct clk **)&power_setting->data[0],
+				s_ctrl->clk_info_size,
+				0);
+			break;
+		case SENSOR_GPIO:
+			gpio_set_value_cansleep(
+				data->gpio_conf->gpio_num_info->gpio_num
+				[power_setting->seq_val], GPIOF_OUT_INIT_LOW);
+			break;
+		case SENSOR_VREG:
+			msm_camera_config_single_vreg(s_ctrl->dev,
+				&data->cam_vreg[power_setting->seq_val],
+				(struct regulator **)&power_setting->data[0],
+				0);
+			break;
+		case SENSOR_I2C_MUX:
+			if (data->i2c_conf && data->i2c_conf->use_i2c_mux)
+				ov8850_sensor_disable_i2c_mux(data->i2c_conf);
+			break;
+		default:
+			pr_err("%s error power seq type %d\n", __func__,
+				power_setting->seq_type);
+			break;
+		}
+		if (power_setting->delay > 20) {
+			msleep(power_setting->delay);
+		} else if (power_setting->delay) {
+			usleep_range(power_setting->delay * 1000,
+				(power_setting->delay * 1000) + 1000);
+		}
+	}
+	msm_camera_request_gpio_table(
+		data->gpio_conf->cam_gpio_req_tbl,
+		data->gpio_conf->cam_gpio_req_tbl_size, 0);
+	return rc;
+}
+
+int32_t ov8850_sensor_power_down(struct msm_sensor_ctrl_t *s_ctrl)
+{
+	int32_t index = 0;
+	struct msm_sensor_power_setting_array *power_setting_array = NULL;
+	struct msm_sensor_power_setting *power_setting = NULL;
+	struct msm_camera_sensor_board_info *data = s_ctrl->sensordata;
+	s_ctrl->stop_setting_valid = 0;
+
+	CDBG("%s:%d\n", __func__, __LINE__);
+	power_setting_array = &s_ctrl->power_setting_array;
+
+	if (s_ctrl->sensor_device_type == MSM_CAMERA_PLATFORM_DEVICE) {
+		s_ctrl->sensor_i2c_client->i2c_func_tbl->i2c_util(
+			s_ctrl->sensor_i2c_client, MSM_CCI_RELEASE);
+	}
+
+	for (index = (power_setting_array->size - 1); index >= 0; index--) {
+		CDBG("%s index %d\n", __func__, index);
+		power_setting = &power_setting_array->power_setting[index];
+		CDBG("%s type %d\n", __func__, power_setting->seq_type);
+		switch (power_setting->seq_type) {
+		case SENSOR_CLK:
+			msm_cam_clk_enable(s_ctrl->dev,
+				&s_ctrl->clk_info[0],
+				(struct clk **)&power_setting->data[0],
+				s_ctrl->clk_info_size,
+				0);
+			break;
+		case SENSOR_GPIO:
+			if (power_setting->seq_val >= SENSOR_GPIO_MAX ||
+				!data->gpio_conf->gpio_num_info) {
+				pr_err("%s gpio index %d >= max %d\n", __func__,
+					power_setting->seq_val,
+					SENSOR_GPIO_MAX);
+				continue;
+			}
+			gpio_set_value_cansleep(
+				data->gpio_conf->gpio_num_info->gpio_num
+				[power_setting->seq_val], GPIOF_OUT_INIT_LOW);
+			break;
+		case SENSOR_VREG:
+			if (power_setting->seq_val >= CAM_VREG_MAX) {
+				pr_err("%s vreg index %d >= max %d\n", __func__,
+					power_setting->seq_val,
+					SENSOR_GPIO_MAX);
+				continue;
+			}
+			msm_camera_config_single_vreg(s_ctrl->dev,
+				&data->cam_vreg[power_setting->seq_val],
+				(struct regulator **)&power_setting->data[0],
+				0);
+
+			gpio_set_value_cansleep(GPIO_CAM_DVDD_EN,0); //disable dvdd_en
+			break;
+		case SENSOR_I2C_MUX:
+			if (data->i2c_conf && data->i2c_conf->use_i2c_mux)
+				ov8850_sensor_disable_i2c_mux(data->i2c_conf);
+			break;
+		default:
+			pr_err("%s error power seq type %d\n", __func__,
+				power_setting->seq_type);
+			break;
+		}
+		if (power_setting->delay > 20) {
+			msleep(power_setting->delay);
+		} else if (power_setting->delay) {
+			usleep_range(power_setting->delay * 1000,
+				(power_setting->delay * 1000) + 1000);
+		}
+	}
+	msm_camera_request_gpio_table(
+		data->gpio_conf->cam_gpio_req_tbl,
+		data->gpio_conf->cam_gpio_req_tbl_size, 0);
+	CDBG("%s exit\n", __func__);
+
+	return 0;
+}
+
+static struct msm_sensor_fn_t ov8850_sensor_func_tbl = {
+	.sensor_config = msm_sensor_config,
+	.sensor_power_up = ov8850_sensor_power_up,
+	.sensor_power_down = ov8850_sensor_power_down,
+	.sensor_match_id = msm_sensor_match_id,
+};
+
+static struct msm_sensor_ctrl_t ov8850_s_ctrl = {
+	.sensor_i2c_client = &ov8850_sensor_i2c_client,
+	.power_setting_array.power_setting = ov8850_power_setting,
+	.power_setting_array.size = ARRAY_SIZE(ov8850_power_setting),
+	.msm_sensor_mutex = &ov8850_mut,
+	.sensor_v4l2_subdev_info = ov8850_subdev_info,
+	.sensor_v4l2_subdev_info_size = ARRAY_SIZE(ov8850_subdev_info),
+	.func_tbl = &ov8850_sensor_func_tbl,
+};
+
+module_init(ov8850_init_module);
+module_exit(ov8850_exit_module);
+MODULE_DESCRIPTION("ov8850");
+MODULE_LICENSE("GPL v2");
diff --git a/firmware/Makefile b/firmware/Makefile
index 0d15a3d..857eb20 100644
--- a/firmware/Makefile
+++ b/firmware/Makefile
@@ -140,6 +140,7 @@ fw-shipped-$(CONFIG_USB_SERIAL_XIRCOM) += keyspan_pda/xircom_pgs.fw
 fw-shipped-$(CONFIG_USB_VICAM) += vicam/firmware.fw
 fw-shipped-$(CONFIG_VIDEO_CPIA2) += cpia2/stv0672_vp4.bin
 fw-shipped-$(CONFIG_YAM) += yam/1200.bin yam/9600.bin
+fw-shipped-y +=cyttsp4_fw.bin
 
 fw-shipped-all := $(fw-shipped-y) $(fw-shipped-m) $(fw-shipped-)
 
diff --git a/firmware/cyttsp4_fw.bin.ihex b/firmware/cyttsp4_fw.bin.ihex
new file mode 100644
index 0000000..4ce0c23
--- /dev/null
+++ b/firmware/cyttsp4_fw.bin.ihex
@@ -0,0 +1,3676 @@
+:100000000C000002000000000000071E2900002470
+:100010000080002000209512000071180000711867
+:1000200000007118000071180000711800007118AC
+:10003000000071180000711800007118000071189C
+:10004000000071180000711800007118000071188C
+:10005000000071180000711800007118000071187C
+:10006000000071180000711800007118000071186C
+:10007000000071180000711800007118000071185C
+:10008000000071180000711800007118000071184C
+:1000900000000000250080034885460CF050FE005B
+:1000A000480047A318000000200020014B9D460196
+:1000B000480047002000208112000010B5194C199B
+:1000C0004B0020215C00290FD04A07520F521C0917
+:1000D00006C90E05D1072A03D92018007AD8610372
+:1000E000E08018401C8028ECD30E490E4A00208086
+:1000F00031203284000C59944204D18000401840D1
+:1001000068186202E0801C1028F3D303200121004C
+:10011000048907486107F0000026008083FE06F08E
+:10012000F7FD06F059FEFEE780F0FF0F00FF0040EC
+:10013000F0B58C4605463C49002003468A60891587
+:1001400029403A4F0C049607E419002E114613D0AB
+:10015000FF27CE0701372F4034493F047F183F0C5B
+:10016000002E06D01470260A56709770240ED47094
+:1001700003E01480578000E00C60111D8E077F247F
+:10018000002E0BD0CE070027002E04D00C704F702D
+:100190008F70CF7003E00C804F8000E000002700DC
+:1001A000800C606146C95CD4185B1CDBB221728094
+:1001B0002BF7D31E4B1F49596059680029FCDB9966
+:1001C0006805246407A14201D100200AE00E0F0F48
+:1001D0002E02D10920F0BD9968090F0A29FBD10030
+:1001E00028F8D19A6014492F0496077918002E1028
+:1001F000D0114F2D04ED19D6072D0C002E06D0116D
+:10020000700E0A56709570090ED17003E01180557A
+:100210008000E011600749491C596059680029FCB9
+:10022000DB00002800809968A142D6D00846F0BDC6
+:10023000000000001040B6D7000004000080B6D8CF
+:10024000000001460020C91E042900D80220704782
+:1002500000B50A460023FFF7F4FF002806D08242CB
+:1002600004D2062042430B4813189B1C184600BDBD
+:1002700001460020891E052900D806487047054917
+:100280008879097B0007000F0907090F884200D20F
+:1002900008467047000030E700000648407E0649E7
+:1002A000C007C00F08700000290080704704490093
+:1002B000200870704702480078704740E8000084CA
+:1002C0000000203D498A883D48C280CA8802810AD0
+:1002D0008942814A8982818A89C281CA8902820AC5
+:1002E0008A42824A8A82820A7D0270497D41707008
+:1002F00047F0B5324C84469E46E5880020314BA934
+:10030000420DD3DD681F462689AD1B8D4207D9E516
+:1003100089AA4204D33D69268AAD1B95421FD8277E
+:100320004D67896D8AB94201D2AA4200002A008035
+:1003300018D3244EB942B68A03D21F69BF1B974215
+:1003400010D3214FFB68A789DB1B8B4201D2AA4245
+:1003500008D31D4BDD68ED1B8D4205D21969891B41
+:10036000914201D2002200E00122164901274D8866
+:100370004E78614673468F40012B05D1012A08D182
+:1003800039462943618004E01146314301D1BD4320
+:1003900065806146002902D1217801290DD0012A0A
+:1003A00003D161880F4208D006E0002A05D1618898
+:1003B00000002B00800F4202D0012E00D10120004E
+:1003C00021A180F0BD50E600008600002080E700FB
+:1003D000000022A7480121828001704170817002D3
+:1003E000817047A448008CA249C880704710B504AA
+:1003F0004650004018224641786032117180785092
+:1004000071C8B29D49002309784843517940189B2F
+:10041000494000085AD08005210420515610562228
+:100420004603F0E8FCA06610BDF3B581B06C210175
+:100430009800F00AFB00002C008007468E480078E8
+:10044000012859D19048018890480088814201D202
+:100450008D490880894802898D490B889A4201D9C3
+:100460000089088002980026057883486030009053
+:1004700040E0324638460299FFF7BBFF3C468149CF
+:1004800060340620205E098888420CDB814A61794D
+:10049000137820791A4602F086FC00280AD0FFF76C
+:1004A00011FF012806D13146029803F001F86D1EB4
+:1004B000EDB21FE0207900281AD000002D008061E5
+:1004C00079002917D0754A1278521E904212D06CCA
+:1004D000480078401E81420DD00099B86E49898845
+:1004E00042E3DB0621615E8A00904203DD00980052
+:1004F000898142DADB761CF6B2AE42BCD3019800A9
+:10050000F0BCFAFEBDF3B5654E81B03078000776D9
+:10051000D56C21019800F09DFA05460298047801F7
+:100520002C04D1014600222846FFF765FF534B18E3
+:1005300078022801D004281BD13078000758D50054
+:10054000002E00804F48C188008C0918564800686A
+:10055000814201DA01200CE04A494031CA890C8A03
+:100560001219824201DC042003E0C989814242DD84
+:10057000022098703FE008274249DF5F0120603188
+:10058000002F11DC327812070ED5012C0CD1662613
+:10059000725F8E88B24207DB0E89B24204DCAD6E18
+:1005A0009200954200DD02205A78022A01D0042AE6
+:1005B0000ED1904207D17F1E38B21881C978C1424E
+:1005C00019D19A7000002F008017E001205870C8E0
+:1005D00078188112E0012C01D9C9781981344909B0
+:1005E00078002902D02849498E198108229A5E0094
+:1005F00021002A00DD511E19815870019800F04237
+:10060000FA02990198FFF71AFFFEBD10B51D49883F
+:1006100078087025480078020716D50A788988027C
+:100620002A06D1002910D1032003F01DFF04200762
+:10063000E0042A09D1002907D1032003F014FF05A3
+:100640002002F0EDFA00200FE00000300080C10928
+:10065000491EC008014212D118480088C00609D5B9
+:10066000022003F003FF022002F0DCFA012002F076
+:100670003EF910BD002003F0F9FE0020E3E7002062
+:1006800003F0F4FE0F20DEE700009C00002080E76E
+:100690000000E2000020260A002048010020380265
+:1006A0000020460100203E010020E1000020CD0195
+:1006B00000208C01002041010020E0010020FEE725
+:1006C00070B50D4A0E4B002081005458401C0000AC
+:1006D0003100805C502028F9D30B49012008600AC2
+:1006E00049800408600A4CE569266A07F011FCE5B8
+:1006F00061266270BDFFF7E6FFFFF7FDFCFEE70035
+:100700001200000000002000001040000001400026
+:10071000FF004010B500F0E9F800F0FDFF00F01315
+:10072000FA10BD70B5254A254B002110242248122D
+:10073000781B68202517E0C679B60701D0C4710080
+:10074000E0C571012A03D186793609360107E00236
+:100750002A01D00000320080042A04D186793609AB
+:100760003601361D8671491CC9B20C301E788E4286
+:10077000E4D815484078022802D114495878087006
+:1007800070BD70B5124D296001F023F80221286870
+:1007900000F06CF90B4C206000F0AEF800F06AFE3F
+:1007A000FFF7C2FF01F03DF82068047809480470A3
+:1007B000286800F06FF9204670BDE2E7E0030020F2
+:1007C0009C000020B000002080E7000040010020D5
+:1007D000A8000020AC0000200000330080704770AB
+:1007E000B50446C06A1749A66A256B884201D88DB0
+:1007F0004202D940096D097609000231460CF06ABF
+:10080000FA8030A086280231460CF064FA8030E08D
+:100810008670BD01460A880020FF2A0DD80A88404C
+:100820001C5204120C0A8040B2FF2AF7D9704752BA
+:1008300008401E0A8040B201E0FF2301330A889A73
+:1008400042F5D87047FFFF0100F7B5817B00258195
+:10085000B0022903D802D2002004B0F0BD00003459
+:100860000080002130E04218D47B224A63009E1CA5
+:1008700012685B1C965DD25C491CB646944600919A
+:100880001CE04218D27B1B4B56001B68B71CDF5D77
+:10089000761C9B5D6646F31A7646F71B002B00DA42
+:1008A0005B42002F00DA7F42DB19DBB29D4204D2AB
+:1008B0001D46029B1C70039B1A70491C827BC9B2A7
+:1008C0008A42DED80099C9B2827B521E8A42CADCB3
+:1008D0000120C4E71CB504466A4601A9FFF7B7FF2B
+:1008E0000028000035008006D00220A0736B461857
+:1008F00079E073187820741CBD0000D800002038FF
+:100900004900200870704736480021406841700156
+:10091000707047F0B506462036324F0546B17878FC
+:100920006887B0102903D14178491C417057E00015
+:10093000780B2854D20C2148432B4944182878803E
+:100940000743D0A88E0590E88E049004A905A8015D
+:10095000F018F8254841696B460029998A03D1218E
+:1009600071090A617102E00000360080A170090A75
+:10097000E17040696B460028188A03D1A070000A14
+:10098000E07002E02071000A60710320E071686885
+:10099000069006A800F076FF6B46188B2072288F11
+:1009A0000390688F0290307F019001AA02A903A8EA
+:1009B00000F07AFF6B46988960721889A0721879E6
+:1009C000E07279680878401CC0B2087007B0F0BDCA
+:1009D000287BA070000AE070687B2071000A6071BB
+:1009E000FC20D3E70B20F1E7AC000020000037002B
+:1009F00080E003002080E700001C4902200870709E
+:100A00004710B51B4A0346947D00208C4203D85101
+:100A10008A994200DB0120918A994201DA02210879
+:100A20004310BD13490246898A0020914200DA0230
+:100A300020704730B50B461546FFF7F3FF044629F3
+:100A4000461846FFF7DDFF04430849A20701D50217
+:100A50002002E0C00701D001200870087881070358
+:100A6000D4C00701D0012030BD002030BDB400004B
+:100A7000200000380080C0E70000121F4260091DFE
+:100A8000016000224039CA63704700280FD0C91D99
+:100A90008908426889008A4209D3026853180360B2
+:100AA000403BD9634368591A4160104670470020A3
+:100AB0007047026811464039C96B002804D0521AA9
+:100AC00002604268511841607047264A1060918068
+:100AD00000201081D08010467047C2880389D11A47
+:100AE00002D580881018C11A88B2704730B5044604
+:100AF0000D46FFF7F2FF0000390080A18800228830
+:100B000042E0880AD24100401CE08020684552E063
+:100B100088A188884200D1E28030BD4100401CE0BD
+:100B20008020684552E188A088814200D1E280E1BE
+:100B300088491C89B221818142EED1228130BD01D8
+:100B4000894A00491C89B2018103689A5A838899AD
+:100B50004201D1002101811046704701460A89C92E
+:100B60008801208A4200D0002070473803002010FE
+:100B7000B500F0AEFCFFF741FEFFF700003A008041
+:100B800043FF10BDFF490A78881F02704A784270FF
+:100B90008A788270CA78C2700A7902714979417183
+:100BA000704710B5F74A1179491C1171FFF7BEFE65
+:100BB00010BD70B5F34904468878401C8870204603
+:100BC000FFF797FE2078FD2140084000C0B20840A2
+:100BD0002070A57B607829460CF08EF8607029465D
+:100BE00060680CF089F86060208F29460CF084F86A
+:100BF000618FE54E081840082087002160873C205F
+:100C000000003B008001550D460EE06019C17B30AD
+:100C10006849008A1C825C2273491C405C60732016
+:100C200046FFF786FE6D1CEDB2A07BA842EDD870A2
+:100C3000BD10B5D54AD178491CD170FFF779FE10A7
+:100C4000BD10B5D14A5178491C5170017889070906
+:100C5000D1C27BCE4952000968931CCB5C0373520E
+:100C60001C895C4173FFF764FE10BDC74A117849C7
+:100C70001C117001462031CB789371897804290AC0
+:100C8000D004DC012900003C008001D0022907D1FA
+:100C9000D9E7082903D0102902D187E7CBE78DE7F0
+:100CA0007047FFB5BCA20CCA02920393BCA20CCA47
+:100CB000002401930092022202AB6E46A418355D17
+:100CC0001F5D45434F43BD4200D9A41A5208F5D1D8
+:100CD000220194461D5D325D641C1B5D4D434B43F8
+:100CE000315D42435B1B41438C1A2E0115010821E3
+:100CF000002040180246074662435F435219BF195D
+:100D0000BA4200D9401A4908F3D100003D00806082
+:100D10004404B0F0BDF0B5044687B0002003904015
+:100D20001E0290002001900090E08E0590A08E069B
+:100D3000906088049004A8FFF785FD954900260E71
+:100D40003909684A1C09788C463EE097495578096C
+:100D50007813786943C918954F4900795E002900D6
+:100D6000DA0021002801DB814001E04742394106D9
+:100D70009F1B02DB1B1BB289B2002B01DD5B18033A
+:100D8000E0FF2701377F1AFB18059F2D02ED1B009E
+:100D9000003E00802DB21BB2002D01DD691803E07A
+:100DA000FF270137791A49190DB219462F465943C1
+:100DB0006F43C919039FB94202D301950093039170
+:100DC000029B994200D80291761CF6B2921CB4455F
+:100DD000BED8039801F0B9FD4004060C029801F05A
+:100DE000B4FD4004019D070C009A002D01D10020A4
+:100DF0001AE0002A03DA504202B2684205B26842A1
+:100E0000002D00DB2846824204D901461046FFF738
+:100E10004DFF04E000003F00801146FFF749FF7FCF
+:100E200021081A40B2002D01DA404240B2268767FD
+:100E3000872034207707B0F0BDF8B50A46491E4B2D
+:100E4000B25C4900240D785D4909788E46411E49FF
+:100E5000B2401C0091521C5849944615E0DAB27217
+:100E60004519D21A466A4397B2009A09E0D6B2AE43
+:100E70004211D2BE1876008E5B3419521C24B25235
+:100E8000B28242F3DD5B1C5BB26345E7DD002C0000
+:100E9000DA0024A0B2F8BD00200000400080F8BDB8
+:100EA00070B50446008B0D461646002801D1257307
+:100EB000667331462846FFF7C2FF002809D0217823
+:100EC000FB2211402170218B814202D220832573A5
+:100ED000667339483A490078464370194000085E05
+:100EE000E18B0918E183214620310A78521C0A70EF
+:100EF0001A21615E814200DA60831C21615E8142B9
+:100F000000DDA08370BDF0B589B0044602AA03A934
+:100F1000FFF7BBFC6B46197B2348490000680000C3
+:100F20004100808A1C491C455C197A875C49008A0B
+:100F30001C865C491C405C0190B819C0B207900146
+:100F40009804212818C0B20690079840080590061A
+:100F500098400804902078084320702046203000F4
+:100F60002108900170E18321832046049A0599FFAE
+:100F7000F799FF0798C00706D00598049A401CC14E
+:100F8000B22046FFF78FFF0698C00706D0049805E9
+:100F900099401CC2B22046FFF785FF0699079801C9
+:100FA00040C80700004200801BD011E0C6000020AE
+:100FB000D8000020FFFBEDD5B50000000031618EA8
+:100FC000B5000000E2000020260A0020E100002019
+:100FD0000498401CC2B20598401CC1B22046FFF7DD
+:100FE00064FF08980078012802D11E20205E05E0E9
+:100FF0000228E08B01D1400800E08008FE49FF4B49
+:10100000B7421CD10198854201D82846019DA18490
+:101010001E7801467143C919401C89B2C0B2F84F0D
+:101020000AE0891989B24A0000004300802423BAEB
+:101030005EE35E9A4200DAA284401CC0B2A842F28B
+:10104000D320E0019A95421CD1B74202D930463EE6
+:101050004600E03846A18419784D432918401C8980
+:10106000B2C0B2E84D0AE0491C89B24A002423AA62
+:101070005EE35E9A4200DAA284401CC0B2B042F243
+:10108000D300E0A08424201421205E615E88420603
+:10109000DA80010BF047FE0899487009B0F0BD08EE
+:1010A0009840214170F9E7417A027A8A1A00004497
+:1010B00000800178042A02DB0122114301E0490883
+:1010C00049000170C17A827A891A0429017802DB09
+:1010D0000222114301E0FD22114001707047F0B57A
+:1010E000C94BCA4A1F78CA4B00211D787F1E6D1E4E
+:1010F000867B136812E04218D27B5400A21C9A5CD3
+:10110000641C1C5D002A05D0BA4203D0002C01D01B
+:10111000AC4201D10120F0BD491CC9B28E42EAD8CF
+:101120000020F0BD10B50446FFF7D9FF0028207855
+:1011300002D000004500808021084301E0400640C5
+:101140000E207010BD10B50446FFF7EEFF2046FFDD
+:10115000F7AFFF10BD10B50446FFF7F4FF2046FFC0
+:10116000F76BFBAB4B162104206278615E185EFFC3
+:10117000F783FC23210855A07B012802D92046FFD4
+:10118000F7CEFE204600F033FA2046FFF7D7FD10D9
+:10119000BD002101704170FF2241600272417282E4
+:1011A00072C1728173984B8382C1820183222211A2
+:1011B000545A1C4283838300004600808162C162CE
+:1011C00001637047964909794143C81100B27047DD
+:1011D000F0B504468DB0002006900D4691A003C8DE
+:1011E0000290039191A003C800900191914846217B
+:1011F0000068FFF76DFC2321FFF78AFC8E490790FA
+:101200000968002008708448690000688A1C491C2D
+:10121000855C465C7E4800787043401941007D48FB
+:10122000405EFFF7CFFF089060802046FFF7B3FFD6
+:10123000310229430798FFF77CFCC9E00000470012
+:10124000800020059004900698022108430690072C
+:1012500098FFF798FC060AC5B26E4909960A9508E8
+:1012600078B0E06F4909788E427ED2744A744F524A
+:101270006801211368C2080C929B5C4207520F0B55
+:1012800092BA5C134200D00021002979D062494013
+:10129000000F5E0898874229DB6078401CC0B2606E
+:1012A00070282803D85F490988884203D920780824
+:1012B0002108432070207800070FD4207AA842002C
+:1012C000D900004800802572607AA84200D2657279
+:1012D000A07AB04200D9A672E07AB04200D2E6729B
+:1012E0000698800716D4310229430798FFF726FC99
+:1012F00010E0534A116808781E280BD240004018AD
+:1013000045701068017849000818867010680178E7
+:10131000491C01704B480C9940684A4B00680B9A75
+:10132000415C9A5C11430C9A81546068C0196060FA
+:101330002078000727D4A07B052815D231462846FF
+:1013400000F0ADFA102800004900800FD0A17B22E8
+:10135000464B1C0F32A37388541420205EB8420001
+:10136000DDA7821620205EB84200DAE782002F0C4B
+:10137000DD00E00AE0A06A7D43C019A062E06A7E59
+:10138000434019E062206B801920630698800704AF
+:10139000D50698FD21084006900BE00598401CC03A
+:1013A000B20590082802D30838C0B205900499818C
+:1013B0004215D0059902A8405C0A994018C5B205AB
+:1013C000986946085C09994018C6B200004A008036
+:1013D00014480078134970434019097880B28D424F
+:1013E000D6D246E70798FFF7E3FB002800D12FE7A6
+:1013F00015480068FFF78AFB0DB0F0BDF0B5124D3F
+:1014000085B040212868FFF76DFB00903E212868D9
+:10141000FFF768FB04463D212868FFF763FB19E0EE
+:10142000FF7F0000E2000020260A0020D8000020F4
+:10143000E1000020300500200001010100FFFFFF56
+:10144000FFFF0001010100FFA8000020B8000020FC
+:1014500000004B0080DCDF00002B4E3E213060019D
+:10146000A87060204601940BF0B4FC284F31463838
+:10147000680E31007848710024254E1FE061004A53
+:101480001C825C891C405C33781F495A4310184900
+:101490006880B20968C208895C40071E4A400F1084
+:1014A0005C014209D121460098FFF79EFE0098FF9B
+:1014B000F760FE0098FFF701FC641CE4B238680195
+:1014C00078A142DBD82868FFF723FB2868FFF720C4
+:1014D000FB2868FFF700004C00801DFB05B0F0BD45
+:1014E0000B4900200E31087048708870C870087170
+:1014F00048718871704710B5FFF7F2FFFFF783FF5F
+:1015000000F0C2F800F032F9FFF769FB10BDB80037
+:101510000020D8000020E2000020DCDF0000974817
+:1015200000218170417001784908490001707047BD
+:1015300000B5FFF7F4FF91480021C170FF21017150
+:1015400090490988417100BD8F48017840788142F7
+:1015500006D1022804D38D498C4800004D00800933
+:1015600068007809780020704770B502460346206D
+:1015700032D0780424002805D18748007802280159
+:10158000D0042801D1947070BDFFF7E0FF0821005E
+:101590002801D0917070BD7B4D58782E88B042F1F3
+:1015A000D8987B0528EED81878842630420BD118BD
+:1015B0008B2B899842EDD3EB889842E3D850786B17
+:1015C000799842E6D9DEE750786D79A842E1D97280
+:1015D0004D58686D8FA842DCD3142516205D5F003E
+:1015E000004E0080185E1B23584340118542D3DB18
+:1015F000CBE765480078C00700D00120704700B5F0
+:101600000146FFF7F6FF002804D05F4820318078BC
+:10161000887000BD0846FFF7AAFF00BD70B50446FC
+:10162000594E4078717925462035884206D31021DD
+:10163000A9703179884200D2307170BDA07B012839
+:1016400006D92046FFF7DBFFA8780828F5D001E08F
+:101650000220A8706078F1788842EED9F07070BDF1
+:101660004949012200004F00808870087810430823
+:1016700070704748490878497888420AD14A4A1325
+:1016800078984206D9022904D39078002801D00125
+:101690002070470020704770B5434C207800282AFE
+:1016A000D0A079002827D13E480078022823D00412
+:1016B0002821D0FFF7A0FF374E344D00281ED0A8B8
+:1016C0007840070BD5E078002808D1307821788859
+:1016D0004204D9F078002801D0FFF728FFA878004D
+:1016E000070BD5A078002808D10000500080307882
+:1016F0002178884204D9B078002801D0FFF719FF7B
+:1017000070BDFFF7B9FF002801D008200CE0B078C9
+:1017100000280ED1E17800290BD0F17800290BD0F8
+:101720006878022803D90420FFF79FFF70BD401C92
+:101730000CE0F178002908D1A178002905D0002813
+:1017400003D068780228F2D9DFE70020687070BD06
+:10175000104AD0781179801D8B1F984200DC881FB9
+:101760000D49C0B20B88834201D2088805E0000011
+:101770005100800B889B1F834202DD0888801FC0B8
+:10178000B25071704700B5FFF7E5FF02480021C174
+:1017900070FF21017100BDCD00002030050020C088
+:1017A000000020D4000020D80000209C00002080F1
+:1017B000E70000C60000205149002008707047F083
+:1017C000B585B0002249E001213FE05400631C04CC
+:1017D000944C4D9E46C35C2D78A41C6B4303950529
+:1017E0005D5B19484D5B00EB5E4D002F4602956D29
+:1017F0001CAC460000520080465D039D6E43BD1C3C
+:10180000475DF619414F7600BE5FB3421EDD049E70
+:101810003C4B2236875B0097029F1B1D22370197A6
+:10182000C75B87531E68019F0098F0531868075DD7
+:10183000465D065518687446475518686546045D48
+:10184000455D764685551B6860461C54491CC9B2E7
+:101850002C4B1B1D186804788C42B9D8521CD2B28C
+:10186000284B1B1D18680078401E9042AEDC05B066
+:10187000F0BDF0B4234A01210000530080121DC9BD
+:101880000310609180491ED180204B0021204F1D04
+:1018900078067814E04B005C1C045D9B1CC35C6CF8
+:1018A00043E3185B000424FB5E145F9C4200DA9360
+:1018B000800624145F9C4200DDD380491CC9B28E8F
+:1018C00042E8D8F0BC80E710480F49001D006800CE
+:1018D0007808707047F0B507460B4B102000221BAC
+:1018E0001D1B681E780CE05400A51C5D5DBD420503
+:1018F000D1641C1C5D8C4201D11046F0BD00005427
+:101900000080521CD2B29642F0D8F0BD0000D40044
+:101910000020E2000020260A00204D4A018892693A
+:101920005143A02251434B4A090C1278012A00D19D
+:10193000C908FF22FF2900D80A4602807047F0B587
+:101940000388454C454D63439C0C0B886B439B0CB3
+:1019500000255557E6181E2E05D39F00DF19E61AFD
+:10196000FF08BE4202DC1C46002509E0394E7669BC
+:10197000002E09D1002D01DA7F3500E07F3D6DB2E8
+:10198000048000005500800B801570F0BD6D42F89A
+:10199000E7F0B5064600202F4C355E0F5E626923E6
+:1019A000462033002A02D104229A5601E006229AE8
+:1019B00056AA1A12B2002A01DA0022012065690033
+:1019C0002D02D106255D5701E004255D577B1B1BC9
+:1019D000B2002B01DA002301206569002D01D1E559
+:1019E0006800E02569954208D86069002801D1E0C7
+:1019F0006800E02069401E02B201206569002D01E7
+:101A0000D1256900E0E56800005600809D4208D8B5
+:101A10006069002801D1206900E0E068401E03B23F
+:101A2000012032800B80F0BD70B40C4C62690E4B0B
+:101A30000E4D002A01D11A6800E02A680688724318
+:101A4000120C02806269002A01D12A6800E01A683B
+:101A50000B885A43120C0A8070BC9CE780E7000098
+:101A60009C0000205C120000500100205401002066
+:101A70007047FEB5FF4C25680321090228468843BC
+:101A80002060FC48403080680190E06B0000570007
+:101A90008000900198F84A060C00983604070CFF65
+:101AA0003602363F04FF37A003314602374140403B
+:101AB0003291607840E063012006F006FBEE48407A
+:101AC000308660E763012006F0FFFAEB4901984099
+:101AD0003188600098E0632560FEBD70B5E749C8B5
+:101AE000684A021043C860E6488168E64A05201348
+:101AF0007CDB0705D1282903D30620302900D30732
+:101B000020E14D297C090908184600287C44076417
+:101B10000F0000580080052C00D90024107CC0075D
+:101B2000C00F401C09F003F8DA49A0000958D34857
+:101B30003143C0300161A97CD74A0907090F8918D0
+:101B4000416003218160910CCD4A40329162CF49BE
+:101B500060398969CA4B80339963012109030160A7
+:101B6000092000079061C54C2068C9040843206023
+:101B7000052006F0D3FA052006F0C1FA2068000619
+:101B8000800F01D0FFF77AFF70BD70B5C348017EAA
+:101B9000002917D0C24A0000590080C08D514380EF
+:101BA000030BF0F7F8BB4B0021BF4CBF4D203BDED1
+:101BB000696422002E01D00A1912784E00424312A5
+:101BC00012491CAA530929F2D370BDF8B5002105AA
+:101BD0002006F08DFAAF4F603FF869B04C60703866
+:101BE0006AA0700020B24D6077E868F021084020BC
+:101BF00077286A2075A868A075A8683E46000A2064
+:101C00007640367068E085FFF7C2FF686F6075E860
+:101C10006DE075E86DE91D000A607600005A0080ED
+:101C2000F9314968C0B20D0A39690F0A642141438C
+:101C3000B06800030BF0B0F8A0842946642041434B
+:101C4000306900030BF0A8F8208539466420414331
+:101C5000306900030BF0A0F86085F8BD10B5914C19
+:101C60002078002803D1FFF7B3FF01202070FFF791
+:101C70003CFF10BD84499048486183498F484031FA
+:101C8000486201218048C903C030016041684900B1
+:101C90004908416081684908490081600169012261
+:101CA00000005B0080890089089207891801617033
+:101CB0004710B576480168490049080160052006CB
+:101CC000F02CFA052006F031FA10BD7748C07EC02E
+:101CD00007C00F7047FEB50020704A0290507E0189
+:101CE00021800704D4FFF7F1FF002800D100215024
+:101CF0007EC00732D06C48007E10282ED808282CD1
+:101D0000D300292AD0614885248168CEB281680D2C
+:101D10000A816AC9B20191406A0007000F00905D14
+:101D2000488068282800005C008000D36424204696
+:101D30005A21484364210BF034F8E9004718009A0F
+:101D400001992046684389187043491C48434B2138
+:101D5000403F09010BF025F8B84201D30120029061
+:101D60000298FEBD4B4B10B50022403304E09400B6
+:101D7000E418E162521CD2B28242F8D310BD30B5F1
+:101D80000568434C25604568A560C568A561C569BF
+:101D9000A5620569E5614569256285696562C56970
+:101DA000A562056AE562456A256300005D008085DD
+:101DB0006A6563C56AA563056BE563456B364C4090
+:101DC000342560856B6560C56BA560056CE5604575
+:101DD0006C2561856C6561C06C606232486038401A
+:101DE000698509AD012C480D438030C563A26103AC
+:101DF0006130BD70B50021354A0F238C00A4182333
+:101E000060491CC9B24129F8D3022810D1264900E3
+:101E10002002232F4C603905E0255CAD00AD182B66
+:101E200060401CC0B20D6ACE69AD198542F4D8007D
+:101E3000005E008070BD1948C03001698A009208B8
+:101E400041065218026142680A43426081680122D9
+:101E5000114381607047F8B5FFF7EDFF0120164E82
+:101E60000024124DF072F470203D286A022801D13E
+:101E70001A4900E01A49052006F03FF93471194C5F
+:101E80006068194901220978120300028918084381
+:101E90000249C03108600F2028E000000000114016
+:101EA0000000014000FF014000E6000050EA000091
+:101EB000F4DF000000005F008040400080E0000090
+:101EC000207102000060F1FF0F8C030020B0E800D9
+:101ED00000FF00AF400AA000000004114000EB002A
+:101EE00000439700006994000080EA0000A8020007
+:101EF00020FFF784FF636A0F2212070021FF4C20A6
+:101F00001DFFF744FFE068FE4F78616068717F0055
+:101F10002905D005218843C10601D4C02188433852
+:101F200060307EB17D00020843B860216AF5480147
+:101F300040307D0143000401430000600080B9622D
+:101F4000E068F0218843317F08437861F049092037
+:101F5000FFF712FF286A022804D178690121C9021B
+:101F600008437861FFF7C3FEEA49497E4907C90F74
+:101F70000840E849C870F8BD70B5FFF761FFE54C4F
+:101F80000220203CE0720020E070E1482038006A26
+:101F90000228607803D1C01C80088000FFE7DC497C
+:101FA0006039096B41432171DC49052006F0AAF82C
+:101FB000DB4DA8680121000209030843D249000053
+:101FC000610080C03108600220FFF71DFFAB6ACDC1
+:101FD000480D22120732215830FFF7DDFECA4A10A1
+:101FE0006E012189078843C8494861906D637F006D
+:101FF0002B05D005239843C30601D4C0239843087A
+:1020000060607EE37D000218438860526FC0480222
+:1020100040607D0243000402438A62BD4909208971
+:102020001CFFF7ACFEB9484030416A0322520291CE
+:10203000434162416A421511434162FFF75AFEB5BE
+:1020400049497E00006200800907C90F0840B44971
+:10205000C87070BD10B5FFF7F8FE0F20FFF7D6FE71
+:10206000AD490920FFF78DFEAC48A0384068A8496B
+:102070008860AA4860384069A54A8009800180329A
+:10208000D063A9490869A94B01241B7824030002E5
+:102090001B1918439E4BC0331860086B1061FFF783
+:1020A0002BFE9E49497EC906C90F08409C49C8704D
+:1020B00010BD10B5FFF7C9FE0F20FFF7A7FE964928
+:1020C0000920891CFFF75DFE0000630080944960D1
+:1020D000390A6990488260496932228E4B114380E7
+:1020E00033D9638C4A4032516A032464022143513C
+:1020F000628169220391430122920589188161411D
+:1021000069421511434161894908698A4A012412CB
+:102110007824030002121910437E4AC0321060482E
+:102120006B1861FFF7EBFD7E49497EC906C90F08B0
+:10213000407C49C87010BDF8B57A4F0820203F7820
+:102140004EF872603EF06BF8707B49052000006429
+:10215000008005F0E1FF7648036B30460D224038E1
+:10216000120700210446FFF71EFEA0686B49486174
+:1021700034464034206A022804D17878C01C85088F
+:10218000AD0000E07D78606A012802D1FFF796FF7C
+:1021900001E0FFF764FF306BF16B68434018216882
+:1021A000401838716069022805D05B488030C168EA
+:1021B00049004908C160F8BD584B10B50022803372
+:1021C00004E09400E4186161521CD2B28242F8D358
+:1021D00010BD000065008070B5FFF74EFE544C0145
+:1021E00025203C207E2D034D4E102804D94B4880DD
+:1021F00068C0B24019B0600F20FFF70FFE0020E06A
+:10220000744B49A08548708870608647486038C024
+:102210006BE0701020E0724B49052005F07FFF0055
+:10222000210920FFF7CBFF3D48C0300560B16A3C73
+:102230004AD2431140B1620D21394A090740329117
+:10224000613A49097D002907D001693F4A114001DF
+:102250006101693E4A11430000660080016170BD62
+:10226000F0B53D4B1622002101245043C5181A5ADF
+:1022700026468E40324208D06A18567B1279374F74
+:10228000BA5C374F9200D2191660491C0929EED367
+:10229000F0BD10B504460F20FFF7C2FD2046162101
+:1022A0004C432D490B5B234A203A9385611889786A
+:1022B000D174FFF7D5FF10BD1E49203909790818E0
+:1022C000062148432749096840188189C906C90E73
+:1022D0000A020A43134980314A618289000067007B
+:1022E000809205D20E130213438B6182895204D26D
+:1022F0000E13021343CB61C289D206D20E1302130E
+:10230000430B62C2899205D20E130213434B62C281
+:10231000895204D20E130213438B62028AD206D270
+:102320000E130223E0B0E800000000114000FF009F
+:10233000FF010000C050EA000000010020279900C2
+:102340000080EA0000AB020020AC020020FB9900F4
+:10235000001B9C0000FFE0E3F1000F080800EC0008
+:1023600000000068008000EB000000041140B00293
+:1023700000201343CB62028A9205D20E130213434C
+:102380000B63008A4004C00E020202434A63704796
+:10239000F0B5FD4AFC49536AFD4A9A5C9300FC4A39
+:1023A0009A18136896469C460C231360FA4A1368E1
+:1023B0009768946A15680126B602B5431560FF2533
+:1023C00002359560002806D0956AF34E35400543E6
+:1023D0000004054395620720D06015680126B60702
+:1023E00035431560D5680000690080ED0701D149CB
+:1023F0001EFAD2D060604671460860136097609400
+:1024000062F0BD70B5E74DE14CE97A082900D1E0F2
+:102410006B0229064601D1022000E00F20FFF707DA
+:10242000FD3046FFF724FFE87A082810D1206AE142
+:10243000694018E16A4018D5494031496A012906C6
+:10244000D0D94A0121105CD34A8000801801607005
+:10245000BDFEB5CE4A1425106B0190D14800214431
+:102460007886780173C1714171817100006A0080C2
+:1024700081730174631E437481748172516A491EB1
+:1024800041720020FFF7C0FF0020FFF71FFF002070
+:1024900006F01BFD06F004FDBE4F403778690028AA
+:1024A00008D0C14AC149527A0C20895CBB4A8900D4
+:1024B00089180860386A022807D10021304606F0E2
+:1024C000C3F8E41CA408A40006E0B849B34A895D37
+:1024D000012089008918086001986043B24C60733C
+:1024E000AC486030C07CFFF758FFAD48B049C160D0
+:1024F00000006B008005F012FE0090AA48006803FF
+:102500002149070843A7490860A6480068800001E0
+:10251000D56D1EF9D2386A022806D101213046064F
+:10252000F095F8002020720DE0A1480F21825D9304
+:10253000009B4A9B18196080194078012180008017
+:1025400018016021720120FFF7C3FE96480168035D
+:102550002252071143016001690222114301610007
+:102560009805F0E0FDFEBD10B5904C0021A172A1D0
+:10257000749149896800006C0080012212030902ED
+:10258000801801438948C0300160607906F0A2FCE0
+:1025900006F08BFC6079FFF73CFF6079FFF79BFE4C
+:1025A000824C20680006800F02D00020FFF7FAFE60
+:1025B0008248E06005F0B5FD2169022211432161E6
+:1025C0002168032252071143216005F0AEFD10BDC2
+:1025D0007C49022008707148816B426B8A187449EB
+:1025E0004A73406B4871C0B2401C887176480078CD
+:1025F000BCE7734801210170694800006D0080420A
+:102600006B6D48427300224271817170480078AF4F
+:10261000E770490870C10700D0EDE7800700D5D901
+:10262000E7704710B55F4CE06BFFF72BFE2046408C
+:1026300030406A03280BD1206AE1694018E16A5EE4
+:102640004A4018105C594A0221800080180160102D
+:10265000BD10B5584C0020A074FFF746FD608DE01A
+:1026600084FFF7DFFF0120FFF738FE5A48A0634FD1
+:10267000485349C160016882031143016001690048
+:10268000006E008002221143016110BD10B54B4A5B
+:10269000002090744449907240314B6A14462820BF
+:1026A000205E032B01D14E4903E04B6A4B49022BBC
+:1026B00006D19163D0840020FFF7B0FE002005E032
+:1026C0009163508DD084FFF7AFFF0120FFF708FE24
+:1026D0003848026843490A403349C96B16235943B5
+:1026E000414B595A09040A4302603649C1600168E6
+:1026F000820311430160016902221143016110BD8F
+:1027000070B5054600006F00802848426B2C4920B8
+:10271000314878824200D88878FFF7D1FD284EB042
+:102720008D06F0CAFB244C20680006800F02D00002
+:1027300020FFF73FFE0020B0763086F076F0630091
+:102740002D14D0B074B0727573FFF733FEE069F0EA
+:10275000218843E0611C48E06020680321490708A4
+:10276000432060206902210843206170BD0120B030
+:102770007470BD10B510484168114C0907090F016C
+:102780002904D00D49C03149680000700080C9009B
+:1027900031D40169022291430161D11EC16005203B
+:1027A00005F0F8FC10486063012010BD000088901F
+:1027B0000000F0E90000FFEA000000041140000002
+:1027C000114000FF00FFE000002000EB0000FF03CD
+:1027D000000080EA000095020020AA020020A90261
+:1027E000002094020020652B0000D3360000FFFF7C
+:1027F00000FE00EC0000A07CD7E78249002800D151
+:10280000824848637047002801D07E490864000070
+:102810007100807047002801D07C494864704700EF
+:102820002801D0794988647047784A107579480141
+:102830006A79480140107D014300040143774881D3
+:102840006270477149734A8875D36DDBB283420069
+:10285000D3D06DC87571488268897D120A12020A48
+:10286000438260704710B568496C4A08769068FFEB
+:1028700023097E1B029843090208439060FFF7C3B7
+:10288000F995E710B5614C644A60769168FF231BA7
+:102890000299430000720080C3B21B021943916089
+:1028A000642141435F48806800030AF0B1FAA084C4
+:1028B00080E75748807E70475548807F704754486E
+:1028C000C07F704752482030007870475048008ED3
+:1028D000C0B2704754480088C0B270474C480221CB
+:1028E000C07E0840704710B5040004D02078FFF780
+:1028F000BCFF607806E0484880680004000EFFF7DF
+:10290000B4FF02208107424801D4012100E00021E8
+:1029100041774FE770B5404D00007300803D4B0498
+:102920000015D02078FFF785FF4148C07F002801BF
+:10293000D0207800E0686F587520790007000E18E5
+:10294000776079FFF783FF608800F05DF870BD283D
+:102950006AC0B2FFF76EFF686F5875E868F021082B
+:10296000401877A868C0B2FFF771FF2F484068EBA6
+:10297000E700B52D48406901280ED1FFF7ADFF00F3
+:102980000904D029482030807A012805D025480143
+:1029900068012212061143016000BD30B5000074C9
+:1029A00000802249002240390B6B834201D9024644
+:1029B00028E00B6BCC6B1B19834201D9096B20E01B
+:1029C0000B6BCC6B1C19194B1D686419844205D91B
+:1029D0000A6BC96B801A401A420813E00C6BCD6B6E
+:1029E00065191C68641C2C19844207D80C6BCD6BCC
+:1029F00065191C68A41C2C19844203D9096B401A60
+:102A00001968421A104630BD0020704710B50249BF
+:102A1000C885FFF700F9D2E60000E0000020652B32
+:102A200000000000750080B0E8000000FF00FF001B
+:102A300000114030EA0000E0010020F0E60000BC98
+:102A400049002008707047BA49002801D1BA4803EC
+:102A5000E0012802D1B848083048607047024600BB
+:102A6000200121C90300E049089142FCD806E0405A
+:102A70001803464343934200D9401A49080029F6F7
+:102A8000D17047F0B5AB4A91B0506801780B910016
+:102A9000210C460A91C1780191C188059181880471
+:102AA000918178039141780000760080029103992A
+:102AB00020204B0802998B4200D9490000910B99C4
+:102AC000002970D09E49CB685B01403B09930B699C
+:102AD0005B01403B0893CB685B01103B079309699E
+:102AE0004901103906910A9911E00C2122464A4306
+:102AF000944951181091CB790A9A06214A43924978
+:102B000051184D79AB420DD00A99491C0A918A4A55
+:102B10001278914203D28D4909788C42E5D38B48D3
+:102B2000027802E1109B5D791E792B02000077008C
+:102B30008033430F93109BDD789E782B0233430E36
+:102B400093109B1D7A0F9B002B0DD07E4EF3680FC8
+:102B50009F5B1EBB4207D00E9B002B04D033690E37
+:102B60009E5B1EB34203D10B9B8026B34302E073EE
+:102B70004B5B681B780B93754B9E5A4B880D9309E2
+:102B8000790C9159090B9B72091B0657D50F9810A8
+:102B90001A0E9A4043891A49430818FFF764FF0444
+:102BA000990746884202D8029811E0C4E005988748
+:102BB00042000078008001D903980BE0781A009A4F
+:102BC0000399891A4843049A0599891A0AF02FF93A
+:102BD000009940185C4A121F117D012908D15E49F5
+:102BE000C96B012904D15D490988890600D580088F
+:102BF0005C490B78012B02D00978022902D159498E
+:102C00000978C840917D00290BD0D17DB94208D9FF
+:102C10001099127E4B780F7819023943914200D2F5
+:102C20008008314641434909721A0F990D9B41436F
+:102C300051180D9A4243000079008052099B1A0EE8
+:102C40009A42439A1803E00F990E9A490152010BD8
+:102C50009B9B0609D5019B0C9F6B430C9DDB085D7C
+:102C600019019B7B43DB08ED1A0B9B5B0623D5B157
+:102C70004206D9099B994203D8102901D9091A079C
+:102C8000E0B14205D2402903D3079B994200D20903
+:102C9000180D9B9A4206D9089B9A4203D8102A0124
+:102CA000D9121A08E00D9B9A4205D2402A03D30696
+:102CB0009B9A4200D212180B9BDB0600007A008020
+:102CC00007D50C9B9D4201D96D1E02E09D4200D2AA
+:102CD0006D1C109B2646DF7906235E431F4BF318BD
+:102CE0005F711E4FB953C902109E090C3171090A58
+:102CF00071715A80D102109A090C9170090AD17031
+:102D00001D711099641C0D7208E70C201249604374
+:102D1000401841790379090219434B0121460625E0
+:102D200069430E4D6B52C37886781B0233435B01B7
+:102D300049194B80037A0B71C0794871641C944225
+:102D400000007B0080E3D30248027011B0F0BD00A8
+:102D5000003001002054E7000080E70000E003009D
+:102D6000209E0300203F01002070E60000E00100EB
+:102D7000206001002061010020FF49097F012389B3
+:102D800007890FFE4A022901D19372704701290178
+:102D9000D10328F9D0002090727047F8B5F74A089F
+:102DA00021F54B51719C78F6490C80DC784C801EE3
+:102DB000462036747A4C715C8DCC809C8D0C8134AD
+:102DC0007A0C71F04900007C00801C4640340D688C
+:102DD00000283FD1EE480188118218460089D08131
+:102DE000EC480078000705D51846603083881382C8
+:102DF000C088D081E8480378012B02D000780228EF
+:102E000027D1DF48078A38010AF01BF8DC490A8914
+:102E100050430003DB4A000CD081227A284610413F
+:102E2000B84202DD207A054100E03D46D548002247
+:102E30000582D9488256012A0BDDD248FF22028042
+:102E4000402242710022C280028100007D0080C9C0
+:102E5000784180317A0171F8BD022803D1D88B10F6
+:102E600082188904E0052804D1E0891082A089D065
+:102E700081F8BD042809D1D88E108280B2A91081B2
+:102E80004200DD08461082988EF1E70F28F0D1C489
+:102E9000481082ECE770B5BA4AD068114620310478
+:102EA00023CB56C0180523CB56B74DC0180002A837
+:102EB00061136906240C571B1907240C5719190EA6
+:102EC00002EE615169B84C012905D1E16909F000B0
+:102ED000007E0080BBFFA861216A04E0216A09F03E
+:102EE000B5FFA861E169304609F0B0FF0024E86150
+:102EF000EC712046FFF759FF0020FFF745FFA4497A
+:102F0000002048398200401CC0B28C501228F9D3EE
+:102F10002C6270BD10B59D4C2078002805D1FFF7BC
+:102F2000BCFF01202070FDF7B5FC10BD97490028BB
+:102F300001D1032002E0032801D1012088717047EC
+:102F4000F0B58C469A499B4D0978904C0746022073
+:102F50008E46E48900007F00802D7889071DD5000A
+:102F600026B91A002900DD0E46F1B2944EBA183681
+:102F700078761EB24200DC16460A46F6B29049093F
+:102F8000E0AF187F00CF5FA74202DB401EC0B20552
+:102F9000E0521CD2B2B242F3D900E001207146C91E
+:102FA0000718D062460021D21A002A00DD114662BD
+:102FB000466D1ED218C9B2AA4200DC1546EAB2809C
+:102FC0004B05E04D005D5FA54204DA491CC9B29192
+:102FD00042F7D9F0BD401EC0B20000800080F0BDB5
+:102FE000F0B504462178002003468C461EE00022FE
+:102FF000590009194F7889788E46114610E08B42A6
+:103000000DD04D002D196E78F61BF61C072E06D23A
+:10301000AD787646AD1BED1C072D00D2521C491C25
+:103020008C45ECD8824200D910465B1C9C45DED80A
+:10303000F0BDF0B50446002089B005900646049026
+:1030400055480F468589018A02918078B9B2089166
+:10305000002803D05049401E887007E02046000039
+:10306000810080FFF7BFFF4C494A78904202D34865
+:1030700070089806E04948407A0390042804D9462D
+:10308000490898888109B0F0BD217881420CD202AC
+:103090002801D1AE0808E0032803D1280981100EC9
+:1030A0001802E0042800D12E09B819A842E7D96710
+:1030B000E002980026844651E07000001941780132
+:1030C000918078002500900021002D05D0042D036B
+:1030D000D0002901D004293AD101982A18009892E9
+:1030E0001E0B18000082008038489B1E0078401E8E
+:1030F00082422FD2002A2DD0334800780746401E46
+:10310000834227D2002B25D038465043C0184000B8
+:10311000304F0790385E60451CDD002010E0B04263
+:103120000DD047003F1906977F78BF1A7F1C032FE9
+:1031300005D2069FBF78FF1A7F1C032F0AD3401CBD
+:103140008645ECD8642805D0224F0798385E049352
+:1031500084460592491C0529B9D36D1C052DB5D3AC
+:10316000761CB645ABD8029900008300808C4511CF
+:10317000DD7146490009190598487021780498497D
+:1031800000091988702078401C20702078039986E7
+:1031900046884292D32046FFF72AFF02496CE70097
+:1031A0000080E7000038010020300500208C01007D
+:1031B0002038020020CD01002060010020610100C4
+:1031C00020FFFF0000F0E900005E010020E20000A7
+:1031D00020E1000020020E0020260A0020F7B58C16
+:1031E000B00021FF4801720E9A1170FE4A0000845F
+:1031F000008001911278521E0392FC4A12780292CA
+:10320000008A05900D98807805E00E990022091833
+:1032100040318A70401C0D99C9788142F5D2A0E1F5
+:103220000D9A0299967841438919491E0491029991
+:10323000891C484385196D1E85E10498401C049043
+:10324000EC486D1CC18F002923D03E22825E0146CE
+:1032500040310023CB5ED118049AE64B52009A5EAF
+:103260004942914255DD681C41098900C706E24C7C
+:10327000FF0E000085008001206358B84084460B93
+:1032800093034209D068098000EB062158DB0E0148
+:10329000229A401143215067E068098000D84B0A08
+:1032A000901858EF060124FF0E2346BB40089309EF
+:1032B00090184221D10D99029C09780020614303A6
+:1032C00046CE4F524206E04C003C5F94424CDC40FC
+:1032D0001CC0B2491C029CA042F5D3002B44D1086B
+:1032E0009A0999C64811430A9A81500E988019404C
+:1032F000308178491C8170000086008037E0A81C6E
+:103300004309C04A9B00C006D358C00E84402342E4
+:103310002DD10B9863461843505028E03E21415E62
+:103320004842824223DD681C4109C4068900B54A2F
+:1033300001205158E40E0346A340194208D0690900
+:103340008900EF065358FF0E0446BC40234201D0CB
+:1033500028460AE00146A81C43099B00C006D25833
+:10336000C00E81400A4202D0681C01F02BF904987B
+:10337000A34940000790085E059A9042000087002C
+:10338000807BDB019A002112180192029A012752D8
+:103390001E0446964200D300270D9A039B1278061E
+:1033A000929A422CD2029B049AD218521C94460044
+:1033B0002F0AD0944B624652009A5E9042E0DB00A6
+:1033C0002A01DD141900E011466246521E94468D12
+:1033D0004B52009A5E9042D3DB002A01DD141900A3
+:1033E000E05118002E0BD063465B1E864A5B00D26C
+:1033F0005E9042C5DB002A01DD141900E05118007F
+:103400002F00008800800BD0804B079AD31802222F
+:103410009A5E9042B7DB002A01DD141900E05118D2
+:10342000002E0CD0794B079AD318203B1E229A5EAF
+:10343000904225DD002A01DD141900E05118069A9A
+:10344000002A2DD0029B049AD21A521C9446002FB7
+:103450000AD06D4B624652009A5E90427CDD002A93
+:1034600001DD141900E051186246521E9446664B65
+:1034700052009A5E90426FDD002A02DD141901E0CD
+:103480006AE05118002E00008900800BD063465B73
+:103490001E5F4A5B00D25E904260DD002A01DD14AF
+:1034A0001900E051180122002E02D0002F00D00098
+:1034B00022069B002B02D0039FBB4200D1521C026C
+:1034C000239B1A059A9A40A24248DC231A5B104FAC
+:1034D00042BB4243DB504B1F78012F02D01B7802C6
+:1034E0002B0AD16118914239DB4C4900228A5601DE
+:1034F0002A02DD6110884231DCFCF7CCFF0128098B
+:10350000D13F4A0D989379F1B2007800008A00808B
+:103510001A46FFF733FD002823D13E490798085E7D
+:103520000021201A002800DD01460E980E9A00782E
+:103530004000801841840E990D9809780E9A490030
+:103540000078891848700E98007841000E98081885
+:1035500086700E980E990078401CC0B20870102832
+:1035600015D0761C0D98C078B04200D374E60E9842
+:10357000007810280BD00D980D990078401C087029
+:103580000D980D9900784978884200D857E61D4873
+:1035900000008B0080006A002803D101990E98FF7B
+:1035A000F763FD0FB0F0BD38B500256B46174A1D17
+:1035B000701478174A641E5C709D7014780A466413
+:1035C0001EDC706946FFF71EFE38BDF3B50020848F
+:1035D00046034681B01448009049E0144A1620542E
+:1035E0000C1D4645431248405B864600207146C18B
+:1035F00040C90734D0064E0199367871430C4EAE5F
+:103600001936183779C91915E038010020E1000092
+:1036100020E200002000008C008080E70000260AE5
+:103620000020E80400206001002061010020F0E992
+:1036300000000080FFFF00EC0000FA4F4900795EB7
+:10364000914200DD0A46A14200DA0C46F74F31797B
+:10365000029EB14206D1795B01268640314201D0FB
+:1036600001218C46401C0928C3D36046002805D19F
+:1036700000985B1C006B9842B2D807E0101B00D585
+:103680004042D110884201DA0120FEBD0020FEBD7B
+:1036900010B502781023102A00D800008D00801386
+:1036A00046CAB209E051000918CC784C700C798CEC
+:1036B000708C8C521C4C84D2B29A42F3D30178495C
+:1036C0001E017010BDF3B589B000200490D9480CDC
+:1036D00046817AD8480890002955D0D5492078C924
+:1036E00079884250D000284ED00898C07802906463
+:1036F0002801DD64200290002642E070000019419C
+:103700008C0391807837468446002012E0B0420F47
+:10371000D041000B1999786246521A00D5524200E6
+:10372000008E0080042A06DA5A8C039B9A4202D942
+:1037300007468C460392401C8542EAD800251EE0CD
+:10374000BD421BD06800011988786246101A00D566
+:103750004042042812DA498C64204143039A0298BB
+:10376000504381420AD229462046FFF796FFBD42C8
+:1037700000D27F1EB54200D2761E6D1E6D1C2078D1
+:10378000A842DDD8761C2578B542B9D8AC48007877
+:10379000012803D0AA480078022841D1A948002175
+:1037A0004156012900008F00803CDD2078A34907A5
+:1037B00090C979884236D0002834D0A07800268479
+:1037C00046628C677830460BE0410009198D784BD2
+:1037D00078498C914203D90A460646AC461F4640BA
+:1037E0001C07998142F0D8002519E0B54216D0682F
+:1037F000000019827841786046801A00D540420462
+:10380000280CDA781A00D54042042807DA29462025
+:1038100046FFF745FFB54200D2761E6D1E6D1C2097
+:1038200078A842E2D8864A20780000900080203AAA
+:10383000154600264035069000287BD000200290D7
+:1038400001901046C08FFF26002863D0002021463B
+:1038500042318C467F490B7813E0410009194A78C0
+:1038600089785A435218744F5200BA5EAF88BA42F0
+:1038700006DA6246895C002902D00120049003E048
+:10388000401C06998142E8D86E48006A3C282BD932
+:10389000002726E078006E4A011948781278897866
+:1038A00042435218654B52009A5EAB889A42000020
+:1038B00091008003DBFFF798FE002813D0F9B209CE
+:1038C000E048000019C278427002798270828C4907
+:1038D0001C4284C9B22078401E8842F1DC20784026
+:1038E0001E207000E07F1C2078B842D5D8227800D6
+:1038F000200AE0410009198978019B994200D90109
+:1039000091B14200D20E46401C9042F2D301988001
+:103910001B022801DD0120029050480590C06A007A
+:103920002851D04E48007901284DD100204D4F4DEF
+:1039300049388000009200800870064643E0E9E0C4
+:1039400043482038406901281CD1444A70000019BE
+:1039500012788178D31E994234DD43785343591845
+:10396000384A4900515A428C51180022BA5E09B2B5
+:103970008A4227DA398005994078C96A48433C4928
+:1039800009781BE03A497000001909784278C91E8D
+:103990008A4217DD3149837809784A43D218294B86
+:1039A00052009A5A438C9A180023FB5E12B293423B
+:1039B00008DA3A80059A80780000930080D26A5035
+:1039C0004309F078FA2A490870761C2078B042B989
+:1039D000D8204820384078284F002805D0204609B4
+:1039E00099FCF7DDFF064614E020780B260B280033
+:1039F000D8064600200BE041000A190C2141435330
+:103A000078C9198B8092784A802022CA71401CB0F4
+:103A100042F1D3104B0020203BD98F002939D00C24
+:103A20004AD179012902D80299012902D100211134
+:103A3000622FE0116A002921D00498002800009428
+:103A4000008024D0FF202D30106224E00000260AE0
+:103A5000002000EC000038010020A0E70000600119
+:103A6000002061010020E2000020F0E9000010E8E1
+:103A70000000A6020020A4020020E1000020E003D4
+:103A800000200499002907D03C20106201E03C2965
+:103A900001D8A87800E0E878FA490978012908D126
+:103AA000F949C97900290AD0597F814207D9587F3D
+:103AB00005E00899097E814201D90898007EF14904
+:103AC0008A7A0000950080002A08D0CA79002A0569
+:103AD000D0089A9278824201D908988078EC4A13EB
+:103AE00078012B02D01278022A0BD1E94A0023D3A5
+:103AF00056012B06DDC979002903D0E97D814200FA
+:103B0000D9E87D00210007020E08E00C204843C0E0
+:103B10001983791B071B0F13438371491CB142F4AE
+:103B2000D317E0DC4800684142002800DB0146D0A2
+:103B30008EDA4B1B68984208DD0498002805D1D026
+:103B40008F884202DDD14900009600800020086283
+:103B500020460999FCF72BFFCD49086A002801D0BF
+:103B6000401E0862087A002807D1C878002807D0CC
+:103B7000401EC8700879087202E0AA7ACA700871FB
+:103B8000E87A002803D1087A002800D000263046C1
+:103B90000BB0F0BDF0B5064602680020C14C04230E
+:103BA000E3560F68D21A03D50022002B00D0012063
+:103BB000062565577B1B03D50023002D00D001206F
+:103BC000B84F203FFD686D1EAA4205D9000097003E
+:103BD000802A4605256557002D00DD01203D696DD1
+:103BE0001EAB4205D92B4607256557002D00DD0188
+:103BF0002032600B60F0BDFFB5AB4887B020384481
+:103C0000690D460527A34EFF013946B06909F072D8
+:103C1000F906903946F06909F06DF90146012C0367
+:103C2000D106980190084601E00191069801990C8F
+:103C30002249100391411002910799002751439B9B
+:103C40004ABC468918097A3B468A0709078E0F92B3
+:103C50000F0000980080974904920978099A8E46CF
+:103C6000694389183A463C46002E12D00746029A0C
+:103C700009989446002801D04A1E02E04A1C0024FC
+:103C8000E44373465B1E984201D24B1C1EE04B1E60
+:103C90001BE00498002819D00398099B84468548A6
+:103CA000019F027828465043C018831A9E46831805
+:103CB000002D01D0724602E000241A46E4437E48FB
+:103CC0000078401E854201D3734601240498304396
+:103CD000059037D07A4800009900804900405E5234
+:103CE000008510401B864676485B00825EC05E0001
+:103CF00021824202DD10464C1E02E0002C00D10160
+:103D000024A8420BDD421B6046059950430129015E
+:103D1000D010467843714609F0F2F801466A484CE3
+:103D20004300214069002E10D0012806D1109800D0
+:103D300068001900D40146109805E00A9800680050
+:103D40001900D401460A98016029E70128F5D0ED51
+:103D5000E7FFB51026012787B0044600009A0080CF
+:103D6000002905D057480078401E814200D0002726
+:103D700098000519039068690690E86B0590A86A99
+:103D80000490002F0CD100280AD0059906984018FD
+:103D90000001049909F0B6F81026102800DB064649
+:103DA0004A4841692030012901D0407C00E0C07BB5
+:103DB000009003980699205802904118049A05989B
+:103DC00010180818296D4118A0680190E269636C09
+:103DD0008018226BD2188018A26D80180818012153
+:103DE00000009B0080002800DD01463A48406880C2
+:103DF0000209F08AF8009948432B49497908412083
+:103E000021202800DC0146019882100298101A092E
+:103E10009A484300119200A050E0696B697043001A
+:103E200011C01A4843031110194361002F05D167CF
+:103E30006CE369DB19276BBB4200DA236BAF6ADBEB
+:103E40001B4B431B118362636C7343EE6B1B119B13
+:103E50001B4B431B11C363A36D2D6D9B105B1B4B51
+:103E6000431911016500009C00800023A5581946E4
+:103E7000002D00DD2946A15042691946002A00DDC7
+:103E800011464161826A1946002A00DD11468162AD
+:103E9000C26B1946002A00DD1146C163016D00297D
+:103EA00000DD0B46036582E600009C00002038011F
+:103EB00000206001002061010020900100208C01A1
+:103EC0000020A0E70000E0030020E2000020E10065
+:103ED0000020260A002080E7000030EA0000FFB53D
+:103EE0001026012787B00446002900009D008005A8
+:103EF000D0FF480078401E814200D00027142043A4
+:103F0000431D19039368680690E8680590A8680443
+:103F100090002F0CD100280AD006990598081800A7
+:103F200001049908F0F6FF1026102800DB0646F081
+:103F30004841692030012901D0C07B00E0407C006D
+:103F40009003980699205802904118049A059810F9
+:103F500018081829694118A06A0190E26A636B8009
+:103F600018226BD2188018A26B8018081801210043
+:103F7000009E0080002800DD0146E0484068800285
+:103F800008F0CAFF00994843DD49497908412021DA
+:103F9000202800DC01460198029A8010801A099AB4
+:103FA0004843142300115A43A050E06A6B687043E1
+:103FB0000011C01A4843031110194360002F05D1A6
+:103FC000676BE36ADB19276BBB4200DA236BAF68D0
+:103FD000DB1B4B431B118360636B7343EE681B1148
+:103FE0009B1B4B431B11C360A36B2D699B105B1B79
+:103FF0004B43191100009F008001610025A1582B3F
+:1040000046002900DD0B46A35042682946002A00DD
+:10401000DD1146416082682946002A00DD11468193
+:1040200060C2682946002A00DD1146C160016900AE
+:104030002900DD0D460561C1E5FFB504460020E419
+:104040001E81B0864664B28446641C64B2002C03B0
+:10405000DBAD48007884420DDB624614235A4300EE
+:1040600020039B0146D2188300401C40B2D150056A
+:1040700028F9DB2DE0029814230000A00080801EA8
+:1040800042B29E480021007860438518604658433C
+:10409000039BC618002A03DB994B1B789A4203DB6B
+:1040A00000238F00F3510FE09A4F6B00FF5E8B00EF
+:1040B0000093F75004980023874200DD3B1A009FCD
+:1040C00070461818F3518646521C491C6D1C49B2A3
+:1040D00052B20529DEDB6046401C40B2844605280A
+:1040E000B5DB704605B0F0BDFFB585B084210598FD
+:1040F000FCF7CFFD0446069D0C20029545430000C9
+:10410000A1008029460598FCF7C6FD2A468349018F
+:104110009008F01DFF002009E00C217F4A414389EF
+:1041200018CA79202A01D100220A72401C069988F7
+:1041300042F2D3744E2036ADE1401E0C2106904869
+:104140004376494518E8791028F5D068886066A854
+:1041500088A066002033E00C21019A41438A18D1DF
+:104160007910292BD0537917791B02A16E3B43C9D3
+:104170001A00D54942E167D77892783F02636E17FB
+:1041800043DA1B0000A2008000D552422346803350
+:104190001A60002902D1002A13D001E0032910DCA3
+:1041A000032A0EDC022902DA297A091D297219680C
+:1041B000022902DA297A491C2972297AF02211434C
+:1041C0002972401C02998842C8DB504860308378CD
+:1041D000606E224641B2A06E40B2FFF735FFA06E7E
+:1041E000012819DC002805D1012220460323616E35
+:1041F000FFF784FE45484069012801D0B27B00E00A
+:10420000327C002081000B190000A300805B694014
+:104210001C53439B1163500528F6DB1EE03F490900
+:10422000788A1E904219DB491E884205D10322205C
+:10423000460123616EFFF764FE354840690128019D
+:10424000D0B27B00E0327C002081000919CB6B40AA
+:104250001C53439B110B650528F6DB606E01281A81
+:10426000DC002805D1012220460323A16EFFF78937
+:10427000FD27484069012801D0327C00E0B27B0074
+:1042800020142141430B195B68401C53430000A4D8
+:1042900000809B1163500528F5DB1FE01D4909785C
+:1042A0008A1E90421ADB491E884205D1032220460D
+:1042B0000123A16EFFF768FD17484069012801D06E
+:1042C000327C00E0B27B0020142141430919CB6805
+:1042D000401C53439B110B610528F5DBE169A06984
+:1042E000E26A4018216A89184018216B4018616BF6
+:1042F0004018216C4018616C4018A16C40180021D6
+:104300002167A1676167E066297A00294CD1002006
+:104310000DE00000A50080E200002080E7000030F2
+:10432000EA000038010020E1000020260A0020E019
+:1043300003002081008C46625809194B69CF6BD26B
+:10434000188B6ADB19D2180B6DD218236FD2182282
+:10435000671422424313191B69A258401C9A1AA3DE
+:104360006FD218A2670A6D61466158511A626F894F
+:104370001861670528CEDBA06F4000A06748006089
+:10438000670020142141430919CA684968511AA2DB
+:104390006F8918A16781000000A600800919CA6B07
+:1043A0004969401C511A626F891861670528EBDB67
+:1043B00015E020670120142141430919CA684968A2
+:1043C000511AA26F8918A16781000919CA6B49693E
+:1043D000401C511A626F891861670428EBDB206F5B
+:1043E0000490A06F0499000208F0AAFD0146606ED7
+:1043F000039000020F188037A767606F04990002CE
+:1044000008F09EFDA16E00230A0282188032184631
+:104410006267002F00DB3846A067002A0000A70073
+:104420008000DB1346964F63677A69012A01D0A3A7
+:10443000676067944AA06FD36958430014A067600F
+:104440006F9269504300146067287A000707D022F2
+:10445000467832131F0092039A0698FFF7F4FB2167
+:10446000467831081FFFF7C0FBA06F6880606FA817
+:1044700080E06EB969484350214843C10B8248E14E
+:10448000660078012801D1C910E166FF22FF2900EA
+:10449000D8CAB22A72022801D0042804D1A879000F
+:1044A000090000A800800001001D04E0012803D1DC
+:1044B000A87900090001A8710698002800D04DE6EF
+:1044C0000598FCF70EFC0598FCF70BFC09B0F0BD55
+:1044D00010B514460A784B1C2146FFF719FE6A48AE
+:1044E000C47110BD10B50C460A460C214A43002881
+:1044F00007D167490846843008F03BFD63484472A1
+:1045000010BD63496348843108F033FD10BD4A781B
+:104510000B7812021A430270120A4270CA79C271F1
+:104520000A7A0272CA780000A900808B7812021AF7
+:10453000438270120AC2704A790B7912021A43023E
+:1045400071120A42714A7A82728A7A8272CA7AC275
+:1045500072827989791207120F090909010A4382C7
+:10456000717047F0B54B490646087801282AD004F7
+:10457000282DD130784949844600200C7824E04128
+:10458000008B1959789A780D466543AD18444F6DE4
+:10459000007D5F5B8C6F009F4215D9EB18414D2D5C
+:1045A00088AD00AB420FD900290DD00000AA0080D1
+:1045B0003E4B1B785B1E994208DA002A06D0611E2A
+:1045C0008A4203DA344801210170F0BD401C604585
+:1045D000D8D3F0BD30780B240B2800D80446002532
+:1045E00047E06800821950789178578C2C4A03462E
+:1045F0001278BC4653435B182A4F5B00FB5E634551
+:1046000005D929463046FFF78EF8641E31E0274B66
+:104610001B785B1E984207D18018254B4000C718B5
+:10462000203F1E23FB5E06E0002809D1204B5000EE
+:104630000000AB0080C7180223FB5E1E4F385E806F
+:10464000108342E0DB521E91420AD11A4A4800818F
+:104650001820391E23105ECB5E80108342D3DB0905
+:10466000E0002907D1134800220221825E415E90BA
+:10467000108142C8DB6D1CA542B5D3F0BD10B54119
+:104680000989000D4BC4065A58E40E0120A040824F
+:10469000435A5010BD80E70000380100209C000004
+:1046A00020E0030020E2000020260A00203802005B
+:1046B00020E10000200000AC0080020E0020E80491
+:1046C000002010B53021FF4808F076FCFE4830216C
+:1046D000303008F071FC10BDF8B5FB49FC4E0C46BB
+:1046E0002034002801D1888D02E0022808D1E07E24
+:1046F000F081C88D3082207A3072607A7072F8BD95
+:104700000328FCD1888E002839D0F078002802D008
+:10471000B069401CB0610D46898EB069814226D8CF
+:10472000AA8EEB4900270978EB4B824212D100296F
+:104730000ED1A88DF081E88D30820000AD0080A000
+:104740007D3072A07D7072A07D4000181AB061FFAC
+:10475000F7BAFF0EE0B7610CE0984205D2AA8E824C
+:104760004202D2002905D001E0984202D1FFF7AB06
+:10477000FFF0E7A88EB1698842C3D9288EF081681E
+:104780008EBAE7088EF081488EB6E710B50020FF9C
+:10479000F7A5FFCF49D248886310BD10B5CD4C6056
+:1047A00078002803D1FFF7F1FF0120607010BDC829
+:1047B00049002801D0032802D1C548001D03E000AC
+:1047C00000AE0080022803D1C24810300862704752
+:1047D0000128FCD1BF481C30F8E710B5031E00DAF1
+:1047E0004342BC4A4032547AA34200D100200029FF
+:1047F00009DD002801DA002010BD0921515681424F
+:10480000FADD401C10BD0029F5DA0028F3DC09218F
+:10481000515649428142F5DA401E10BDB24A890024
+:1048200051584143081200D5401C7047F0B5089F0D
+:10483000069E059DDC0714D08A1A441B904201DBBA
+:10484000944203DB0000AF0080904203DC944201FD
+:10485000DD104608E0AD1BED1C062D03D99042018A
+:10486000DC801B00E020465A070CD5421A88420023
+:10487000DC0A1A079CA24205DA7843C0104F434075
+:1048800018FA10801A9A0702D5884201DD401EF0FE
+:10489000BD8842FCDA401CF0BDFFB590480E4600D2
+:1048A0006A91B001881546027909924089089007FB
+:1048B0002000030140080B0A90002006900F931877
+:1048C00046A0E0FEF734F905900000B000800F9894
+:1048D000FEF7FCF8162148438749401800210B9148
+:1048E0000C91109000888C46C2B207921B9A002A45
+:1048F00037D00A9AD20734D00023C20722D0109AA8
+:10490000D2181279059C12195200B45EAA5EA71A39
+:10491000069A119C9A185200A25ED21B141E00DA4D
+:1049200054421B9FBC4201DBFF2F0BD10C9C491C46
+:10493000A4180C94002A05DA6446641CA4460B9C57
+:10494000A2180B9240085B1C0028D6D10129000058
+:10495000B1008008DD0C98FFF768FF0C9061460BF2
+:1049600098FFF763FF0B900798002784466046C0C6
+:104970000740D01098C01900790599411860480285
+:104980006AC06901AB1018081A0699119A7918497A
+:1049900000515E44000D91305F0E90285F099A86A9
+:1049A000460B98089907C30C9A009272460A9B0E10
+:1049B000990D98FFF742FF5249884202DCC94388AB
+:1049C0004200DA08462B5F0E9A1918891A4E4A914E
+:1049D0004203DD0000B200800E98C01A801807E084
+:1049E0004A4AD243914206DA0E985142C01A401AFE
+:1049F00030532A5301E030532953604640087F1C4E
+:104A000084460028B5D106980830C0B206900F98A9
+:104A1000401C0F901A99884200D25AE715B0F0BD99
+:104A2000FFB591B000200B9030480E46006A154645
+:104A30000188C27807920089069070200140080919
+:104A4000089029480E93403010901846CCE016216B
+:104A5000049048432A4940180000B3008000210A0E
+:104A60009109910F9000888C461B9A0590002A5955
+:104A7000D0089AD20756D00023C2071DD00F9AD271
+:104A80001812795400325F2F5FD71B119A125FD230
+:104A90001B141E00DA54421B9FBC4201DBFF2F0B8C
+:104AA000D10A9C491CA4180A94002A05DA644664B9
+:104AB0001CA446099CA218099240085B1C0028DB34
+:104AC000D1012908DD0A98FFF7B5FE0A9061460971
+:104AD00098FFF7B0FE0990049841B205480000B471
+:104AE00000800C46123000F0B0FF0A9915E0C609AC
+:104AF000002020E800005C01002098020020FFFF59
+:104B00000000FFFFFF7F14E0000000EC0000F0E970
+:104B10000000FF1F0000FF7F0000FFF76DFE42B2A4
+:104B20000B902146FE4800F082FF0020059F0D906B
+:104B3000F80755D00D990F98401800790699440050
+:104B4000119801AB005F0C90305F079A8446285F94
+:104B50008646099807C30A9A009272466146089BE6
+:104B60000C980000B50080FFF772FE0899C907177E
+:104B7000D01099497A002913D01099497A0B9A914B
+:104B80004205D11199095F81420ADD401C08E010FD
+:104B900099497AD14204D11199095F814200DA40E2
+:104BA0001EE149884201DD084604E0DE49C9438828
+:104BB0004200DA08462B5F62461918891ADA4A91D0
+:104BC0004203DD6046C01A801807E0D64AD24391FE
+:104BD0004206DA6046C01A5142401A30532A530145
+:104BE000E0305329530D980000B600807F08401C28
+:104BF0000D90002FA1D10E98401C0E901A9988425A
+:104C000000D22EE714E7FEB504460D46C848164606
+:104C10001946089A036BC06B1B18C54840300068E2
+:104C20006F461B18581C07C7324629462046FFF717
+:104C300045FEFEBDF8B5BE4C06464034606ABD4D2B
+:104C4000800709D5B84A4A3200922B79103A1146AA
+:104C500010393046FFF7D7FF606AC0070FD0616A8E
+:104C60000020032900D10920AF4A52320000B700CA
+:104C70008000926B79103A4000114680191039FF7C
+:104C8000F7C4FFF8BD3EB50C46AA49032801D10080
+:104C90002305E0012802D10023486B01E04B6BC8DB
+:104CA0006BA549A64A89786D4607C5A54AA549203E
+:104CB00046FFF7C2FE3EBDFFB599B00020229E0E12
+:104CC000909A48A14912380163490C4163006A0176
+:104CD000884907490F099181780891C08807909603
+:104CE00048189040780D901492104649E1FDF7FF66
+:104CF000FE0000B8008005909648199F00781621A4
+:104D000047430598119748439349401815901998BF
+:104D100031E100210B9115980A910C9100880D9AB0
+:104D20000690002A52D0099AD2074FD00022C3071A
+:104D300022D0159B9B181C79844DA4463B195C001E
+:104D4000864BBA351B5F2C5F1B1B64463C19640005
+:104D5000345FE31A1C1E00DA5C420D9DAC420BDA94
+:104D60000C9C491CE4180C94002B05DA0A9C641C6A
+:104D70000A940B9CE3180000B900800B9340085282
+:104D80001C0028D6D1012908DD0C98FFF762FD0C24
+:104D9000900A990B98FFF75DFD0B90714C059821D7
+:104DA0007848431299401841B26D482A3800F059AA
+:104DB000FE0C99FFF72DFD0E9021780598484312BF
+:104DC00099401841B20E9842B265482A3800F03B2B
+:104DD000FE00201390069884466046C0077ED013DC
+:104DE0009915984018007911995B4C0D1821781786
+:104DF000224A4395420CD12E2359430000BA008029
+:104E0000584B5A4A5A52391849007252514B002194
+:104E10006A00BA3399525149172209784A43AA1AAB
+:104E20000C2A0DD12E2359434E4B504AC9180A83E0
+:104E3000391849007252474B00216A00BA3399521F
+:104E4000381840001790305E0F9046486C00005FA5
+:104E500010904048089ABA30005F079986460B9830
+:104E600001AB07C30C9A00927246099B10990F98E8
+:104E7000FFF7FAFC0999C90720D01899497A002947
+:104E80000000BB00801CD01899497A0E9A91420903
+:104E9000D11799715E814213DD2F4A401CBA32113D
+:104EA0005B491E0CE01899497AD14209D1179971D2
+:104EB0005E814205DA284A401EBA32115B491C1154
+:104EC00053254B109ABA33195F0918891A264A10CC
+:104ED000532348195300781722864650431690856D
+:104EE000420BD1234A00E021E070462E2358431E96
+:104EF0004B1A52194A0020BA3210531698281A0C2D
+:104F0000280AD170460000BC00802E235843174B5E
+:104F1000194AC0180283114A0020BA3210530948B6
+:104F20001238026B914200DD0163426B914200DA5C
+:104F300041636046400884461398401C13906046C5
+:104F400000281AD050E76E010020FF1F0000F0E992
+:104F5000000060E8000038120020020E00206C09FA
+:104F600000200080FFFFE200002000EC0000900520
+:104F70000020E100002026F8FFFFFB491198097886
+:104F80004018074611901298401C0000BD00801A7E
+:104F9000991290884200D8C8E61498401C14901CBE
+:104FA00099884200D8B1E61DB0F0BD38B50446FB83
+:104FB000F785FBEF480094036BEF48002201785B14
+:104FC0001E491E1046FFF786FE38BD70B5E948C081
+:104FD0006A00280ED0E94B00221C461D46083428E2
+:104FE0003D2E1D401E41005A5262522A5432540036
+:104FF00028F7D170BD70B5E04DE1484C3D2C6A28D2
+:1050000062FDF77AF9FDF707FCFDF776FC00280052
+:1050100000BE0080FBD0DC480068FFF71FFE2C625A
+:10502000FFF7D6FF70BDD448406AD84A0021401E21
+:105030004300D1520028FAD1CE48D54A0078034621
+:105040001154401EFCD1CD48D21800781318597065
+:10505000401EFBD1CA484C388171C171704710B5F0
+:10506000FDF775F80320FDF79EFBFDF748FC0028CF
+:10507000FBD0C8485A220168C5488A3807F0B0FFFB
+:10508000FFF7D1FF10BDF0B5BB490022896AB94BCB
+:10509000C14D1B780000BF0080C14E491E99420BD4
+:1050A000D9CF1A4C007F002C5FEF5FE41B00D56462
+:1050B00042F78BA74200DA12190029EED1B1494C10
+:1050C00039002802D1886B824200DA8A63F0BDABD6
+:1050D00048806AB04A30320021401E4300D152005D
+:1050E00028FAD1A548AB4A0078303A03461154401B
+:1050F0001EFCD1A348D218007813185970401EFB2B
+:10510000D1704710B5FCF799FFFDF779FAFDF7F973
+:10511000FB0028FBD0A348F7220000C000800168F4
+:1051200092009F4807F061FFFFF7D4FF0120FFF7CF
+:10513000AFFF10BDF0B592488FB0C06A0D90934894
+:10514000001DC67A017E0A91817E0991C17F4907BF
+:10515000490F0891014620310A785207520F0792F1
+:10516000C27FD20806920978079AC9080591089962
+:1051700011430AD1417A49000C91407A40000B90CA
+:10518000002004900390029018E0089808993018C5
+:10519000401C0C90B018401C0B908448415C0000EF
+:1051A000C100800491805C039008988100814808C8
+:1051B0003009184968C9B20291910008184068C0C6
+:1051C000B20190002009E0714928390A5C521C0A9A
+:1051D000540A1D115C491C1154401C0D998842F25F
+:1051E000D3002568482F4640300E90A7E068486CF1
+:1051F00000005F0A99884210DDFBF7D8F900280209
+:10520000D16348283808E00E98406A022802D15F2E
+:1052100048283847555E48243847555C480999085E
+:1052200030005F0000C20080884210DDFBF7C1F94A
+:10523000002802D15748243808E00E98406A012817
+:1052400002D15448243847555248283847555148C8
+:105250002838405DB04235D3B04202D14D48005BA2
+:1052600021E00C99884222D2089800282AD0494887
+:105270004849005F10310A5F8446801A011E00DA37
+:105280004142069B994201DD1F2B08D1049B4149F5
+:10529000C018029B103158430012101805E03D4819
+:1052A0002838465560463B490000C300801031084D
+:1052B000530AE0394A10461030115B035BC91A11DA
+:1052C00053014638394F55075333482438405DB0B1
+:1052D0004238D3B04203D130480830005B22E00BA3
+:1052E00099884223D2079800282CD02B482A4908B5
+:1052F00030005F18310A5F8446801A011E00DA41CF
+:1053000042059B994201DD1F2B08D1039B2249C016
+:1053100018019B183158430012101805E01E48244C
+:1053200038465560461C49183108530BE00000C44C
+:1053300000801A4A083210461030115B035BC91A0C
+:10534000115301463C394F5507536D1C0D9885424A
+:1053500000D253E70FB0F0BDF0B589B00020019046
+:1053600000900B4801780C480791007806900C4893
+:10537000001D427F407F57077F0F084BC0084C3B02
+:105380000490587A002F1ED1400005900020039011
+:1053900025E0E2000020F0E90000E1000020A80183
+:1053A00000203CE8000028010020020E0020F60941
+:1053B00000200000C500802401002090050020C0CE
+:1053C000E70000200100200CE00000C019401C058F
+:1053D00090FF48FE4AC05D0390B800083280184034
+:1053E00068C0B202900020D86298719A78D00706FF
+:1053F000D0F84C0798255C6D1C2554401EFAD190BE
+:105400000708D5F34C0698641821184D786D1C4D8B
+:1054100070401EF9D1D0075DD0079CEE48641E662F
+:1054200000855FED48008801B249428D4202DAEB07
+:105430004A0121917185420000C6008001DD0120F2
+:105440000190E848008A854212DDE649281ACA6AB6
+:105450008018C862FBF7B7F8002802D10021DE4AA5
+:1054600002E0DD4A0021303A101941708170115577
+:10547000D948DC4A0119527A48789446904229D397
+:10548000604502D1D848855324E0059A904219D24C
+:10549000002F1FD0D448805F8646281A021E00DAEB
+:1054A0005242049B9A4201DD1F2B08D1039BCE4A36
+:1054B000C018029B58430012704490530000C7006C
+:1054C000800AE060464870DFE7C848C54B825BAAA7
+:1054D0001A9A5300224A708253002CA3D101E00192
+:1054E000200190C148807880077BD5C148069E087E
+:1054F000900798761E30184500B948445FB94800B7
+:105500008801B249428C4202DAB74A012191718482
+:105510004201DD01200090B448008A844218DDB2C7
+:1055200049201ACA6A8018C862FBF74FF80028059C
+:10553000D1B04AAA4812780021801805E0AD48A7EA
+:105540004A0000C8008000780021303A1018801905
+:105550008170C1704170A849A2480978A44A4018D6
+:105560008119527A88789446904239D360450AD19D
+:10557000089A1278012A03D0A14A1288102A02D868
+:105580009C4844532CE0059A904219D2002F27D012
+:105590009848405F8646201A021E00DA5242049B59
+:1055A0009A4201DD1F2B08D1039A91498018029A73
+:1055B000504300127044485312E060468870DFE7A1
+:1055C0000898007801280000C9008003D08D4800A9
+:1055D00088102807D8884A844B505B201A585300FB
+:1055E0002088705053002E88D102E0FFE701200090
+:1055F000900198002804D00098002801D0012000D4
+:10560000E000207B49C87109B0F0BDF0B57E4800CC
+:1056100022816A1346774C6281794805787B484934
+:105620001EA9421FDD4C00794FA4464E1B3C5F76FD
+:1056300000BF5FE41B00D56442C78BA74204DA6C4D
+:105640004F1B197C89641C7C81674F0000CA008055
+:10565000644630373C5FBE5FA41B00D564426C4E8D
+:1056600020363688A64200DA12190029DAD1624CB7
+:10567000A16B8B420DDA2178491CC9B221700A292D
+:1056800015D96549654D09782D7829430FD1A36354
+:105690000DE0058B6D189D4207DD002525700D017D
+:1056A000691AC9180911A16301E000212170A16BD9
+:1056B0008B4201DD591A00E000210423E356022643
+:1056C0000125002B0CD0012B1DD0022B2CD0032B3D
+:1056D0000000CB008033D1038B8B4243DA838B9362
+:1056E0004240DD05E0038B8B4204DA838B93420159
+:1056F000DD257123E0038B8B4205DA818B91420219
+:10570000DA032121711BE0002118E0038B8B420595
+:10571000DD838B934202DD002222710FE0038B8B2D
+:10572000420CDA838B934209DA267108E0038B8BF3
+:105730004211DD838B93420EDD00212171E1612155
+:1057400079012902D02179022915D1408BE169889C
+:10575000420FDD65710000CC0080F0BD038B8B42F1
+:10576000F0DA838B9342EDDDC5E7038B8B42E9DDF5
+:10577000818B9142E6DDE2E76671F0BD0020607149
+:10578000F0BDF0B522488DB0047827480578274849
+:10579000017F4907490F0591007FC0080490234805
+:1057A0002030807A174E0190307A002904D14000D1
+:1057B0000690002003900CE04018401C06900C4915
+:1057C0000598085C039005980831800040184068EF
+:1057D000C0B202901748007800280000CD00800277
+:1057E000D03079032801D0FFF71AFF064800218145
+:1057F000818078012821E00CE00000F609002002F9
+:105800000E0020460100205C01002038120020100C
+:10581000E70000E2000020E0010020F0E90000C005
+:10582000E70000900500203F01002040010020E13A
+:1058300000002040E800004101002004D003280AB5
+:10584000D10198002807D1A5482646815D491C81D1
+:1058500055761EFAD10AE0A248A14900782E4600EA
+:1058600000CE00800A1890194178491C4170761EBC
+:10587000F9D1002030E000272AE09A497000603119
+:10588000085E9A49761CCA89904220DD8889401CAE
+:105890008881FAF7ACFE00280AD1924AD1194870E3
+:1058A00088709149D05509785118079A89180BE0EA
+:1058B0008C4A00203032D119487088708A49D055FE
+:1058C00009785218079951188870C87048707F1C61
+:1058D000A742D2D30798401C0790A842CBD3834855
+:1058E000807802280000CF008004D003287FD101F7
+:1058F0009801287CD17F4900200C9173E07B4A7A83
+:10590000491278891809180B91794A8978127A0A0C
+:1059100092914266D3914216D10C9A1278012A03D1
+:10592000D0754A1288102A0ED801466143002273AE
+:105930004F06E06D4E4B006036F65A491CFE52523F
+:105940001CA242F6D34DE0069A91422AD205990054
+:105950002947D00146614300221BE0634B4E0060A3
+:1059600033664FB6469B5FBE5F0000D00080B446F2
+:105970009B1B1E1E00DA7642049FBE4201DD1F2FD4
+:105980000DD1039F7646DB19029F491C7B431B12F6
+:105990005C4F6344BB53521CA242E1D324E00B9AF8
+:1059A0000A999170401E1FE00C990978012903D0D3
+:1059B00053490988102917D80246624300230EE094
+:1059C0004B4E51006036775A4E4E521C765ABE1BD3
+:1059D000474F60377E5200264A4F5B1C7E52A342DF
+:1059E000EED30B9A00219170401CA84289D300008D
+:1059F000D100800DB0F0BDFFE700205DE03D493EE5
+:105A00004A091809914978127A0892914253D39120
+:105A1000420DD1014600223B4F06E0354E4B00605F
+:105A200036F65A0919FE52521CAA42F6D343E00632
+:105A30009A914229D2059900293DD0014600221BA6
+:105A4000E02C4B4E0060332F4FB6469B5FBE5FB4D9
+:105A5000469B1B1E1E00DA7642049FBE4201DD1FDC
+:105A60002F0DD1039F7646DB19029F09197B431B3B
+:105A700012254F0000D200806344BB53521CAA423F
+:105A8000E1D31BE0099A08995170401E16E00246C6
+:105A900000230EE0184E51006036775A1B4E121943
+:105AA000765ABE1B144F60377E520026174F5B1C80
+:105AB0007E52AB42EED3099A00215170401CA042A5
+:105AC0009FD399E730B54B10C907490F0F258D407B
+:105AD000C45C1207120FAC438A402243C25430BD4B
+:105AE000CA07520F4910405610410007000F010726
+:105AF00001D5103840B270470000D30080C60900BD
+:105B000020E20000205C01002010E70000E001001E
+:105B1000205C0E002010B5F9484069F9490870F979
+:105B20004980204871F5484030408B8007C00F887D
+:105B300071F548C06A002801D004F09AFE10BDF14A
+:105B400049012008747047EF4910B51C31EF4A092C
+:105B50005C1170EC49EE4A1F31095C1170E949EDA6
+:105B60004A2231095C117004F0BEFDEB4908601057
+:105B7000BDF8B50E4601461546E84C03200000D49A
+:105B80000080FAF713FDFCF7BAFFE4480121066034
+:105B9000204604F037FBFCF785FAFCF765FDFCF7BF
+:105BA000E5FE0028FBD0DF480068FFF738FA012146
+:105BB000204604F081FBFCF701FB0320FCF72AFEE2
+:105BC000FCF7D4FE0028FBD0D84801680320FFF77B
+:105BD000A2F8E90908222346D54801F029FA07234B
+:105BE000DB01F727BF005C22D14E00201918715C41
+:105BF0002154401C9042F9D3CE4900200B5C16186A
+:105C0000401C0000D50080A3555A28F9D3E819C1DB
+:105C100009D932E31DD209F933204601F00BFAF815
+:105C2000BDF8B50446B848C16B012904D1006C0029
+:105C30002801D0012700E00027200601D500200917
+:105C4000E0384604F0DDF80B210840484002460ADF
+:105C50004200D0084320430546B248B749016000DE
+:105C60002F07D00320FAF7B4FCFCF734FF0020FC28
+:105C7000F748FFA80703D50121AB4804F01FFBE854
+:105C80000703D00121A8480000D6008004F0BFFA25
+:105C9000A14EF06A002805D0280703D50121A348AA
+:105CA00004F0D6FB002F6CD0F06A00280ED0280735
+:105CB0000CD59D4CA348206001219C4804F0C8FBF2
+:105CC000A14820600121994804F0C2FBA80758D0E0
+:105CD00090494022088B104308830120FEF7CEFD37
+:105CE0000020FEF762FD00240320FAF774FCFCF7A5
+:105CF000F4FE0020FCF708FF8B499148086081788A
+:105D0000864A1170C178864A117000790000D70068
+:105D1000808549002C087003D1FFF72FFAFFF7DDCB
+:105D2000F9FCF7C7F9FCF7A7FCFCF727FE0028FBF6
+:105D3000D080480068FFF77AF9B06A8049401E8435
+:105D40004B42008A5EDB8E9A4201DD00240DE000AA
+:105D500028F4D1641C012C08D17E4A7B49FFF7123C
+:105D6000FF7D4A7A490120FFF70DFF06F0F1FC02A2
+:105D70002CBCD30020FEF784FD67494022088B909D
+:105D8000430883FCF7AFF86F488178634B1C3319E5
+:105D9000700000D800806D498A785A706D4A9478F6
+:105DA0009C70C478DB1C1C70CC785C70D4789C70C0
+:105DB00003795A4822300370097941701179817052
+:105DC0000020FFF7CDFE002F05D00020FCF7A1FE3C
+:105DD0000020FCF787FEA80703D0FFF7D1F9FFF7F3
+:105DE0007FF9280704D5F06A002801D0FFF746F9AB
+:105DF0002846F8BDFEB55A485B4E8446C343002092
+:105E0000864601900246464D009018E0574C5100DE
+:105E10004C4F645E795A0000D90080611A3C27F724
+:105E20005F09B2BC4203DC3E27F75FBC4202DA02E4
+:105E300021084309E08C4500DD8C468B4200DA0BDB
+:105E400046521CA96A9142E3D86B6A46498C46CEF9
+:105E500043464940315B1E464C5A003B4FA45EBA54
+:105E60005AA21A0227CF5F12B2BC4203DC0427CF2A
+:105E70005FBC4204DA724604231A43964607E09454
+:105E80004500DD9446964200DA1646002BE2D12505
+:105E90004A40320292526A920721D50000DA00800D
+:105EA000324A9446D643EA6A1AE0521E334C5300F3
+:105EB000334FE45EFB5AE31A0827CF5F1BB2BC42A4
+:105EC00003DC0A27CF5FBC4204DA019A10231A438D
+:105ED000019207E09C4500DD9C469E4200DA1E468A
+:105EE000002AE2D1029A526AD20757D01F4FEB6ABA
+:105EF000FE4351E05B1E234C5A00234DA45EAA5A78
+:105F0000A21A0E254D5F12B2AC4203DC10254D5F84
+:105F1000AC423BDA00990822114300913EE00000B8
+:105F20000000DB008070E600005E010020C8010078
+:105F300020F0E90000A8020020A9020020AA020027
+:105F400020B002002048130020200100202401007E
+:105F500020260A0020020E002080EE000000F10042
+:105F60000080F3000080E7000000F6000080FA00E7
+:105F700000FF7F000080EA0000900500206C09000F
+:105F80002098010020A8010020A0010020B00100FD
+:105F900020974200DD1746964200DA1646002BABEA
+:105FA000D1022808D00000DC00807146042905D009
+:105FB0000199102902D00099082906D17146084399
+:105FC0000199084300990843FEBD0028FCD0012038
+:105FD000FEBDF8B5FC4D06462B780127FB4C07F0BB
+:105FE000B6F805040F7A7A6C7A000020FFF72AFED3
+:105FF000002802D00420287000E02F70EE646AE0D0
+:10600000FFF702FF0221002801D1297063E0C106D9
+:106010000A0F48D02A8BED4BD2061B68D20FEC4FEB
+:106020001A433B78012B02D03B780000DD00800250
+:106030002B01D1012300E0002313434ED16A785293
+:106040001C6A700122AA560F2A47DD0F226A70EAE5
+:106050006C638FB21A9A4240D9E04AE04B12781B27
+:106060007800241A4306D1820701D50B2402E040B0
+:106070000700D50224880F05D003F0B8FD002801E1
+:10608000D108200443200028D080210843FFF7DCFA
+:10609000FDEE64A878401CA8700220285603280151
+:1060A000DD052000E00420287017E06878401F001C
+:1060B00000DE0080687001202856002810DA0020D9
+:1060C00068700DE0608F002804D0E86C618F301A92
+:1060D000884203D8C2480078002801D0EE642F70AF
+:1060E0002878F8BD7047F8B5B94D0126E878002842
+:1060F00002D1EE70FFF72AFDBB48FCF791FC0024AB
+:106100002C63BA486C6303F059FEFBF7F1FEFEF70F
+:10611000BFFBFCF7EFFF03F00FF8FCF797FDFAF772
+:1061200083FA03F0F3FCB2480146B4312964E86312
+:106130005A3969640000DF0080AF49A964FCF77D2B
+:10614000FC286CFCF775FCE86BFCF77CFCA24800B3
+:106150008F002803D00020FFF743FF02E00020FF5C
+:10616000F778FDFEF7CEFFFFF71CF8A44FF86A00A2
+:106170002801D0FEF794FFA2486C73C06B0128156C
+:10618000D19F484030418B490705D4408BC007025E
+:10619000D0A879C0070AD000F057FFFBF7E0FE0057
+:1061A0002803D1FCF7A3FC002800D06E73AC636C0D
+:1061B00072AC72FAF7CFFA6C740000E000806C7574
+:1061C0002C8390486C83406EC0B2FCF770FC0020BA
+:1061D000FEF76DFB0020FCF7CCFE0020FCF79BFFD8
+:1061E000EC71F86A002801D004F064FB2E74F8BD4D
+:1061F00010B5FBF7AAFE78490020C87110BDF8B5AC
+:10620000764D002406462C7102F0ADF8074662B6C2
+:10621000E879282806D27C4980000958304688470A
+:10622000044604E0FBF791FE0020E871082472B6F2
+:10623000E00705D0FCF7B8FB012801D1C00700003A
+:10624000E100800443002CE4DBF8B202F092F86E27
+:10625000484030008B002802D1FAF7EDF910E0FB3E
+:10626000F783FE002803D0EE62FAF7ECF908E06647
+:106270004AE96A526D2846711A914201D9C662EB09
+:10628000E7698B20460843F8BDF0B500225E4C60FC
+:106290004F0BE05300604D604EED5AF65A45434EA9
+:1062A00043AD19FE5AAD19FD52521CA36A9342F038
+:1062B000D8002212E053000F27574DBF01574E5D03
+:1062C000199E190000E20080ED19F619AD8BB68B0E
+:1062D00045434E43AE19534DEF5AF619EE52521C38
+:1062E000636A9342E9D8F0BD0246002010B5C0436E
+:1062F00000290CD0012903D0022911D101210CE081
+:10630000002A01D1002100E00146012005E0012A18
+:1063100001D1002101E001460020FFF7B8FF10BDC8
+:10632000304C00206074FCF70DFC607CFFF731FC02
+:10633000FEF73FFFFEF7EDFE10BD70B5294C344D62
+:10634000218B8A0603D4CA060000E3008001D4C969
+:10635000053AD529490978002936D1A16A884232FF
+:10636000D9696D0818A0620020FCF7D7FB686EC0E1
+:10637000B2FCF7A4FB00256575607C00280CD000FA
+:1063800020FCF7E2FB607CA07465740020FFF7033B
+:10639000FC617CA07CFFF7AAFF0020FEF78FFA00CB
+:1063A00020FEF723FA0020FCF761FC0020FCF7F93F
+:1063B000FD0020FCF7E5FD0020FCF7B4FE208BFF7C
+:1063C00021F1318843208370BD696D08180000E415
+:1063D0000080A06270BD10B5FFF7B4FF044C208BA5
+:1063E00060830D488069012823D1E07135E0C80140
+:1063F000002080EA000058010020600100203F01D9
+:10640000002040010020316F0000E00300209412C2
+:10641000002024170020F0E9000070E600003CE0B6
+:1064200000009005002000F6000080FA00006C09D2
+:106430000020F848407E012807D101F028F8032801
+:1064400001D1212006E00E2004E001F020F803280D
+:1064500000D00000E500800920E0710020E072011A
+:1064600020C00710BD70B506460D46FBF7D1FEEC07
+:106470004CEB48E0636064FCF7EFFA032D04D103B2
+:1064800020FCF7F2F904200AE0012D04D10120FCE0
+:10649000F7EBF9012003E00220FCF7E6F90220A067
+:1064A000730120266370BD10B5DF494969FFF7DA33
+:1064B000FFDC4A0521D17110BDF1B5DB4801270190
+:1064C0007884B001293DD9002525E03C461BE00C2D
+:1064D00020D74A604380180000E600800390017ACC
+:1064E0000C2068438618307A81420ED90C2231463E
+:1064F000684606F0D9FD0C223046039906F0D4FD1B
+:106500000C226946039806F0CFFD641CC848007849
+:106510008442DFDB7F1C6D1CFFB2EDB2C448017802
+:106520008D42D5D3027804998A420DD9C14B049A81
+:106530000C246243197AD218127A89088A4201D34C
+:10654000002100E00499017005B0F0BDB848BA49D7
+:10655000007800280CD0B948007801280000E70036
+:106560008008D1B2484079020701D4C00607D5B5EA
+:1065700048408E03E00888002801D0401E08807043
+:106580004710B5FFF7E5FFAE480078022801D1FFBC
+:10659000F798FF10BDF8B507460124FCF716FA017D
+:1065A0002844D1FBF7C7FCA84C00262670FAF7F95F
+:1065B000F901209E4D2070A87B042802D103206998
+:1065C0006C05E0696CC00701D0012000E00220FEEC
+:1065D000F7D1FBFEF718FF96498A690320C407012B
+:1065E0002A0000E8008023D19A4A1278012A1FD09D
+:1065F0006A7A002A1CD12A7A012A19D0964A12787E
+:10660000012A15D06A6B8968BA1A8A4210D8EE71CD
+:10661000287908244006400E2871A97A814201D0C9
+:10662000A8720C24FFF7AFFF844806706E7200E07A
+:10663000E8712046F8BD70B50546FBF765FD7B485F
+:106640007C4CB4302064A064FCF709FAFCF73EF8F7
+:1066500007206563E071012070BDF8B50546032091
+:10666000F9F7E6FFFCF70000E9008066FA724E00D9
+:10667000241C36F71C611E0320F9F7CCFFFCF773CE
+:10668000FA002D02D003F081FF305504F006F838EF
+:106690005504F020F8684922310855641C032CE9A0
+:1066A000D3654C208B400607D5617C0320491EF939
+:1066B000F7B1FFFCF758FAF8BD0020FCF754FA20B8
+:1066C0008B800603D50220F9F7B5FF00E00020FC1F
+:1066D000F733FAF8BDF8B5574E0021327C574B0C12
+:1066E00046012A08D0B26B1D6A821A0000EA0080B7
+:1066F000AA4275D95B4A1278002A71D1B063002092
+:106700003074594D0AE0594F4200BA5E9F6ABA424E
+:1067100002DCDF6ABA4200DA491C401CAA6A8242E3
+:10672000F1D84748406A454F2237884232D2FBF7BA
+:10673000F0FC4349C86B012811D108464030428B18
+:10674000520705D4408BC00702D0B079C00706D0ED
+:10675000086C002803D00120FFF784FF0FE003F04E
+:1067600017FF3649727C1C31885403F099FF334976
+:106770000000EB0080727C1F31885403F0B0FF7181
+:106780007C78542F48717C1C30405C3A490A7890E0
+:106790004202D00870FEF723FD2A488069012803D1
+:1067A000D0F9F76DFF01283AD10020264B0AE032DC
+:1067B0004A4100515E5A6B914202DC9A6B91420051
+:1067C000DA641C401C696A8142F1D8186BA0422629
+:1067D000D2D86B002807D0186C002804D00020FF06
+:1067E000F743FF0AE01BE003F05DFF1549727C1FD1
+:1067F00031885403F00000EC008074FF717C785401
+:106800001149707C1F4A1F31095C14781E4BA1424C
+:1068100003D13C5C1D78AC4204D01170385C187018
+:10682000FEF790FCF8BD7CB5074C050034D0A07B8A
+:106830002146496C042828D103202BE0000040E8C1
+:10684000000094120020C801002070E600003F0103
+:106850000020E0030020A00000209C00002080E732
+:1068600000005F0100206301002062010020400160
+:106870000020F0E90000900500200000ED0080A855
+:106880000200206C090020A9020020AA020020C0FA
+:106890000701D0012000E00220FEF77BFAA06CFE89
+:1068A000F7FCFBFAF78DF8002D01D0FEF7BBFDFEDB
+:1068B000F7BAFFF72292006846A16CFAF7A2FA60D5
+:1068C000216846FAF7A6FA054601466846FCF760D5
+:1068D000FF29466846F9F7F6FF2846FDF7ECFE2942
+:1068E000466846FCF7DFFF024629466846FDF79CEE
+:1068F000FE6846FAF7A2FAFFF752FEFF480078005A
+:1069000000EE0080002801D0002002E0207940063F
+:10691000400E2071FB480078002803D020798021A8
+:1069200008432071684602F0FFFEFCF7D9F9002009
+:106930007CBDF8B5002600F0ADFBFCF7FDF8F24D8C
+:106940000446687B01280AD1FCF7FEF8002806D12E
+:10695000002C04D16873FEF7FAFBFEF748FC288B85
+:10696000EA49EB4FC20506D5FA6C3B6DD21AA2423A
+:106970000ED988432883687D012816D1386C0028F9
+:1069800013D1F86C0000EF0080A04205D2288B08DC
+:106990004328831FE00120F8BDFCF7D8F8802100D0
+:1069A00028288B01D0084300E08843288313E0FCAB
+:1069B000F7CDF8002809D1F86CA04206D3FBF7F711
+:1069C000FA002808D0288BC00605D40020E87428D7
+:1069D000750120A87501263046F8BDF3B581B00FCA
+:1069E000460124FCF706F8012855D1FBF7B7FAC990
+:1069F0004EF06BC64D012817D130464030418B49CF
+:106A00000705D4408BC00702D00000F00080A879B1
+:106A1000C0070CD0FFF792FF012808D1002F02D049
+:106A2000BF48FCF72AF81520E871C007FEBD288B87
+:106A300068833846FFF701FFBA48B349027800205F
+:106A4000012A03D0AA7A2B799A4213D02A79AA7202
+:106A50000A78002A02D1E8710C240DE0B248407E89
+:106A6000012801D10E2000E00920E8710024012056
+:106A7000E87201E00824E87108786872F069AA4EAB
+:106A8000012803D1AE640198FFF736FEA848000044
+:106A9000F10080008F012803D1AE640198FFF7CD8B
+:106AA000FA2046FEBD00219DE710B59A4C0120E07A
+:106AB00073FBF740FB206CFBF7E8FFFBF71DFE10B4
+:106AC000BD70B505469A48934CB438E0636064B431
+:106AD000302064A0649848FBF7D2FFFBF7B7FBE0D7
+:106AE0006BFBF7D8FF0320FBF7DDFE22202563E0D8
+:106AF00071012070BD012175E770B5054688488099
+:106B000069854C012805D18948B438E0636064FB8D
+:106B1000F7C1FF0000F20080864820648848A06426
+:106B2000FBF70BFB206CFBF7B3FFFBF7E8FD0A203C
+:106B30006563E071E17A0520002900D1012070BD74
+:106B400010B5FBF75EFF01281DD1FBF70FFA754862
+:106B5000C06B724C012812D172484030418B4907FA
+:106B600005D4408BC00702D0A079C00707D0FFF73B
+:106B7000EAFE012803D11520E071C00710BD0B20EB
+:106B8000E071002010BD012010BD70B5634D0446BA
+:106B9000296CA86CA96428640000F30080FBF77AD4
+:106BA000FF614EB069012811D1286B7168201A88E5
+:106BB000420CD96348FBF768FF0020E873FBF74BF2
+:106BC000FB7069FBF774FE23202C6305E0FBF7B72D
+:106BD000FAFBF797FD0C206C63E8710120C0077089
+:106BE000BDF3B581B00E4600240846FFF72DFE50D8
+:106BF000484B4D0078012803D0A87A2979884202B1
+:106C0000D02879A8720424484880690027012831D7
+:106C1000D141480078002837D134E010200000F43A
+:106C2000008000E00B20E8713D4800786872288BF6
+:106C30006883FBF7EBFE0127012842D1FBF79BF9A4
+:106C40003B4EF06B012825D130464030418B49073F
+:106C500005D4408BC00702D0A879C0071AD0FFF72F
+:106C600077FE012816D13248FBF711FF042C00D122
+:106C7000EF721520E871C4072FE000F030FC032804
+:106C800003D000F02CFC042801D1EF71CCE7002EDA
+:106C9000C8D0C5E70198FFF77DFBE879002802D14D
+:106CA00024480000F50080FBF7F4FEF0690128029B
+:106CB000D10198FFF72DFD2348008F01280FD10146
+:106CC00098FFF7C5F90BE0E8793C43002800D000B5
+:106CD000272F73002E01D0122000E00D20E8712034
+:106CE00046FEBD002181E770B50646FBF791FE0127
+:106CF000284DD1FBF742F90E4DE86B0B4C01282BC8
+:106D0000D128464030418B490705D4408BC007024B
+:106D1000D0A079C00720D0FFF71DFE01281CD11597
+:106D20002017E03F0100200000F600804001002015
+:106D3000C80100200001000070E60000316F000073
+:106D40009602002040E800004813002080EA00007E
+:106D50009778000024170020E071C00770BD30460E
+:106D6000FFF71DFBE869012802D13046FFF7D3FC8D
+:106D7000E448008F012802D13046FFF76BF9207BF1
+:106D8000012803D10020E071082070BD0B20E071C4
+:106D9000002070BD012070BD70B50546FBF763FA99
+:106DA000D94CE06BFBF783FED84841690000F7003F
+:106DB00080032904D10320FBF784FD04200AE0406E
+:106DC00069012803D1FBF77DFD012003E00220FBD0
+:106DD000F778FD0220A073256370BD70B50546CB22
+:106DE0004CCC48E0635A3060645A302064CA48A0F2
+:106DF00064CA48FBF753FE2846FFF7D0FF0F20E098
+:106E000071E17A0520002900D1012070BD10B5FB89
+:106E1000F704FE012820D1FBF7B5F8BD48C06BBBD5
+:106E20004C012815D1BA484030418B490705D44060
+:106E30008B0000F80080C00702D0A079C0070AD0FC
+:106E4000FFF790FD012806D1B748FBF72AFE152071
+:106E5000E071C00710BD1020E071002010BD0120BE
+:106E600010BD10B5AB4CE26B616C6264E163226CE7
+:106E7000A16CA2642164FFF794FF1120E071C007A8
+:106E800010BD0121B9E670B50646FBF7C9FD012822
+:106E90003AD1FBF77AF89F4DE86B9D4C012815D14C
+:106EA00028464030418B490705D4408BC00702D0AB
+:106EB000A079C0070AD00000F90080FFF755FD0156
+:106EC0002806D19948FBF7EFFD1520E071C0077047
+:106ED000BD3046FFF76BFAE869012802D13046FF62
+:106EE000F721FC8B48008F012802D13046FFF7B90B
+:106EF000F8207B012806D10020E07108248B48FB94
+:106F0000F7D2FD04E01020E071002400E00124200D
+:106F10004670BD10B5FBF7D1FA8048406CC0B2FB9B
+:106F2000F74AFD7C481421C171C17A012903D100BF
+:106F300021C172052010BD012010BD0000FA0080A3
+:106F4000F8B5FBF772FD01283ED1FBF723F8FBF7FC
+:106F500011FE724C0090208B15278006FE0700283A
+:106F60000FDAFBF70FFE6E490025002803D1CA6C2B
+:106F70000098824219D2086C012813D1E07C0228C3
+:106F800002D2E7713046F8BD896C207D814203D979
+:106F9000E574401C2075F4E7208BFF210131084384
+:106FA00020830EE0208B8021F9E7FBF7E3FD617B76
+:106FB000012906D1002804D16573FEF7E6F8FEF733
+:106FC0000000FB008034F9E5710820F8BD0120F8CD
+:106FD000BD70B5534C0025208BC105002902DAE5B0
+:106FE00071082070BDC0060ED40220FDF7A3FC027C
+:106FF00020FDF737FC0220FCF710F80120FBF772A8
+:10700000FE208B10213EE0607D002812D10220F985
+:10701000F73EFBFBF7BEFD4348806EC0B2FBF78A2C
+:10702000FD012060750320FBF7E7FF0320FCF7B6A6
+:10703000F826E00320F9F72BFBFBF7ABFD607CA003
+:1070400074401CC0B20000FC00806074032804D3AC
+:10705000A07D002800D001206074617C0320491EBF
+:10706000F9F708FBFBF7AFFD607CFEF7D3FD617C11
+:10707000A07CFFF77AF9A575E07C4021401CE07404
+:10708000208B08432083208B20210843208313205A
+:10709000E071C00770BD10B5FFF735FE2249044608
+:1070A000CA7B002AFCD020484069496CFDF797FE56
+:1070B000FEF7DEF92148FBF7FEFC204610BD19491A
+:1070C0000872704710B5FAF786FF0000FD008010C7
+:1070D000BD10B5FAF75AFF10BD1648B4307047100E
+:1070E000B5FBF7F5F91248406CC0B2FBF76EFCFB3C
+:1070F000F7A3FC0128FBD1FAF754FF10BDF8B51F28
+:107100004605460C4656180AE0A0B23A462946F90A
+:10711000F728FA002801D072B6FEE78035641CA675
+:1071200042F2D8F8BD000080EA0000C801002070DB
+:10713000E600009412002024170020977800003108
+:107140006F000010B505F0A9FB05F0D5FB9A4800CB
+:1071500000FE008005F002FB012005F0F2FA05F0C8
+:1071600059FBC02496482179017061794170954896
+:10717000807B002804D005F022FE9149891E08700A
+:107180008F4803F02CFD03F00EFDA079C10705D157
+:10719000800701D4042007E0022005E001218007D8
+:1071A00001D4052000E0032003F031FD03F09AFC38
+:1071B00085490868A043086082482030007D072286
+:1071C000520201280DD002280AD1086880231843F2
+:1071D00008607E480000FF008081689143FF31FF16
+:1071E000310231816010BD08682043086079498808
+:1071F000689043FF30FF300230886010BD10B50545
+:10720000F04AFC754C2070C0B205F052FC207805A5
+:10721000F077FC10BDF8B505F0FFFA7048002606BF
+:107220008005F0EFF86E4F01243880A407A66001B6
+:1072300025A561FFF7E3FF6448817ECA07694922FB
+:107240006802D10A43226006E08A432260817E09F7
+:107250000949002943A161644C0001000080082213
+:1072600025703988064611433980574F0021BF1ECB
+:10727000604A79701170C07C5F4DC008C0002870F2
+:10728000307D5D490870707D5D490870707E317E8B
+:10729000000208435B490880F07DB17D000208438D
+:1072A00059490880B07C5849087048482030C07C53
+:1072B000574908705748C0885749088000F073FD47
+:1072C000F9F719FA2078002806D0FEF761FF02F0DE
+:1072D00072FC0120FFF7FDFE50492878087000017C
+:1072E000010080012005F049FA707C042108404C1F
+:1072F0004EC0B21024204330707978012003F0BCD6
+:10730000FC3178002003F0B8FC03F074FC464D2CEF
+:107310007004F0FDFC4549002008703EE005F08156
+:10732000FA287800283ED010283FD0202801D10428
+:10733000F001FB002003F0A4FC3070C0B2C00701D4
+:10734000D001F099F830780107E8D53021084028BD
+:1073500070002C2DD0102C2ED0202C01D104F0F157
+:10736000FB0120000102008005F00AFA28780028BD
+:1073700027D0102828D0202801D103F08BFD797860
+:10738000EF200140012003F07AFC3078C7212C78EF
+:107390000840C0B220433070C1B2002003F06FFC3F
+:1073A00004F0B0FD04F0E6FDBBE700F0FDFDC3E72F
+:1073B00004F08AFDC0E700F0DDFED4E704F088FDAC
+:1073C000D1E700F0ABF8DAE704F0A4FCD7E700005F
+:1073D000102700001A02002000E6000000201440E0
+:1073E000001014400000144000010300802403003A
+:1073F00020EC020020FC02002000008000EA0200D5
+:10740000202802002029020020220200202302005E
+:107410002030020020320200202402002025020039
+:107420002080E7000038020020CD0100200003008A
+:1074300020EB020020FF020020F948C06A0028006B
+:10744000D00120F8490B3048837047F8B5F54D005E
+:1074500026EE83FFF7F1FF03F0DDFB092003F004C4
+:10746000FC03F0CDFB20210A2003F00BFC000104FB
+:1074700000804021022003F007FC0021032003F0DC
+:1074800003FC0021042003F0FFFB0021052003F092
+:10749000FBFB0021062003F0F7FB0021072003F08F
+:1074A000F3FB0021082003F0EFFB0021092003F08B
+:1074B000EBFB0B2401277F02A0B2002103F0E4FBC9
+:1074C000641CBC42F8D305F028FA6E740020D7493A
+:1074D000EE730F224300401CC0B2CA540B28F9D3EC
+:1074E000D4480078002804D0FEF7A4FB0020FFF762
+:1074F000FAFD0001050080D049687B08706E7101BB
+:10750000202870CE48AE730680CE48068000F03A40
+:10751000FE0220E87205F0C7F82862CA484068CA2F
+:10752000490860288B05F033F9F8BDC849002008E8
+:107530007090E7BE48807A704770B5012505F0B3BA
+:10754000F80646C3480478B848C06A002806D00246
+:10755000F0B1FB002800D001200019C4B2BE4AB32C
+:1075600049002C02D11078400700D40E62887A01BD
+:107570002805D1887B0443000106008021D100F05A
+:1075800004FE1EE002280ED1002C11D11078400715
+:1075900017D5086A8A8A301A904212D90320887255
+:1075A000C88A08830DE0032809D14878044303D032
+:1075B000002500F0F0FD04E01078400701D400251C
+:1075C000DDE7284670BDF0B59A4A91B0117AA44F14
+:1075D00049430791517A494306913978109188427D
+:1075E00000D908460025294601AAFF235354491C07
+:1075F000C9B20E29F9D90021934C0FE00001070010
+:10760000800C22994B4A43D218D2790123120712D7
+:107610000F934026881D431E43268001AEB1544976
+:107620001C8142EDD3884822880188114000240142
+:1076300080224684E0814E5100705CC7433F07734F
+:10764000D083069B0F032B71D00007000F0123830B
+:1076500040891949789D438E4601A9095C9C46FFE3
+:10766000290CD1610073468F197B70302318437643
+:107670004B7054198860468143198053E063006F52
+:107680004E00010800800F939B1959700C260B4681
+:107690007343764E9E190E96737937791E023E43D8
+:1076A000684F73469B009A370D96FF5A0C97F61B4E
+:1076B00005960E9E9E46F778B3783E021E43604FB5
+:1076C00073469A37DB190B960A935B886746F31A61
+:1076D000059E5B437643F318594E9E46F68B069BF8
+:1076E0000996374200D1079B734512D820231843CF
+:1076F000544E0F9BF054880031469A310D9B0B522B
+:1077000040180B9B43800001090080099960464C9A
+:107710004B0843D8830BE04B4E0F9BF05433469AF3
+:107720003388000C9E1E520A99C018498841806413
+:107730001C09E00DE0FFE70007000F012345498326
+:1077400040088898430880521C1098824200D276E4
+:10775000E7002638E0E80733D001A8875D0C204415
+:1077600049784340180890C17883780A024179002B
+:107770007909021A43014330460123F8F7E9FF0073
+:10778000281ED11020324602432F4900010A0080F2
+:1077900060000A544018477008982C4A41790079D3
+:1077A00009020143B8009A3211520899CB788F78B8
+:1077B000190239438018418023490122C88BB24005
+:1077C0009043C883641C761CF6B26D08002D03D06C
+:1077D000284800788442C0D31B48FF2204742548FF
+:1077E0001A4B0F25017804E060001D54C018427048
+:1077F000641C8C42F8D311B0F0BDF1B500208CB000
+:10780000039007460290054601900F480078002833
+:1078100000010B008003D00D4800210170012005FC
+:10782000901348154900780978884200D90846061F
+:107830004E0990F06A00287ED01148044600790075
+:107840002820D102F046FA1FE0F0E900001C0200F7
+:1078500020001B0020EA020020CD0100208800004B
+:10786000208A0000200004014008030020FE0200DE
+:10787000203F0100200003002020030020E003003F
+:107880002010E8000002F038FAF26AFB49914088C3
+:10789000430690207900010C008000285FD0F84852
+:1078A00000780B9003285AD0F74840690128F54822
+:1078B000006901D1F54900E0F54909788A1E504375
+:1078C00005F027FC04460998002848D00B980528A5
+:1078D0001ED0012801D1EE4800E0EE48F26A00789F
+:1078E000E7499140884301E040087F1C0028FBD114
+:1078F000F16A7F1EE448C068784305F00AFC0390F3
+:10790000F16AE048C0687F1C784305F002FC0290F1
+:10791000002121E00C20E04A484300010D00808056
+:1079200018C278837812021A43A24216D90B9A051C
+:107930002A0BD04279037912021A43039B9A420020
+:10794000E028E00AD3029B9A4207D2C27901209034
+:1079500040019A104380B26D1C0190491C09988126
+:1079600042DAD30698F021049008400101069803FA
+:10797000220007000F08180C210140104089000860
+:1079800018222101401122490010400818C5490958
+:1079900068C87201E000200490C34F0498F9780091
+:1079A000010E0080814201D0012005900498F870FA
+:1079B0000998C0B2FFF71BFEBD4803785806400F78
+:1079C00005D1BC480078002801D0012100E0002149
+:1079D00001207A8AC003019C204204D1044614404D
+:1079E000012C00D16D1C4008F5D1387CB24A401BF7
+:1079F000C0B23874002902D15B00034308E02023A1
+:107A00000343507FC006800F032801D10120059059
+:107A1000B878884206D0507FC006800F01D0012080
+:107A20000590B97000010F0080D9B2788B00F0CFBB
+:107A3000FB788B0A21401C84B2387C48439B490068
+:107A400019096809384872002066E048009C490A14
+:107A50005C40180892910640788A0F032A0BD10CDB
+:107A60002703467B43964F1637DB19DF790123BB8B
+:107A7000408F4F7F8A07E00C238B4F4343DB19DF96
+:107A8000790123BB40019F3B4244D1890F01D001C2
+:107A9000210591032A03D00C214843834903E00CBC
+:107AA0002148438749163147180001100080787932
+:107AB0003A7901021143204600F091FBF878BA7838
+:107AC0000102A01C114380B200F089FB201D397A0D
+:107AD00080B200F07FFBE01D797A80B200F07AFB83
+:107AE00020460830B97A80B200F074FB2046093095
+:107AF000F97A80B200F06EFB6E4A611D136889B29C
+:107B00005918B879089B0B704107A01D126880B204
+:107B1000490F10180A340170A4B20798401C07904E
+:107B200065480799007C4019884291D8624D000150
+:107B3000110080019868826448163080790007003F
+:107B40000F022805D15B4989790907090F03290725
+:107B5000D003280DD1574989790907090F02290750
+:107B6000D1544989790907090F884201D0012005BC
+:107B7000905748574F02783878824200D302460C1B
+:107B800020424351484B49163005F0F9FA387868DD
+:107B900074287CE97B884201D0012105914749C8BE
+:107BA00073F16A002922D049490978081A0A214844
+:107BB000430019000112008087B2002447480125C4
+:107BC0000A9013E00498284227D00A98406A0128B6
+:107BD00002D16000424901E042496000095A38463A
+:107BE00000F002FBBF1C641CBFB26D00F06AA04233
+:107BF000E8D83348007900284ED001200590354858
+:107C00000A21007848432E49498B4018F16A4900FF
+:107C10004018401C84B2002501E00021DFE728491C
+:107C200068002431095A304A4805400D904233D04B
+:107C30000322920311401DD0000113008001229203
+:107C400003891A61D0891A16D1716A814213D94702
+:107C5000002748C15B204600F0C9FA2648C15B20D6
+:107C600046323080B200F0C2FA2348C15B2046643D
+:107C70003080B200F0BBFA75E0B16A814272D94738
+:107C8000001E48C15B204600F0B1FA1D48C15B20D0
+:107C900046323080B200F0AAFA1A48E6E768E033CC
+:107CA000E0FFFF00009F02002080E70000E20000EC
+:107CB00020E10000209C020020A00200200001140E
+:107CC0000080E0030020100200201C020020CC01F4
+:107CD00000204001002000E60000001B00202003DF
+:107CE00000203F01002030EA0000B0010020A80180
+:107CF0000020FF0700006C09002038120020020E4F
+:107D00000020900500205C0E0020260A00200321A0
+:107D1000490202460A400107F06A090F884224D945
+:107D2000002A12D0FF3AFF3A023A1ED14F00FF4814
+:107D3000C15B204600F05DFAFE48C15B2046323050
+:107D400080B2000115008000F056FAFB4892E7FB74
+:107D5000484F00C15B204600F04EFAF948C15B2055
+:107D600046323080B200F047FAF74883E7FFE7A4D5
+:107D70001C6D1CA4B2192D00D258E7F3484168F3DA
+:107D8000480C9A0068091A0020D20600D504200C7D
+:107D90009A92060ED5EF48EF4A006812685043FFEA
+:107DA00022000A2E325043000A814201D2082000EC
+:107DB000E00C200C99090600D510200C99C905018A
+:107DC000D51C2001E01C28000116008005D1E449E3
+:107DD0004A79002A09D1012204E0E1494A79012ABD
+:107DE00003D100224A7101210591DD49E3230A7B79
+:107DF0001A4002430A730598002802D0087B4030DD
+:107E00000873087BDC210840D64909688872059808
+:107E10000DB0F0BD70B5D44D6869D14CD348617BCD
+:107E200000888A0604D5420602D4DF22114061731D
+:107E3000617B0A0704D5C00602D4F72001406173B4
+:107E4000A179FA20FA2900D9A071E179000117007F
+:107E500080FA2900D9E071E18AA079814200D2E05C
+:107E600082E18AE079814200D2E082E18A7D20C00D
+:107E700000814200D9E082A18ABE48814200D9A097
+:107E80008204F032FEE88EA18B884201D9E88EA0F0
+:107E900083A08B002801D10120A08370BD70B503A1
+:107EA0002002F025FF0546042002F021FF024601D2
+:107EB00024B1480021CB00C35CAB4223D1C90008E8
+:107EC0001845684078002490421AD1012A0ED00249
+:107ED0002A000118008011D0042A14D1072002F0D2
+:107EE0001AFF0646052002F016FF0004301828602D
+:107EF0000FE0052002F0FEFE28700AE0052002F0E7
+:107F00000AFF288005E0012403E0491CC9B21629B4
+:107F1000D3D9FFF784FF002C04D00021042002F005
+:107F2000E5FE70BD97490020085E04F052FE8E4ABF
+:107F3000917AD079012901D1907902E0032900D109
+:107F4000D08A874909688842EBD080B204F04FFCA0
+:107F500070BD70B50220000119008002F0CDFE0452
+:107F600046400658D401E004F098FC02F0DFFE0021
+:107F700028F9D1A006800E03282AD006DC00283A72
+:107F8000D0022836D100F048F935E0052823D02565
+:107F9000282FD1FAF72FFE0146032002F0B3FEFA94
+:107FA000F72CFE0146052002F0A3FEFAF729FE0198
+:107FB00046062002F09DFEFAF726FE014607200243
+:107FC000F097FEFAF724FE0146082002F091FE1217
+:107FD000E0FFF769FF0FE06C496D4800011A00806F
+:107FE00004F060FB05460021032002F084FE2946D0
+:107FF000042002F08AFE01E0A409A4016648802260
+:10800000017851400170C8B2C109C9012143402023
+:108010000143022002F06FFE012070BD002070BD00
+:10802000F8B5544E5D49707B5D4D08702878C007E7
+:1080300001D002F04BFE5B4F5B4C3878800715D5C2
+:108040002078002801D0FEF764F904F041FC38786C
+:10805000FD2108403870C1B2002002F04CFE2078AB
+:1080600000011B0080002801D0FEF7D5F8FFF7299A
+:10807000FA2878C00701D002F02BFE2878002803E8
+:10808000D103F0B6FF02F076FD2078002804D0304E
+:1080900078002801D100F0F9F8FFF762FF0028010D
+:1080A000D00120B0732878000701D502F011FEB08E
+:1080B0007B002804D02878002801D103F061FF025A
+:1080C000F065FE3B48016904229143016139488112
+:1080D000688907FCD52078002824D072B604F01AED
+:1080E000FBFEF720F900011C00800446C00705D103
+:1080F00062B63248C06A00280FD006E0BFF3508F46
+:10810000BFF3608F30BF62B6EAE772B604F005FBDA
+:1081100002F0CCFCC00767D162B62878800701D591
+:1081200002F0D9FD2046FFF795FBB07302F05BFE2D
+:108130001A48203000787D21C900484304F05CFCD7
+:10814000002804D02878400701D502F0C4FDFFF7CD
+:108150002DFA044635E098010020B8010020A8015E
+:108160000020A0010020C001002000011D0080B0FF
+:1081700001002000040140080300201C0300201817
+:108180000300201C0200201002002080E7000022D3
+:1081900003002060EA0000DCE0000026030020006D
+:1081A000E60000FC070000FE020020CD010020FFD9
+:1081B00002002000030020EA02002000ED00E000A1
+:1081C000001240F0E900002878C00901D002F085D3
+:1081D000FD002C01D004F03FFBF07AB17A88420414
+:1081E000D0308B04F010FBB07AF072F8BDBFF30012
+:1081F000011E0080508FBFF3608F30BF62B689E7E9
+:1082000070473B4802218172C17901837047384829
+:1082100001218172817901837047364A12681018F2
+:1082200001707047334A126810180A0A02704170D0
+:10823000704770B5032002F06CFD01232E4A002127
+:10824000CC00145D84421DD1C80080184578446874
+:108250002946042002F059FD012D0DD0022D0ED02B
+:10826000042D15D124680520210C02F058FDA1B27F
+:10827000072002F000011F008054FD70BD21780529
+:10828000200AE021880520F6E7491CC9B21629D941
+:10829000D9002BF2D00021042002F039FD70BD700E
+:1082A000B515486C26056813480179002901D0FFEF
+:1082B000260336017B202001430A2002F028FD011D
+:1082C000E004F0FAFA02F041FD0028F9D10B240B8A
+:1082D0003605E0295D204602F01AFD641CA4B2B404
+:1082E00042F7D3697A092002F012FDA97A0A200226
+:1082F000F00EFD70BD1C0200200001200080100265
+:108300000020DCE000000248406802490861704734
+:108310000000E0EA000000000140F8B54F490A788B
+:108320004F482025242A03D34A78C26189781CE06B
+:10833000CA78242A03D30A79C261497915E08A7977
+:10834000242A03D3CA79C261097A0EE04A7A242A20
+:1083500003D38A7AC261C97A07E00A7B002A02D075
+:108360000A7BC26100E0C561497B016201263C4C89
+:10837000B604266039482030407C3A4F78600001CE
+:10838000210080052000F099F82720B860384805C2
+:1083900060374830218030016010218160C1600069
+:1083A00006E060606026603249401C086031493157
+:1083B000484031086030482D490C3080390860F859
+:1083C000BDF8B572B600242C4E06206043851928EE
+:1083D0004604F022FF69792A790902114304F0105A
+:1083E000FF641CE4B2022CEFD3244F00210C373D74
+:1083F000460A46143590003B581E0AD8B23602058C
+:10840000E04B0000012200805C19EB5C6478F454BE
+:10841000491C0346401EC0B2002BF4D1521C052A51
+:10842000EBD3FF21174801310180012282701648E9
+:10843000022202601548102303608B018360C16033
+:1084400014481349016045214904416012480178EC
+:10845000114301700178062211430170FFF762FF9A
+:10846000F8BD0000C0F1FF0F00FF00400000014018
+:1084700000FF014000020140000101402600008091
+:1084800094E10000006013400001230080002014EC
+:108490004000001440040009000050134000701315
+:1084A0004000000000801C800803D000BF401E0078
+:1084B00046FCD17047EFF3108072B6704780F3101E
+:1084C000887047000010B5244909784843FFF7EA4F
+:1084D000FF10BD0122520780008218106C116470D9
+:1084E000478207D20E921D914080081C4A8000806E
+:1084F000180160704702071A49120F0120904008C6
+:10850000607047174902078031120F0120000124D3
+:10851000008090400860704702071349120F012045
+:1085200090400860704712491148C860704770B5A4
+:108530000B4D002800D10F48104904466860481EC2
+:10854000201804F022FE7D212870C900481E201842
+:1085500004F01BFEA860C003E86070BD0000780254
+:10856000002000E400E000E100E080E200E0040020
+:10857000FA0500ED00E00051250240420F00F0B581
+:108580000546FC4885B000780C46002853D02846A4
+:1085900000F000012500806CFE0290F848162100D2
+:1085A0007840194843F749401880780190F748F51A
+:1085B00049007808182038007E0090F4488069004F
+:1085C0000101D5F34800E0F3480390012000238423
+:1085D000461A4602986146084227D00020510013EF
+:1085E000E0019D039E4543ED18AD007559009E2F97
+:1085F000B2BE46E44F36186C3FBE5D7746655A7E84
+:10860000433612AD196552401CE04D2D78A842E763
+:10861000D3DE48DC4E007800012600800A36400098
+:108620005B1C80192038655E008A45432812605221
+:1086300060464000521C8446092ACDD305B0F0BDE7
+:10864000D74A8100891809684300401CE152092873
+:10865000F7D3F3E7FCB5D348162100784843CA495D
+:10866000085A009001208646CF48D0490078097802
+:108670004843CF49400009684418002000997246D9
+:1086800011425ED0CB4A4100575E8A181225555FD1
+:1086900024213623515ED35EC24AAC460001270036
+:1086A00080127816256A43B94D521912181279654D
+:1086B000467D1901956D18ED1AC04EAD10B54201F9
+:1086C000DA354604E0BD4EF643B54200DD35465688
+:1086D00000A553019DB94EED186D1AAD10B54201BC
+:1086E000DA354604E0B54EF643B54200DD3546B016
+:1086F0004E367896197600A5537D18ED186646AD6E
+:108700001BAE4EAD10B54201DA354604E0AB4EF675
+:1087100043B54200DD3546A64E61443678C9187629
+:10872000000001280080B6187600C91BA54B8910EF
+:10873000A553994202DB5B0C994200DD19469D4B23
+:108740001B785D005B199A185200A15271464900CE
+:10875000401C8E46092896D3FCBD10B59A4C606922
+:10876000012812D1FAF77DFA000904D02046203002
+:10877000807A002809D18C48006AA16900B2A3223E
+:10878000920050434143081410BD002010BDF0B5C5
+:1087900085B014252946684604F044FD804802212E
+:1087A0004038C16089490001290080814E08784025
+:1087B0001C08708048814900780978484380494006
+:1087C000000968441869463078FFF7E5FEFFF7C7EF
+:1087D000FF84463078162148436F49085A012286A3
+:1087E000460021704610421CD048006B461E5E7841
+:1087F0004B1B5E6F48077816204743664838184081
+:108800001807796046301A584380126E4E03B2B38F
+:108810004202DB760CB34202DD7800265201E0789A
+:108820000023525200491C0929DBD300012A008091
+:108830006A4E62483178017069485F490078694C36
+:108840000870217801291BD10021574F2170491E42
+:10885000403FF96000F019FD00F002FD5C48203057
+:10886000C07CF9F77AFF0520FFF765FE3868032121
+:108870004907084338603868800001D56D1EFAD278
+:108880005448594900780978401C584D584F88423F
+:1088900054D24B480F21027830781218AA5C92000B
+:1088A000D2191160401CC0B2524930700978884218
+:1088B00000012B00800BD951484A490078307008DC
+:1088C00078401CC0B20870F9F781FF012020704188
+:1088D0004840694B4B002819D04A480F210278AA1A
+:1088E0005C9200D2191160197832784908914204DB
+:1088F000D938494039496A491E01E03249097801AD
+:108900007000780C21285C8000C01901602D49326C
+:1089100078097801208918695C8900C919086031D3
+:10892000491878097848438018F9F7B2FE20780191
+:108930002829D01E4900012C0080403908680322F4
+:1089400052071043086025482A4900780978884270
+:108950001DD11D48317800780F244018285C800014
+:10896000C019046013484038016902229143016133
+:108970000520FFF7E5FD24480078285C8000C01939
+:108980000460224901200870F9F781FB65E6084977
+:10899000403908688A03104308605EE6000003015E
+:1089A0000020E300002000EC00005EE30000F8007F
+:1089B0000020400011400012114000012D008000F5
+:1089C00010114000021140E5000020E7000020E205
+:1089D00000002020010020440300200080FFFF3021
+:1089E000EA0000EA0000208C030020E8000020E6F6
+:1089F00000002088020020ED00002000EB000000B5
+:108A0000041140F1000020F0000020E1000020E906
+:108A1000000020F200002070B500228900FF4BC941
+:108A200018FF4BFF4C86189E5D8D5CB600361935DD
+:108A300060521C042AF6DB70BD10B50C46FFF7002F
+:108A4000012E0080EBFFF9480078C01C8108F8482F
+:108A5000890000784143F7480078C01C80088000F6
+:108A600000190818F9F71CFE10BD30B50021ED4BB8
+:108A7000ED4C0F2245185D5DAD002D192A60491C93
+:108A80000429F7DB30BDF0B587B01424214601A8D6
+:108A900004F0D7FBE84D0220E860E8490878401C64
+:108AA0000870E748122100784843E6494618E6482E
+:108AB00001A90078FFF77CFDFFF75EFE00214A0068
+:108AC00001AB9F5E00012F0080E14B3F1A9B5E4986
+:108AD0001C5F43BB12B3520929F3D3DE4E30780139
+:108AE000281AD100203070401EE860D2480078007B
+:108AF000F0D8FB00F0C1FBD848C07CF9F73AFE057E
+:108B000020FFF725FD28680321490708432860282E
+:108B100068800001D5641EFAD2D048C74F0078396A
+:108B200078C84C401806902078002820D0012820D2
+:108B3000D00228C348007855D1C949401C0978881B
+:108B4000421BD2C848C84900780001300080001D8F
+:108B5000C0B238700978884215D9C548B74900783D
+:108B600038700878401CC0B20870F9F73CFE01204C
+:108B700030700DE0022100E003210698FFF764FF4A
+:108B80002078401C44E0C01C884201D9C91E3970BD
+:108B90000698FFF76FFFB1482038406900281DD0C4
+:108BA000B548A24A03780F21D25CA14B9200D2189B
+:108BB0001160A0493A7809784908914204D9A74937
+:108BC0006039496A491E01E0A6490978017000012F
+:108BD000310080974A00780C21105C8000C0180199
+:108BE00060A14839780078401800210690C8E79EB7
+:108BF00049401C0978884203D201210698FFF726D4
+:108C0000FFFFF743FD8E4893490078087098483974
+:108C1000780170002020708C4894490078097842CF
+:108C20001C8A4207D23278012A1ED02A6803235BAD
+:108C3000071A432A60884219D10698FFF71DFF8E54
+:108C40004A7C4912780F20895C7B4A890089180880
+:108C500060286900013200800221884328610520D4
+:108C6000FFF77DFC874901200870F9F71FFA07B06C
+:108C7000F0BD28680121890708432860F7E7F0B5AF
+:108C800087B0142101A804F0E6FA7149734E087800
+:108C90007D4F401C0870307816214143795A069167
+:108CA0007A4901240D6801A9FFF78CFCFFF76EFDDE
+:108CB0000021069A224212D04A0001AB9A5E674B0D
+:108CC00016261B787343704E9B195B181B79704EE8
+:108CD0000027F75F121A7A43000133008012135BFA
+:108CE00000EA526400491C0929E5D35D4D002128A2
+:108CF00078574C401CC0B22870C943E1605D4909F7
+:108D00007888420FD200F0D7FA00F0C0FA2878F93C
+:108D1000F771FD2878F9F7D0FC206803214907088E
+:108D2000432060A6E720690221884320610520FFD7
+:108D3000F718FC59480078032806D15848007801F4
+:108D40002802D1F9F736FE94E74F49012008705404
+:108D500048006880478DE7F0B585B01421000134E4
+:108D60000080684604F07CFA3B4D0220E8603A49F6
+:108D7000122208784D4B42431B68401C0870D418DF
+:108D800069460020FFF723FC494E00206B46410056
+:108D900000275A5EF75F401C7A431213625209287B
+:108DA000F5D33A49012008702969022081432961DD
+:108DB0000520FFF7D9FB3E480068804761E4FFB516
+:108DC00089B03C490C9808182038007E009000209B
+:108DD0008446079002460190384800788646B6E0FF
+:108DE0000124000135008000252B4629460A9820E1
+:108DF000426DD00B98099F5043C0188000385871BD
+:108E00004500B209D10646FF362E4F9136BE4203C9
+:108E1000D32D4F3E88761C3E80174E777EFF070786
+:108E2000D0009E254FB6186C3FBE5D464330120001
+:108E3000B24E0002AFB8534642002800DB0646752A
+:108E40001944E0E4DF000000EB000000041140E101
+:108E5000000020E6000020E800002000001140EAA9
+:108E6000000020EC000020000136008044030020B8
+:108E7000E50000208C0300208802002050EA00005A
+:108E8000E2000020ED000020E7000020F1000020BB
+:108E9000F0000020E9000020F200002000EC0000BB
+:108EA00024010020040100209402002095020020EB
+:108EB00014010020280100200601002018010020D4
+:108EC0005EE300002C0100202103000010010020BF
+:108ED00000E05B1C6400491C09298AD30B98D54922
+:108EE0004000085E0023684347120121000137005B
+:108EF000807D421C46184608950A9D0D420AD045C1
+:108F00000002AE755F089EB54204DBBD4202DC2C58
+:108F10001924B25B1C4900401C0928EDD35800C637
+:108F20004902AB085E714649006043595A40120835
+:108F30001A01B24842002900DB0846FF2300B2FDB7
+:108F400033984200DD1846019B834200DA01900706
+:108F50009B18180790604640188446521C0C988253
+:108F60004200D244E7B548019942685118416082F5
+:108F70006800013800800799511881606046002818
+:108F800000DA4042B0490A68801808600DB0F0BDB0
+:108F9000F0B5AD4A89B00220D060AC4EAB49307814
+:108FA000401CC0B2307040318969090101D5A8491F
+:108FB00000E0A8490491A4498968A94C0D0AA64972
+:108FC000012809880391A549097801917DD10023E1
+:108FD0009E469C461E4602900299039808421CD069
+:108FE00000210A460FE00198049F5043604480002E
+:108FF000385800048014000139008001D540420037
+:10900000B20918834200DA0346521CAA42EDD3711A
+:109010004502DD95488E4606706046401C84460237
+:1090200098761C40000290092ED8D390480078987A
+:109030004201DA8E4803708E4E00238E4F8A48F329
+:109040005E397860389E4506DD426B8A4203D972EC
+:10905000463280894A1170491CC9B23970426B8A04
+:109060004208D8426B8A4212D1406B8349401E09A4
+:109070007888420CD076490869022200013A0080C3
+:10908000904308610520FFF77EFA7E480078F9F7E3
+:1090900035FDBBE0208977490A78002190420AD348
+:1090A0007948428B520716D5408BC00713D07748BA
+:1090B0000078C0070FD0764A0120107063482B4615
+:1090C0004160816062480160019A03990498FFF74A
+:1090D00085FE25E018E05F48026902239A43026199
+:1090E0006C48642201706C4801706C48017029461C
+:1090F00001986B4D41432888504304F07DF8288047
+:1091000000013B008068490120087081E00A462B7D
+:109110004603990498FFF764FE5B4836780078713F
+:109120001C814206D24C49086803225207104308AA
+:10913000606EE0864267D14748B100076844484006
+:1091400068089004F071F85449C0B208700790069E
+:1091500090384664214843294604F050F8089904A1
+:10916000F04DF84E49C0B20870059039486421802E
+:10917000684843294604F042F8089904F03FF8484B
+:1091800049324B087000013C008006980527000218
+:10919000844600201433217B42009A5A5143614592
+:1091A00001DA07B202E0401C0528F4D3607B284AAC
+:1091B00079001E32515A4843010A37480127077087
+:1091C000E27BD3070322002B03D0059B8B4209D9F6
+:1091D00007E0617B059B994204D2217B079B994262
+:1091E00000D2027031466943304D642228885043D2
+:1091F00004F007F8288019480169022291430161AF
+:109200000520FFF7C5F92948077000013D008004DB
+:10921000E014480168820311430160254800780189
+:109220002817D1207D002814D0207C4007400F054E
+:109230002800D900200B49C0310A691E4B1A400A88
+:10924000610A691D4B800018581B4BDB4318400214
+:10925000430A6109B0F0BDC8E20000880200201C8A
+:1092600001002000001140EA00002000121140001F
+:109270001011400C010020F300002050EA00002CE7
+:10928000010020FA0000201201002001010020004E
+:10929000013E008002010020ED000020B0E6000049
+:1092A000CE010020FB000020FE000020FF00002077
+:1092B0000001002010010020F2000020FFE0E3F197
+:1092C000F4DF000010B504460D4801680D4A114056
+:1092D000220411430160F9F747FD0B48E1050B4AF1
+:1092E000816901D5114300E09143816110BD0849B6
+:1092F00009780818162148430649085A70470000A3
+:1093000000001140FFFF00FE40001140000000205F
+:10931000E300002000013F008000EC0000FF490056
+:109320002048707047F3B5FD4884B040780390FD45
+:1093300048FB4C00780023029062E0FC48FA4A00A7
+:1093400021009057E00598002805D02C20049D4866
+:109350004340199D0004E02C20049D584340198D82
+:10936000004019557916792D0235436679277936EB
+:10937000023E43AD1BAE46D57896782D023543E6C6
+:1093800078A77836023E43AD1B0195754676466E4A
+:1093900043019D6D43771907600001400080009DE7
+:1093A000EE78AD78360636142E43B446009E7578B6
+:1093B00036782D062D143543642F0DDA577816783C
+:1093C0003F02374308D066462F4676436F43F6196F
+:1093D000642E01DAD84E0660029F039EB7420AD27D
+:1093E00076466746F61B019F76437D1B6D437519D4
+:1093F000066875190560491C0C3203988142A4D394
+:109400005B1C02980C3483429AD306B0F0BD70B551
+:109410008B79C2791B07C84D1B0F0E2A04D8000197
+:109420004100802C7B240123438B7112E084792638
+:109430000907D0C34E3678012E06D1BA4EB6780150
+:109440002E02D15206520EECE724092401103C1CD6
+:10945000438C71CA714378047818022043401C0879
+:1094600070000A48701006C017401C70BD41790298
+:1094700079090211430F290ED3C27883781002189C
+:10948000430F2808D3B04AD368103B994203D81140
+:10949000691039884201D901207047002070477057
+:1094A000B50446000142008000F0ECFB0546A079BF
+:1094B000A44E010917D0A4480078022810D12046F4
+:1094C000FFF7D7FF00280BD0A1480068002807D17C
+:1094D000307BA17900010907090F0143A17108E060
+:1094E0008020054305E0317B00070901000F084398
+:1094F000A0710020207060702806C017E571401C24
+:1095000070BDF0B5C27987B005920E2A76D842793F
+:10951000037912021A430492C27883781002184326
+:10952000039048790A7904020001430080C87889D1
+:109530007805020D4305991443012088407C4A06B2
+:1095400090918881439180002C5AD08149C868400D
+:109550001EA04255D0002D53D008460069401EA8D9
+:10956000424ED00498211ACA0F039852185210285C
+:109570001A1619C20F121852105719002910D100CB
+:109580002F06DA6B4906988A8800251043344688EE
+:10959000806F480169B94270DC056934466D1E6709
+:1095A000E0000203F055FE02900398049A00014483
+:1095B0000080010202985043081A0190002E0FDA31
+:1095C00000242546002800DB051262480169A942F3
+:1095D00001D805696D1E574906988A88104388800E
+:1095E000002F17DA01980299404203F034FE00265A
+:1095F000002800DB064657480025C168B14203DC5D
+:10960000C468641E01E041E034464A4806998288F5
+:1096100011438180504BD868B04217DCDC68194692
+:109620000298641E019A60438018001200270028E7
+:1096300000DB000145008007460869B84202DC0DE6
+:10964000696D1E00E03D463C4906988A88104388B3
+:109650008018691E46B84215DC356901986D1E29CF
+:1096600002081A029903F0F9FD0024002800DB0427
+:1096700046F068A04201DCF468641E2F4906988A0F
+:1096800088104388800598364980000C5240184560
+:109690008007B0F0BDF3B587B008980024401E05E0
+:1096A0009065E00C202649604340180690427803FC
+:1096B0007812021A43C67900014600802546601CD4
+:1096C00012E00C211F4B4143C9184B780F781B0245
+:1096D0003B43934204D8934205D1CF79B74202D29B
+:1096E000CE7905461A46401C08998842E9D3AC4217
+:1096F0003ED0144E0C2202A8069903F0C5FD0C20A2
+:10970000684386190C223146069803F0BDFD0C22F1
+:1097100002A9304603F0B8FD0798A1000E180422F4
+:10972000314601A803F0B0FD0798A9000D180422E6
+:109730002946304603F0A8FD042201A90001470094
+:1097400080284615E096020020E00300203F01003B
+:1097500020640400203A0500200000C0FF70E700EC
+:10976000009C00002080E7000058010020C61B007C
+:109770002003F08CFD0598641C844297D309B0F057
+:10978000BDFFB585B02C210E98F7F724FC05462CBB
+:10979000210E98F7F71FFC06462C210E98F7F71AB2
+:1097A000FC04460B210E98F7F715FC02900B210ED6
+:1097B00098F7F710FC84460020471E002281006ABB
+:1097C0005000014800807250079BFF211954401C33
+:1097D0000B28F5DB002074E000200746431E0299A9
+:1097E00082000B54FF49A15061460F54401C0B28C6
+:1097F000F5DB0021C9437246019152E00021C943C3
+:10980000002025E063461B5C002B20D12C2713464B
+:109810007B43089FDB19870004970397DB59970068
+:10982000EF59DB1B039FF759DB1B039FE759BB4233
+:1098300004DA049FE351029F019B3B544B1C05D06B
+:10984000049B8F00E3580001490080E759BB4200A8
+:10985000DA0146401C069B9842D6DB88002258005D
+:109860002013E063461B5C002B0AD0079B1B569F0E
+:1098700000EB599B18EB518700F3599B1AF35103E6
+:10988000E08700E3599B1AE351401C069B9842E88D
+:10989000DB704680002B589A182A500122604642FD
+:1098A00054079801914256501CAAD104E0079A101F
+:1098B0005C50540298415602984056421CF6D1071B
+:1098C0009A70465054401C0599864600014A008013
+:1098D000884286DB0E98F7F799FB0E98F7F796FB10
+:1098E0000E98F7F793FB0E98F7F790FB0E98F7F7A3
+:1098F0008DFB4BE7F1B5BE488CB08168069140689E
+:10990000059000240C210C98F7F76CFB0546FF210D
+:10991000E5310C98F7F766FB04902C210C98F7F7CB
+:1099200061FB03900B210C98F7F75CFB0290B148A8
+:10993000B14E0078B07000201E22471E0C23014655
+:109940005943AE4BC918CA7102990F54401CC0B29A
+:1099500000014B00800B28F3D3A74B7178187801D6
+:1099600022884200D10022A54E884232700A460069
+:10997000D302460792012805D1012903D10298009C
+:1099800021017034E09C4F9D4E884218D80021047C
+:1099900098FFF7E6FC0C9A00922A46717838780412
+:1099A0009BFFF7F8FE0020737806E029564A1C0159
+:1099B000D0029A1154401CC0B29842F6D317E0016D
+:1099C000210498FFF7CDFC0C9A00922A4639787052
+:1099D00078049BFFF700014C0080DFFE002006E0CA
+:1099E00029564A1C01D0029A5054401CC0B2397802
+:1099F0008842F5D30025FBE0029840570190401CB7
+:109A00007ED00C208149684341180B910A91487916
+:109A1000097902020A4301980C2148437A49401807
+:109A2000099008904179037909021943571A0A9954
+:109A3000CA788B7811021943C278837810021843D0
+:109A4000081A7249096848437249096803F017FC0B
+:109A50000A99064648780978000200014D008008FE
+:109A60004306D1384631467843714340188010117F
+:109A7000E06A49A8004018C17882780906091411E3
+:109A80004343780278180600141043791A301A49B3
+:109A9000434043081862490A78012A02D009780233
+:109AA0002905D15F49069A0978491C8A4006920621
+:109AB0009988420BD8FF21913188420FDD5A480026
+:109AC0006800280BD00B98C0790E2807D90998FF99
+:109AD000F704FD00190027C4B23E4611E0099900C1
+:109AE000014E00800B98FFF7B5FC0019C4B208992D
+:109AF0000B98FFF724FD38463146784371434018F0
+:109B00000599884204D9012000E00CE03F49087023
+:109B100001988100039808188770390AC17006708F
+:109B2000310A417067E03848384E007871788842D1
+:109B300061D20C20374968434118C8790E285ADC95
+:109B4000B388012282409C461A4228D04B780F7875
+:109B50001B023B435B1C0B701B0A4B70344F830092
+:109B6000F85A087100014F0080000A4871D8194066
+:109B7000888870000AC87060469043B080B0780C46
+:109B8000225043244A8018FAF763FEB17800208AF5
+:109B900000039951188870C870B1788A00039951F0
+:109BA0001823E08879020928D04A780B7812021A23
+:109BB00043521C0A70120A4A70020912010007106F
+:109BC0003A000F02438A71B0780C225043114A8048
+:109BD00018FAF73EFEB17800208A000399511888E0
+:109BE00070C870B178039A8900000150008089180C
+:109BF0000870000A4870641CB078E4B2401CB07071
+:109C00006D1CEDB20798854219E0FFFFFF7F70E7FA
+:109C100000003F01002096020020E00300206404C1
+:109C2000002050010020540100203A05002060016E
+:109C300000206101002058010020C61B002000D236
+:109C4000E4E6384E39483178407881421BD9002506
+:109C50002F4615E00C20354968434018C1791E296C
+:109C60000CD1FFF742FC0019C4B20399A80000010F
+:109C700051008040188770390AC1700770390A4155
+:109C8000706D1CEDB230788542E6D3284DA978017D
+:109C90002902D90398FFF71CFDA9780020FAF7C81C
+:109CA000FDA87803998200234803F009FBA878688F
+:109CB0007034700C98F7F7BBF90C98F7F7B8F90CFB
+:109CC00098F7F7B5F90C98F7F7B2F90DB0F0BDF0C9
+:109CD000B51749194F4C781449164E0D78002000DD
+:109CE0002211460AE00C234B43DB19DB795B065B50
+:109CF0000E8342000152008001D1012202E0491C82
+:109D0000A142F2DB002108E00C234B439B19DB79D5
+:109D10005B065B0E834206D0491CA942F4DB002A95
+:109D200001D1C0B2F0BD401C0E28DBDD1E20F0BD0D
+:109D30003F01002096020020E00300203A050020A9
+:109D400064040020A049002008708870C870704723
+:109D5000F8E7F0B59D488DB0C06A9B4C0B90207819
+:109D600060709B4E002003AF41008A19938805ADB7
+:109D70006B52928903AB401C00015300805A52047D
+:109D800028F4D3307D0290707D01909148002540E9
+:109D9000300C904DE0680005A9095A029A8A180A09
+:109DA00092029A891A099103A9095A019A8A1808F4
+:109DB00092019A891A079188490E5E88490F5E0CB4
+:109DC00098406A01280DD1089887422DDD01202195
+:109DD00078A840084303E001212078A94088432067
+:109DE0007025E00C98406A022806D10A988642ED58
+:109DF000DC09988642EFDD1AE0F6F745FD000154D4
+:109E0000008000280A980AD18642E2DC099886423E
+:109E100010DC01202178A840814321700AE08642AD
+:109E200002DD08988742D4DC0998864202DC079854
+:109E30008742D3DD6D1C0B988542AED30DB0F0BDCB
+:109E40006448007870476348C16AFF2088406049D1
+:109E500009788143002003E0401C4A1EC0B2114033
+:109E60000029F9D170475A488078704759490A202B
+:109E7000085E002812DD5849498D81420EDD59489F
+:109E80000169000155008055482030007A091A57B1
+:109E900048C278837810021843814201D2012070B1
+:109EA0004700207047F8B50746FFF7CFFF4A4E043A
+:109EB00046317A01208840C0B20090484DF37804C2
+:109EC000210020203503F071FA060420444C576528
+:109ED00085002F10D0012F79D1FFF7CAFF01287517
+:109EE000D1002C01D1052074E0012C0AD131780079
+:109EF00098884206D15EE0012C5CD003D9F170E86D
+:109F000079F071F8BDB0700001560080F8BD002FE7
+:109F10000CD0012F5DD8012C5BD1FFF7ACFF0028DE
+:109F200057D031780098884253D103E0002C53D0A9
+:109F3000012CE6D830787178884202D06879707147
+:109F4000F8BD7179002902D0491E7171F8BD022156
+:109F5000F1703071D9E7327833791A42F6D1F17065
+:109F6000E979F171D1E7274302D0A879B071F8BD42
+:109F7000B179002930D0491EB171F8BD002C02D052
+:109F8000E979F17106E0F179002902D0000157006A
+:109F900080491EF171F8BDF0703071F8BD3946216D
+:109FA000431CD0012C0FD1002F09D0012F13D13128
+:109FB00078009888420FD1FFF760FF01280BD1018C
+:109FC00020F070BDE707E0002C05D1012F03D1FF81
+:109FD000F754FF0128E1D00320F070C8E7F070F8D3
+:109FE000BD9C020020F0E90000F0E70000A801009D
+:109FF00020B001002080E70000E0030020FF49C8F6
+:10A0000060FF4882780A70C2784A7002798A70C20A
+:10A01000790001580080CA70007A08717047C01C2E
+:10A0200080088000EDE770B51546062251430C18F4
+:10A030000C340321284603F02AF941004118691A1B
+:10A040008A0089184000205AC840C006C00E70BD62
+:10A050000A460146EB488068E5E7F7B582B0074657
+:10A060000E000AD000250FE0002478190190214647
+:10A070000198FFF7EDFF002802D0049805B0F0BD6D
+:10A08000641C092CF3D36D1CB542EDD30020F5E719
+:10A09000F8B5DC4FDD4D000159008006460024B9BB
+:10A0A0001C284602F09CFB3988884233D1002E0FD1
+:10A0B000D0D84E2846B11C02F092FB318888422944
+:10A0C000D1D54E2846B11C02F08AFB318888422146
+:10A0D000D1002500F063FCD04C216B06464E4301B5
+:10A0E0002231462846FFF7BBFFE76B0546022239BF
+:10A0F000463046FFF7B4FF0543F0192146403109C9
+:10A10000684018E16A002900D001210822FFF7A762
+:10A11000FF284304462046F8BD70B500015A008070
+:10A120000E46044615460321304603F0B5F84100BB
+:10A130004118711A8A0089181F238B404200A05AC7
+:10A140009843EB06DB0E8B400343A35270BDF8B57A
+:10A15000B54EB44F35690446072040062946814371
+:10A1600001204006081830612046FFF7F1F8AC489E
+:10A170006030C07CF8F769FBAB480721C038C1608C
+:10A18000026883031A430260C268D20701D17F1EAE
+:10A19000FAD2C160A549A64A0020E30706D0830091
+:10A1A00000015B00805B181B681B04DB144700D3B5
+:10A1B000536408401C0928F2D33561F8BD70B50519
+:10A1C0004600239C4E1846D40709D05C00345F003B
+:10A1D0002902D0AC4203DD01E0AC4200DA01205B91
+:10A1E0001C5208F0D170BDFFB58E4881B060301FA1
+:10A1F00046C07CF8F72CFB00258024FE268B4925E1
+:10A20000430868B043284308600398FFF7A2FF01A2
+:10A21000A807C8B847002800D0A54364083440ED1B
+:10A22000D1284632E700015C008070B50546002366
+:10A23000824E0120D40709D05C00345F002902D08F
+:10A24000AC4203DC01E0AC4200DB00205B1C5208A6
+:10A25000F0D170BDFFB581B06F480A9F03228168BD
+:10A260001202384603F047F800264AE028200D99EC
+:10A2700070434418A06880476E48C0388168012246
+:10A28000C9B2D202891881600398002809D06849B0
+:10A290008039486A032212079043049A1207104338
+:10A2A00048620198002807D0624900015D008008DB
+:10A2B00068029A000A00021043086002E02046008B
+:10A2C000F0C4FB002515E002F092FB2169284688C6
+:10A2D00047E1682846884702460621206A694343C9
+:10A2E0001824200157206800F06EFB616928468819
+:10A2F000476D1C6068A842E6D8A069002802D0E13A
+:10A300006909780170761C0C988642B1D30F20F74A
+:10A31000F7F0FF0B98002812D0B91C414802F069F1
+:10A32000FA38803D4EB068C409651D06E0A0B20051
+:10A33000015E00803946F268F6F706FA8037641C41
+:10A34000AC42F6D3A9E670B505460C4600F033FBE7
+:10A3500006460146284602F0A9FF20607043281AED
+:10A360008107890F2161334960604031096A364AAB
+:10A37000022908D111788B089B00834202D98008FA
+:10A38000800000E0081F314909784318A360127863
+:10A390005208824204D92748406A401EE06070BDDE
+:10A3A000E16070BDF0B585B06946FFF7CCFF214C88
+:10A3B0004034206A00015F00800F250228254E26C8
+:10A3C0004F029802D1FEF7CBFB03E0305C8000C067
+:10A3D0001905606069012805D120480078305C804B
+:10A3E00000C01905605BE600B585B06946FFF7ADB2
+:10A3F000FF0198002802D10098F8F76AFA0398172D
+:10A4000049C0B208700C4940314969002906D01191
+:10A410004A0C21105C104A800080180160049902E7
+:10A42000981EE00000A802002080EE00003202002A
+:10A430000000F1000080F300000001600080F0E9FE
+:10A44000000088900000C000114000021140440349
+:10A450000020E1000020E200002000EB00000004EA
+:10A460001140E900002000F039FB05B000BD00B547
+:10A4700085B06946FFF76CFF009816214843FF49F5
+:10A48000085AF2E770B50446FE480D464069206060
+:10A4900000F096FAFC49096B48436060FB48A060F5
+:10A4A000FB48E060FB482061FB486061FB48A0611D
+:10A4B000A81C0C352562E0610120203420710001C8
+:10A4C00061008070BD7FB50446032000020E462562
+:10A4D0001821462846FFF7D8FF00220121029101EA
+:10A4E0009603950094114610461346FFF7BFFE7F72
+:10A4F000BDFFB5032000020E46151885B014461F97
+:10A500004611462846FFF7C0FF01210A4600940283
+:10A510009133460197039501200599FFF7A7FE099E
+:10A52000B0F0BD30B5DF48DF4900780978DF4A4335
+:10A530001800200221DE4C04E0155CAD002D192925
+:10A5400060401C00016200808342F8D830BD10B525
+:10A55000CF49496B0818F8F7C3F910BDCC49496BCE
+:10A56000081816214843C849085A704710B5F8F72B
+:10A57000B7F910BD16214843C349085A7047F3B5CF
+:10A5800005460320000285B02C1800F01EFAC049D1
+:10A590000A6B5043BD4A936923604B6B6360C74E9F
+:10A5A000E660C54BA360C74FC54E67612661BD4ECF
+:10A5B0000622761CA661EE1C4243E66156190C3653
+:10A5C00026620026242216550001630080B04A96B8
+:10A5D00069A6628E6BE6622363BC4B6363BC4BE788
+:10A5E00063A363B14B9B1C23642B1D6364496B4CB9
+:10A5F0002208180621484340190C30A0640020109E
+:10A600005506980221009501AB13C3002211461094
+:10A61000461346FFF730FE07B0F0BD704770479D08
+:10A6200048C06B162148439949085A704710B5F83D
+:10A63000F702F8F7F7C0FFF8F75BFA10BD10B5F7AF
+:10A64000F7FAFF0020F8F74EF910BDF7B5000164E6
+:10A650000080914882B040300190476A0C4616460F
+:10A66000002540380090C06A002801D1012023E570
+:10A67000032F04D0012F01D1022700E0012700F0B1
+:10A68000A9F90099096B48430099C96B41180198D1
+:10A690000068FB07091801227F48002B17D0036AC6
+:10A6A000236062608D4BA3608D4BE3608D4B236113
+:10A6B0008D4B63617E4BDB1CA361F31DE3610623BD
+:10A6C0004B439B190C33236224231A550125BB07E6
+:10A6D0001DD50001650080036A284628277843239A
+:10A6E0005000194260824A82607E4AC2607E4A02FD
+:10A6F000617E4A42616F4A121D826132460832C24F
+:10A700006106225143891912310162002120300172
+:10A71000716D1C029805600020D0E470B5044603FA
+:10A72000200002251886B00E462246294605A8FFBD
+:10A73000F791FF00280AD1059900220291019603A2
+:10A74000950094114610461346FFF79AFD06B07027
+:10A75000BDFFB5032000020001660080161885B019
+:10A760000C4615461F46314604A8FFF776FF002821
+:10A770000AD104990122009502912346019703967C
+:10A7800010460599FFF77FFDD6E6F0B500238C460D
+:10A790000646594918461D461C46D70703D05F0098
+:10A7A000CF5F7D19641C5B1C5208F6D1534A6100CF
+:10A7B000515E624669434912002A03D0B14200DD6E
+:10A7C0000120F0BDB142FBDBF0BD70B50346104681
+:10A7D0004B4A94680125E4B2ED0264190001670058
+:10A7E000809460494A1278082A01D12F4AD36B1607
+:10A7F0002253432B4AD25A454BFFF713FDC0B27088
+:10A80000BDF0B587B0F7F7BDFD00252E48019500D6
+:10A81000782F46410889088900C01E8008800003FF
+:10A82000902148FE260291049032E01F48002460E7
+:10A830003006902846F8F760F8224829460078014B
+:10A84000AA4143A000059010580818F7F7B7FF0574
+:10A850009801A908581A4909784018002100F04FBA
+:10A86000F900016800800698C07CF8F711F80E48DE
+:10A87000426901212846FFF7ADFFB84200D90746DB
+:10A88000B04200D206460F20F7F74FFD641C032CA0
+:10A89000D2D304986D1C006BA842C9D8F019C0052A
+:10A8A000000EC5E6000000EC000080EA0000F0E9C0
+:10A8B0000000232F000031B00000AFAF000071AFE7
+:10A8C0000000A8020020E2000020E100002000EBD0
+:10A8D0000000000411403B3000002DB1000025B104
+:10A8E0000000E1B00000000169008015B100000720
+:10A8F000B10000F1B10000D3B10000D1B10000CF30
+:10A90000B10000E1B1000044030020C8E2000000F3
+:10A91000001140EB0000202FB3000010B5F7F7C284
+:10A92000FD8248406B44082046F7F74DFF2046F76C
+:10A93000F7E8FF7E4800680006800F04D07B48607F
+:10A9400030C07CF7F7A7FF7A48826900212046FFD4
+:10A95000F743FF10BD10B5F7F7A5FD7348416B80B5
+:10A960006B40080C182046F7F72EFF00016A0080A4
+:10A970002046F7F7C9FF6F4800680006800F04D033
+:10A980006B486030C07CF7F788FF6B488269002114
+:10A990002046FFF724FF10BD10B5F7F75EFE00203C
+:10A9A000F7F714FF0020F7F7AFFF6348026A0121B1
+:10A9B0000020FFF714FF10BD10B5F7F74EFEF7F7B4
+:10A9C0000CFEF8F7A7F80120F7F700FF5A48026AD3
+:10A9D00000210846FFF703FF10BD002807D001281B
+:10A9E00003D0022803D15548704755487047554851
+:10A9F00000016B008070474F49544840310078098E
+:10AA00006A022902D1C01C800880007047FFB5058A
+:10AA100046484883B060300F46C07CF7F740FF00DF
+:10AA20002001466E463154401C0928FBD3102442B5
+:10AA30004B00208033315C21430A020A438100C964
+:10AA4000184A61401C0928F5D30598FFF7AAFB00B6
+:10AA5000203F4B05990FE0CA070BD042009A5E00D9
+:10AA60002F02D0AA4205DC01E0AA4202DB325C22BE
+:10AA7000433254490800016C0080401C0029EDD18C
+:10AA80006408D7D1325D21460698FFF775FB641C38
+:10AA9000092CF7D3D6E5FEB504462F490920F7F770
+:10AAA0001FFE0027FE26204620303D46019022E072
+:10AAB00001F0C3FF216928468847E1682846884796
+:10AAC00000900198042141562068244B009AFFF71A
+:10AAD000B5FBB84200D907460198042141562068C9
+:10AAE000204B009AFFF7AAFBB04200D206466169EC
+:10AAF000284688476D1C6068A84200016D0080D917
+:10AB0000D8B8194008FE210840E16908700D4AC014
+:10AB1000321168090A090201431160FEBD084A109A
+:10AB2000B54032126A022A02D1FEF715F810BD0EA6
+:10AB30004A0121105C0E4A80008018016010BDF0AF
+:10AB4000E900000000114080EA000080F3000000EE
+:10AB5000F1000080EE0000E1000020440300200F1F
+:10AB60000F000001AE000099AD000000EB000000F6
+:10AB7000041140704710B5FFF72EF95A48006800DD
+:10AB8000016E0080F8F7C4F8FAF7EFFB584901208E
+:10AB90000870487010BDF8B5554E0746002470780F
+:10ABA0002546002809D153497068096A381A884235
+:10ABB00048D9FFF786F9002844D1002077607070EB
+:10ABC0004D48C66A4030476A022F01D0032F1AD180
+:10ABD000484A002040320CE048494300C95E1C232B
+:10ABE000D35E994203DC1E23D35E994200DA641CD3
+:10ABF000401CB042F0D3002C05D0FFF7D7FE4049EF
+:10AC00000870FAF700016F0080B2FB012F01D0033A
+:10AC10002F1AD1394A00203C4B60320BE041000032
+:10AC200024595E145FA14203DC0224145FA1420098
+:10AC3000DA6D1C401CB042F1D3002D05D0FFF7C8DF
+:10AC4000FE32490870FAF793FBF8BDF1B582B0FD0A
+:10AC5000F7EFFC274E274F0125019062B6387801A7
+:10AC6000281CD0022825D003283ED13068FAF7B03E
+:10AC7000F9FAF715FCFFF7B5F82548007900280325
+:10AC8000D024480078FFF74FF900017000801B487E
+:10AC90003D70C069012802D10298FFF781FF0024AE
+:10ACA00014E03068F8F739F8F7F7E6FCF7F773FFC8
+:10ACB000022038702C4609E00124F7F7DDFF012857
+:10ACC00004D1F7F78EFA03203870C40772B6E00794
+:10ACD00005D0F7F7D1FF012801D1C0070443002CAC
+:10ACE000BEDB0198C0B2FDF7AAFC2046FEBDF7F717
+:10ACF00094FA3D70D3E70C020020B802002070E601
+:10AD00000000F0E9000098010020AB0200200001E3
+:10AD1000710080A0010020AC02002010E800003F7C
+:10AD200001002010B5D748407A002801D101200049
+:10AD3000E0002002F00AFA10BD10B5002002F07900
+:10AD4000F902F01AFA002002F07DF9002002F083E7
+:10AD5000F9CD4880780107CA480ED4407A0028040B
+:10AD6000D1012002F0FBF9012003E0012002F0F6FE
+:10AD7000F9002002F0EAF910BD007A02F0EFF9FFC5
+:10AD8000F7D0FF10BDD8E730B50123BD4924208B93
+:10AD900071C8710001720080BC4882789A43827049
+:10ADA0008278FD24224082705A020A8000224A8062
+:10ADB0008A808478F7252C40847002240C724A72B1
+:10ADC0008178FB2211408170037030BDAE49B048DC
+:10ADD0004A8882628988C162AC498978C90703D0F0
+:10ADE0004169082211434161704710B5A7480078B6
+:10ADF00000280BD102F07FF9FFF7C8FF03210020E4
+:10AE0000FDF734FCA3490020FDF729FCA048406968
+:10AE1000C00701D000F02EF90001730080FFF7D8C1
+:10AE2000FFFFF78FFF10BD10B502F024F910BD9998
+:10AE300048416901221143416195488178042211FA
+:10AE4000438170704710B500F017F991488178FB85
+:10AE5000221140817010BD30B48D4A0128937802D0
+:10AE6000D1F724234001E0082423439370874A103C
+:10AE700072517230BC65E710B58448407A002800F2
+:10AE8000D0012002F067F910BD10B502F075F9018C
+:10AE900021484002F05FF910BD7D498A78000174B5
+:10AEA000008001231A438A707E49794A884201D979
+:10AEB000918000E090808EE710B502F03DF910BD62
+:10AEC0007949800040180068C0B2704770B50C46E0
+:10AED0000546090A02F030F9E1B2681C02F02CF9CB
+:10AEE00070BD81007048081801684068090201437C
+:10AEF00088B2704769488069082108407047C020BF
+:10AF0000C068694908420AD0FF20013081780229CF
+:10AF100005D1C078052802D166496448C8617047E8
+:10AF200010B50001750080FFF7ECFF5C4CFDF78F5A
+:10AF3000FBA169090707D4A16801221143A160C0E0
+:10AF4000B2FDF789FB10BDC0B2FDF785FBEEE7E966
+:10AF5000E7C020C0685649084209D0FF2101318A64
+:10AF600078022A04D1C978052901D15249C86170F3
+:10AF70004710B5FFF7EDFF494CFDF769FBA16909E3
+:10AF80000707D4A16849084900A160C0B2FDF76372
+:10AF9000FB03E0C0B2FDF75FFBEEE7A0688007FCB3
+:10AFA000D410BDE5E770B500017600800446FFF7D8
+:10AFB000ABFFA00701D101200443394E3F4D74700F
+:10AFC000E00712D0FFF7B1FF36494869800701D585
+:10AFD000092000E003200861FF20C8600320FDF77E
+:10AFE00068FB0320FDF756FB0EE000F04DF8A86863
+:10AFF000FF21C831B0608843401CA8603049086810
+:10B000007060800880000860A00710D5032002F05F
+:10B010001DF8002002F023F8002002F029F810208B
+:10B0200028610020FDF745FB0020FDF700017700B7
+:10B030008033FB70BD70B51B4C6578FFF78EFF0049
+:10B0400020FDF731FB002002F003F81D4E102030E8
+:10B05000610020FDF730FBE8070BD0134800210109
+:10B0600061FF21C1600320FDF71EFB0320FDF723D4
+:10B07000FB09E0144960680860A068B060A07840EF
+:10B080000701D5FFF7DEFEFFF778FF70BD064881A8
+:10B09000690907FCD44169490849004161704700CA
+:10B0A00000FE1B0020C002002000001240F3B80088
+:10B0B000000001780080FF010000001012402222F1
+:10B0C0000000444400000000144000201440034AE3
+:10B0D0001168C90FC90708431060704700000001DC
+:10B0E000014070B5FFF7BBFE01256D022846FFF752
+:10B0F000E0FEFFF7A9FE0324A0B20021FFF7E6FE61
+:10B10000641CAC42F8D340210220FFF7DFFEFA496D
+:10B110000020087070BDF1B5F94884B0827841789C
+:10B1200012028918C27800791204000610180C184F
+:10B130000820FFF7CFFE000179008005460920FFB7
+:10B14000F7CBFE0002FF2604992818EF36002901EC
+:10B15000D1FF26FD36B04200D80646012000250169
+:10B160009028460A30074680B2FFF7B6FE02A9488B
+:10B1700055B8B20021FFF7ACFEE34802A9405D4993
+:10B180005D884201D0002001906D1C082DE8D3019C
+:10B1900098012806D14007844203D3DB49A01988CF
+:10B1A0004202D9012005B0F0BD049800280CD0005F
+:10B1B0002507E02846123080B2FFF700017A0080B0
+:10B1C0008EFE2070641C6D1CB542F5D313E0CE4892
+:10B1D0000025401D21784219641C6D1C5170042DFE
+:10B1E000F8D306E02178281D641C80B2FFF773FEB7
+:10B1F0006D1CB542F6D30020D7E7FEB5C2480188E2
+:10B2000006794FBA4188C3484DBABF490979C90088
+:10B210000291032E01D2846A07E0062E01D2446A0D
+:10B2200003E0092E15D2406A44000846B7490831A8
+:10B23000401800794007400F01460190FF20F93087
+:10B2400000017B008002F07AF8854200D90546A70C
+:10B250004211D2E01B10E0092E09D1C06A8400AE71
+:10B26000484030406A032800D164000220E6E7A786
+:10B27000480121401D23E00020854200D9054609F0
+:10B280002E16D0A34902980831085801994F433F20
+:10B2900018084668430024009007E02046083080E4
+:10B2A000B2FFF71FFE38707F1C641C00988442F4C4
+:10B2B000D39648401D4670290A8170C5700021014F
+:10B2C00070FEBDF0B500017C00809548046895488B
+:10B2D000057895480078854200D905469448944AF7
+:10B2E00000881278DC231A40A272411C0A2289B21B
+:10B2F0006A435218093A62722554002021E00C2258
+:10B300008D4B4243D218537916791B0233431B0AE3
+:10B310006354537917791E0263183E435E70D678E2
+:10B32000977836023E43360A9E70D6789778360272
+:10B330003E43DE70127A1A710A315871401C89B28C
+:10B34000C0B2A842DBD37A49087800017D00804072
+:10B35000300870F0BD10B56F4C0146103C6268E0DB
+:10B3600068904207D3A368984204D2801A083080BC
+:10B37000B2FFF7B8FDE068401CE06010BDFFB58388
+:10B38000B000200F9E044601900EE00E980019F7C1
+:10B39000F79DFD16214843694940188178019808B6
+:10B3A00018C0B2641CA4B201900D988442EDD30081
+:10B3B0002549E0119804996843401880B200900E26
+:10B3C00098002440190290F7F781FD1621484300A8
+:10B3D000017E00805B49095A0120A04001422DD026
+:10B3E0000398012806D121460098FEF790FE0746F3
+:10B3F00028461AE002280C9811D128182146FEF799
+:10B4000086FE07460298F7F764FD162148434D492A
+:10B410004018001901794448406A081A0DE02818BC
+:10B420002146FEF774FE07460298F7F752FD1621F3
+:10B43000484344494018001900793754641CA4B2A9
+:10B44000092C01D20298C1E76D1CADB20D9885425E
+:10B45000B2D3002400017F008004E0305DFFF77F5D
+:10B46000FF641CA4B201988442F7D307B0F0BDF08A
+:10B47000B507469DB000202A491A900888FF25404C
+:10B48000BA19904888314E40BAF935A84200D8051B
+:10B49000462348199910384160199949198160006B
+:10B4A00021C160042F01D12A4E02E0052F00D129CD
+:10B4B0004E1E4C4034216A28480229007802D1C02F
+:10B4C0001C800880001C903B46184801F0D7FF06FE
+:10B4D0000447686E04047A006B000180008080B22B
+:10B4E0001890002017901B90B078FFF73BFF0024C6
+:10B4F00012E01C9A0FA8039005921B980496179AC5
+:10B5000018990090029201912B4621460120199A28
+:10B51000FFF73CFF641CA4B2114800788442E8D3D2
+:10B520009FE0FE020020DC02002084E300000020F7
+:10B530000020F0E90000100200203F01002020035D
+:10B5400000203602002028020020E003002000EC4A
+:10B55000000080EE000000F1000080F30000000118
+:10B56000810080E1000020416B826B891889B2184C
+:10B5700091016BC9B21791016B1C9841438CB2F0D9
+:10B5800078FFF7F2FE3079FFF7EFFE1C9A06A80469
+:10B5900096059203901899179A01910094029200CF
+:10B5A000212B460846199A5CE02168016BC16B01AA
+:10B5B0006BC06B58E001211891016BC26B89182296
+:10B5C000688918C9B21791C16A002902D101201AED
+:10B5D0009049E0016B1C9AC06B51430818216840E8
+:10B5E0001880B200018200801B90606A022802D09D
+:10B5F000606A032802D1F079FFF7B9FE606A01287A
+:10B6000002D0606A032802D1307AFFF7B0FE606A88
+:10B61000022802D0606A032810D11C9A06A8039061
+:10B6200005921B980496179A18990090029201911E
+:10B630002B4600210220199AFFF7ADFE606A01280F
+:10B6400002D0606A032811D11C9A06A803901B98A7
+:10B6500004960592401C80B2179A18996C4607C44C
+:10B660002B4600210220199A0001830080FFF795E4
+:10B67000FEFF481A9901704770290A8170C5700948
+:10B680002101711DB0F0BDF0B5F94889B0401F012E
+:10B6900088F84C49BA05914188057900794FBAC0BC
+:10B6A0000008902046FF308130FF3441340790037A
+:10B6B0002D01D2A66A07E0062D01D2666A03E009D1
+:10B6C0002D15D2606A4600EC4808990818007940A8
+:10B6D00007400F01460490FF20F93001F043FE8738
+:10B6E0004200D907460598B0420FD2301A000184B3
+:10B6F00000800EE0092D08D1E06A86000798406AB4
+:10B70000032800D176000220E6E70121DA489EE016
+:10B710000020874200D90746092D65D108200290F4
+:10B72000FEF706FC01900598C6B2C01906904FE0DE
+:10B73000B00800218200B21AE36A92B28342079BEA
+:10B740005B6A27D9012B0ED0002A06D0012A07D028
+:10B75000022A0ED14000CA491AE04000CA4917E047
+:10B760004000C94914E0002A0AD0012A0BD0022A5D
+:10B770000CD00001850080032A1ED10199C140C967
+:10B7800007C90F19E04000C24904E04000C2490166
+:10B79000E0C2494000095A0FE0032B0DD1002A1CDA
+:10B7A000D0012A1DD0022A1ED0032A05D1E16A4108
+:10B7B0001A0198C840C107C90F080A090208438145
+:10B7C000B20298FFF7ADFB0298801C80B20290761F
+:10B7D0001C0698F6B2B042ADD81FE0E16A401AD11B
+:10B7E000E7E16A401AD1E7E16A401AD1E7A54908C2
+:10B7F00098049A08580599000186008051430E1854
+:10B80000104678430024039007E020460830317842
+:10B8100080B2FFF77EFB761C641C03988442F4D34D
+:10B820009748390A45708170C770092D01D13221BE
+:10B8300010E0032D04D39449EA005118097909E076
+:10B84000984949690129F6D18F4AE900891809798F
+:10B850000822114301710021017009B0F0BDFEB54D
+:10B860008748401F01884EBA418800794CBA019040
+:10B87000FBF789FD00200090019802280001870055
+:10B880008003D0032807D0042833D11B2C00D91BF8
+:10B89000240025864F24E0FF20F930844200D9049B
+:10B8A00046002511E077190921384601F065FDC1F0
+:10B8B000004118791AFEF741FCC1B22846083080D1
+:10B8C000B2FFF729FB6D1CADB2A542EBD313E070BC
+:10B8D00019395C2846093080B2FFF71DFB6D1CAD9D
+:10B8E000B2AC42F4D86748153841780820FFF71306
+:10B8F000FB01E0012000906348009901700199412B
+:10B90000700001880080210A8170C470FEBDF8B506
+:10B910005E496848491F0E784F78008800900124DE
+:10B920000025654801F073F83046574E153E012852
+:10B9300008D002281ED0032811D0042833D100F0EB
+:10B9400018FE2EE05B48093800F074FF7070C0B23A
+:10B95000002802D0012108437070002423E05448DD
+:10B960003946093800F0E5FE7070C0B20028F4D105
+:10B970000125F2E73078002805D0012813D10020F6
+:10B9800001464B4A04E000018900804A480938001A
+:10B99000F0BDFD08E01154401CC0B21B28FAD3458D
+:10B9A00048093800F05EFD7070E4E7009801F0315E
+:10B9B000F837480470717841708570F8BDF0B54073
+:10B9C00048A5B0006801903148401F01884EBA4137
+:10B9D0008800794DBA2490002809D001280FD002A0
+:10B9E0002811D138490120029149020F0C0EE0368E
+:10B9F000483749C009C909401A35490291F4E7326C
+:10BA00004901200291F0E70020074600018A0080EA
+:10BA10000290864201D2802D01D9112167E00020D9
+:10BA2000044603902819083080B2FFF780FA1B49BA
+:10BA30001039095D884201D001200390641CA4B232
+:10BA4000082CEFD30398002804D012492120087055
+:10BA500025B0F0BD002408E02046083080B2FFF792
+:10BA600066FA04A90855641CA4B2A542F4D8029849
+:10BA7000F101081841198020021B04A8001901F0E7
+:10BA8000ADFC2846103080B2FFF751FA0402284678
+:10BA900000018B0080113021E0E1020020B0E800BD
+:10BAA000008CE30000A801002098010020B80100EC
+:10BAB00020A0010020C0010020B001002080E7008C
+:10BAC00000111C00200403002010270000100200B9
+:10BAD0002000EE000000FF000000E6000080B2FF42
+:10BAE000F728FA044304A9284600F0F6FE8442032E
+:10BAF000D03121FC480170ADE7002E04D1042204AE
+:10BB0000A8029901F06DFCB81980B204A9019AF459
+:10BB1000F78BFE002800018C008000D04120F24904
+:10BB2000087024984870280A8870CD7024980028DE
+:10BB300093D1EE490870EE480188C907C90F01800A
+:10BB40008BE7FEB5E948401F01884288007949BA71
+:10BB500055BA0090002806D001280BD002280CD13D
+:10BB60000120E44E0BE0E448E54AC009D209801AFE
+:10BB7000E34E04E00120E04E01E000200646814251
+:10BB800001D2802D03D9D84801210170FEBDC80122
+:10BB900087190024019007E0204600018D008008ED
+:10BBA00030395D80B2FFF7C6F9641CA4B2A542F536
+:10BBB000D83946284600F095FE0446010A28460872
+:10BBC0003080B2FFF7B7F928460930E1B280B2FF02
+:10BBD000F7B1F9002D03D171880198081A85B2C315
+:10BBE000480021017000994170290A8170C570FEDA
+:10BBF000BDFEB50220FFF7A2F9044640067ED4013F
+:10BC0000E000F06DFFFFF7B4F90028F9D1B84E005D
+:10BC100025761FE81CFFF792F970556D1CEDB200F8
+:10BC2000018E0080052DF7D30521B24801F0F9FB04
+:10BC3000A3069B0E0027B048AE4D0B2B51D008DC5D
+:10BC400001F042FC0BC4C2272B2EC23134373A3DDF
+:10BC5000C200102B77D00BDC0C2B5CD00D2B5DD0F1
+:10BC60000E2B6DD00F2B6AD1A8493078087036E0C2
+:10BC7000112B76D0122B75D0132B74D03F2BF2D111
+:10BC80003078FE2870D0FF286FD10120FFF77AFAB4
+:10BC900098E02F708020687098E0FFF757FF95E0DC
+:10BCA000FFF799FE00018F008092E000F04FF98FBE
+:10BCB000E0FFF73EFE8CE0FFF7E8FD89E000F0FDD5
+:10BCC000F886E00078002856D03678F00701D0F9E1
+:10BCD000F720FCB00701D5F9F79AFB700701D5F9F9
+:10BCE000F7C8FB2F7074E00078002844D00120FBD7
+:10BCF000F755FB00F031FEFAF737FCC007F9D162C7
+:10BD0000B68448C06A00E07EE0002861D000F024DC
+:10BD1000FEFEF7EBFF0128F9D05AE0FFF7D2FC57FF
+:10BD2000E000267700F81C80B20001900080FFF749
+:10BD30001EF97A49761CC853192EF5D3794901208A
+:10BD4000087048E004E000E043E07548077042E016
+:10BD500030790007000F034601F0BBFB070505051E
+:10BD60000505050D1000FFF7ADFB34E009E00BE021
+:10BD70000DE029E02AE000F071F82CE001202870A5
+:10BD800029E000F045F826E0FFF76EFA23E0654869
+:10BD9000BB22016892006846F5F7CBF9602168463E
+:10BDA000F5F7CFF9064601466846F7F789FE000128
+:10BDB00091008031466846F7F70FFF02463146682A
+:10BDC00046F8F7CCFD6846F5F7D2F98FE700206416
+:10BDD000E70120002801D0A409A4010026A95DF0F4
+:10BDE0001CFFF7B2F8761CF6B2052EF7D350488048
+:10BDF00022017851400170C8B2C109C901214340F4
+:10BE00002001430220FFF7A0F800F0E1F900F0174D
+:10BE1000FAFEBD7047F8B53A480025401F00783853
+:10BE20004F002805D0012805D0022816D1384C0231
+:10BE3000E0394C000192008000E0374C2088668891
+:10BE4000214600F05BFDA1190988884200D0012538
+:10BE50003D70020A7A70B870080AF8703971F8BD3E
+:10BE600001203870F8BDF8B5314807682648401FF2
+:10BE7000018840884EBA45BA2F480A2100784843C5
+:10BE8000801C864201D2801B00E00020854200D940
+:10BE90000546002D01D0FFF74EFA002408E0A01956
+:10BEA000C019417A2046083080B2FFF750F8641C70
+:10BEB000AC42F4D3144800210001930080017006C5
+:10BEC000214170290A8170C57001210171F8BDF806
+:10BED000B50F480E4E0078002802D101203070F8CE
+:10BEE000BD0A48401F047816480788164800F0AA83
+:10BEF000FD0025002C28D0012C28D0022C28D003AE
+:10BF00002C28D18420FAF767F825E00000E1020030
+:10BF100020EA020020FC02002000EE000000FF00EA
+:10BF20000000E60000FF020020F0E90000400200EF
+:10BF3000202002002010020020FE020020000194B8
+:10BF4000008020030020040300201027000081202F
+:10BF5000DBE78820D9E78220D7E70125384600F0C3
+:10BF600074FD3570F8BDF8B51F48018807794EBAE1
+:10BF7000418800204DBA0090092D00D90925012FD4
+:10BF800003D0022F0FD0032F21D1002408E0204638
+:10BF90000830FEF7E5FF3119144A641C5054E4B22E
+:10BFA000A542F4D815E00820FEF7DAFF0E49103953
+:10BFB0000870002408E020460930FEF7D1FF31194F
+:10BFC0000A4A0001950080641C5054E4B2A542F472
+:10BFD000D801E00120009004480099401D017047FD
+:10BFE00070290A8170C570F8BD0000DC02002008CD
+:10BFF0001C002070B5FEF77BFF0120FEF7A2FFFEBC
+:10C00000F76BFF01246502A0B20021FEF7A7FF64D1
+:10C010001CAC42F8D3674D002460004119497828D0
+:10C020005CFEF79CFF641C342CF6D3FF240134A182
+:10C03000781C20FEF793FFE1781D20FEF78FFF5D4F
+:10C040004881881E20FEF7000196008094FF5B4C1B
+:10C0500023202034217EFEF784FF617E2420FEF71A
+:10C0600080FFA17E2520FEF77CFFE17E2620FEF7E3
+:10C0700078FF217F2720FEF774FF617F2820FEF7DD
+:10C0800070FFA17F2920FEF76CFFE17F2A20FEF7D9
+:10C0900068FF4B4C607A227A010211432D20FEF793
+:10C0A0006AFF484801883220FEF765FFE07AA27AED
+:10C0B000010211433620FEF75EFF607B227B010206
+:10C0C00011433820FEF757FF3F4D68690001970084
+:10C0D000803F4C012806D1E069C1B23420FEF7430D
+:10C0E000FF206A05E0206AC1B23420FEF73CFFE081
+:10C0F00069C1B23520FEF737FFE86881B23A20FE09
+:10C10000F73CFF286981B23C20FEF737FF31480138
+:10C11000784020FEF728FFFBF701FB2F4D0A21286E
+:10C12000782E4E484331884018083881B24320FEAB
+:10C13000F724FFE06AC1B24520FEF715FF3088C141
+:10C14000B24620FEF710FF2648008841060206C9C5
+:10C150000F0001980080D20F4900920080060A4328
+:10C16000C00FC10011434720FEF700FF2978482087
+:10C17000FEF7FCFE00216120FEF7F8FE00216220A0
+:10C18000FEF7F4FE194D002428190179204663308A
+:10C1900080B2FEF7EBFE641C202CF5D3144D002476
+:10C1A000281901792046833080B2FEF7DFFE641C37
+:10C1B000402CF5D370BD10B500F081FC10BD704768
+:10C1C0000000D4E3000040F1FF0F00E60000FC0295
+:10C1D000002080E700000001990080F0E9000018CD
+:10C1E000020020200300203602002022030020004D
+:10C1F000EE000000FF000070B5FEF7F7FD0020FE26
+:10C20000F7BBFEC009C001FF4E707000203070FE09
+:10C210004C607F8007800F01281AD002281DD1FEB4
+:10C22000F789FE30240B2500F078FC0020FEF7A4EF
+:10C23000FE0146F2782140914207D101462942048D
+:10C24000D1C0097178C0018842EDD0FEF7CEFD70F3
+:10C25000BD0120307000F099FBF06000019A008071
+:10C26000FEF76BFE207F00F011FDF1E7F8B5E74C1B
+:10C270002078002820D0E648C17F807F0D0205434A
+:10C2800030260B2700F04CFC0020FEF778FE01461C
+:10C29000E278314091420DD1014639420AD1C009BC
+:10C2A0006178C001884205D100F072FBE168401A54
+:10C2B000A842E7D900202070F8BD10B5FBF795F82B
+:10C2C000D44B0021D34A5C338C00045910C2491C62
+:10C2D00089B29A42F8D3CF4ACE4B6432E8338C000D
+:10C2E00000019B0080045910C2491C89B29A42F88F
+:10C2F000D98A00CA4B8258DA60491C89B28A008305
+:10C3000058C74A5360491C0904890B4058D0601033
+:10C31000BDF8B582000C46C34800271C211518291A
+:10C3200060C04AA0008618FF2C00D031600A20FCB3
+:10C33000F7F5F9102028602320FCF7F0F9B6480142
+:10C3400068020311430160C1680906FCD58021C160
+:10C350006000202860FF2C00D03060AF48C030C0A3
+:10C3600068AB49FF3800019C00800622FF388A5ED6
+:10C3700002385043002800DA40420969884200D957
+:10C3800001273846F8BD70B5FBF734F8A24CA74A30
+:10C39000218900204300D35A8B4203D8401CC0B2ED
+:10C3A0002028F7D3202801D11F2001E000280CD03D
+:10C3B00043009D18203DED8BD35A4D1B591AADB249
+:10C3C00089B28D4201D2401EC0B24100515A218132
+:10C3D0005321934A4906D160914D954969618F4A2D
+:10C3E0009549403251620104944800019D0080014A
+:10C3F000438C48803081639249C160C16B8909894F
+:10C4000001C163874E9048C03670600320B0608ED3
+:10C410004830618E4830620021B16129618D482821
+:10C420006028684000FCD401228048D2074260891D
+:10C430004AC2607E4B00208200D2181160401CC0AE
+:10C44000B24128F8D3286980218843286170687830
+:10C45000490007C00E4031085E218900F0DAFFE094
+:10C46000806F48203040787D21C900484380B20069
+:10C47000019E0080FCF75AF970BD70B5FAF7BFFF56
+:10C48000694B0021684A5C3310CA8D00491C445135
+:10C4900089B29A42F8D3644A634B6432E83310CAD3
+:10C4A0008D00491C445189B29A42F8D95F4AD2683A
+:10C4B0008B00C2505E4A491C536889B28C000351FC
+:10C4C000491CD2680904890B425070BDF0B585B093
+:10C4D0000020029053482030C17983790A025049E4
+:10C4E0001A430A8142790379100218430861FFF761
+:10C4F000C4FFFFF700019F00804DFF09215948004C
+:10C50000F0BAFF0025681CC4B2039029E0EE08E7EA
+:10C51000086A070121520F08469040C0B20190609E
+:10C5200007400F8140C8B2504A0090915D019801C8
+:10C530004214D0D05D0099084210D021462846FF11
+:10C54000F7F1FE00280AD04748019A815D11438126
+:10C5500055C15D009A1143C15501200290641CE44D
+:10C56000B2412CD3D300F0E8FA0398C5B2412DC9EB
+:10C57000D3FFF7AFFE029805B00001A00080F0BD28
+:10C58000F8B52A4800272030417A037A0A02264962
+:10C590001A430A8142790379100218430861FFF7B0
+:10C5A00071FFFFF7FAFE0921304800F067FF002411
+:10C5B000E5086107490F01208840C6B22C48405D5C
+:10C5C00030420AD0FF212046FFF7AFFE002804D0FA
+:10C5D0002648415D314341550127641CE4B2412C9A
+:10C5E000E6D3FFF779FE3846F8BDF8B509211F48B4
+:10C5F00000F044FF00201D4D1E4F1E4E0AE00001BA
+:10C60000A100803A5CD1085407640F6B5C0122A240
+:10C61000401343401C6B54C0B2716A8142F1D8147C
+:10C6200048FFF7B0FF124904460922881827E0E8BE
+:10C6300002002000E6000000001140000001400060
+:10C64000000340000411403CE40000FF013AC03AFE
+:10C65000A000F040030040010003C07240008010C1
+:10C660000DCA9800020080000300C05108000011AC
+:10C670001C0020081C002000EB0000F0E900000076
+:10C68000F0E6FE0001A20080A248FFF729FFA249C0
+:10C69000044308460922123000F0DCFE09229D49BD
+:10C6A0009D4800F0D7FE2046F8BD10B59B489C4B36
+:10C6B00002881846D91D94058030F931002C10DB12
+:10C6C000C41DF9346469002C22D15C68A4061FD112
+:10C6D0009C6DA4061CD1C46AA40619D10C68A406DA
+:10C6E00016D1D20516D4DA68F0242240402A0FD899
+:10C6F0001A6E2240402A0BD8406B2040402807D8B1
+:10C7000088682040402803D80001A30080F4F76A1D
+:10C71000F9042801D9012010BD002010BD10B582F8
+:10C7200049824800F015F982490988884201D00100
+:10C730002010BD002010BD10B57E4800240168EF18
+:10C74000221140012900D10124FF21016000F00ED7
+:10C75000FBFFF7E4FF002811D102200443FFF7A7F5
+:10C76000FF00280BD1012040020443FFF745FF00E2
+:10C770002804D1FF2120460531084310BD20461072
+:10C78000BDFFB5002581B00E461F462C460001A412
+:10C7900000800120A04030420CD02246039901982D
+:10C7A000FDF7FFFCC0B2874202D30A99814201D94A
+:10C7B0006D1CADB2641C092CEBD32846E8E6F3B53A
+:10C7C00087B00026FAF72AFE03905C480690006ABC
+:10C7D00002285B48007803D1C01C80088000FFE776
+:10C7E000032104900902039800F052FE574955486E
+:10C7F00008600898002801D0012300E000234B4C7A
+:10C800002034E17BA07B039AFDF71AFF4C480027F8
+:10C8100040380001A50080059023E004987843800B
+:10C82000B202903846F6F7B6FB162148434949084C
+:10C830005A002501900FE0A27A0092E37A029A0151
+:10C84000990398FFF7A2FF801986B20298401C80D6
+:10C85000B26D1CADB202903B4800788542EBD30527
+:10C86000987F1C006BB842D8D80898002801D001E6
+:10C870002300E00023617C207C039AFEF709F80680
+:10C8800098406A022803D00698406A032817D10509
+:10C8900098006B0599C96B0001A6008041180698A5
+:10C8A00000680D182846F6F778FB162148432A49F8
+:10C8B000095A227B0092637B2A460398FFF768FFA0
+:10C8C000801986B2F0B209B0F0BD70B505460024FB
+:10C8D00019491A4800F044F801460520FEF773FB99
+:10C8E000174801880720FEF76EFB1C4EB078002821
+:10C8F00001D1102414E02846FFF751FE002800D093
+:10C9000002242846FFF7F6FD002801D00420044346
+:10C9100000212846FFF758FF002801D00001A7009A
+:10C920008008200443A0B2B480C0B270BD081C00CF
+:10C9300020111C002022030020B0E8000000E600C7
+:10C9400000FC070000FCED00000000024030EA009F
+:10C9500000E100002080EE0000B002002000EC00AA
+:10C9600000E802002070B505460B4800230B4C1070
+:10C97000E0CA5C120250400822060402D540006062
+:10C980004000E04000521E120680B2120EF4D15B4D
+:10C990001C9BB2AB42ECD370BDFFFF000021100026
+:10C9A000000001A8008070B5DF4C25696169401B5B
+:10C9B00000020E4600F033FDFF2809D9010A0A469D
+:10C9C000724352192261E26809025218401AE26069
+:10C9D000E168081870BDD4484068E4E7F8B5D34C66
+:10C9E0002188D04D2888064600F019FD2188414352
+:10C9F000B14200D2401C032800D2032021886A697A
+:10CA00005143090ACB4A491E914200D911460604F6
+:10CA10000E43FBF79CFEC74B054619680327BF036F
+:10CA20000120B94380030001A90080084318600178
+:10CA300020C00308431860BD4C2069FF22023290D9
+:10CA400043BF4A10432061BE4822690242FCD1BD67
+:10CA50004A04201060A660BC48E060BC48206146E3
+:10CA600000206932468243FBD139431960B949023B
+:10CA700020FBF77EFE03210220FBF781FE0220FB54
+:10CA8000F788FEB44920690842FCD1B34900200868
+:10CA900070E8B2FBF762FEF8BDA649002801D1019B
+:10CAA0002005E04B221201904201D90001AA00802A
+:10CAB0000A8000E0088096E7A0499D4A884201D993
+:10CAC000118000E010808EE710B504464000201869
+:10CAD000C82800D2C820FFF7EFFF954920468C6197
+:10CAE000FFF7DDFF10BD1CB5684600F005FC00280F
+:10CAF000FAD16B46197901208007212902D399497F
+:10CB0000498AC16001684900490801609648016985
+:10CB10000422114301611CBD10B5FEF788FAFAF733
+:10CB200084FCFFF7E0FF72B6904881688907FCD566
+:10CB30000001AB008062B672B68A4C207800280BE8
+:10CB4000D106E0BFF3508FBFF3608F30BF62B67283
+:10CB5000B620780028F5D001E0FFF747FF0020203D
+:10CB600070754840687349486062B6FAF764FCFE25
+:10CB7000F786FA10BD70B5FBF7F1FD724A11680334
+:10CB8000239B0301249943A4030C4314600124E470
+:10CB9000030C431460684D774C2C6119431160FB02
+:10CBA000F7E1FD70BD10B572B67D20C000FFF779CA
+:10CBB000FF00F0B2F80001AC0080634C062060601A
+:10CBC00000F0A6F86E48407F4006800F01D1022099
+:10CBD00004E0012801D1032000E00120FEF76CFAF7
+:10CBE000FFF786FFBFF3508FBFF3608F30BFFEF7B4
+:10CBF000A6FA00F094F86248606000F089F8FFF748
+:10CC0000BCFF62B610BD70B5FBF7ABFD4F4C2168A1
+:10CC10000325AD030122A94392030A4322600122A6
+:10CC2000D2030A432260564A6260444AD368554E92
+:10CC30003340D3601369052636040001AD0080330C
+:10CC400043136113699B03FCD5294321603C4C00CD
+:10CC500021A160E1605168C0B22161FBF788FD014C
+:10CC6000204003606170BD70B54A4B48485861056B
+:10CC700020186172B63348416842688A42FCD0008D
+:10CC800021996144684168A142FCD0986940498972
+:10CC90001C0D1A0420186162B62046FFF790FE278B
+:10CCA0004E002DF0603461B0600DD03A487D210017
+:10CCB00078C9024843294600F0BEFB706100280095
+:10CCC00001AE008001D10120706170BD01204003E0
+:10CCD000FAE710B50446FFF78DFE1A498968401A35
+:10CCE000A04203D3FFF7C2FF012010BD002010BDFA
+:10CCF000002811D02A49884200D9084627490978D6
+:10CD00004843254948610520086100208861086979
+:10CD1000C003FCD50420086170470E49086803224F
+:10CD200092031043086070470A490868032292037F
+:10CD300090430122920302430A600122D20310436E
+:10CD4000086070470001AF00800403002000040168
+:10CD50004030030020FFFF0000000001400C0C04E5
+:10CD6000000A0A000080E200E00D0200000101015B
+:10CD700000F9DC0000080808003203002040F1FF41
+:10CD80000F00ED00E0000012400109010000E60084
+:10CD90000006000080FFF7FE20FFFFFF0000E0001C
+:10CDA000E02403002050C300001CB50B4C002020E1
+:10CDB000706080684600F0ACFA00280CD16B4658D1
+:10CDC00088902808D11888FF380001B00080043806
+:10CDD000722803D2034860800A2020701CBD200303
+:10CDE0000020FA030000454908788A68C01EC0B2D6
+:10CDF000105C02228A5E4042904200DD48800220A0
+:10CE0000085E002801DD0020488070473D48C17B56
+:10CE1000242901D224207047C17B302901D9302038
+:10CE20007047C07B7047F0B5374F00213A7B7B7B62
+:10CE30008C460E4614461D460421202A00D00126A9
+:10CE4000202B01D001229446491E0BD44A00000138
+:10CE5000B100802D4B8A18D7187A78BB783F788735
+:10CE600042EDD314461D46EAE72948002E00D0C4FF
+:10CE7000616146002900D00562F0BDF8B50446C0E6
+:10CE80001EC5B220461838C6B222481D4F242C0BAE
+:10CE9000D22149895D064681600520FBF766FCB812
+:10CEA00068405D7060F0200AE0B968495D05464160
+:10CEB00060F020FBF75AFC1748805DA8600520FB56
+:10CEC000F754FC154920464843FBF791FCF8BD7028
+:10CED000B504460001B200800B4D0420285EA0423C
+:10CEE0000FD00D4E00207060F020FBF741FC297838
+:10CEF000A86840182038407F00197060F020FBF7C8
+:10CF000037FCAC8070BD00002403002000E6000068
+:10CF1000C0F1FF0F00FF004000FF01409CE4000053
+:10CF200040420F00F0B501090007000F85B00090E6
+:10CF3000012901D8072802D9002005B0F0BD8800DA
+:10CF40008A490C58A00703900FD0E00708D0257A33
+:10CF5000607A00020543A07A0001B30080E17A09FB
+:10CF600002084301E0258960890004054300E0A52B
+:10CF7000680098039B410042180720904029468191
+:10CF80004302209040002B34D0E20710D008432009
+:10CF900072010A6172010CA172000EE072267E60BD
+:10CFA0007E00020643A07EE17E0902084305E008F8
+:10CFB000432081000C6081268B608B0004064300B7
+:10CFC00098012181403046039A8843002A37D0E2F5
+:10CFD0000713D02076020A6276020CA2760001B412
+:10CFE0000080000EE076277D607D00020743A07D73
+:10CFF000E27D1202104308E00843A060A669E1E761
+:10D000002083000C6083A78AE08A0004074300980D
+:10D010000F228000824038469043039A002A2BD08A
+:10D02000E20712D02075020A6275020CA275000E8A
+:10D03000E0752078627812021043A278E3781B0230
+:10D040001A4307E0A0616769E1E7A082000CE08273
+:10D050002088628812041043019001228843A307AC
+:10D0600012D00001B50080E3070BD0014321700806
+:10D070000A6070080CA070080EE07009E060612082
+:10D0800068ECE701432180080C608001E001432146
+:10D09000603B49086802908008800010430860C81F
+:10D0A00020FFF737FE039800280FD0E00708D020B4
+:10D0B00079617909020843A179E2791202114301E9
+:10D0C000E0A088E1880904084300E0606803990053
+:10D0D0002931D0E10720D02572290A6172290CA1DB
+:10D0E00072290EE17226760001B60080310A61765F
+:10D0F000310CA176310EE1762775390A6175390C4C
+:10D10000A175390EE175019921700199090A6170C3
+:10D110000199090CA1700199090EE17013E02581B4
+:10D12000290C61812683310C6183A782390CE1824D
+:10D13000019921800199090C618004E0A560A66134
+:10D140006761019921600F4A029911600099C840F6
+:10D15000C007C00FFBE670B50B4C607DFFF7ECFE1F
+:10D16000C507ED0FA07DFFF7E7FEC0070001B70080
+:10D1700080860F2E43E07DFFF7E1FEC007400F30B1
+:10D180004370BD0000B8E400000020144020E60019
+:10D19000000C49CA6803231B029A4300020243CAD7
+:10D1A00060704708494A690F231B049A4300040230
+:10D1B000434A61704703498A6910239A4300010278
+:10D1C000438A6170470000144070B5C0210278CCDA
+:10D1D000683049314D4078012A22D1400008624828
+:10D1E0006930229043022210434861012000F0126E
+:10D1F000F90001B80080012000F0FBF8042000F0E5
+:10D2000015F9042000F0FEF8A8158178022904D150
+:10D21000C078052801D12248C461286880088000B0
+:10D22000401C286070BD4A6932239A4300010243C2
+:10D230004A61012000F0FAF8012000F0E3F806202E
+:10D2400000F009F9012000F0FAF828688008800051
+:10D25000801CE6E710B51048416941610221416236
+:10D260000021C1628162FF21C160012101610320AF
+:10D27000FBF7BCFA03210001B900800846FBF7A7C1
+:10D28000FA0A490320FBF79CFA0320FBF7AAFA10DD
+:10D29000BD074A8000801801607047FEE70000006B
+:10D2A000001240002014400000144099DD000000EE
+:10D2B0001012400E4A1168EF23C0071940C00E0833
+:10D2C00043106070470A498A6807231B039A43008A
+:10D2D0000302438A60704705484068C006C00F706B
+:10D2E000470349086910221040086100097047008F
+:10D2F00000144070B5FBF755FA0D4A0001BA0080E2
+:10D30000116803239B0301249943A4030C43146075
+:10D310000124E4030C431460084D074C2C61084DB4
+:10D3200004242C6019431160FBF742FA05490120DF
+:10D33000087070BD000001400501010000040140BB
+:10D3400080E200E03203002070B50546114E10481F
+:10D35000B060FBF729FAF102716071680029FCDB0B
+:10D36000B4687168C0B20E05360DFBF721FA200FC4
+:10D370000A2801D0012070BD2C80200C28712002C9
+:10D380000001BB0080000F68712003000FA8716EC0
+:10D3900080002070BDB6D300000000104070B515AD
+:10D3A00049C868154DC8600969144C014029608856
+:10D3B0000701D5206880472868400701D56068804C
+:10D3C000472868000701D5A06880472868C0060183
+:10D3D000D5E06880472868800601D5206980472805
+:10D3E00068400601D5606980472868000601D5A01D
+:10D3F00069804770BD0000124034030020C0E40083
+:10D4000000084A11680001BC0080FD23C0071940D4
+:10D41000800F08431060704704498A6838239A4394
+:10D42000C00002438A607047000000001440074AB1
+:10D430001168FE23C0071940C00F084310607047F1
+:10D4400003498A68D208D20002438A60704700000C
+:10D45000144004498A6807235B029A43400202434E
+:10D460008A60704700000000144004498A68FF2366
+:10D47000C1339A43800102438A6070470000000074
+:10D48000144030B50B46014600200001BD0080204D
+:10D4900022012409E00D46D5409D4205D31D469545
+:10D4A00040491B2546954040191546521E002DF156
+:10D4B000DC30BD70B500242546002801DA01244087
+:10D4C00042002901DA01254942FFF7DDFFAC4200A5
+:10D4D000D04042002C00D0494270BD03460B439B14
+:10D4E000070AD102E008C9121F08C0042AFAD203B1
+:10D4F000E00B780370491C401C521EF9D27047D2D1
+:10D50000B201E00270401C491EFBD27047002200AD
+:10D5100001BE0080F6E710B50446084611460246F3
+:10D520002046FFF7EFFF204610BD021D0321521ECB
+:10D53000137800021843491EF9D57047064C01259F
+:10D54000064E05E02046E36807C82B439847103491
+:10D55000B442F7D3F3F7A2F9DCE400000CE50000D5
+:10D5600070B58C180578401C6B075B0F01D10378F0
+:10D57000401C2A1106D10278401C03E006780E7088
+:10D58000401C491C5B1EF9D12B0706D4002301E087
+:10D590000B70491C0001BF0080521EFBD50AE0033E
+:10D5A00078401CCB1A921C03E01D780D705B1C495F
+:10D5B0001C521EF9D5A142D7D3002070BD30B474DF
+:10D5C00046641E2578641CAB4200D21D46635D5B39
+:10D5D00000E31830BC184702E008C8121F08C10059
+:10D5E0002AFAD170477047002001E001C1121F00E4
+:10D5F0002AFBD1704701020408102040800101017C
+:10D6000002010102010102010102010101006F5347
+:10D61000B2006F57B2006F4BB20001C00080006FC4
+:10D620004BB8007943B2006843B200010202030321
+:10D63000040400010000000100008000000055000B
+:10D64000000040000000330000002A000000240019
+:10D650000000200000001C00000005720000D172D4
+:10D660000000057200005174000005720000B573DF
+:10D670000000057200009378000005720000E77852
+:10D6800000002979000073790000BD7A0000C17A9A
+:10D690000000AB7B0000DD7B00002D7C0000000162
+:10D6A000C100804D7C0000517C0000D97C0000014D
+:10D6B0007D00008D7D0000057200000572000005F0
+:10D6C000720000057200000572000005720000057E
+:10D6D000720000057200000572000005720000056E
+:10D6E000720000AF780000E37800004D7E00000576
+:10D6F0007200000572000005720000057200004A09
+:10D70000010000240200204B010000290200204CEF
+:10D71000020000320200204D010000220200204ED3
+:10D720000200000001C20080300200204F01000012
+:10D7300023020020500100002502002051010000BA
+:10D74000CE010020520200002603002093020000B8
+:10D750003802002058010000730200205901000027
+:10D7600074020020700200008C0000207102000092
+:10D770008E00002072020000900000207302000062
+:10D780009200002074020000940000207502000046
+:10D79000960000207602000098000020770200002A
+:10D7A0009A000020780100000001C300808600007C
+:10D7B0002079010000870000209B01000072020018
+:10D7C0002000301340000400401340000201001309
+:10D7D00040573013402D3113400433134001601380
+:10D7E00040800F010403010C100D080EAC11011252
+:10D7F000031302180919041AF01C0C1D101E7120C5
+:10D80000DC2101220223062440261028142B073095
+:10D810001F3310350836E037073A803B803F14400D
+:10D82000424101450C460E470B481549FF0001C413
+:10D8300000804AFF4BFF4EF04F44500C54015804F7
+:10D8400059045A045B045F0166C06A406B0284039A
+:10D8500086149073920C965E9C739E04A080AC29F3
+:10D86000AE10B00FB280B410B660B880BA02BE502D
+:10D87000C001C505C601C805C9FFCA07CBFFCC401A
+:10D88000CD20CEF0CF05D008D804DA04DF01E04087
+:10D89000E1A8E240E3200040050407200A810B08CC
+:10D8A0000EA1100812201301158016401A811B408A
+:10D8B0001C400001C500801DA11EA01F0C200421DA
+:10D8C00040220423012B48310132A03A403B014061
+:10D8D000444201458049044E205008528056405928
+:10D8E000025A485B20C021C2BBC49ECA05CC0DCEE3
+:10D8F00009D01DD60FB102B280B520B6401001008C
+:10D900000200020001AA00800066005500490040A4
+:10D910000038000001B9008600540026001B0027D3
+:10D9200000370052009400000109214774A3CDED97
+:10D93000FEFEEDCDA374470001C6008021090A2533
+:10D940004F80B1DBF6FFF6DBB1804F250A0B2A587A
+:10D950008DC0E8FDFDE8C08D582A0B0D30649CD0C9
+:10D96000F3FFF3D09C64300D0F3771ADE0FCFCE0A9
+:10D97000AD71370F114080C0EFFFEFC08040111430
+:10D980004B92D4FBFBD4924B141858A8E8FFE8A89C
+:10D9900058181E6AC0F8F8C06A1E645B51463A2DDA
+:10D9A0001F100000C701CD01D101D501D901DB0154
+:10D9B000DE01E001E2010000A50102030001C70051
+:10D9C00080FFFEFD5A5453473420444654900500CE
+:10D9D00020320200005C0E002032020000260A0005
+:10D9E00020320200006C09002032010000381200D1
+:10D9F0002032010000020E00203201000000000071
+:10DA000000320100000000000032010000000000B0
+:10DA10000032010000020003C304000510060007E5
+:10DA200032080009340A000B410C000D630E000F90
+:10DA3000831000110212021300180019071A1E1B8E
+:10DA4000290001C8008022082F02300231013E0067
+:10DA50003FFF41024209490A4A004B0E4C024D0E5B
+:10DA60004E044F0850055104528553025406550385
+:10DA7000580259005A105B075C085D085E085F0990
+:10DA8000600828002C003000340038003C004000C2
+:10DA900044004C0054005C00640070007C0088006E
+:10DAA0009800A800BC00D000E80000011C013C0167
+:10DAB00060018801B401E80120026002A802F802B6
+:10DAC0005003C60827090001C9008058098909EBDD
+:10DAD000094C0AAE0A100B710BD30B350C960CF8DF
+:10DAE0000C590DBB0D1D0E191B1C1D1E1F202122C4
+:10DAF0002325262728292A2B2E2F3031323334355F
+:10DB00000000000000144000101440A1DC0000A13F
+:10DB1000DC0000A1DC0000A1DC0000A1DC0000A111
+:10DB2000DC0000A1DC00000CE5000000000020800B
+:10DB3000000000BEDF00008CE5000084000020B47F
+:10DB40000200004CDF0000D4E500000001CA0080A4
+:10DB500038030020F4180000CEDF000000000000B1
+:10DB600000000000000000000000000000000000B5
+:10DB700000000000000000000000000000000000A5
+:10DB80000000000000000000000000000000000095
+:10DB90000000000000000000000000000000000085
+:10DBA0000000000000000000000000000000000075
+:10DBB0000000000000000000000000000000000065
+:10DBC0000000000000000000000000000000000055
+:10DBD0000001CB00800000000000000000000000F9
+:10DBE0000001904B652B0401187354E7031F0803D1
+:10DBF000031C0101037224E85AFF0101220B1B01DF
+:10DC000024BD69500A2E070259FC4146512502A045
+:10DC10008C03285046035280EE031EFFFF39AC31BF
+:10DC200076D0F1FF0F0100000000000000000000AE
+:10DC300000000000000000000000000000000000E4
+:10DC400000000000000000000000000000000000D4
+:10DC500000000000000001CC0080FC07FC074C0025
+:10DC600000001100EC1D80340124100000840C031E
+:10DC70001400E80300003209F4011E0100008813BB
+:10DC80009600960000000000000000000001000562
+:10DC90000210000000000000000000000000000072
+:10DCA000000000000000000000001800000000005C
+:10DCB0000000000000000000000000000000000064
+:10DCC0000000000000000000000070000000640080
+:10DCD000000064000000640000000001CD00800A24
+:10DCE000000000010000000100000000000000D062
+:10DCF000070000A0000000B80B000048F4FFFF027E
+:10DD0000000000D007000030F8FFFF010000000015
+:10DD1000000000080000000600000064000000058C
+:10DD2000000000D007000001000000B004E0FCA0EB
+:10DD300000C4FF0A0000000C000000C800C8000575
+:10DD40000564000001E803DC050A0208200014084D
+:10DD5000060A0A28000A00FF0003012800020A0040
+:10DD600001CE00800A14FE00C8006400030A1405F6
+:10DD70000A050A0001000000000000000000000089
+:10DD80000000000000000000000000000000000093
+:10DD9000000000000E026900E8030C028C00E8039A
+:10DDA0000C02000000000000000000000000000065
+:10DDB000000000001C000000F00820042800C8003B
+:10DDC000F00820023200FF00010C013228000000A0
+:10DDD0000000000008000000000000003075000096
+:10DDE000000000000001CF0080200220079696C8A6
+:10DDF0000096000F0C1C020000C003000000000091
+:10DE0000004000000001002C01640002580C0C0AC4
+:10DE10000C401E2823AC0D020104010A001E00283C
+:10DE2000000200581BBC02E8030500020AB00420EF
+:10DE30000301030A007800C80064002003E8030916
+:10DE40000A2602DC05580264001E000506B40064C0
+:10DE5000005802E803000000000B000000C800C8E2
+:10DE600000C8000000000000000001D00080000099
+:10DE7000000000001900960008000F0F0A0A0800B1
+:10DE8000050001030A030AD0070B000000001A0076
+:10DE900000007770040402000A000A001E00777078
+:10DEA00002020100320032003C00000000000000CD
+:10DEB000000000000000020A140364004B000F0081
+:10DEC0000F001400020A3C010A965050505050288E
+:10DED0001E0C0C0C280002030100000000000014BE
+:10DEE0000A0AC80064000A000A00D00420040001E5
+:10DEF000D1008005006400140001037E0378000A4D
+:10DF00000000000000000000000000000000000011
+:10DF10000000000000000000000000000000000001
+:10DF2000000000A80100000504FF8102060000CFE8
+:10DF300000AFC0FFFFB00022027F817F720180012D
+:10DF40008140045F145F14120101000401081001F4
+:10DF50000400004401028001010000800001000073
+:10DF6000000000010100908000FF07000000000099
+:10DF70000000000001D200803AA000E00000000094
+:10DF80000504FF81030A00008F02AF80FFFFD0006D
+:10DF900022027F817F720180018140047819781903
+:10DFA0001201010004010810010400004401028074
+:10DFB000010100008000010000000000010100904C
+:10DFC0008000FF0700000000000000003AA600F0FB
+:10DFD000000000000504FF8002040000AF08AFC08D
+:10DFE000FFFFB00022027F817F7201800181400427
+:10DFF000640F640F110101000001D30080040108C7
+:10E0000010010400004401028001010000800001B1
+:10E010000000000000010100908000FF07000000E8
+:10E0200000000000003AA000D0000000000504FF3E
+:10E0300080020C0000CF00AFC0FFFFB00022027FC3
+:10E04000817F72018001814004320C320C11010188
+:10E0500000040108100104000044010280010100D5
+:10E06000008000010000000000010100908000FF1E
+:10E070000700000000000000003AA000D00001D41A
+:10E0800000800804000032003030400307401700D1
+:10E0900000000D000000240000002B010000030020
+:10E0A0000000020000000200000004000000060062
+:10E0B00000000C00000084030000840300006400E2
+:10E0C00000005E01000000000000500000000100A0
+:10E0D00000000200000002000000140000006E3783
+:10E0E0003201040004000001B80B400400000000ED
+:10E0F0000000000000000000000000000000000020
+:10E1000000000001D5008050000000000000000069
+:10E11000000000010000000100000037FFFFFF00C9
+:10E1200000000000000000000000000100000002EC
+:10E1300000000001000000010000000300000001D9
+:10E140000010272003F8F82003480D18FC200320B6
+:10E1500003E0FC2C01881378EC2C01000000000087
+:10E1600000000000000000080000000000000000A7
+:10E17000000000000000000000000000000000009F
+:10E18000000000000000000001D6008025242218B5
+:10E19000161314111217151923302F2C2B28270FA3
+:10E1A0000E0B0A0706312E2D2A2926100D0C090800
+:10E1B000221415050000000000000000000000000F
+:10E1C000000000000000000000000000000000004F
+:10E1D000000000000000000000000000000000003F
+:10E1E000000000000000000000000000300F300FB1
+:10E1F00008080808080808080000000000000000DF
+:10E200000000000000000000000000000001D70036
+:10E21000800000000000000000000000000000007E
+:10E2200000801F00FE0F0000000007FC07800F00A9
+:10E2300000000000000000000000000000000000DE
+:10E2400000000000000000000000000000000000CE
+:10E2500000000000000000000000000000000000BE
+:10E2600000000000000000000000000000000000AE
+:10E27000000000000000000000000000000000009E
+:10E28000000000000000000000000000000000008E
+:10E29000000001D800807F00070803070205010085
+:10E2A0000400000B0B0B090B0B0A0F0FBE00060836
+:10E2B000000B080C060A0009000F0B0A0A090A0FD6
+:10E2C0000A0FFF0008080D1916100F1B140E000B83
+:10E2D0000A0B0B0B0B090A0FFF000808111D1C1578
+:10E2E00021201812000B0B0B0B0A0A0A0B0FC3009C
+:10E2F00004081F22000000001A13000B0B0F0F0F61
+:10E300000F0A0A0FC10003302300000000001E178F
+:10E31000000B0F0F0F0F0001D900800F0B0A0F34F5
+:10E3200000031600002400252600000000000B005A
+:10E33000090A0000000000000000000000000000CA
+:10E3400000000000000000000000000000000000CD
+:10E3500000000000000000000000000000000000BD
+:10E3600000000000000000000000000000000000AD
+:10E37000000000000000000000000000000000009D
+:10E38000000000000000000000000000000000008D
+:10E3900000000000000000000000000001DA008022
+:10E3A000000000000000000000000000000000006D
+:10E3B000000000000000000000000000000000005D
+:10E3C000000000000000000000000000000000004D
+:10E3D000000000000000000000000000000000003D
+:10E3E000000000000000000000000000000000002D
+:10E3F000000000000000000000000000000000001D
+:10E40000000000000000000000000000000000000C
+:10E4100000000000000000000000000000000000FC
+:10E420000001DB0080000000000000000000000090
+:10E4300000000000000000000000000000000000DC
+:10E4400000000000000000000000000000000000CC
+:10E4500000000000000000000000000000000000BC
+:10E4600000000000000000000000000000000000AC
+:10E47000000000000000000000000000000000009C
+:10E48000000000000000000000000000000000008C
+:10E49000000000000000000000000000000000007C
+:10E4A00000C11100000001DC008024007E0009C4CE
+:10E4B000000000000000000000000000000000005C
+:10E4C000000000000000000000000000000000004C
+:10E4D000000000000000000000000000000000003C
+:10E4E000000000000000000000000000000000002C
+:10E4F000000000000000000000000000000000001C
+:10E50000000000000000000000000000000000000B
+:10E5100000000000000000000000000000000000FB
+:10E5200000000000000000007C900001FF00803C23
+:10E53000003C000012000000D499F081120000009D
+:10E5400000000000000000000000000000000000CB
+:10E5500000000000000000000000000000000000BB
+:10E560000000000000000000000000673700004BC2
+:10E570009512000023000000C0ED00000000000024
+:10E58000000000000000000000000000000000008B
+:10E59000000000000000000000000000000000007B
+:0FE5A0000000000000000000000000000000006C
+:00000001FF
diff --git a/include/linux/cyttsp4_btn.h b/include/linux/cyttsp4_btn.h
new file mode 100644
index 0000000..9793c37
--- /dev/null
+++ b/include/linux/cyttsp4_btn.h
@@ -0,0 +1,39 @@
+/*
+ * cyttsp4_btn.h
+ * Cypress TrueTouch(TM) Standard Product V4 CapSense touch reports module.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2012 Cypress Semiconductor
+ * Copyright (C) 2011 Sony Ericsson Mobile Communications AB.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#ifndef _LINUX_CYTTSP4_BTN_H
+#define _LINUX_CYTTSP4_BTN_H
+
+#define CYTTSP4_BTN_NAME "cyttsp4_btn"
+
+struct cyttsp4_btn_platform_data {
+	char const *inp_dev_name;
+};
+
+#endif /* _LINUX_CYTTSP4_BTN_H */
diff --git a/include/linux/cyttsp4_bus.h b/include/linux/cyttsp4_bus.h
new file mode 100644
index 0000000..0f00755
--- /dev/null
+++ b/include/linux/cyttsp4_bus.h
@@ -0,0 +1,346 @@
+/*
+ * cyttsp4_bus.h
+ * Cypress TrueTouch(TM) Standard Product V4 Bus Driver.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2012 Cypress Semiconductor
+ * Copyright (C) 2011 Sony Ericsson Mobile Communications AB.
+ *
+ * Author: Aleksej Makarov <aleksej.makarov@sonyericsson.com>
+ * Modified by: Cypress Semiconductor to add device functions
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#ifndef _LINUX_CYTTSP4_BUS_H
+#define _LINUX_CYTTSP4_BUS_H
+
+#include <linux/device.h>
+#include <linux/list.h>
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/limits.h>
+
+
+extern struct bus_type cyttsp4_bus_type;
+
+struct cyttsp4_driver;
+struct cyttsp4_device;
+struct cyttsp4_adapter;
+
+enum cyttsp4_atten_type {
+	CY_ATTEN_IRQ,
+	CY_ATTEN_STARTUP,
+	CY_ATTEN_EXCLUSIVE,
+	CY_ATTEN_WAKE,
+	CY_ATTEN_NUM_ATTEN,
+};
+
+typedef int (*cyttsp4_atten_func) (struct cyttsp4_device *);
+
+struct cyttsp4_ops {
+	int (*write)(struct cyttsp4_adapter *dev, u16 addr,
+		const void *buf, int size, int max_xfer);
+	int (*read)(struct cyttsp4_adapter *dev, u16 addr, void *buf,
+		int size, int max_xfer);
+};
+
+struct cyttsp4_adapter {
+	struct list_head node;
+	char id[NAME_MAX];
+	struct device *dev;
+	int (*write)(struct cyttsp4_adapter *dev, u16 addr,
+		const void *buf, int size, int max_xfer);
+	int (*read)(struct cyttsp4_adapter *dev, u16 addr, void *buf,
+		int size, int max_xfer);
+};
+#define to_cyttsp4_adapter(d) container_of(d, struct cyttsp4_adapter, dev)
+
+struct cyttsp4_core_info {
+	char const *name;
+	char const *id;
+	char const *adap_id;
+	void *platform_data;
+};
+
+struct cyttsp4_core {
+	struct list_head node;
+	char const *name;
+	char const *id;
+	char const *adap_id;
+	struct device dev;
+	struct cyttsp4_adapter *adap;
+};
+#define to_cyttsp4_core(d) container_of(d, struct cyttsp4_core, dev)
+
+struct cyttsp4_device_info {
+	char const *name;
+	char const *core_id;
+	void *platform_data;
+};
+
+struct cyttsp4_device {
+	struct list_head node;
+	char const *name;
+	char const *core_id;
+	struct device dev;
+	struct cyttsp4_core *core;
+};
+#define to_cyttsp4_device(d) container_of(d, struct cyttsp4_device, dev)
+
+struct cyttsp4_core_driver {
+	struct device_driver driver;
+	int (*probe)(struct cyttsp4_core *core);
+	int (*remove)(struct cyttsp4_core *core);
+	int (*subscribe_attention)(struct cyttsp4_device *ttsp,
+				enum cyttsp4_atten_type type,
+				cyttsp4_atten_func func,
+				int flags);
+	int (*unsubscribe_attention)(struct cyttsp4_device *ttsp,
+				enum cyttsp4_atten_type type,
+				cyttsp4_atten_func func,
+				int flags);
+	int (*request_exclusive)(struct cyttsp4_device *ttsp, int timeout_ms);
+	int (*release_exclusive)(struct cyttsp4_device *ttsp);
+	int (*request_reset)(struct cyttsp4_device *ttsp);
+	int (*request_restart)(struct cyttsp4_device *ttsp, bool wait);
+	int (*request_set_mode)(struct cyttsp4_device *ttsp, int mode);
+	struct cyttsp4_sysinfo *(*request_sysinfo)(struct cyttsp4_device *ttsp);
+	struct cyttsp4_loader_platform_data
+		*(*request_loader_pdata)(struct cyttsp4_device *ttsp);
+	int (*request_handshake)(struct cyttsp4_device *ttsp, u8 mode);
+	int (*request_exec_cmd)(struct cyttsp4_device *ttsp, u8 mode,
+			u8 *cmd_buf, size_t cmd_size, u8 *return_buf,
+			size_t return_buf_size, int timeout_ms);
+	int (*request_stop_wd)(struct cyttsp4_device *ttsp);
+	int (*request_toggle_lowpower)(struct cyttsp4_device *ttsp, u8 mode);
+	int (*request_config_row_size)(struct cyttsp4_device *ttsp,
+			u16 *config_row_size);
+	int (*request_write_config)(struct cyttsp4_device *ttsp, u8 ebid,
+			u16 offset, u8 *data, u16 length);
+	int (*request_enable_scan_type)(struct cyttsp4_device *ttsp,
+			u8 scan_type);
+	int (*request_disable_scan_type)(struct cyttsp4_device *ttsp,
+			u8 scan_type);
+	const u8 *(*get_security_key)(struct cyttsp4_device *ttsp, int *size);
+	void (*get_touch_record)(struct cyttsp4_device *ttsp, int rec_no,
+			int *rec_abs);
+	int (*write)(struct cyttsp4_device *ttsp, int mode,
+		u16 addr, const void *buf, int size);
+	int (*read)(struct cyttsp4_device *ttsp, int mode,
+		u16 addr, void *buf, int size);
+};
+#define to_cyttsp4_core_driver(d) \
+	container_of(d, struct cyttsp4_core_driver, driver)
+
+struct cyttsp4_driver {
+	struct device_driver driver;
+	int (*probe)(struct cyttsp4_device *dev);
+	int (*remove)(struct cyttsp4_device *fev);
+};
+#define to_cyttsp4_driver(d) container_of(d, struct cyttsp4_driver, driver)
+
+extern int cyttsp4_register_driver(struct cyttsp4_driver *drv);
+extern void cyttsp4_unregister_driver(struct cyttsp4_driver *drv);
+
+extern int cyttsp4_register_core_driver(struct cyttsp4_core_driver *drv);
+extern void cyttsp4_unregister_core_driver(struct cyttsp4_core_driver *drv);
+
+extern int cyttsp4_register_device(struct cyttsp4_device_info const *dev_info);
+extern int cyttsp4_unregister_device(char const *name, char const *core_id);
+
+extern int cyttsp4_register_core_device(
+		struct cyttsp4_core_info const *core_info);
+
+extern int cyttsp4_add_adapter(char const *id, struct cyttsp4_ops const *ops,
+		struct device *parent);
+
+extern int cyttsp4_del_adapter(char const *id);
+
+static inline int cyttsp4_read(struct cyttsp4_device *ttsp, int mode, u16 addr,
+		void *buf, int size)
+{
+	struct cyttsp4_core *cd = ttsp->core;
+	struct cyttsp4_core_driver *d = to_cyttsp4_core_driver(cd->dev.driver);
+	return d->read(ttsp, mode, addr, buf, size);
+}
+
+static inline int cyttsp4_write(struct cyttsp4_device *ttsp, int mode, u16 addr,
+		const void *buf, int size)
+{
+	struct cyttsp4_core *cd = ttsp->core;
+	struct cyttsp4_core_driver *d = to_cyttsp4_core_driver(cd->dev.driver);
+	return d->write(ttsp, mode, addr, buf, size);
+}
+
+static inline int cyttsp4_subscribe_attention(struct cyttsp4_device *ttsp,
+		enum cyttsp4_atten_type type, cyttsp4_atten_func func,
+		int flags)
+{
+	struct cyttsp4_core *cd = ttsp->core;
+	struct cyttsp4_core_driver *d = to_cyttsp4_core_driver(cd->dev.driver);
+	return d->subscribe_attention(ttsp, type, func, flags);
+}
+
+static inline int cyttsp4_unsubscribe_attention(struct cyttsp4_device *ttsp,
+		enum cyttsp4_atten_type type, cyttsp4_atten_func func,
+		int flags)
+{
+	struct cyttsp4_core *cd = ttsp->core;
+	struct cyttsp4_core_driver *d = to_cyttsp4_core_driver(cd->dev.driver);
+	return d->unsubscribe_attention(ttsp, type, func, flags);
+}
+
+static inline int cyttsp4_request_exclusive(struct cyttsp4_device *ttsp,
+		int timeout_ms)
+{
+	struct cyttsp4_core *cd = ttsp->core;
+	struct cyttsp4_core_driver *d = to_cyttsp4_core_driver(cd->dev.driver);
+	return d->request_exclusive(ttsp, timeout_ms);
+}
+
+static inline int cyttsp4_release_exclusive(struct cyttsp4_device *ttsp)
+{
+	struct cyttsp4_core *cd = ttsp->core;
+	struct cyttsp4_core_driver *d = to_cyttsp4_core_driver(cd->dev.driver);
+	return d->release_exclusive(ttsp);
+}
+
+static inline int cyttsp4_request_reset(struct cyttsp4_device *ttsp)
+{
+	struct cyttsp4_core *cd = ttsp->core;
+	struct cyttsp4_core_driver *d = to_cyttsp4_core_driver(cd->dev.driver);
+	return d->request_reset(ttsp);
+}
+
+static inline int cyttsp4_request_restart(struct cyttsp4_device *ttsp,
+		bool wait)
+{
+	struct cyttsp4_core *cd = ttsp->core;
+	struct cyttsp4_core_driver *d = to_cyttsp4_core_driver(cd->dev.driver);
+	return d->request_restart(ttsp, wait);
+}
+
+static inline int cyttsp4_request_set_mode(struct cyttsp4_device *ttsp,
+		int mode)
+{
+	struct cyttsp4_core *cd = ttsp->core;
+	struct cyttsp4_core_driver *d = to_cyttsp4_core_driver(cd->dev.driver);
+	return d->request_set_mode(ttsp, mode);
+}
+
+static inline struct cyttsp4_sysinfo *cyttsp4_request_sysinfo(
+		struct cyttsp4_device *ttsp)
+{
+	struct cyttsp4_core *cd = ttsp->core;
+	struct cyttsp4_core_driver *d = to_cyttsp4_core_driver(cd->dev.driver);
+	return d->request_sysinfo(ttsp);
+}
+
+static inline struct cyttsp4_loader_platform_data *cyttsp4_request_loader_pdata(
+		struct cyttsp4_device *ttsp)
+{
+	struct cyttsp4_core *cd = ttsp->core;
+	struct cyttsp4_core_driver *d = to_cyttsp4_core_driver(cd->dev.driver);
+	return d->request_loader_pdata(ttsp);
+}
+
+static inline int cyttsp4_request_handshake(struct cyttsp4_device *ttsp,
+		u8 mode)
+{
+	struct cyttsp4_core *cd = ttsp->core;
+	struct cyttsp4_core_driver *d = to_cyttsp4_core_driver(cd->dev.driver);
+	return d->request_handshake(ttsp, mode);
+}
+
+static inline int cyttsp4_request_exec_cmd(struct cyttsp4_device *ttsp,
+		u8 mode, u8 *cmd_buf, size_t cmd_size, u8 *return_buf,
+		size_t return_buf_size, int timeout_ms)
+{
+	struct cyttsp4_core *cd = ttsp->core;
+	struct cyttsp4_core_driver *d = to_cyttsp4_core_driver(cd->dev.driver);
+	return d->request_exec_cmd(ttsp, mode, cmd_buf, cmd_size, return_buf,
+			return_buf_size, timeout_ms);
+}
+
+static inline int cyttsp4_request_stop_wd(struct cyttsp4_device *ttsp)
+{
+	struct cyttsp4_core *cd = ttsp->core;
+	struct cyttsp4_core_driver *d = to_cyttsp4_core_driver(cd->dev.driver);
+	return d->request_stop_wd(ttsp);
+}
+
+static inline int cyttsp4_request_toggle_lowpower(struct cyttsp4_device *ttsp,
+		u8 mode)
+{
+	struct cyttsp4_core *cd = ttsp->core;
+	struct cyttsp4_core_driver *d = to_cyttsp4_core_driver(cd->dev.driver);
+	return d->request_toggle_lowpower(ttsp, mode);
+}
+
+static inline int cyttsp4_request_config_row_size(struct cyttsp4_device *ttsp,
+		u16 *config_row_size)
+{
+	struct cyttsp4_core *cd = ttsp->core;
+	struct cyttsp4_core_driver *d = to_cyttsp4_core_driver(cd->dev.driver);
+	return d->request_config_row_size(ttsp, config_row_size);
+}
+
+static inline int cyttsp4_request_write_config(struct cyttsp4_device *ttsp,
+		u8 ebid, u16 offset, u8 *data, u16 length)
+{
+	struct cyttsp4_core *cd = ttsp->core;
+	struct cyttsp4_core_driver *d = to_cyttsp4_core_driver(cd->dev.driver);
+	return d->request_write_config(ttsp, ebid, offset, data, length);
+}
+
+static inline int cyttsp4_request_enable_scan_type(struct cyttsp4_device *ttsp,
+		u8 scan_type)
+{
+	struct cyttsp4_core *cd = ttsp->core;
+	struct cyttsp4_core_driver *d = to_cyttsp4_core_driver(cd->dev.driver);
+	return d->request_enable_scan_type(ttsp, scan_type);
+}
+
+static inline int cyttsp4_request_disable_scan_type(struct cyttsp4_device *ttsp,
+		u8 scan_type)
+{
+	struct cyttsp4_core *cd = ttsp->core;
+	struct cyttsp4_core_driver *d = to_cyttsp4_core_driver(cd->dev.driver);
+	return d->request_disable_scan_type(ttsp, scan_type);
+}
+
+static inline const u8 *cyttsp4_get_security_key(struct cyttsp4_device *ttsp,
+		int *size)
+{
+	struct cyttsp4_core *cd = ttsp->core;
+	struct cyttsp4_core_driver *d = to_cyttsp4_core_driver(cd->dev.driver);
+	return d->get_security_key(ttsp, size);
+}
+
+static inline void cyttsp4_get_touch_record(struct cyttsp4_device *ttsp,
+		int rec_no, int *rec_abs)
+{
+	struct cyttsp4_core *cd = ttsp->core;
+	struct cyttsp4_core_driver *d = to_cyttsp4_core_driver(cd->dev.driver);
+	d->get_touch_record(ttsp, rec_no, rec_abs);
+}
+#endif /* _LINUX_CYTTSP4_BUS_H */
diff --git a/include/linux/cyttsp4_core.h b/include/linux/cyttsp4_core.h
new file mode 100644
index 0000000..748c425
--- /dev/null
+++ b/include/linux/cyttsp4_core.h
@@ -0,0 +1,148 @@
+/*
+ * cyttsp4_core.h
+ * Cypress TrueTouch(TM) Standard Product V4 Core driver module.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2012 Cypress Semiconductor
+ * Copyright (C) 2011 Sony Ericsson Mobile Communications AB.
+ *
+ * Author: Aleksej Makarov <aleksej.makarov@sonyericsson.com>
+ * Modifed by: Cypress Semiconductor to add touch settings
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#ifndef _LINUX_CYTTSP4_CORE_H
+#define _LINUX_CYTTSP4_CORE_H
+
+#include <linux/stringify.h>
+
+#define CYTTSP4_CORE_NAME "cyttsp4_core"
+
+#define CY_DRIVER_NAME TTDA
+#define CY_DRIVER_MAJOR 02
+#define CY_DRIVER_MINOR 03
+#define CY_DRIVER_SUBRELEASE 01
+
+#define CY_DRIVER_REVCTRL 485332
+
+#define CY_DRIVER_VERSION		    \
+__stringify(CY_DRIVER_NAME)		    \
+"." __stringify(CY_DRIVER_MAJOR)	    \
+"." __stringify(CY_DRIVER_MINOR)	    \
+"." __stringify(CY_DRIVER_SUBRELEASE)	    \
+"." __stringify(CY_DRIVER_REVCTRL)
+
+#define CY_DRIVER_DATE "20130612"	/* YYYYMMDD */
+
+/* x-axis resolution of panel in pixels */
+#define CY_PCFG_RESOLUTION_X_MASK 0x7F
+
+/* y-axis resolution of panel in pixels */
+#define CY_PCFG_RESOLUTION_Y_MASK 0x7F
+
+/* x-axis, 0:origin is on left side of panel, 1: right */
+#define CY_PCFG_ORIGIN_X_MASK 0x80
+
+/* y-axis, 0:origin is on top side of panel, 1: bottom */
+#define CY_PCFG_ORIGIN_Y_MASK 0x80
+
+#define CY_TOUCH_SETTINGS_MAX 32
+#define CY_TOUCH_SETTINGS_PARAM_REGS 6
+
+enum cyttsp4_core_platform_flags {
+	CY_CORE_FLAG_NONE = 0x00,
+	CY_CORE_FLAG_WAKE_ON_GESTURE = 0x01,
+};
+
+enum cyttsp4_core_platform_easy_wakeup_gesture {
+	CY_CORE_EWG_NONE = 0x00,
+	CY_CORE_EWG_TAP_TAP = 0x01,
+	CY_CORE_EWG_TWO_FINGER_SLIDE = 0x02,
+	CY_CORE_EWG_RESERVED = 0x03,
+	CY_CORE_EWG_WAKE_ON_INT_FROM_HOST = 0xFF,
+};
+
+enum cyttsp4_loader_platform_flags {
+	CY_LOADER_FLAG_NONE = 0x00,
+	CY_LOADER_FLAG_CALIBRATE_AFTER_FW_UPGRADE = 0x01,
+	/* Use CONFIG_VER field in TT_CFG to decide TT_CFG update */
+	CY_LOADER_FLAG_CHECK_TTCONFIG_VERSION = 0x02,
+};
+
+struct touch_settings {
+	const uint8_t *data;
+	uint32_t size;
+	uint8_t tag;
+} __packed;
+
+struct cyttsp4_touch_firmware {
+	const uint8_t *img;
+	uint32_t size;
+	const uint8_t *ver;
+	uint8_t vsize;
+} __packed;
+
+struct cyttsp4_touch_config {
+	struct touch_settings *param_regs;
+	struct touch_settings *param_size;
+	const uint8_t *fw_ver;
+	uint8_t fw_vsize;
+};
+
+struct cyttsp4_loader_platform_data {
+	struct cyttsp4_touch_firmware *fw;
+	struct cyttsp4_touch_config *ttconfig;
+	u32 flags;
+} __packed;
+
+typedef int (*cyttsp4_platform_read) (struct device *dev, u16 addr,
+	void *buf, int size);
+
+struct cyttsp4_core_platform_data {
+	int irq_gpio;
+	int rst_gpio;
+	int level_irq_udelay;
+	int max_xfer_len;
+	int (*xres)(struct cyttsp4_core_platform_data *pdata,
+		struct device *dev);
+	int (*init)(struct cyttsp4_core_platform_data *pdata,
+		int on, struct device *dev);
+	int (*power)(struct cyttsp4_core_platform_data *pdata,
+		int on, struct device *dev, atomic_t *ignore_irq);
+	int (*detect)(struct cyttsp4_core_platform_data *pdata,
+		struct device *dev, cyttsp4_platform_read read);
+	int (*irq_stat)(struct cyttsp4_core_platform_data *pdata,
+		struct device *dev);
+	struct touch_settings *sett[CY_TOUCH_SETTINGS_MAX];
+	struct cyttsp4_loader_platform_data *loader_pdata;
+	u32 flags;
+	u8 easy_wakeup_gesture;
+};
+
+#ifdef VERBOSE_DEBUG
+extern void cyttsp4_pr_buf(struct device *dev, u8 *pr_buf, u8 *dptr, int size,
+			   const char *data_name);
+#else
+#define cyttsp4_pr_buf(a, b, c, d, e) do { } while (0)
+#endif
+
+#endif /* _LINUX_CYTTSP4_CORE_H */
diff --git a/include/linux/cyttsp4_device_access-api.h b/include/linux/cyttsp4_device_access-api.h
new file mode 100644
index 0000000..63f3716
--- /dev/null
+++ b/include/linux/cyttsp4_device_access-api.h
@@ -0,0 +1,56 @@
+/*
+ * cyttsp4_device_access-api.h
+ * Cypress TrueTouch(TM) Standard Product V4 Device Access API module.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2012 Cypress Semiconductor
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#ifndef _LINUX_CYTTSP4_DEVICE_ACCESS_API_H
+#define _LINUX_CYTTSP4_DEVICE_ACCESS_API_H
+
+#include <linux/types.h>
+#include <linux/device.h>
+
+#define GRPNUM_OP_COMMAND	1
+#define GRPNUM_TOUCH_CONFIG	6
+
+#define OP_CMD_NULL		0
+#define OP_CMD_GET_PARAMETER	2
+#define OP_CMD_SET_PARAMETER	3
+#define OP_CMD_GET_CONFIG_CRC	5
+
+#define OP_PARAM_ACTIVE_DISTANCE		0x4A
+#define OP_PARAM_SCAN_TYPE			0x4B
+#define OP_PARAM_LOW_POWER_INTERVAL		0x4C
+#define OP_PARAM_REFRESH_INTERVAL		0x4D
+#define OP_PARAM_ACTIVE_MODE_TIMEOUT		0x4E
+#define OP_PARAM_ACTIVE_LOOK_FOR_TOUCH_INTERVAL 0x4F
+
+extern int cyttsp4_device_access_read_command(const char *core_name,
+		int ic_grpnum, int ic_grpoffset, u8 *buf, int buf_size);
+
+extern int cyttsp4_device_access_write_command(const char *core_name,
+		int ic_grpnum, int ic_grpoffset, u8 *buf, int length);
+
+#endif /* _LINUX_CYTTSP4_DEVICE_ACCESS_API_H */
diff --git a/include/linux/cyttsp4_mt.h b/include/linux/cyttsp4_mt.h
new file mode 100644
index 0000000..44007c8
--- /dev/null
+++ b/include/linux/cyttsp4_mt.h
@@ -0,0 +1,84 @@
+/*
+ * cyttsp4_mt.h
+ * Cypress TrueTouch(TM) Standard Product V4 Multi-touch module.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2012 Cypress Semiconductor
+ * Copyright (C) 2011 Sony Ericsson Mobile Communications AB.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#ifndef _LINUX_CYTTSP4_MT_H
+#define _LINUX_CYTTSP4_MT_H
+
+#define CYTTSP4_MT_NAME "cyttsp4_mt"
+
+/* abs settings */
+#define CY_IGNORE_VALUE             0xFFFF
+/* abs signal capabilities offsets in the frameworks array */
+enum cyttsp4_sig_caps {
+	CY_SIGNAL_OST,
+	CY_MIN_OST,
+	CY_MAX_OST,
+	CY_FUZZ_OST,
+	CY_FLAT_OST,
+	CY_NUM_ABS_SET	/* number of signal capability fields */
+};
+
+/* abs axis signal offsets in the framworks array  */
+enum cyttsp4_sig_ost {
+	CY_ABS_X_OST,
+	CY_ABS_Y_OST,
+	CY_ABS_P_OST,
+	CY_ABS_W_OST,
+	CY_ABS_ID_OST,
+	CY_ABS_MAJ_OST,
+	CY_ABS_MIN_OST,
+	CY_ABS_OR_OST,
+	CY_NUM_ABS_OST	/* number of abs signals */
+};
+
+enum cyttsp4_mt_platform_flags {
+	CY_MT_FLAG_NONE = 0x00,
+	CY_MT_FLAG_HOVER = 0x04,
+	CY_MT_FLAG_FLIP = 0x08,
+	CY_MT_FLAG_INV_X = 0x10,
+	CY_MT_FLAG_INV_Y = 0x20,
+	CY_MT_FLAG_VKEYS = 0x40,
+	CY_MT_FLAG_NO_TOUCH_ON_LO = 0x80,
+};
+
+struct touch_framework {
+	const uint16_t  *abs;
+	uint8_t         size;
+	uint8_t         enable_vkeys;
+} __packed;
+
+struct cyttsp4_mt_platform_data {
+	struct touch_framework *frmwrk;
+	unsigned short flags;
+	char const *inp_dev_name;
+	int vkeys_x;
+	int vkeys_y;
+};
+
+#endif /* _LINUX_CYTTSP4_MT_H */
diff --git a/include/linux/cyttsp4_platform.h b/include/linux/cyttsp4_platform.h
new file mode 100644
index 0000000..d5b1c7c
--- /dev/null
+++ b/include/linux/cyttsp4_platform.h
@@ -0,0 +1,61 @@
+/*
+ * cyttsp4_platform.h
+ * Cypress TrueTouch(TM) Standard Product V4 Platform Module.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2013 Cypress Semiconductor
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#ifndef _LINUX_CYTTSP4_PLATFORM_H
+#define _LINUX_CYTTSP4_PLATFORM_H
+
+#include <linux/cyttsp4_core.h>
+
+#if IS_ENABLED(CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4)
+extern struct cyttsp4_loader_platform_data _cyttsp4_loader_platform_data;
+
+extern int cyttsp4_xres(struct cyttsp4_core_platform_data *pdata,
+		struct device *dev);
+extern int cyttsp4_init(struct cyttsp4_core_platform_data *pdata,
+		int on, struct device *dev);
+extern int cyttsp4_power(struct cyttsp4_core_platform_data *pdata,
+		int on, struct device *dev, atomic_t *ignore_irq);
+extern int cyttsp4_irq_stat(struct cyttsp4_core_platform_data *pdata,
+		struct device *dev);
+#ifdef CYTTSP4_DETECT_HW
+extern int cyttsp4_detect(struct cyttsp4_core_platform_data *pdata,
+		struct device *dev, cyttsp4_platform_read read);
+#else
+#define cyttsp4_detect		NULL
+#endif
+
+#else /* !CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4 */
+static struct cyttsp4_loader_platform_data _cyttsp4_loader_platform_data;
+#define cyttsp4_xres		NULL
+#define cyttsp4_init		NULL
+#define cyttsp4_power		NULL
+#define cyttsp4_irq_stat	NULL
+#define cyttsp4_detect		NULL
+#endif /* CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4 */
+
+#endif /* _LINUX_CYTTSP4_PLATFORM_H */
diff --git a/include/linux/cyttsp4_proximity.h b/include/linux/cyttsp4_proximity.h
new file mode 100644
index 0000000..39a8262
--- /dev/null
+++ b/include/linux/cyttsp4_proximity.h
@@ -0,0 +1,42 @@
+/*
+ * cyttsp4_proximity.h
+ * Cypress TrueTouch(TM) Standard Product V4 Proximity touch reports module.
+ * For use with Cypress Txx4xx parts.
+ * Supported parts include:
+ * TMA4XX
+ * TMA1036
+ *
+ * Copyright (C) 2012 Cypress Semiconductor
+ * Copyright (C) 2011 Sony Ericsson Mobile Communications AB.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2, and only version 2, as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
+ *
+ */
+
+#ifndef _LINUX_CYTTSP4_PROXIMITY_H
+#define _LINUX_CYTTSP4_PROXIMITY_H
+
+#include <linux/cyttsp4_mt.h>
+
+#define CYTTSP4_PROXIMITY_NAME "cyttsp4_proximity"
+
+struct cyttsp4_proximity_platform_data {
+	struct touch_framework *frmwrk;
+	char const *inp_dev_name;
+};
+
+#endif /* _LINUX_CYTTSP4_PROXIMITY_H */
diff --git a/include/linux/taos_common.h b/include/linux/taos_common.h
new file mode 100644
index 0000000..c26a618
--- /dev/null
+++ b/include/linux/taos_common.h
@@ -0,0 +1,91 @@
+/********************************************************************************
+* Device driver for monitoring ambient light intensity (lux) and proximity
+* detection for the TAOS TSL2x7x and TMD2x7x family of devices.
+*
+* Copyright (c) 2012, TAOS Corporation.
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 2 of the License, or
+* (at your option) any later vers ion.
+*
+* This program is distributed in the hope that it will be useful, but WITHOUT
+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+* more details.
+*
+* You should have received a copy of the GNU General Public License along
+* with this program; if not, write to the Free Software Foundation, Inc.,
+* 51 Franklin Street, Fifth Floor, Boston, MA      02110-1301, USA.
+********************************************************************************/
+
+/*******************************************************************************
+*                                                                              *
+*       File Name:      taos_common.h                                          *
+*       Description:    Common file for ioctl and configuration definitions.   *
+*       		Used by kernel driver and driver access applications.  *
+*       		Please include this file, and <sys/ioctl.h> in your    *
+*                       driver access application program source.	       *
+*       Author:         John Koshi                                             *
+*       History:        09/16/2009 - Initial creation                          *
+*       		02/07/2010 - Add proximity			       *
+*                                                                              *
+*******************************************************************************/
+// ioctl numbers
+#define TAOS_IOCTL_MAGIC		0XCF
+#define TAOS_IOCTL_ALS_ON		_IO(TAOS_IOCTL_MAGIC, 1)
+#define TAOS_IOCTL_ALS_OFF		_IO(TAOS_IOCTL_MAGIC, 2)
+#define TAOS_IOCTL_ALS_DATA		_IOR(TAOS_IOCTL_MAGIC, 3, short)
+#define TAOS_IOCTL_ALS_CALIBRATE	_IO(TAOS_IOCTL_MAGIC, 4)
+#define TAOS_IOCTL_CONFIG_GET		_IOR(TAOS_IOCTL_MAGIC, 5, struct taos_cfg)
+#define TAOS_IOCTL_CONFIG_SET		_IOW(TAOS_IOCTL_MAGIC, 6, struct taos_cfg)
+#define TAOS_IOCTL_PROX_ON		_IO(TAOS_IOCTL_MAGIC, 7)
+#define TAOS_IOCTL_PROX_OFF		_IO(TAOS_IOCTL_MAGIC, 8)
+#define TAOS_IOCTL_PROX_DATA		_IOR(TAOS_IOCTL_MAGIC, 9, struct taos_prox_info)
+#define TAOS_IOCTL_PROX_EVENT		_IO(TAOS_IOCTL_MAGIC, 10)
+#define TAOS_IOCTL_PROX_CALIBRATE	_IO(TAOS_IOCTL_MAGIC, 11)
+
+#define TAOS_IOCTL_SENSOR_ON		_IO(TAOS_IOCTL_MAGIC, 12)
+#define TAOS_IOCTL_SENSOR_OFF		_IO(TAOS_IOCTL_MAGIC, 13)
+#define TAOS_IOCTL_SENSOR_CONFIG	_IOW(TAOS_IOCTL_MAGIC, 14, struct taos_cfg)
+#define TAOS_IOCTL_SENSOR_CHECK		_IO(TAOS_IOCTL_MAGIC, 15)
+#define TAOS_IOCTL_SENSOR_test		_IO(TAOS_IOCTL_MAGIC, 16)
+
+
+// device configuration
+struct taos_cfg {
+	u32	calibrate_target;
+	u16	als_time;
+	u16	scale_factor;
+	u16	gain_trim;
+	u16	prox_threshold_hi;
+	u16	prox_threshold_lo;
+	u16	als_threshold_hi;
+	u16	als_threshold_lo;
+	u8	filter_history;
+	u8	filter_count;
+	u8	gain;
+	u8	prox_int_time;
+	u8	prox_adc_time;
+	u8	prox_wait_time;
+	u8	prox_intr_filter;
+	u8	prox_config;
+	u8	prox_pulse_cnt;
+	u8	prox_gain;
+};
+
+// proximity data
+struct taos_prox_info {
+	u16	prox_clear;
+	u16	prox_data;
+	int	prox_event;
+};
+
+struct tmd2771x_platform_data {
+	u8	pdrive;
+	u8	ppcount;
+	int	irq_gpio;
+//	int	(*setup_resources)(void);
+//	int	(*release_resources)(void);
+};
+
-- 
1.7.8.3

